{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"language-reference-guide/pcre-specifications/pcre-overview/","title":"Appendices: PCRE Specifications","text":""},{"location":"language-reference-guide/pcre-specifications/pcre-overview/#pcre-overview","title":"PCRE Overview","text":"<p>PCRE (Perl Compatible Regular Expressions) is an open source library used by the <code>\u2395R</code> and <code>\u2395S</code> system operators. The regular expression syntax which the library supports is not unique to APL nor is it an integral part of the language.</p> <p>There are two named sections: pcrepattern, which describes the full syntax and semantics); and prcresyntax, a quick reference summary.</p>"},{"location":"language-reference-guide/pcre-specifications/pcre-regular-expression-details/","title":"Appendix A - PCRE Regular Expression Details","text":""},{"location":"language-reference-guide/pcre-specifications/pcre-regular-expression-details/#appendix-b-pcre-regular-expression-details","title":"Appendix B - PCRE Regular Expression Details","text":""},{"location":"language-reference-guide/pcre-specifications/pcre-regular-expression-details/#pcre-regular-expression-details","title":"PCRE Regular Expression Details","text":"<p>PCREPATTERN(3)             Library Functions Manual             PCREPATTERN(3)</p> <p>NAME        PCRE - Perl-compatible regular expressions</p> <p>PCRE REGULAR EXPRESSION DETAILS</p> <pre><code>   The  syntax and semantics of the regular expressions that are supported\n   by PCRE are described in detail below. There is a quick-reference  syn-\n   tax summary in the pcresyntax page. PCRE tries to match Perl syntax and\n   semantics as closely as it can. PCRE  also  supports  some  alternative\n   regular  expression  syntax (which does not conflict with the Perl syn-\n   tax) in order to provide some compatibility with regular expressions in\n   Python, .NET, and Oniguruma.\n\n   Perl's  regular expressions are described in its own documentation, and\n   regular expressions in general are covered in a number of  books,  some\n   of  which  have  copious  examples. Jeffrey Friedl's \"Mastering Regular\n   Expressions\", published by  O'Reilly,  covers  regular  expressions  in\n   great  detail.  This  description  of  PCRE's  regular  expressions  is\n   intended as reference material.\n\n   This document discusses the patterns that are supported  by  PCRE  when\n   one    its    main   matching   functions,   pcre_exec()   (8-bit)   or\n   pcre[16|32]_exec() (16- or 32-bit), is used. PCRE also has  alternative\n   matching  functions,  pcre_dfa_exec()  and pcre[16|32_dfa_exec(), which\n   match using a different algorithm that is not Perl-compatible. Some  of\n   the  features  discussed  below  are not available when DFA matching is\n   used. The advantages and disadvantages of  the  alternative  functions,\n   and  how  they  differ  from the normal functions, are discussed in the\n   pcrematching page.\n</code></pre> <p>SPECIAL START-OF-PATTERN ITEMS</p> <pre><code>   A number of options that can be passed to pcre_compile()  can  also  be\n   set by special items at the start of a pattern. These are not Perl-com-\n   patible, but are provided to make these options accessible  to  pattern\n   writers  who are not able to change the program that processes the pat-\n   tern. Any number of these items  may  appear,  but  they  must  all  be\n   together right at the start of the pattern string, and the letters must\n   be in upper case.\n</code></pre> <p>UTF support</p> <pre><code>   The original operation of PCRE was on strings of  one-byte  characters.\n   However,  there  is  now also support for UTF-8 strings in the original\n   library, an extra library that supports  16-bit  and  UTF-16  character\n   strings,  and a third library that supports 32-bit and UTF-32 character\n   strings. To use these features, PCRE must be built to include appropri-\n   ate  support. When using UTF strings you must either call the compiling\n   function with the PCRE_UTF8, PCRE_UTF16, or PCRE_UTF32 option,  or  the\n   pattern must start with one of these special sequences:\n\n     (*UTF8)\n     (*UTF16)\n     (*UTF32)\n     (*UTF)\n\n   (*UTF)  is  a  generic  sequence  that  can  be  used  with  any of the\n   libraries.  Starting a pattern with such a sequence  is  equivalent  to\n   setting  the  relevant  option.  How setting a UTF mode affects pattern\n   matching is mentioned in several places below. There is also a  summary\n   of features in the pcreunicode page.\n\n   Some applications that allow their users to supply patterns may wish to\n   restrict  them  to  non-UTF  data  for   security   reasons.   If   the\n   PCRE_NEVER_UTF  option  is  set  at  compile  time, (*UTF) etc. are not\n   allowed, and their appearance causes an error.\n</code></pre> <p>Unicode property support</p> <pre><code>   Another special sequence that may appear at the start of a  pattern  is\n   (*UCP).   This  has  the same effect as setting the PCRE_UCP option: it\n   causes sequences such as \\d and \\w to use Unicode properties to  deter-\n   mine character types, instead of recognizing only characters with codes\n   less than 128 via a lookup table.\n</code></pre> <p>Disabling auto-possessification</p> <pre><code>   If a pattern starts with (*NO_AUTO_POSSESS), it has the same effect  as\n   setting  the  PCRE_NO_AUTO_POSSESS  option  at compile time. This stops\n   PCRE from making quantifiers possessive when what follows cannot  match\n   the  repeated item. For example, by default a+b is treated as a++b. For\n   more details, see the pcreapi documentation.\n</code></pre> <p>Disabling start-up optimizations</p> <pre><code>   If a pattern starts with (*NO_START_OPT), it has  the  same  effect  as\n   setting the PCRE_NO_START_OPTIMIZE option either at compile or matching\n   time. This disables several  optimizations  for  quickly  reaching  \"no\n   match\" results. For more details, see the pcreapi documentation.\n</code></pre> <p>Newline conventions</p> <pre><code>   PCRE  supports five different conventions for indicating line breaks in\n   strings: a single CR (carriage return) character, a  single  LF  (line-\n   feed) character, the two-character sequence CRLF, any of the three pre-\n   ceding, or any Unicode newline sequence. The pcreapi page  has  further\n   discussion  about newlines, and shows how to set the newline convention\n   in the options arguments for the compiling and matching functions.\n\n   It is also possible to specify a newline convention by starting a  pat-\n   tern string with one of the following five sequences:\n\n     (*CR)        carriage return\n     (*LF)        linefeed\n     (*CRLF)      carriage return, followed by linefeed\n     (*ANYCRLF)   any of the three above\n     (*ANY)       all Unicode newline sequences\n\n   These override the default and the options given to the compiling func-\n   tion. For example, on a Unix system where LF  is  the  default  newline\n   sequence, the pattern\n\n     (*CR)a.b\n\n   changes the convention to CR. That pattern matches \"a\\nb\" because LF is\n   no longer a newline. If more than one of these settings is present, the\n   last one is used.\n\n   The  newline  convention affects where the circumflex and dollar asser-\n   tions are true. It also affects the interpretation of the dot metachar-\n   acter when PCRE_DOTALL is not set, and the behaviour of \\N. However, it\n   does not affect what the \\R escape sequence matches. By  default,  this\n   is  any Unicode newline sequence, for Perl compatibility. However, this\n   can be changed; see the description of \\R in the section entitled \"New-\n   line  sequences\"  below.  A change of \\R setting can be combined with a\n   change of newline convention.\n</code></pre> <p>Setting match and recursion limits</p> <pre><code>   The caller of pcre_exec() can set a limit on the number  of  times  the\n   internal  match() function is called and on the maximum depth of recur-\n   sive calls. These facilities are provided to catch runaway matches that\n   are provoked by patterns with huge matching trees (a typical example is\n   a pattern with nested unlimited repeats) and to avoid  running  out  of\n   system  stack  by  too  much  recursion.  When  one  of these limits is\n   reached, pcre_exec() gives an error return. The limits can also be  set\n   by items at the start of the pattern of the form\n\n     (*LIMIT_MATCH=d)\n     (*LIMIT_RECURSION=d)\n\n   where d is any number of decimal digits. However, the value of the set-\n   ting must be less than the value set (or defaulted) by  the  caller  of\n   pcre_exec()  for  it  to  have  any effect. In other words, the pattern\n   writer can lower the limits set by the programmer, but not raise  them.\n   If  there  is  more  than one setting of one of these limits, the lower\n   value is used.\n</code></pre> <p>EBCDIC CHARACTER CODES</p> <pre><code>   PCRE can be compiled to run in an environment that uses EBCDIC  as  its\n   character code rather than ASCII or Unicode (typically a mainframe sys-\n   tem). In the sections below, character code values are  ASCII  or  Uni-\n   code; in an EBCDIC environment these characters may have different code\n   values, and there are no code points greater than 255.\n</code></pre> <p>CHARACTERS AND METACHARACTERS</p> <pre><code>   A regular expression is a pattern that is  matched  against  a  subject\n   string  from  left  to right. Most characters stand for themselves in a\n   pattern, and match the corresponding characters in the  subject.  As  a\n   trivial example, the pattern\n\n     The quick brown fox\n\n   matches a portion of a subject string that is identical to itself. When\n   caseless matching is specified (the PCRE_CASELESS option), letters  are\n   matched  independently  of case. In a UTF mode, PCRE always understands\n   the concept of case for characters whose values are less than  128,  so\n   caseless  matching  is always possible. For characters with higher val-\n   ues, the concept of case is supported if PCRE is compiled with  Unicode\n   property  support,  but  not  otherwise.   If  you want to use caseless\n   matching for characters 128 and above, you must  ensure  that  PCRE  is\n   compiled with Unicode property support as well as with UTF support.\n\n   The  power  of  regular  expressions  comes from the ability to include\n   alternatives and repetitions in the pattern. These are encoded  in  the\n   pattern by the use of metacharacters, which do not stand for themselves\n   but instead are interpreted in some special way.\n\n   There are two different sets of metacharacters: those that  are  recog-\n   nized  anywhere in the pattern except within square brackets, and those\n   that are recognized within square brackets.  Outside  square  brackets,\n   the metacharacters are as follows:\n\n     \\      general escape character with several uses\n     ^      assert start of string (or line, in multiline mode)\n     $      assert end of string (or line, in multiline mode)\n     .      match any character except newline (by default)\n     [      start character class definition\n     |      start of alternative branch\n     (      start subpattern\n     )      end subpattern\n     ?      extends the meaning of (\n            also 0 or 1 quantifier\n            also quantifier minimizer\n     *      0 or more quantifier\n     +      1 or more quantifier\n            also \"possessive quantifier\"\n     {      start min/max quantifier\n\n   Part  of  a  pattern  that is in square brackets is called a \"character\n   class\". In a character class the only metacharacters are:\n\n     \\      general escape character\n     ^      negate the class, but only if the first character\n     -      indicates character range\n     [      POSIX character class (only if followed by POSIX\n              syntax)\n     ]      terminates the character class\n\n   The following sections describe the use of each of the metacharacters.\n</code></pre> <p>BACKSLASH</p> <pre><code>   The backslash character has several uses. Firstly, if it is followed by\n   a character that is not a number or a letter, it takes away any special\n   meaning that character may have. This use of  backslash  as  an  escape\n   character applies both inside and outside character classes.\n\n   For  example,  if  you want to match a * character, you write \\* in the\n   pattern.  This escaping action applies whether  or  not  the  following\n   character  would  otherwise be interpreted as a metacharacter, so it is\n   always safe to precede a non-alphanumeric  with  backslash  to  specify\n   that  it stands for itself. In particular, if you want to match a back-\n   slash, you write \\\\.\n\n   In a UTF mode, only ASCII numbers and letters have any special  meaning\n   after  a  backslash.  All  other characters (in particular, those whose\n   codepoints are greater than 127) are treated as literals.\n\n   If a pattern is compiled with  the  PCRE_EXTENDED  option,  most  white\n   space  in the pattern (other than in a character class), and characters\n   between a # outside a character class and the next newline,  inclusive,\n   are ignored. An escaping backslash can be used to include a white space\n   or # character as part of the pattern.\n\n   If you want to remove the special meaning from a  sequence  of  charac-\n   ters,  you can do so by putting them between \\Q and \\E. This is differ-\n   ent from Perl in that $ and  @  are  handled  as  literals  in  \\Q...\\E\n   sequences  in  PCRE, whereas in Perl, $ and @ cause variable interpola-\n   tion. Note the following examples:\n\n     Pattern            PCRE matches   Perl matches\n\n     \\Qabc$xyz\\E        abc$xyz        abc followed by the\n                                         contents of $xyz\n     \\Qabc\\$xyz\\E       abc\\$xyz       abc\\$xyz\n     \\Qabc\\E\\$\\Qxyz\\E   abc$xyz        abc$xyz\n\n   The \\Q...\\E sequence is recognized both inside  and  outside  character\n   classes.   An  isolated \\E that is not preceded by \\Q is ignored. If \\Q\n   is not followed by \\E later in the pattern, the literal  interpretation\n   continues  to  the  end  of  the pattern (that is, \\E is assumed at the\n   end). If the isolated \\Q is inside a character class,  this  causes  an\n   error, because the character class is not terminated.\n</code></pre> <p>Non-printing characters</p> <pre><code>   A second use of backslash provides a way of encoding non-printing char-\n   acters in patterns in a visible manner. There is no restriction on  the\n   appearance  of non-printing characters, apart from the binary zero that\n   terminates a pattern, but when a pattern  is  being  prepared  by  text\n   editing,  it  is  often  easier  to  use  one  of  the following escape\n   sequences than the binary character it represents:\n\n     \\a        alarm, that is, the BEL character (hex 07)\n     \\cx       \"control-x\", where x is any ASCII character\n     \\e        escape (hex 1B)\n     \\f        form feed (hex 0C)\n     \\n        linefeed (hex 0A)\n     \\r        carriage return (hex 0D)\n     \\t        tab (hex 09)\n     \\0dd      character with octal code 0dd\n     \\ddd      character with octal code ddd, or back reference\n     \\o{ddd..} character with octal code ddd..\n     \\xhh      character with hex code hh\n     \\x{hhh..} character with hex code hhh.. (non-JavaScript mode)\n     \\uhhhh    character with hex code hhhh (JavaScript mode only)\n\n   The precise effect of \\cx on ASCII characters is as follows: if x is  a\n   lower  case  letter,  it  is converted to upper case. Then bit 6 of the\n   character (hex 40) is inverted. Thus \\cA to \\cZ become hex 01 to hex 1A\n   (A  is  41, Z is 5A), but \\c{ becomes hex 3B ({ is 7B), and \\c; becomes\n   hex 7B (; is 3B). If the data item (byte or 16-bit value) following  \\c\n   has  a  value greater than 127, a compile-time error occurs. This locks\n   out non-ASCII characters in all modes.\n\n   The \\c facility was designed for use with ASCII  characters,  but  with\n   the  extension  to  Unicode it is even less useful than it once was. It\n   is, however, recognized when PCRE is compiled  in  EBCDIC  mode,  where\n   data  items  are always bytes. In this mode, all values are valid after\n   \\c. If the next character is a lower case letter, it  is  converted  to\n   upper  case.  Then  the  0xc0  bits  of the byte are inverted. Thus \\cA\n   becomes hex 01, as in ASCII (A is C1), but because the  EBCDIC  letters\n   are  disjoint,  \\cZ becomes hex 29 (Z is E9), and other characters also\n   generate different values.\n\n   After \\0 up to two further octal digits are read. If  there  are  fewer\n   than  two  digits,  just  those  that  are  present  are used. Thus the\n   sequence \\0\\x\\07 specifies two binary zeros followed by a BEL character\n   (code  value 7). Make sure you supply two digits after the initial zero\n   if the pattern character that follows is itself an octal digit.\n\n   The escape \\o must be followed by a sequence of octal digits,  enclosed\n   in  braces.  An  error occurs if this is not the case. This escape is a\n   recent addition to Perl; it provides way of specifying  character  code\n   points  as  octal  numbers  greater than 0777, and it also allows octal\n   numbers and back references to be unambiguously specified.\n\n   For greater clarity and unambiguity, it is best to avoid following \\ by\n   a digit greater than zero. Instead, use \\o{} or \\x{} to specify charac-\n   ter numbers, and \\g{} to specify back references. The  following  para-\n   graphs describe the old, ambiguous syntax.\n\n   The handling of a backslash followed by a digit other than 0 is compli-\n   cated, and Perl has changed in recent releases, causing  PCRE  also  to\n   change. Outside a character class, PCRE reads the digit and any follow-\n   ing digits as a decimal number. If the number is less  than  8,  or  if\n   there  have been at least that many previous capturing left parentheses\n   in the expression, the entire sequence is taken as a back reference.  A\n   description  of how this works is given later, following the discussion\n   of parenthesized subpatterns.\n\n   Inside a character class, or if  the  decimal  number  following  \\  is\n   greater than 7 and there have not been that many capturing subpatterns,\n   PCRE handles \\8 and \\9 as the literal characters \"8\" and \"9\", and  oth-\n   erwise re-reads up to three octal digits following the backslash, using\n   them to generate a data character.  Any  subsequent  digits  stand  for\n   themselves. For example:\n\n     \\040   is another way of writing an ASCII space\n     \\40    is the same, provided there are fewer than 40\n               previous capturing subpatterns\n     \\7     is always a back reference\n     \\11    might be a back reference, or another way of\n               writing a tab\n     \\011   is always a tab\n     \\0113  is a tab followed by the character \"3\"\n     \\113   might be a back reference, otherwise the\n               character with octal code 113\n     \\377   might be a back reference, otherwise\n               the value 255 (decimal)\n     \\81    is either a back reference, or the two\n               characters \"8\" and \"1\"\n\n   Note  that octal values of 100 or greater that are specified using this\n   syntax must not be introduced by a leading zero, because no  more  than\n   three octal digits are ever read.\n\n   By  default, after \\x that is not followed by {, from zero to two hexa-\n   decimal digits are read (letters can be in upper or  lower  case).  Any\n   number of hexadecimal digits may appear between \\x{ and }. If a charac-\n   ter other than a hexadecimal digit appears between \\x{  and  },  or  if\n   there is no terminating }, an error occurs.\n\n   If  the  PCRE_JAVASCRIPT_COMPAT option is set, the interpretation of \\x\n   is as just described only when it is followed by two  hexadecimal  dig-\n   its.   Otherwise,  it  matches  a  literal \"x\" character. In JavaScript\n   mode, support for code points greater than 256 is provided by \\u, which\n   must  be  followed  by  four hexadecimal digits; otherwise it matches a\n   literal \"u\" character.\n\n   Characters whose value is less than 256 can be defined by either of the\n   two  syntaxes for \\x (or by \\u in JavaScript mode). There is no differ-\n   ence in the way they are handled. For example, \\xdc is exactly the same\n   as \\x{dc} (or \\u00dc in JavaScript mode).\n</code></pre> <p>Constraints on character values</p> <pre><code>   Characters  that  are  specified using octal or hexadecimal numbers are\n   limited to certain values, as follows:\n\n     8-bit non-UTF mode    less than 0x100\n     8-bit UTF-8 mode      less than 0x10ffff and a valid codepoint\n     16-bit non-UTF mode   less than 0x10000\n     16-bit UTF-16 mode    less than 0x10ffff and a valid codepoint\n     32-bit non-UTF mode   less than 0x100000000\n     32-bit UTF-32 mode    less than 0x10ffff and a valid codepoint\n\n   Invalid Unicode codepoints are the range  0xd800  to  0xdfff  (the  so-\n   called \"surrogate\" codepoints), and 0xffef.\n</code></pre> <p>Escape sequences in character classes</p> <pre><code>   All the sequences that define a single character value can be used both\n   inside and outside character classes. In addition, inside  a  character\n   class, \\b is interpreted as the backspace character (hex 08).\n\n   \\N  is not allowed in a character class. \\B, \\R, and \\X are not special\n   inside a character class. Like  other  unrecognized  escape  sequences,\n   they  are  treated  as  the  literal  characters  \"B\",  \"R\", and \"X\" by\n   default, but cause an error if the PCRE_EXTRA option is set. Outside  a\n   character class, these sequences have different meanings.\n</code></pre> <p>Unsupported escape sequences</p> <pre><code>   In  Perl, the sequences \\l, \\L, \\u, and \\U are recognized by its string\n   handler and used  to  modify  the  case  of  following  characters.  By\n   default,  PCRE does not support these escape sequences. However, if the\n   PCRE_JAVASCRIPT_COMPAT option is set, \\U matches a \"U\"  character,  and\n   \\u can be used to define a character by code point, as described in the\n   previous section.\n</code></pre> <p>Absolute and relative back references</p> <pre><code>   The sequence \\g followed by an unsigned or a negative  number,  option-\n   ally  enclosed  in braces, is an absolute or relative back reference. A\n   named back reference can be coded as \\g{name}. Back references are dis-\n   cussed later, following the discussion of parenthesized subpatterns.\n</code></pre> <p>Absolute and relative subroutine calls</p> <pre><code>   For  compatibility with Oniguruma, the non-Perl syntax \\g followed by a\n   name or a number enclosed either in angle brackets or single quotes, is\n   an  alternative  syntax for referencing a subpattern as a \"subroutine\".\n   Details are discussed later.   Note  that  \\g{...}  (Perl  syntax)  and\n   \\g&lt;...&gt;  (Oniguruma  syntax)  are  not synonymous. The former is a back\n   reference; the latter is a subroutine call.\n</code></pre> <p>Generic character types</p> <pre><code>   Another use of backslash is for specifying generic character types:\n\n     \\d     any decimal digit\n     \\D     any character that is not a decimal digit\n     \\h     any horizontal white space character\n     \\H     any character that is not a horizontal white space character\n     \\s     any white space character\n     \\S     any character that is not a white space character\n     \\v     any vertical white space character\n     \\V     any character that is not a vertical white space character\n     \\w     any \"word\" character\n     \\W     any \"non-word\" character\n\n   There is also the single sequence \\N, which matches a non-newline char-\n   acter.   This  is the same as the \".\" metacharacter when PCRE_DOTALL is\n   not set. Perl also uses \\N to match characters by name; PCRE  does  not\n   support this.\n\n   Each  pair of lower and upper case escape sequences partitions the com-\n   plete set of characters into two disjoint  sets.  Any  given  character\n   matches  one, and only one, of each pair. The sequences can appear both\n   inside and outside character classes. They each match one character  of\n   the  appropriate  type.  If the current matching point is at the end of\n   the subject string, all of them fail, because there is no character  to\n   match.\n\n   For  compatibility with Perl, \\s did not used to match the VT character\n   (code 11), which made it different from the the  POSIX  \"space\"  class.\n   However,  Perl  added  VT  at  release  5.18, and PCRE followed suit at\n   release 8.34. The default \\s characters are now HT  (9),  LF  (10),  VT\n   (11),  FF  (12),  CR  (13),  and space (32), which are defined as white\n   space in the \"C\" locale. This list may vary if locale-specific matching\n   is  taking place. For example, in some locales the \"non-breaking space\"\n   character (\\xA0) is recognized as white space, and  in  others  the  VT\n   character is not.\n\n   A  \"word\"  character is an underscore or any character that is a letter\n   or digit.  By default, the definition of letters  and  digits  is  con-\n   trolled  by PCRE's low-valued character tables, and may vary if locale-\n   specific matching is taking place (see \"Locale support\" in the  pcreapi\n   page).  For  example,  in  a French locale such as \"fr_FR\" in Unix-like\n   systems, or \"french\" in Windows, some character codes greater than  127\n   are  used  for  accented letters, and these are then matched by \\w. The\n   use of locales with Unicode is discouraged.\n\n   By default, characters whose code points are  greater  than  127  never\n   match \\d, \\s, or \\w, and always match \\D, \\S, and \\W, although this may\n   vary for characters in the range 128-255 when locale-specific  matching\n   is  happening.   These  escape sequences retain their original meanings\n   from before Unicode support was available, mainly for  efficiency  rea-\n   sons.  If  PCRE  is  compiled  with  Unicode  property support, and the\n   PCRE_UCP option is set, the behaviour is changed so that Unicode  prop-\n   erties are used to determine character types, as follows:\n\n     \\d  any character that matches \\p{Nd} (decimal digit)\n     \\s  any character that matches \\p{Z} or \\h or \\v\n     \\w  any character that matches \\p{L} or \\p{N}, plus underscore\n\n   The  upper case escapes match the inverse sets of characters. Note that\n   \\d matches only decimal digits, whereas \\w matches any  Unicode  digit,\n   as  well as any Unicode letter, and underscore. Note also that PCRE_UCP\n   affects \\b, and \\B because they are defined in  terms  of  \\w  and  \\W.\n   Matching these sequences is noticeably slower when PCRE_UCP is set.\n\n   The  sequences  \\h, \\H, \\v, and \\V are features that were added to Perl\n   at release 5.10. In contrast to the other sequences, which  match  only\n   ASCII  characters  by  default,  these always match certain high-valued\n   code points, whether or not PCRE_UCP is set. The horizontal space char-\n   acters are:\n\n     U+0009     Horizontal tab (HT)\n     U+0020     Space\n     U+00A0     Non-break space\n     U+1680     Ogham space mark\n     U+180E     Mongolian vowel separator\n     U+2000     En quad\n     U+2001     Em quad\n     U+2002     En space\n     U+2003     Em space\n     U+2004     Three-per-em space\n     U+2005     Four-per-em space\n     U+2006     Six-per-em space\n     U+2007     Figure space\n     U+2008     Punctuation space\n     U+2009     Thin space\n     U+200A     Hair space\n     U+202F     Narrow no-break space\n     U+205F     Medium mathematical space\n     U+3000     Ideographic space\n\n   The vertical space characters are:\n\n     U+000A     Linefeed (LF)\n     U+000B     Vertical tab (VT)\n     U+000C     Form feed (FF)\n     U+000D     Carriage return (CR)\n     U+0085     Next line (NEL)\n     U+2028     Line separator\n     U+2029     Paragraph separator\n\n   In 8-bit, non-UTF-8 mode, only the characters with codepoints less than\n   256 are relevant.\n</code></pre> <p>Newline sequences</p> <pre><code>   Outside a character class, by default, the escape sequence  \\R  matches\n   any  Unicode newline sequence. In 8-bit non-UTF-8 mode \\R is equivalent\n   to the following:\n\n     (?&gt;\\r\\n|\\n|\\x0b|\\f|\\r|\\x85)\n\n   This is an example of an \"atomic group\", details  of  which  are  given\n   below.  This particular group matches either the two-character sequence\n   CR followed by LF, or  one  of  the  single  characters  LF  (linefeed,\n   U+000A),  VT  (vertical  tab, U+000B), FF (form feed, U+000C), CR (car-\n   riage return, U+000D), or NEL (next line,  U+0085).  The  two-character\n   sequence is treated as a single unit that cannot be split.\n\n   In  other modes, two additional characters whose codepoints are greater\n   than 255 are added: LS (line separator, U+2028) and PS (paragraph sepa-\n   rator,  U+2029).   Unicode character property support is not needed for\n   these characters to be recognized.\n\n   It is possible to restrict \\R to match only CR, LF, or CRLF (instead of\n   the  complete  set  of  Unicode  line  endings)  by  setting the option\n   PCRE_BSR_ANYCRLF either at compile time or when the pattern is matched.\n   (BSR is an abbrevation for \"backslash R\".) This can be made the default\n   when PCRE is built; if this is the case, the  other  behaviour  can  be\n   requested  via  the  PCRE_BSR_UNICODE  option.   It is also possible to\n   specify these settings by starting a pattern string  with  one  of  the\n   following sequences:\n\n     (*BSR_ANYCRLF)   CR, LF, or CRLF only\n     (*BSR_UNICODE)   any Unicode newline sequence\n\n   These override the default and the options given to the compiling func-\n   tion, but they can themselves be  overridden  by  options  given  to  a\n   matching  function.  Note  that  these  special settings, which are not\n   Perl-compatible, are recognized only at the very start  of  a  pattern,\n   and  that  they  must  be  in  upper  case. If more than one of them is\n   present, the last one is used. They can be combined with  a  change  of\n   newline convention; for example, a pattern can start with:\n\n     (*ANY)(*BSR_ANYCRLF)\n\n   They  can also be combined with the (*UTF8), (*UTF16), (*UTF32), (*UTF)\n   or (*UCP) special sequences. Inside a character class, \\R is treated as\n   an  unrecognized  escape  sequence,  and  so  matches the letter \"R\" by\n   default, but causes an error if PCRE_EXTRA is set.\n</code></pre> <p>Unicode character properties</p> <pre><code>   When PCRE is built with Unicode character property support, three addi-\n   tional  escape sequences that match characters with specific properties\n   are available.  When in 8-bit non-UTF-8 mode, these  sequences  are  of\n   course  limited  to  testing  characters whose codepoints are less than\n   256, but they do work in this mode.  The extra escape sequences are:\n\n     \\p{xx}   a character with the xx property\n     \\P{xx}   a character without the xx property\n     \\X       a Unicode extended grapheme cluster\n\n   The property names represented by xx above are limited to  the  Unicode\n   script names, the general category properties, \"Any\", which matches any\n   character  (including  newline),  and  some  special  PCRE   properties\n   (described  in the next section).  Other Perl properties such as \"InMu-\n   sicalSymbols\" are not currently supported by PCRE.  Note  that  \\P{Any}\n   does not match any characters, so always causes a match failure.\n\n   Sets of Unicode characters are defined as belonging to certain scripts.\n   A character from one of these sets can be matched using a script  name.\n   For example:\n\n     \\p{Greek}\n     \\P{Han}\n\n   Those  that are not part of an identified script are lumped together as\n   \"Common\". The current list of scripts is:\n\n   Arabic, Armenian, Avestan, Balinese, Bamum, Bassa_Vah, Batak,  Bengali,\n   Bopomofo,  Brahmi,  Braille, Buginese, Buhid, Canadian_Aboriginal, Car-\n   ian, Caucasian_Albanian, Chakma, Cham, Cherokee, Common, Coptic, Cunei-\n   form, Cypriot, Cyrillic, Deseret, Devanagari, Duployan, Egyptian_Hiero-\n   glyphs,  Elbasan,  Ethiopic,  Georgian,  Glagolitic,  Gothic,  Grantha,\n   Greek,  Gujarati,  Gurmukhi,  Han,  Hangul,  Hanunoo, Hebrew, Hiragana,\n   Imperial_Aramaic,    Inherited,     Inscriptional_Pahlavi,     Inscrip-\n   tional_Parthian,   Javanese,   Kaithi,   Kannada,  Katakana,  Kayah_Li,\n   Kharoshthi, Khmer, Khojki, Khudawadi, Lao, Latin, Lepcha,  Limbu,  Lin-\n   ear_A,  Linear_B,  Lisu,  Lycian, Lydian, Mahajani, Malayalam, Mandaic,\n   Manichaean,     Meetei_Mayek,     Mende_Kikakui,      Meroitic_Cursive,\n   Meroitic_Hieroglyphs,  Miao,  Modi, Mongolian, Mro, Myanmar, Nabataean,\n   New_Tai_Lue,  Nko,  Ogham,  Ol_Chiki,  Old_Italic,   Old_North_Arabian,\n   Old_Permic, Old_Persian, Old_South_Arabian, Old_Turkic, Oriya, Osmanya,\n   Pahawh_Hmong,    Palmyrene,    Pau_Cin_Hau,    Phags_Pa,    Phoenician,\n   Psalter_Pahlavi,  Rejang,  Runic,  Samaritan, Saurashtra, Sharada, Sha-\n   vian, Siddham, Sinhala, Sora_Sompeng, Sundanese, Syloti_Nagri,  Syriac,\n   Tagalog,  Tagbanwa,  Tai_Le,  Tai_Tham, Tai_Viet, Takri, Tamil, Telugu,\n   Thaana, Thai, Tibetan, Tifinagh, Tirhuta, Ugaritic,  Vai,  Warang_Citi,\n   Yi.\n\n   Each character has exactly one Unicode general category property, spec-\n   ified by a two-letter abbreviation. For compatibility with Perl,  nega-\n   tion  can  be  specified  by including a circumflex between the opening\n   brace and the property name.  For  example,  \\p{^Lu}  is  the  same  as\n   \\P{Lu}.\n\n   If only one letter is specified with \\p or \\P, it includes all the gen-\n   eral category properties that start with that letter. In this case,  in\n   the  absence of negation, the curly brackets in the escape sequence are\n   optional; these two examples have the same effect:\n\n     \\p{L}\n     \\pL\n\n   The following general category property codes are supported:\n\n     C     Other\n     Cc    Control\n     Cf    Format\n     Cn    Unassigned\n     Co    Private use\n     Cs    Surrogate\n\n     L     Letter\n     Ll    Lower case letter\n     Lm    Modifier letter\n     Lo    Other letter\n     Lt    Title case letter\n     Lu    Upper case letter\n\n     M     Mark\n     Mc    Spacing mark\n     Me    Enclosing mark\n     Mn    Non-spacing mark\n\n     N     Number\n     Nd    Decimal number\n     Nl    Letter number\n     No    Other number\n\n     P     Punctuation\n     Pc    Connector punctuation\n     Pd    Dash punctuation\n     Pe    Close punctuation\n     Pf    Final punctuation\n     Pi    Initial punctuation\n     Po    Other punctuation\n     Ps    Open punctuation\n\n     S     Symbol\n     Sc    Currency symbol\n     Sk    Modifier symbol\n     Sm    Mathematical symbol\n     So    Other symbol\n\n     Z     Separator\n     Zl    Line separator\n     Zp    Paragraph separator\n     Zs    Space separator\n\n   The special property L&amp; is also supported: it matches a character  that\n   has  the  Lu,  Ll, or Lt property, in other words, a letter that is not\n   classified as a modifier or \"other\".\n\n   The Cs (Surrogate) property applies only to  characters  in  the  range\n   U+D800  to U+DFFF. Such characters are not valid in Unicode strings and\n   so cannot be tested by PCRE, unless  UTF  validity  checking  has  been\n   turned    off    (see    the    discussion    of    PCRE_NO_UTF8_CHECK,\n   PCRE_NO_UTF16_CHECK and PCRE_NO_UTF32_CHECK in the pcreapi page).  Perl\n   does not support the Cs property.\n\n   The  long  synonyms  for  property  names  that  Perl supports (such as\n   \\p{Letter}) are not supported by PCRE, nor is it  permitted  to  prefix\n   any of these properties with \"Is\".\n\n   No character that is in the Unicode table has the Cn (unassigned) prop-\n   erty.  Instead, this property is assumed for any code point that is not\n   in the Unicode table.\n\n   Specifying  caseless  matching  does not affect these escape sequences.\n   For example, \\p{Lu} always matches only upper  case  letters.  This  is\n   different from the behaviour of current versions of Perl.\n\n   Matching  characters  by Unicode property is not fast, because PCRE has\n   to do a multistage table lookup in order to find  a  character's  prop-\n   erty. That is why the traditional escape sequences such as \\d and \\w do\n   not use Unicode properties in PCRE by default, though you can make them\n   do  so  by  setting the PCRE_UCP option or by starting the pattern with\n   (*UCP).\n</code></pre> <p>Extended grapheme clusters</p> <pre><code>   The \\X escape matches any number of Unicode  characters  that  form  an\n   \"extended grapheme cluster\", and treats the sequence as an atomic group\n   (see below).  Up to and including release 8.31, PCRE  matched  an  ear-\n   lier, simpler definition that was equivalent to\n\n     (?&gt;\\PM\\pM*)\n\n   That  is,  it matched a character without the \"mark\" property, followed\n   by zero or more characters with the \"mark\"  property.  Characters  with\n   the  \"mark\"  property are typically non-spacing accents that affect the\n   preceding character.\n\n   This simple definition was extended in Unicode to include more  compli-\n   cated  kinds of composite character by giving each character a grapheme\n   breaking property, and creating rules  that  use  these  properties  to\n   define  the  boundaries  of  extended grapheme clusters. In releases of\n   PCRE later than 8.31, \\X matches one of these clusters.\n\n   \\X always matches at least one character. Then it  decides  whether  to\n   add additional characters according to the following rules for ending a\n   cluster:\n\n   1. End at the end of the subject string.\n\n   2. Do not end between CR and LF; otherwise end after any control  char-\n   acter.\n\n   3.  Do  not  break  Hangul (a Korean script) syllable sequences. Hangul\n   characters are of five types: L, V, T, LV, and LVT. An L character  may\n   be  followed by an L, V, LV, or LVT character; an LV or V character may\n   be followed by a V or T character; an LVT or T character may be follwed\n   only by a T character.\n\n   4.  Do not end before extending characters or spacing marks. Characters\n   with the \"mark\" property always have  the  \"extend\"  grapheme  breaking\n   property.\n\n   5. Do not end after prepend characters.\n\n   6. Otherwise, end the cluster.\n</code></pre> <p>PCRE's additional properties</p> <pre><code>   As  well  as the standard Unicode properties described above, PCRE sup-\n   ports four more that make it possible  to  convert  traditional  escape\n   sequences  such as \\w and \\s to use Unicode properties. PCRE uses these\n   non-standard, non-Perl properties internally when PCRE_UCP is set. How-\n   ever, they may also be used explicitly. These properties are:\n\n     Xan   Any alphanumeric character\n     Xps   Any POSIX space character\n     Xsp   Any Perl space character\n     Xwd   Any Perl \"word\" character\n\n   Xan  matches  characters that have either the L (letter) or the N (num-\n   ber) property. Xps matches the characters tab, linefeed, vertical  tab,\n   form  feed,  or carriage return, and any other character that has the Z\n   (separator) property.  Xsp is the same as Xps; it used to exclude  ver-\n   tical  tab,  for Perl compatibility, but Perl changed, and so PCRE fol-\n   lowed at release 8.34. Xwd matches the same  characters  as  Xan,  plus\n   underscore.\n\n   There  is another non-standard property, Xuc, which matches any charac-\n   ter that can be represented by a Universal Character Name  in  C++  and\n   other  programming  languages.  These are the characters $, @, ` (grave\n   accent), and all characters with Unicode code points  greater  than  or\n   equal  to U+00A0, except for the surrogates U+D800 to U+DFFF. Note that\n   most base (ASCII) characters are excluded. (Universal  Character  Names\n   are  of  the  form \\uHHHH or \\UHHHHHHHH where H is a hexadecimal digit.\n   Note that the Xuc property does not match these sequences but the char-\n   acters that they represent.)\n</code></pre> <p>Resetting the match start</p> <pre><code>   The  escape sequence \\K causes any previously matched characters not to\n   be included in the final matched sequence. For example, the pattern:\n\n     foo\\Kbar\n\n   matches \"foobar\", but reports that it has matched \"bar\".  This  feature\n   is  similar  to  a lookbehind assertion (described below).  However, in\n   this case, the part of the subject before the real match does not  have\n   to  be of fixed length, as lookbehind assertions do. The use of \\K does\n   not interfere with the setting of captured  substrings.   For  example,\n   when the pattern\n\n     (foo)\\Kbar\n\n   matches \"foobar\", the first substring is still set to \"foo\".\n\n   Perl  documents  that  the  use  of  \\K  within assertions is \"not well\n   defined\". In PCRE, \\K is acted upon  when  it  occurs  inside  positive\n   assertions,  but  is  ignored  in negative assertions. Note that when a\n   pattern such as (?=ab\\K) matches, the reported start of the  match  can\n   be greater than the end of the match.\n</code></pre> <p>Simple assertions</p> <pre><code>   The  final use of backslash is for certain simple assertions. An asser-\n   tion specifies a condition that has to be met at a particular point  in\n   a  match, without consuming any characters from the subject string. The\n   use of subpatterns for more complicated assertions is described  below.\n   The backslashed assertions are:\n\n     \\b     matches at a word boundary\n     \\B     matches when not at a word boundary\n     \\A     matches at the start of the subject\n     \\Z     matches at the end of the subject\n             also matches before a newline at the end of the subject\n     \\z     matches only at the end of the subject\n     \\G     matches at the first matching position in the subject\n\n   Inside  a  character  class, \\b has a different meaning; it matches the\n   backspace character. If any other of  these  assertions  appears  in  a\n   character  class, by default it matches the corresponding literal char-\n   acter  (for  example,  \\B  matches  the  letter  B).  However,  if  the\n   PCRE_EXTRA  option is set, an \"invalid escape sequence\" error is gener-\n   ated instead.\n\n   A word boundary is a position in the subject string where  the  current\n   character  and  the previous character do not both match \\w or \\W (i.e.\n   one matches \\w and the other matches \\W), or the start or  end  of  the\n   string  if  the  first or last character matches \\w, respectively. In a\n   UTF mode, the meanings of \\w and \\W  can  be  changed  by  setting  the\n   PCRE_UCP  option. When this is done, it also affects \\b and \\B. Neither\n   PCRE nor Perl has a separate \"start of word\" or \"end of  word\"  metase-\n   quence.  However,  whatever follows \\b normally determines which it is.\n   For example, the fragment \\ba matches \"a\" at the start of a word.\n\n   The \\A, \\Z, and \\z assertions differ from  the  traditional  circumflex\n   and dollar (described in the next section) in that they only ever match\n   at the very start and end of the subject string, whatever  options  are\n   set.  Thus,  they are independent of multiline mode. These three asser-\n   tions are not affected by the PCRE_NOTBOL or PCRE_NOTEOL options, which\n   affect  only the behaviour of the circumflex and dollar metacharacters.\n   However, if the startoffset argument of pcre_exec() is non-zero,  indi-\n   cating that matching is to start at a point other than the beginning of\n   the subject, \\A can never match. The difference between \\Z  and  \\z  is\n   that \\Z matches before a newline at the end of the string as well as at\n   the very end, whereas \\z matches only at the end.\n\n   The \\G assertion is true only when the current matching position is  at\n   the  start point of the match, as specified by the startoffset argument\n   of pcre_exec(). It differs from \\A when the  value  of  startoffset  is\n   non-zero.  By calling pcre_exec() multiple times with appropriate argu-\n   ments, you can mimic Perl's /g option, and it is in this kind of imple-\n   mentation where \\G can be useful.\n\n   Note,  however,  that  PCRE's interpretation of \\G, as the start of the\n   current match, is subtly different from Perl's, which defines it as the\n   end  of  the  previous  match. In Perl, these can be different when the\n   previously matched string was empty. Because PCRE does just  one  match\n   at a time, it cannot reproduce this behaviour.\n\n   If  all  the alternatives of a pattern begin with \\G, the expression is\n   anchored to the starting match position, and the \"anchored\" flag is set\n   in the compiled regular expression.\n</code></pre> <p>CIRCUMFLEX AND DOLLAR</p> <pre><code>   The  circumflex  and  dollar  metacharacters are zero-width assertions.\n   That is, they test for a particular condition being true  without  con-\n   suming any characters from the subject string.\n\n   Outside a character class, in the default matching mode, the circumflex\n   character is an assertion that is true only  if  the  current  matching\n   point  is  at the start of the subject string. If the startoffset argu-\n   ment of pcre_exec() is non-zero, circumflex  can  never  match  if  the\n   PCRE_MULTILINE  option  is  unset. Inside a character class, circumflex\n   has an entirely different meaning (see below).\n\n   Circumflex need not be the first character of the pattern if  a  number\n   of  alternatives are involved, but it should be the first thing in each\n   alternative in which it appears if the pattern is ever  to  match  that\n   branch.  If all possible alternatives start with a circumflex, that is,\n   if the pattern is constrained to match only at the start  of  the  sub-\n   ject,  it  is  said  to be an \"anchored\" pattern. (There are also other\n   constructs that can cause a pattern to be anchored.)\n\n   The dollar character is an assertion that is true only if  the  current\n   matching  point  is  at  the  end of the subject string, or immediately\n   before a newline at the end of the string (by default). Note,  however,\n   that  it  does  not  actually match the newline. Dollar need not be the\n   last character of the pattern if a number of alternatives are involved,\n   but  it should be the last item in any branch in which it appears. Dol-\n   lar has no special meaning in a character class.\n\n   The meaning of dollar can be changed so that it  matches  only  at  the\n   very  end  of  the string, by setting the PCRE_DOLLAR_ENDONLY option at\n   compile time. This does not affect the \\Z assertion.\n\n   The meanings of the circumflex and dollar characters are changed if the\n   PCRE_MULTILINE  option  is  set.  When  this  is the case, a circumflex\n   matches immediately after internal newlines as well as at the start  of\n   the  subject  string.  It  does not match after a newline that ends the\n   string. A dollar matches before any newlines in the string, as well  as\n   at  the very end, when PCRE_MULTILINE is set. When newline is specified\n   as the two-character sequence CRLF, isolated CR and  LF  characters  do\n   not indicate newlines.\n\n   For  example, the pattern /^abc$/ matches the subject string \"def\\nabc\"\n   (where \\n represents a newline) in multiline mode, but  not  otherwise.\n   Consequently,  patterns  that  are anchored in single line mode because\n   all branches start with ^ are not anchored in  multiline  mode,  and  a\n   match  for  circumflex  is  possible  when  the startoffset argument of\n   pcre_exec() is non-zero. The PCRE_DOLLAR_ENDONLY option is  ignored  if\n   PCRE_MULTILINE is set.\n\n   Note  that  the sequences \\A, \\Z, and \\z can be used to match the start\n   and end of the subject in both modes, and if all branches of a  pattern\n   start  with  \\A it is always anchored, whether or not PCRE_MULTILINE is\n   set.\n</code></pre> <p>FULL STOP (PERIOD, DOT) AND \\N</p> <pre><code>   Outside a character class, a dot in the pattern matches any one charac-\n   ter  in  the subject string except (by default) a character that signi-\n   fies the end of a line.\n\n   When a line ending is defined as a single character, dot never  matches\n   that  character; when the two-character sequence CRLF is used, dot does\n   not match CR if it is immediately followed  by  LF,  but  otherwise  it\n   matches  all characters (including isolated CRs and LFs). When any Uni-\n   code line endings are being recognized, dot does not match CR or LF  or\n   any of the other line ending characters.\n\n   The  behaviour  of  dot  with regard to newlines can be changed. If the\n   PCRE_DOTALL option is set, a dot matches  any  one  character,  without\n   exception. If the two-character sequence CRLF is present in the subject\n   string, it takes two dots to match it.\n\n   The handling of dot is entirely independent of the handling of  circum-\n   flex  and  dollar,  the  only relationship being that they both involve\n   newlines. Dot has no special meaning in a character class.\n\n   The escape sequence \\N behaves like  a  dot,  except  that  it  is  not\n   affected  by  the  PCRE_DOTALL  option.  In other words, it matches any\n   character except one that signifies the end of a line. Perl  also  uses\n   \\N to match characters by name; PCRE does not support this.\n</code></pre> <p>MATCHING A SINGLE DATA UNIT</p> <pre><code>   Outside  a character class, the escape sequence \\C matches any one data\n   unit, whether or not a UTF mode is set. In the 8-bit library, one  data\n   unit  is  one  byte;  in the 16-bit library it is a 16-bit unit; in the\n   32-bit library it is a 32-bit unit. Unlike a  dot,  \\C  always  matches\n   line-ending  characters.  The  feature  is provided in Perl in order to\n   match individual bytes in UTF-8 mode, but it is unclear how it can use-\n   fully  be  used.  Because  \\C breaks up characters into individual data\n   units, matching one unit with \\C in a UTF mode means that the  rest  of\n   the string may start with a malformed UTF character. This has undefined\n   results, because PCRE assumes that it is dealing with valid UTF strings\n   (and  by  default  it checks this at the start of processing unless the\n   PCRE_NO_UTF8_CHECK, PCRE_NO_UTF16_CHECK or  PCRE_NO_UTF32_CHECK  option\n   is used).\n\n   PCRE  does  not  allow \\C to appear in lookbehind assertions (described\n   below) in a UTF mode, because this would make it impossible  to  calcu-\n   late the length of the lookbehind.\n\n   In general, the \\C escape sequence is best avoided. However, one way of\n   using it that avoids the problem of malformed UTF characters is to  use\n   a  lookahead to check the length of the next character, as in this pat-\n   tern, which could be used with a UTF-8 string (ignore white  space  and\n   line breaks):\n\n     (?| (?=[\\x00-\\x7f])(\\C) |\n         (?=[\\x80-\\x{7ff}])(\\C)(\\C) |\n         (?=[\\x{800}-\\x{ffff}])(\\C)(\\C)(\\C) |\n         (?=[\\x{10000}-\\x{1fffff}])(\\C)(\\C)(\\C)(\\C))\n\n   A  group  that starts with (?| resets the capturing parentheses numbers\n   in each alternative (see \"Duplicate  Subpattern  Numbers\"  below).  The\n   assertions  at  the start of each branch check the next UTF-8 character\n   for values whose encoding uses 1, 2, 3, or 4 bytes,  respectively.  The\n   character's  individual bytes are then captured by the appropriate num-\n   ber of groups.\n</code></pre> <p>SQUARE BRACKETS AND CHARACTER CLASSES</p> <pre><code>   An opening square bracket introduces a character class, terminated by a\n   closing square bracket. A closing square bracket on its own is not spe-\n   cial by default.  However, if the PCRE_JAVASCRIPT_COMPAT option is set,\n   a lone closing square bracket causes a compile-time error. If a closing\n   square bracket is required as a member of the class, it should  be  the\n   first  data  character  in  the  class (after an initial circumflex, if\n   present) or escaped with a backslash.\n\n   A character class matches a single character in the subject. In  a  UTF\n   mode,  the  character  may  be  more than one data unit long. A matched\n   character must be in the set of characters defined by the class, unless\n   the  first  character in the class definition is a circumflex, in which\n   case the subject character must not be in the set defined by the class.\n   If  a  circumflex is actually required as a member of the class, ensure\n   it is not the first character, or escape it with a backslash.\n\n   For example, the character class [aeiou] matches any lower case  vowel,\n   while  [^aeiou]  matches  any character that is not a lower case vowel.\n   Note that a circumflex is just a convenient notation for specifying the\n   characters  that  are in the class by enumerating those that are not. A\n   class that starts with a circumflex is not an assertion; it still  con-\n   sumes  a  character  from the subject string, and therefore it fails if\n   the current pointer is at the end of the string.\n\n   In UTF-8 (UTF-16, UTF-32) mode, characters with values greater than 255\n   (0xffff)  can be included in a class as a literal string of data units,\n   or by using the \\x{ escaping mechanism.\n\n   When caseless matching is set, any letters in a  class  represent  both\n   their  upper  case  and lower case versions, so for example, a caseless\n   [aeiou] matches \"A\" as well as \"a\", and a caseless  [^aeiou]  does  not\n   match  \"A\", whereas a caseful version would. In a UTF mode, PCRE always\n   understands the concept of case for characters whose  values  are  less\n   than  128, so caseless matching is always possible. For characters with\n   higher values, the concept of case is supported  if  PCRE  is  compiled\n   with  Unicode  property support, but not otherwise.  If you want to use\n   caseless matching in a UTF mode for characters 128 and above, you  must\n   ensure  that  PCRE is compiled with Unicode property support as well as\n   with UTF support.\n\n   Characters that might indicate line breaks are  never  treated  in  any\n   special  way  when  matching  character  classes,  whatever line-ending\n   sequence is in  use,  and  whatever  setting  of  the  PCRE_DOTALL  and\n   PCRE_MULTILINE options is used. A class such as [^a] always matches one\n   of these characters.\n\n   The minus (hyphen) character can be used to specify a range of  charac-\n   ters  in  a  character  class.  For  example,  [d-m] matches any letter\n   between d and m, inclusive. If a  minus  character  is  required  in  a\n   class,  it  must  be  escaped  with a backslash or appear in a position\n   where it cannot be interpreted as indicating a range, typically as  the\n   first or last character in the class, or immediately after a range. For\n   example, [b-d-z] matches letters in the range b to d, a hyphen  charac-\n   ter, or z.\n\n   It is not possible to have the literal character \"]\" as the end charac-\n   ter of a range. A pattern such as [W-]46] is interpreted as a class  of\n   two  characters (\"W\" and \"-\") followed by a literal string \"46]\", so it\n   would match \"W46]\" or \"-46]\". However, if the \"]\"  is  escaped  with  a\n   backslash  it is interpreted as the end of range, so [W-\\]46] is inter-\n   preted as a class containing a range followed by two other  characters.\n   The  octal or hexadecimal representation of \"]\" can also be used to end\n   a range.\n\n   An error is generated if a POSIX character  class  (see  below)  or  an\n   escape  sequence other than one that defines a single character appears\n   at a point where a range ending character  is  expected.  For  example,\n   [z-\\xff] is valid, but [A-\\d] and [A-[:digit:]] are not.\n\n   Ranges  operate in the collating sequence of character values. They can\n   also  be  used  for  characters  specified  numerically,  for   example\n   [\\000-\\037].  Ranges  can include any characters that are valid for the\n   current mode.\n\n   If a range that includes letters is used when caseless matching is set,\n   it matches the letters in either case. For example, [W-c] is equivalent\n   to [][\\\\^_`wxyzabc], matched caselessly, and  in  a  non-UTF  mode,  if\n   character  tables  for  a French locale are in use, [\\xc8-\\xcb] matches\n   accented E characters in both cases. In UTF modes,  PCRE  supports  the\n   concept  of  case for characters with values greater than 128 only when\n   it is compiled with Unicode property support.\n\n   The character escape sequences \\d, \\D, \\h, \\H, \\p, \\P, \\s, \\S, \\v,  \\V,\n   \\w, and \\W may appear in a character class, and add the characters that\n   they match to the class. For example, [\\dABCDEF] matches any  hexadeci-\n   mal  digit.  In  UTF modes, the PCRE_UCP option affects the meanings of\n   \\d, \\s, \\w and their upper case partners, just as  it  does  when  they\n   appear  outside a character class, as described in the section entitled\n   \"Generic character types\" above. The escape sequence \\b has a different\n   meaning  inside  a character class; it matches the backspace character.\n   The sequences \\B, \\N, \\R, and \\X are not  special  inside  a  character\n   class.  Like  any other unrecognized escape sequences, they are treated\n   as the literal characters \"B\", \"N\", \"R\", and \"X\" by default, but  cause\n   an error if the PCRE_EXTRA option is set.\n\n   A  circumflex  can  conveniently  be used with the upper case character\n   types to specify a more restricted set of characters than the  matching\n   lower  case  type.  For example, the class [^\\W_] matches any letter or\n   digit, but not underscore, whereas [\\w] includes underscore. A positive\n   character class should be read as \"something OR something OR ...\" and a\n   negative class as \"NOT something AND NOT something AND NOT ...\".\n\n   The only metacharacters that are recognized in  character  classes  are\n   backslash,  hyphen  (only  where  it can be interpreted as specifying a\n   range), circumflex (only at the start), opening  square  bracket  (only\n   when  it can be interpreted as introducing a POSIX class name, or for a\n   special compatibility feature - see the next  two  sections),  and  the\n   terminating  closing  square  bracket.  However,  escaping  other  non-\n   alphanumeric characters does no harm.\n</code></pre> <p>POSIX CHARACTER CLASSES</p> <pre><code>   Perl supports the POSIX notation for character classes. This uses names\n   enclosed  by  [: and :] within the enclosing square brackets. PCRE also\n   supports this notation. For example,\n\n     [01[:alpha:]%]\n\n   matches \"0\", \"1\", any alphabetic character, or \"%\". The supported class\n   names are:\n\n     alnum    letters and digits\n     alpha    letters\n     ascii    character codes 0 - 127\n     blank    space or tab only\n     cntrl    control characters\n     digit    decimal digits (same as \\d)\n     graph    printing characters, excluding space\n     lower    lower case letters\n     print    printing characters, including space\n     punct    printing characters, excluding letters and digits and space\n     space    white space (the same as \\s from PCRE 8.34)\n     upper    upper case letters\n     word     \"word\" characters (same as \\w)\n     xdigit   hexadecimal digits\n\n   The  default  \"space\" characters are HT (9), LF (10), VT (11), FF (12),\n   CR (13), and space (32). If locale-specific matching is  taking  place,\n   the  list  of  space characters may be different; there may be fewer or\n   more of them. \"Space\" used to be different to \\s, which did not include\n   VT, for Perl compatibility.  However, Perl changed at release 5.18, and\n   PCRE followed at release 8.34.  \"Space\" and \\s now match the  same  set\n   of characters.\n\n   The  name  \"word\"  is  a Perl extension, and \"blank\" is a GNU extension\n   from Perl 5.8. Another Perl extension is negation, which  is  indicated\n   by a ^ character after the colon. For example,\n\n     [12[:^digit:]]\n\n   matches  \"1\", \"2\", or any non-digit. PCRE (and Perl) also recognize the\n   POSIX syntax [.ch.] and [=ch=] where \"ch\" is a \"collating element\", but\n   these are not supported, and an error is given if they are encountered.\n\n   By default, characters with values greater than 128 do not match any of\n   the POSIX character classes. However, if the PCRE_UCP option is  passed\n   to  pcre_compile(),  some  of  the  classes are changed so that Unicode\n   character properties are used. This is achieved  by  replacing  certain\n   POSIX classes by other sequences, as follows:\n\n     [:alnum:]  becomes  \\p{Xan}\n     [:alpha:]  becomes  \\p{L}\n     [:blank:]  becomes  \\h\n     [:digit:]  becomes  \\p{Nd}\n     [:lower:]  becomes  \\p{Ll}\n     [:space:]  becomes  \\p{Xps}\n     [:upper:]  becomes  \\p{Lu}\n     [:word:]   becomes  \\p{Xwd}\n\n   Negated  versions, such as [:^alpha:] use \\P instead of \\p. Three other\n   POSIX classes are handled specially in UCP mode:\n\n   [:graph:] This matches characters that have glyphs that mark  the  page\n             when printed. In Unicode property terms, it matches all char-\n             acters with the L, M, N, P, S, or Cf properties, except for:\n\n               U+061C           Arabic Letter Mark\n               U+180E           Mongolian Vowel Separator\n               U+2066 - U+2069  Various \"isolate\"s\n\n   [:print:] This matches the same  characters  as  [:graph:]  plus  space\n             characters  that  are  not controls, that is, characters with\n             the Zs property.\n\n   [:punct:] This matches all characters that have the Unicode P (punctua-\n             tion)  property,  plus those characters whose code points are\n             less than 128 that have the S (Symbol) property.\n\n   The other POSIX classes are unchanged, and match only  characters  with\n   code points less than 128.\n</code></pre> <p>COMPATIBILITY FEATURE FOR WORD BOUNDARIES</p> <pre><code>   In  the POSIX.2 compliant library that was included in 4.4BSD Unix, the\n   ugly syntax [[:&lt;:]] and [[:&gt;:]] is used for matching  \"start  of  word\"\n   and \"end of word\". PCRE treats these items as follows:\n\n     [[:&lt;:]]  is converted to  \\b(?=\\w)\n     [[:&gt;:]]  is converted to  \\b(?&lt;=\\w)\n\n   Only these exact character sequences are recognized. A sequence such as\n   [a[:&lt;:]b] provokes error for an unrecognized  POSIX  class  name.  This\n   support  is not compatible with Perl. It is provided to help migrations\n   from other environments, and is best not used in any new patterns. Note\n   that  \\b matches at the start and the end of a word (see \"Simple asser-\n   tions\" above), and in a Perl-style pattern the preceding  or  following\n   character  normally  shows  which  is  wanted, without the need for the\n   assertions that are used above in order to give exactly the  POSIX  be-\n   haviour.\n</code></pre> <p>VERTICAL BAR</p> <pre><code>   Vertical  bar characters are used to separate alternative patterns. For\n   example, the pattern\n\n     gilbert|sullivan\n\n   matches either \"gilbert\" or \"sullivan\". Any number of alternatives  may\n   appear,  and  an  empty  alternative  is  permitted (matching the empty\n   string). The matching process tries each alternative in turn, from left\n   to  right, and the first one that succeeds is used. If the alternatives\n   are within a subpattern (defined below), \"succeeds\" means matching  the\n   rest of the main pattern as well as the alternative in the subpattern.\n</code></pre> <p>INTERNAL OPTION SETTING</p> <pre><code>   The  settings  of  the  PCRE_CASELESS, PCRE_MULTILINE, PCRE_DOTALL, and\n   PCRE_EXTENDED options (which are Perl-compatible) can be  changed  from\n   within  the  pattern  by  a  sequence  of  Perl option letters enclosed\n   between \"(?\" and \")\".  The option letters are\n\n     i  for PCRE_CASELESS\n     m  for PCRE_MULTILINE\n     s  for PCRE_DOTALL\n     x  for PCRE_EXTENDED\n\n   For example, (?im) sets caseless, multiline matching. It is also possi-\n   ble to unset these options by preceding the letter with a hyphen, and a\n   combined setting and unsetting such as (?im-sx), which sets  PCRE_CASE-\n   LESS  and PCRE_MULTILINE while unsetting PCRE_DOTALL and PCRE_EXTENDED,\n   is also permitted. If a  letter  appears  both  before  and  after  the\n   hyphen, the option is unset.\n\n   The  PCRE-specific options PCRE_DUPNAMES, PCRE_UNGREEDY, and PCRE_EXTRA\n   can be changed in the same way as the Perl-compatible options by  using\n   the characters J, U and X respectively.\n\n   When  one  of  these  option  changes occurs at top level (that is, not\n   inside subpattern parentheses), the change applies to the remainder  of\n   the pattern that follows. If the change is placed right at the start of\n   a pattern, PCRE extracts it into the global options (and it will there-\n   fore show up in data extracted by the pcre_fullinfo() function).\n\n   An  option  change  within a subpattern (see below for a description of\n   subpatterns) affects only that part of the subpattern that follows  it,\n   so\n\n     (a(?i)b)c\n\n   matches abc and aBc and no other strings (assuming PCRE_CASELESS is not\n   used).  By this means, options can be made to have  different  settings\n   in  different parts of the pattern. Any changes made in one alternative\n   do carry on into subsequent branches within the  same  subpattern.  For\n   example,\n\n     (a(?i)b|c)\n\n   matches  \"ab\",  \"aB\",  \"c\",  and \"C\", even though when matching \"C\" the\n   first branch is abandoned before the option setting.  This  is  because\n   the  effects  of option settings happen at compile time. There would be\n   some very weird behaviour otherwise.\n\n   Note: There are other PCRE-specific options that  can  be  set  by  the\n   application  when  the  compiling  or matching functions are called. In\n   some cases the pattern can contain special leading  sequences  such  as\n   (*CRLF)  to  override  what  the  application  has set or what has been\n   defaulted.  Details  are  given  in  the  section   entitled   \"Newline\n   sequences\"  above.  There  are also the (*UTF8), (*UTF16),(*UTF32), and\n   (*UCP) leading sequences that can be used to set UTF and Unicode  prop-\n   erty  modes;  they are equivalent to setting the PCRE_UTF8, PCRE_UTF16,\n   PCRE_UTF32 and the PCRE_UCP options, respectively. The (*UTF)  sequence\n   is  a  generic version that can be used with any of the libraries. How-\n   ever, the application can set the PCRE_NEVER_UTF  option,  which  locks\n   out the use of the (*UTF) sequences.\n</code></pre> <p>SUBPATTERNS</p> <pre><code>   Subpatterns are delimited by parentheses (round brackets), which can be\n   nested.  Turning part of a pattern into a subpattern does two things:\n\n   1. It localizes a set of alternatives. For example, the pattern\n\n     cat(aract|erpillar|)\n\n   matches \"cataract\", \"caterpillar\", or \"cat\". Without  the  parentheses,\n   it would match \"cataract\", \"erpillar\" or an empty string.\n\n   2.  It  sets  up  the  subpattern as a capturing subpattern. This means\n   that, when the whole pattern  matches,  that  portion  of  the  subject\n   string that matched the subpattern is passed back to the caller via the\n   ovector argument of the matching function. (This applies  only  to  the\n   traditional  matching functions; the DFA matching functions do not sup-\n   port capturing.)\n\n   Opening parentheses are counted from left to right (starting from 1) to\n   obtain  numbers  for  the  capturing  subpatterns.  For example, if the\n   string \"the red king\" is matched against the pattern\n\n     the ((red|white) (king|queen))\n\n   the captured substrings are \"red king\", \"red\", and \"king\", and are num-\n   bered 1, 2, and 3, respectively.\n\n   The  fact  that  plain  parentheses  fulfil two functions is not always\n   helpful.  There are often times when a grouping subpattern is  required\n   without  a capturing requirement. If an opening parenthesis is followed\n   by a question mark and a colon, the subpattern does not do any  captur-\n   ing,  and  is  not  counted when computing the number of any subsequent\n   capturing subpatterns. For example, if the string \"the white queen\"  is\n   matched against the pattern\n\n     the ((?:red|white) (king|queen))\n\n   the captured substrings are \"white queen\" and \"queen\", and are numbered\n   1 and 2. The maximum number of capturing subpatterns is 65535.\n\n   As a convenient shorthand, if any option settings are required  at  the\n   start  of  a  non-capturing  subpattern,  the option letters may appear\n   between the \"?\" and the \":\". Thus the two patterns\n\n     (?i:saturday|sunday)\n     (?:(?i)saturday|sunday)\n\n   match exactly the same set of strings. Because alternative branches are\n   tried  from  left  to right, and options are not reset until the end of\n   the subpattern is reached, an option setting in one branch does  affect\n   subsequent  branches,  so  the above patterns match \"SUNDAY\" as well as\n   \"Saturday\".\n</code></pre> <p>DUPLICATE SUBPATTERN NUMBERS</p> <pre><code>   Perl 5.10 introduced a feature whereby each alternative in a subpattern\n   uses  the same numbers for its capturing parentheses. Such a subpattern\n   starts with (?| and is itself a non-capturing subpattern. For  example,\n   consider this pattern:\n\n     (?|(Sat)ur|(Sun))day\n\n   Because  the two alternatives are inside a (?| group, both sets of cap-\n   turing parentheses are numbered one. Thus, when  the  pattern  matches,\n   you  can  look  at captured substring number one, whichever alternative\n   matched. This construct is useful when you want to  capture  part,  but\n   not all, of one of a number of alternatives. Inside a (?| group, paren-\n   theses are numbered as usual, but the number is reset at the  start  of\n   each  branch.  The numbers of any capturing parentheses that follow the\n   subpattern start after the highest number used in any branch. The  fol-\n   lowing example is taken from the Perl documentation. The numbers under-\n   neath show in which buffer the captured content will be stored.\n\n     # before  ---------------branch-reset----------- after\n     / ( a )  (?| x ( y ) z | (p (q) r) | (t) u (v) ) ( z ) /x\n     # 1            2         2  3        2     3     4\n\n   A back reference to a numbered subpattern uses the  most  recent  value\n   that  is  set  for that number by any subpattern. The following pattern\n   matches \"abcabc\" or \"defdef\":\n\n     /(?|(abc)|(def))\\1/\n\n   In contrast, a subroutine call to a numbered subpattern  always  refers\n   to  the  first  one in the pattern with the given number. The following\n   pattern matches \"abcabc\" or \"defabc\":\n\n     /(?|(abc)|(def))(?1)/\n\n   If a condition test for a subpattern's having matched refers to a  non-\n   unique  number, the test is true if any of the subpatterns of that num-\n   ber have matched.\n\n   An alternative approach to using this \"branch reset\" feature is to  use\n   duplicate named subpatterns, as described in the next section.\n</code></pre> <p>NAMED SUBPATTERNS</p> <pre><code>   Identifying  capturing  parentheses  by number is simple, but it can be\n   very hard to keep track of the numbers in complicated  regular  expres-\n   sions.  Furthermore,  if  an  expression  is  modified, the numbers may\n   change. To help with this difficulty, PCRE supports the naming of  sub-\n   patterns. This feature was not added to Perl until release 5.10. Python\n   had the feature earlier, and PCRE introduced it at release  4.0,  using\n   the  Python syntax. PCRE now supports both the Perl and the Python syn-\n   tax. Perl allows identically numbered  subpatterns  to  have  different\n   names, but PCRE does not.\n\n   In  PCRE,  a subpattern can be named in one of three ways: (?&lt;name&gt;...)\n   or (?'name'...) as in Perl, or (?P&lt;name&gt;...) as in  Python.  References\n   to  capturing parentheses from other parts of the pattern, such as back\n   references, recursion, and conditions, can be made by name as  well  as\n   by number.\n\n   Names  consist of up to 32 alphanumeric characters and underscores, but\n   must start with a non-digit.  Named  capturing  parentheses  are  still\n   allocated  numbers  as  well as names, exactly as if the names were not\n   present. The PCRE API provides function calls for extracting the  name-\n   to-number  translation  table  from a compiled pattern. There is also a\n   convenience function for extracting a captured substring by name.\n\n   By default, a name must be unique within a pattern, but it is  possible\n   to relax this constraint by setting the PCRE_DUPNAMES option at compile\n   time. (Duplicate names are also always permitted for  subpatterns  with\n   the  same  number, set up as described in the previous section.) Dupli-\n   cate names can be useful for patterns where only one  instance  of  the\n   named  parentheses  can  match. Suppose you want to match the name of a\n   weekday, either as a 3-letter abbreviation or as the full name, and  in\n   both cases you want to extract the abbreviation. This pattern (ignoring\n   the line breaks) does the job:\n\n     (?&lt;DN&gt;Mon|Fri|Sun)(?:day)?|\n     (?&lt;DN&gt;Tue)(?:sday)?|\n     (?&lt;DN&gt;Wed)(?:nesday)?|\n     (?&lt;DN&gt;Thu)(?:rsday)?|\n     (?&lt;DN&gt;Sat)(?:urday)?\n\n   There are five capturing substrings, but only one is ever set  after  a\n   match.  (An alternative way of solving this problem is to use a \"branch\n   reset\" subpattern, as described in the previous section.)\n\n   The convenience function for extracting the data by  name  returns  the\n   substring  for  the first (and in this example, the only) subpattern of\n   that name that matched. This saves searching  to  find  which  numbered\n   subpattern it was.\n\n   If  you  make  a  back  reference to a non-unique named subpattern from\n   elsewhere in the pattern, the subpatterns to which the name refers  are\n   checked  in  the order in which they appear in the overall pattern. The\n   first one that is set is used for the reference. For example, this pat-\n   tern matches both \"foofoo\" and \"barbar\" but not \"foobar\" or \"barfoo\":\n\n     (?:(?&lt;n&gt;foo)|(?&lt;n&gt;bar))\\k&lt;n&gt;\n\n   If you make a subroutine call to a non-unique named subpattern, the one\n   that corresponds to the first occurrence of the name is  used.  In  the\n   absence of duplicate numbers (see the previous section) this is the one\n   with the lowest number.\n\n   If you use a named reference in a condition test (see the section about\n   conditions below), either to check whether a subpattern has matched, or\n   to check for recursion, all subpatterns with the same name are  tested.\n   If  the condition is true for any one of them, the overall condition is\n   true. This is the same behaviour as  testing  by  number.  For  further\n   details  of  the  interfaces  for  handling  named subpatterns, see the\n   pcreapi documentation.\n\n   Warning: You cannot use different names to distinguish between two sub-\n   patterns  with  the same number because PCRE uses only the numbers when\n   matching. For this reason, an error is given at compile time if differ-\n   ent  names  are given to subpatterns with the same number. However, you\n   can always give the same name to subpatterns with the same number, even\n   when PCRE_DUPNAMES is not set.\n</code></pre> <p>REPETITION</p> <pre><code>   Repetition  is  specified  by  quantifiers, which can follow any of the\n   following items:\n\n     a literal data character\n     the dot metacharacter\n     the \\C escape sequence\n     the \\X escape sequence\n     the \\R escape sequence\n     an escape such as \\d or \\pL that matches a single character\n     a character class\n     a back reference (see next section)\n     a parenthesized subpattern (including assertions)\n     a subroutine call to a subpattern (recursive or otherwise)\n\n   The general repetition quantifier specifies a minimum and maximum  num-\n   ber  of  permitted matches, by giving the two numbers in curly brackets\n   (braces), separated by a comma. The numbers must be  less  than  65536,\n   and the first must be less than or equal to the second. For example:\n\n     z{2,4}\n\n   matches  \"zz\",  \"zzz\",  or  \"zzzz\". A closing brace on its own is not a\n   special character. If the second number is omitted, but  the  comma  is\n   present,  there  is  no upper limit; if the second number and the comma\n   are both omitted, the quantifier specifies an exact number of  required\n   matches. Thus\n\n     [aeiou]{3,}\n\n   matches at least 3 successive vowels, but may match many more, while\n\n     \\d{8}\n\n   matches  exactly  8  digits. An opening curly bracket that appears in a\n   position where a quantifier is not allowed, or one that does not  match\n   the  syntax of a quantifier, is taken as a literal character. For exam-\n   ple, {,6} is not a quantifier, but a literal string of four characters.\n\n   In UTF modes, quantifiers apply to characters rather than to individual\n   data  units. Thus, for example, \\x{100}{2} matches two characters, each\n   of which is represented by a two-byte sequence in a UTF-8 string. Simi-\n   larly,  \\X{3} matches three Unicode extended grapheme clusters, each of\n   which may be several data units long (and  they  may  be  of  different\n   lengths).\n\n   The quantifier {0} is permitted, causing the expression to behave as if\n   the previous item and the quantifier were not present. This may be use-\n   ful  for  subpatterns that are referenced as subroutines from elsewhere\n   in the pattern (but see also the section entitled \"Defining subpatterns\n   for  use  by  reference only\" below). Items other than subpatterns that\n   have a {0} quantifier are omitted from the compiled pattern.\n\n   For convenience, the three most common quantifiers have  single-charac-\n   ter abbreviations:\n\n     *    is equivalent to {0,}\n     +    is equivalent to {1,}\n     ?    is equivalent to {0,1}\n\n   It  is  possible  to construct infinite loops by following a subpattern\n   that can match no characters with a quantifier that has no upper limit,\n   for example:\n\n     (a?)*\n\n   Earlier versions of Perl and PCRE used to give an error at compile time\n   for such patterns. However, because there are cases where this  can  be\n   useful,  such  patterns  are now accepted, but if any repetition of the\n   subpattern does in fact match no characters, the loop is forcibly  bro-\n   ken.\n\n   By  default,  the quantifiers are \"greedy\", that is, they match as much\n   as possible (up to the maximum  number  of  permitted  times),  without\n   causing  the  rest of the pattern to fail. The classic example of where\n   this gives problems is in trying to match comments in C programs. These\n   appear  between  /*  and  */ and within the comment, individual * and /\n   characters may appear. An attempt to match C comments by  applying  the\n   pattern\n\n     /\\*.*\\*/\n\n   to the string\n\n     /* first comment */  not comment  /* second comment */\n\n   fails,  because it matches the entire string owing to the greediness of\n   the .*  item.\n\n   However, if a quantifier is followed by a question mark, it  ceases  to\n   be greedy, and instead matches the minimum number of times possible, so\n   the pattern\n\n     /\\*.*?\\*/\n\n   does the right thing with the C comments. The meaning  of  the  various\n   quantifiers  is  not  otherwise  changed,  just the preferred number of\n   matches.  Do not confuse this use of question mark with its  use  as  a\n   quantifier  in its own right. Because it has two uses, it can sometimes\n   appear doubled, as in\n\n     \\d??\\d\n\n   which matches one digit by preference, but can match two if that is the\n   only way the rest of the pattern matches.\n\n   If  the PCRE_UNGREEDY option is set (an option that is not available in\n   Perl), the quantifiers are not greedy by default, but  individual  ones\n   can  be  made  greedy  by following them with a question mark. In other\n   words, it inverts the default behaviour.\n\n   When a parenthesized subpattern is quantified  with  a  minimum  repeat\n   count  that is greater than 1 or with a limited maximum, more memory is\n   required for the compiled pattern, in proportion to  the  size  of  the\n   minimum or maximum.\n\n   If a pattern starts with .* or .{0,} and the PCRE_DOTALL option (equiv-\n   alent to Perl's /s) is set, thus allowing the dot  to  match  newlines,\n   the  pattern  is  implicitly anchored, because whatever follows will be\n   tried against every character position in the subject string, so  there\n   is  no  point  in  retrying the overall match at any position after the\n   first. PCRE normally treats such a pattern as though it  were  preceded\n   by \\A.\n\n   In  cases  where  it  is known that the subject string contains no new-\n   lines, it is worth setting PCRE_DOTALL in order to  obtain  this  opti-\n   mization, or alternatively using ^ to indicate anchoring explicitly.\n\n   However,  there  are  some cases where the optimization cannot be used.\n   When .*  is inside capturing parentheses that are the subject of a back\n   reference elsewhere in the pattern, a match at the start may fail where\n   a later one succeeds. Consider, for example:\n\n     (.*)abc\\1\n\n   If the subject is \"xyz123abc123\" the match point is the fourth  charac-\n   ter. For this reason, such a pattern is not implicitly anchored.\n\n   Another  case where implicit anchoring is not applied is when the lead-\n   ing .* is inside an atomic group. Once again, a match at the start  may\n   fail where a later one succeeds. Consider this pattern:\n\n     (?&gt;.*?a)b\n\n   It  matches \"ab\" in the subject \"aab\". The use of the backtracking con-\n   trol verbs (*PRUNE) and (*SKIP) also disable this optimization.\n\n   When a capturing subpattern is repeated, the value captured is the sub-\n   string that matched the final iteration. For example, after\n\n     (tweedle[dume]{3}\\s*)+\n\n   has matched \"tweedledum tweedledee\" the value of the captured substring\n   is \"tweedledee\". However, if there are  nested  capturing  subpatterns,\n   the  corresponding captured values may have been set in previous itera-\n   tions. For example, after\n\n     /(a|(b))+/\n\n   matches \"aba\" the value of the second captured substring is \"b\".\n</code></pre> <p>ATOMIC GROUPING AND POSSESSIVE QUANTIFIERS</p> <pre><code>   With both maximizing (\"greedy\") and minimizing (\"ungreedy\"  or  \"lazy\")\n   repetition,  failure  of what follows normally causes the repeated item\n   to be re-evaluated to see if a different number of repeats  allows  the\n   rest  of  the pattern to match. Sometimes it is useful to prevent this,\n   either to change the nature of the match, or to cause it  fail  earlier\n   than  it otherwise might, when the author of the pattern knows there is\n   no point in carrying on.\n\n   Consider, for example, the pattern \\d+foo when applied to  the  subject\n   line\n\n     123456bar\n\n   After matching all 6 digits and then failing to match \"foo\", the normal\n   action of the matcher is to try again with only 5 digits  matching  the\n   \\d+  item,  and  then  with  4,  and  so on, before ultimately failing.\n   \"Atomic grouping\" (a term taken from Jeffrey  Friedl's  book)  provides\n   the  means for specifying that once a subpattern has matched, it is not\n   to be re-evaluated in this way.\n\n   If we use atomic grouping for the previous example, the  matcher  gives\n   up  immediately  on failing to match \"foo\" the first time. The notation\n   is a kind of special parenthesis, starting with (?&gt; as in this example:\n\n     (?&gt;\\d+)foo\n\n   This kind of parenthesis \"locks up\" the  part of the  pattern  it  con-\n   tains  once  it  has matched, and a failure further into the pattern is\n   prevented from backtracking into it. Backtracking past it  to  previous\n   items, however, works as normal.\n\n   An  alternative  description  is that a subpattern of this type matches\n   the string of characters that an  identical  standalone  pattern  would\n   match, if anchored at the current point in the subject string.\n\n   Atomic grouping subpatterns are not capturing subpatterns. Simple cases\n   such as the above example can be thought of as a maximizing repeat that\n   must  swallow  everything  it can. So, while both \\d+ and \\d+? are pre-\n   pared to adjust the number of digits they match in order  to  make  the\n   rest of the pattern match, (?&gt;\\d+) can only match an entire sequence of\n   digits.\n\n   Atomic groups in general can of course contain arbitrarily  complicated\n   subpatterns,  and  can  be  nested. However, when the subpattern for an\n   atomic group is just a single repeated item, as in the example above, a\n   simpler  notation,  called  a \"possessive quantifier\" can be used. This\n   consists of an additional + character  following  a  quantifier.  Using\n   this notation, the previous example can be rewritten as\n\n     \\d++foo\n\n   Note that a possessive quantifier can be used with an entire group, for\n   example:\n\n     (abc|xyz){2,3}+\n\n   Possessive  quantifiers  are  always  greedy;  the   setting   of   the\n   PCRE_UNGREEDY option is ignored. They are a convenient notation for the\n   simpler forms of atomic group. However, there is no difference  in  the\n   meaning  of  a  possessive  quantifier and the equivalent atomic group,\n   though there may be a performance  difference;  possessive  quantifiers\n   should be slightly faster.\n\n   The  possessive  quantifier syntax is an extension to the Perl 5.8 syn-\n   tax.  Jeffrey Friedl originated the idea (and the name)  in  the  first\n   edition of his book. Mike McCloskey liked it, so implemented it when he\n   built Sun's Java package, and PCRE copied it from there. It  ultimately\n   found its way into Perl at release 5.10.\n\n   PCRE has an optimization that automatically \"possessifies\" certain sim-\n   ple pattern constructs. For example, the sequence  A+B  is  treated  as\n   A++B  because  there is no point in backtracking into a sequence of A's\n   when B must follow.\n\n   When a pattern contains an unlimited repeat inside  a  subpattern  that\n   can  itself  be  repeated  an  unlimited number of times, the use of an\n   atomic group is the only way to avoid some  failing  matches  taking  a\n   very long time indeed. The pattern\n\n     (\\D+|&lt;\\d+&gt;)*[!?]\n\n   matches  an  unlimited number of substrings that either consist of non-\n   digits, or digits enclosed in &lt;&gt;, followed by either ! or  ?.  When  it\n   matches, it runs quickly. However, if it is applied to\n\n     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n   it  takes  a  long  time  before reporting failure. This is because the\n   string can be divided between the internal \\D+ repeat and the  external\n   *  repeat  in  a  large  number of ways, and all have to be tried. (The\n   example uses [!?] rather than a single character at  the  end,  because\n   both  PCRE  and  Perl have an optimization that allows for fast failure\n   when a single character is used. They remember the last single  charac-\n   ter  that  is required for a match, and fail early if it is not present\n   in the string.) If the pattern is changed so that  it  uses  an  atomic\n   group, like this:\n\n     ((?&gt;\\D+)|&lt;\\d+&gt;)*[!?]\n\n   sequences of non-digits cannot be broken, and failure happens quickly.\n</code></pre> <p>BACK REFERENCES</p> <pre><code>   Outside a character class, a backslash followed by a digit greater than\n   0 (and possibly further digits) is a back reference to a capturing sub-\n   pattern  earlier  (that is, to its left) in the pattern, provided there\n   have been that many previous capturing left parentheses.\n\n   However, if the decimal number following the backslash is less than 10,\n   it  is  always  taken  as a back reference, and causes an error only if\n   there are not that many capturing left parentheses in the  entire  pat-\n   tern.  In  other words, the parentheses that are referenced need not be\n   to the left of the reference for numbers less than 10. A \"forward  back\n   reference\"  of  this  type can make sense when a repetition is involved\n   and the subpattern to the right has participated in an  earlier  itera-\n   tion.\n\n   It  is  not  possible to have a numerical \"forward back reference\" to a\n   subpattern whose number is 10 or  more  using  this  syntax  because  a\n   sequence  such  as  \\50 is interpreted as a character defined in octal.\n   See the subsection entitled \"Non-printing characters\" above for further\n   details  of  the  handling of digits following a backslash. There is no\n   such problem when named parentheses are used. A back reference  to  any\n   subpattern is possible using named parentheses (see below).\n\n   Another  way  of  avoiding  the ambiguity inherent in the use of digits\n   following a backslash is to use the \\g  escape  sequence.  This  escape\n   must be followed by an unsigned number or a negative number, optionally\n   enclosed in braces. These examples are all identical:\n\n     (ring), \\1\n     (ring), \\g1\n     (ring), \\g{1}\n\n   An unsigned number specifies an absolute reference without the  ambigu-\n   ity that is present in the older syntax. It is also useful when literal\n   digits follow the reference. A negative number is a relative reference.\n   Consider this example:\n\n     (abc(def)ghi)\\g{-1}\n\n   The sequence \\g{-1} is a reference to the most recently started captur-\n   ing subpattern before \\g, that is, is it equivalent to \\2 in this exam-\n   ple.   Similarly, \\g{-2} would be equivalent to \\1. The use of relative\n   references can be helpful in long patterns, and also in  patterns  that\n   are  created  by  joining  together  fragments  that contain references\n   within themselves.\n\n   A back reference matches whatever actually matched the  capturing  sub-\n   pattern  in  the  current subject string, rather than anything matching\n   the subpattern itself (see \"Subpatterns as subroutines\" below for a way\n   of doing that). So the pattern\n\n     (sens|respons)e and \\1ibility\n\n   matches  \"sense and sensibility\" and \"response and responsibility\", but\n   not \"sense and responsibility\". If caseful matching is in force at  the\n   time  of the back reference, the case of letters is relevant. For exam-\n   ple,\n\n     ((?i)rah)\\s+\\1\n\n   matches \"rah rah\" and \"RAH RAH\", but not \"RAH  rah\",  even  though  the\n   original capturing subpattern is matched caselessly.\n\n   There  are  several  different ways of writing back references to named\n   subpatterns. The .NET syntax \\k{name} and the Perl syntax  \\k&lt;name&gt;  or\n   \\k'name'  are supported, as is the Python syntax (?P=name). Perl 5.10's\n   unified back reference syntax, in which \\g can be used for both numeric\n   and  named  references,  is  also supported. We could rewrite the above\n   example in any of the following ways:\n\n     (?&lt;p1&gt;(?i)rah)\\s+\\k&lt;p1&gt;\n     (?'p1'(?i)rah)\\s+\\k{p1}\n     (?P&lt;p1&gt;(?i)rah)\\s+(?P=p1)\n     (?&lt;p1&gt;(?i)rah)\\s+\\g{p1}\n\n   A subpattern that is referenced by  name  may  appear  in  the  pattern\n   before or after the reference.\n\n   There  may be more than one back reference to the same subpattern. If a\n   subpattern has not actually been used in a particular match,  any  back\n   references to it always fail by default. For example, the pattern\n\n     (a|(bc))\\2\n\n   always  fails  if  it starts to match \"a\" rather than \"bc\". However, if\n   the PCRE_JAVASCRIPT_COMPAT option is set at compile time, a back refer-\n   ence to an unset value matches an empty string.\n\n   Because  there may be many capturing parentheses in a pattern, all dig-\n   its following a backslash are taken as part of a potential back  refer-\n   ence  number.   If  the  pattern continues with a digit character, some\n   delimiter must  be  used  to  terminate  the  back  reference.  If  the\n   PCRE_EXTENDED  option  is  set, this can be white space. Otherwise, the\n   \\g{ syntax or an empty comment (see \"Comments\" below) can be used.\n</code></pre> <p>Recursive back references</p> <pre><code>   A back reference that occurs inside the parentheses to which it  refers\n   fails  when  the subpattern is first used, so, for example, (a\\1) never\n   matches.  However, such references can be useful inside  repeated  sub-\n   patterns. For example, the pattern\n\n     (a|b\\1)+\n\n   matches any number of \"a\"s and also \"aba\", \"ababbaa\" etc. At each iter-\n   ation of the subpattern,  the  back  reference  matches  the  character\n   string  corresponding  to  the previous iteration. In order for this to\n   work, the pattern must be such that the first iteration does  not  need\n   to  match the back reference. This can be done using alternation, as in\n   the example above, or by a quantifier with a minimum of zero.\n\n   Back references of this type cause the group that they reference to  be\n   treated  as  an atomic group.  Once the whole group has been matched, a\n   subsequent matching failure cannot cause backtracking into  the  middle\n   of the group.\n</code></pre> <p>ASSERTIONS</p> <pre><code>   An  assertion  is  a  test on the characters following or preceding the\n   current matching point that does not actually consume  any  characters.\n   The  simple  assertions  coded  as  \\b, \\B, \\A, \\G, \\Z, \\z, ^ and $ are\n   described above.\n\n   More complicated assertions are coded as  subpatterns.  There  are  two\n   kinds:  those  that  look  ahead of the current position in the subject\n   string, and those that look  behind  it.  An  assertion  subpattern  is\n   matched  in  the  normal way, except that it does not cause the current\n   matching position to be changed.\n\n   Assertion subpatterns are not capturing subpatterns. If such an  asser-\n   tion  contains  capturing  subpatterns within it, these are counted for\n   the purposes of numbering the capturing subpatterns in the  whole  pat-\n   tern.  However,  substring  capturing  is carried out only for positive\n   assertions. (Perl sometimes, but not always, does do capturing in nega-\n   tive assertions.)\n\n   For  compatibility  with  Perl,  assertion subpatterns may be repeated;\n   though it makes no sense to assert the same thing  several  times,  the\n   side  effect  of  capturing  parentheses may occasionally be useful. In\n   practice, there only three cases:\n\n   (1) If the quantifier is {0}, the  assertion  is  never  obeyed  during\n   matching.   However,  it  may  contain internal capturing parenthesized\n   groups that are called from elsewhere via the subroutine mechanism.\n\n   (2) If quantifier is {0,n} where n is greater than zero, it is  treated\n   as  if  it  were  {0,1}.  At run time, the rest of the pattern match is\n   tried with and without the assertion, the order depending on the greed-\n   iness of the quantifier.\n\n   (3)  If  the minimum repetition is greater than zero, the quantifier is\n   ignored.  The assertion is obeyed just  once  when  encountered  during\n   matching.\n</code></pre> <p>Lookahead assertions</p> <pre><code>   Lookahead assertions start with (?= for positive assertions and (?! for\n   negative assertions. For example,\n\n     \\w+(?=;)\n\n   matches a word followed by a semicolon, but does not include the  semi-\n   colon in the match, and\n\n     foo(?!bar)\n\n   matches  any  occurrence  of  \"foo\" that is not followed by \"bar\". Note\n   that the apparently similar pattern\n\n     (?!foo)bar\n\n   does not find an occurrence of \"bar\"  that  is  preceded  by  something\n   other  than \"foo\"; it finds any occurrence of \"bar\" whatsoever, because\n   the assertion (?!foo) is always true when the next three characters are\n   \"bar\". A lookbehind assertion is needed to achieve the other effect.\n\n   If you want to force a matching failure at some point in a pattern, the\n   most convenient way to do it is  with  (?!)  because  an  empty  string\n   always  matches, so an assertion that requires there not to be an empty\n   string must always fail.  The backtracking control verb (*FAIL) or (*F)\n   is a synonym for (?!).\n</code></pre> <p>Lookbehind assertions</p> <pre><code>   Lookbehind  assertions start with (?&lt;= for positive assertions and (?&lt;!\n   for negative assertions. For example,\n\n     (?&lt;!foo)bar\n\n   does find an occurrence of \"bar\" that is not  preceded  by  \"foo\".  The\n   contents  of  a  lookbehind  assertion are restricted such that all the\n   strings it matches must have a fixed length. However, if there are sev-\n   eral  top-level  alternatives,  they  do  not all have to have the same\n   fixed length. Thus\n\n     (?&lt;=bullock|donkey)\n\n   is permitted, but\n\n     (?&lt;!dogs?|cats?)\n\n   causes an error at compile time. Branches that match  different  length\n   strings  are permitted only at the top level of a lookbehind assertion.\n   This is an extension compared with Perl, which requires all branches to\n   match the same length of string. An assertion such as\n\n     (?&lt;=ab(c|de))\n\n   is  not  permitted,  because  its single top-level branch can match two\n   different lengths, but it is acceptable to PCRE if rewritten to use two\n   top-level branches:\n\n     (?&lt;=abc|abde)\n\n   In  some  cases, the escape sequence \\K (see above) can be used instead\n   of a lookbehind assertion to get round the fixed-length restriction.\n\n   The implementation of lookbehind assertions is, for  each  alternative,\n   to  temporarily  move the current position back by the fixed length and\n   then try to match. If there are insufficient characters before the cur-\n   rent position, the assertion fails.\n\n   In  a UTF mode, PCRE does not allow the \\C escape (which matches a sin-\n   gle data unit even in a UTF mode) to appear in  lookbehind  assertions,\n   because  it  makes it impossible to calculate the length of the lookbe-\n   hind. The \\X and \\R escapes, which can match different numbers of  data\n   units, are also not permitted.\n\n   \"Subroutine\"  calls  (see below) such as (?2) or (?&amp;X) are permitted in\n   lookbehinds, as long as the subpattern matches a  fixed-length  string.\n   Recursion, however, is not supported.\n\n   Possessive  quantifiers  can  be  used  in  conjunction with lookbehind\n   assertions to specify efficient matching of fixed-length strings at the\n   end of subject strings. Consider a simple pattern such as\n\n     abcd$\n\n   when  applied  to  a  long string that does not match. Because matching\n   proceeds from left to right, PCRE will look for each \"a\" in the subject\n   and  then  see  if what follows matches the rest of the pattern. If the\n   pattern is specified as\n\n     ^.*abcd$\n\n   the initial .* matches the entire string at first, but when this  fails\n   (because there is no following \"a\"), it backtracks to match all but the\n   last character, then all but the last two characters, and so  on.  Once\n   again  the search for \"a\" covers the entire string, from right to left,\n   so we are no better off. However, if the pattern is written as\n\n     ^.*+(?&lt;=abcd)\n\n   there can be no backtracking for the .*+ item; it can  match  only  the\n   entire  string.  The subsequent lookbehind assertion does a single test\n   on the last four characters. If it fails, the match fails  immediately.\n   For  long  strings, this approach makes a significant difference to the\n   processing time.\n</code></pre> <p>Using multiple assertions</p> <pre><code>   Several assertions (of any sort) may occur in succession. For example,\n\n     (?&lt;=\\d{3})(?&lt;!999)foo\n\n   matches \"foo\" preceded by three digits that are not \"999\". Notice  that\n   each  of  the  assertions is applied independently at the same point in\n   the subject string. First there is a  check  that  the  previous  three\n   characters  are  all  digits,  and  then there is a check that the same\n   three characters are not \"999\".  This pattern does not match \"foo\" pre-\n   ceded  by  six  characters,  the first of which are digits and the last\n   three of which are not \"999\". For example, it  doesn't  match  \"123abc-\n   foo\". A pattern to do that is\n\n     (?&lt;=\\d{3}...)(?&lt;!999)foo\n\n   This  time  the  first assertion looks at the preceding six characters,\n   checking that the first three are digits, and then the second assertion\n   checks that the preceding three characters are not \"999\".\n\n   Assertions can be nested in any combination. For example,\n\n     (?&lt;=(?&lt;!foo)bar)baz\n\n   matches  an occurrence of \"baz\" that is preceded by \"bar\" which in turn\n   is not preceded by \"foo\", while\n\n     (?&lt;=\\d{3}(?!999)...)foo\n\n   is another pattern that matches \"foo\" preceded by three digits and  any\n   three characters that are not \"999\".\n</code></pre> <p>CONDITIONAL SUBPATTERNS</p> <pre><code>   It  is possible to cause the matching process to obey a subpattern con-\n   ditionally or to choose between two alternative subpatterns,  depending\n   on  the result of an assertion, or whether a specific capturing subpat-\n   tern has already been matched. The two possible  forms  of  conditional\n   subpattern are:\n\n     (?(condition)yes-pattern)\n     (?(condition)yes-pattern|no-pattern)\n\n   If  the  condition is satisfied, the yes-pattern is used; otherwise the\n   no-pattern (if present) is used. If there are more  than  two  alterna-\n   tives  in  the subpattern, a compile-time error occurs. Each of the two\n   alternatives may itself contain nested subpatterns of any form, includ-\n   ing  conditional  subpatterns;  the  restriction  to  two  alternatives\n   applies only at the level of the condition. This pattern fragment is an\n   example where the alternatives are complex:\n\n     (?(1) (A|B|C) | (D | (?(2)E|F) | E) )\n\n   There  are  four  kinds of condition: references to subpatterns, refer-\n   ences to recursion, a pseudo-condition called DEFINE, and assertions.\n</code></pre> <p>Checking for a used subpattern by number</p> <pre><code>   If the text between the parentheses consists of a sequence  of  digits,\n   the condition is true if a capturing subpattern of that number has pre-\n   viously matched. If there is more than one  capturing  subpattern  with\n   the  same  number  (see  the earlier section about duplicate subpattern\n   numbers), the condition is true if any of them have matched. An  alter-\n   native  notation is to precede the digits with a plus or minus sign. In\n   this case, the subpattern number is relative rather than absolute.  The\n   most  recently opened parentheses can be referenced by (?(-1), the next\n   most recent by (?(-2), and so on. Inside loops it can also  make  sense\n   to refer to subsequent groups. The next parentheses to be opened can be\n   referenced as (?(+1), and so on. (The value zero in any of these  forms\n   is not used; it provokes a compile-time error.)\n\n   Consider  the  following  pattern, which contains non-significant white\n   space to make it more readable (assume the PCRE_EXTENDED option) and to\n   divide it into three parts for ease of discussion:\n\n     ( \\( )?    [^()]+    (?(1) \\) )\n\n   The  first  part  matches  an optional opening parenthesis, and if that\n   character is present, sets it as the first captured substring. The sec-\n   ond  part  matches one or more characters that are not parentheses. The\n   third part is a conditional subpattern that tests whether  or  not  the\n   first  set  of  parentheses  matched.  If they did, that is, if subject\n   started with an opening parenthesis, the condition is true, and so  the\n   yes-pattern  is  executed and a closing parenthesis is required. Other-\n   wise, since no-pattern is not present, the subpattern matches  nothing.\n   In  other  words,  this  pattern matches a sequence of non-parentheses,\n   optionally enclosed in parentheses.\n\n   If you were embedding this pattern in a larger one,  you  could  use  a\n   relative reference:\n\n     ...other stuff... ( \\( )?    [^()]+    (?(-1) \\) ) ...\n\n   This  makes  the  fragment independent of the parentheses in the larger\n   pattern.\n</code></pre> <p>Checking for a used subpattern by name</p> <pre><code>   Perl uses the syntax (?(&lt;name&gt;)...) or (?('name')...)  to  test  for  a\n   used  subpattern  by  name.  For compatibility with earlier versions of\n   PCRE, which had this facility before Perl, the syntax  (?(name)...)  is\n   also recognized.\n\n   Rewriting the above example to use a named subpattern gives this:\n\n     (?&lt;OPEN&gt; \\( )?    [^()]+    (?(&lt;OPEN&gt;) \\) )\n\n   If  the  name used in a condition of this kind is a duplicate, the test\n   is applied to all subpatterns of the same name, and is true if any  one\n   of them has matched.\n</code></pre> <p>Checking for pattern recursion</p> <pre><code>   If the condition is the string (R), and there is no subpattern with the\n   name R, the condition is true if a recursive call to the whole  pattern\n   or any subpattern has been made. If digits or a name preceded by amper-\n   sand follow the letter R, for example:\n\n     (?(R3)...) or (?(R&amp;name)...)\n\n   the condition is true if the most recent recursion is into a subpattern\n   whose number or name is given. This condition does not check the entire\n   recursion stack. If the name used in a condition  of  this  kind  is  a\n   duplicate, the test is applied to all subpatterns of the same name, and\n   is true if any one of them is the most recent recursion.\n\n   At \"top level\", all these recursion test  conditions  are  false.   The\n   syntax for recursive patterns is described below.\n</code></pre> <p>Defining subpatterns for use by reference only</p> <pre><code>   If  the  condition  is  the string (DEFINE), and there is no subpattern\n   with the name DEFINE, the condition is  always  false.  In  this  case,\n   there  may  be  only  one  alternative  in the subpattern. It is always\n   skipped if control reaches this point  in  the  pattern;  the  idea  of\n   DEFINE  is that it can be used to define subroutines that can be refer-\n   enced from elsewhere. (The use of subroutines is described below.)  For\n   example,  a  pattern  to match an IPv4 address such as \"192.168.23.245\"\n   could be written like this (ignore white space and line breaks):\n\n     (?(DEFINE) (?&lt;byte&gt; 2[0-4]\\d | 25[0-5] | 1\\d\\d | [1-9]?\\d) )\n     \\b (?&amp;byte) (\\.(?&amp;byte)){3} \\b\n\n   The first part of the pattern is a DEFINE group inside which a  another\n   group  named \"byte\" is defined. This matches an individual component of\n   an IPv4 address (a number less than 256). When  matching  takes  place,\n   this  part  of  the pattern is skipped because DEFINE acts like a false\n   condition. The rest of the pattern uses references to the  named  group\n   to  match the four dot-separated components of an IPv4 address, insist-\n   ing on a word boundary at each end.\n</code></pre> <p>Assertion conditions</p> <pre><code>   If the condition is not in any of the above  formats,  it  must  be  an\n   assertion.   This may be a positive or negative lookahead or lookbehind\n   assertion. Consider  this  pattern,  again  containing  non-significant\n   white space, and with the two alternatives on the second line:\n\n     (?(?=[^a-z]*[a-z])\n     \\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} )\n\n   The  condition  is  a  positive  lookahead  assertion  that  matches an\n   optional sequence of non-letters followed by a letter. In other  words,\n   it  tests  for the presence of at least one letter in the subject. If a\n   letter is found, the subject is matched against the first  alternative;\n   otherwise  it  is  matched  against  the  second.  This pattern matches\n   strings in one of the two forms dd-aaa-dd or dd-dd-dd,  where  aaa  are\n   letters and dd are digits.\n</code></pre> <p>COMMENTS</p> <pre><code>   There are two ways of including comments in patterns that are processed\n   by PCRE. In both cases, the start of the comment must not be in a char-\n   acter class, nor in the middle of any other sequence of related charac-\n   ters such as (?: or a subpattern name or number.  The  characters  that\n   make up a comment play no part in the pattern matching.\n\n   The  sequence (?# marks the start of a comment that continues up to the\n   next closing parenthesis. Nested parentheses are not permitted. If  the\n   PCRE_EXTENDED option is set, an unescaped # character also introduces a\n   comment, which in this case continues to  immediately  after  the  next\n   newline  character  or character sequence in the pattern. Which charac-\n   ters are interpreted as newlines is controlled by the options passed to\n   a  compiling function or by a special sequence at the start of the pat-\n   tern, as described in the section entitled \"Newline conventions\" above.\n   Note that the end of this type of comment is a literal newline sequence\n   in the pattern; escape sequences that happen to represent a newline  do\n   not  count.  For  example,  consider this pattern when PCRE_EXTENDED is\n   set, and the default newline convention is in force:\n\n     abc #comment \\n still comment\n\n   On encountering the # character, pcre_compile()  skips  along,  looking\n   for  a newline in the pattern. The sequence \\n is still literal at this\n   stage, so it does not terminate the comment. Only an  actual  character\n   with the code value 0x0a (the default newline) does so.\n</code></pre> <p>RECURSIVE PATTERNS</p> <pre><code>   Consider  the problem of matching a string in parentheses, allowing for\n   unlimited nested parentheses. Without the use of  recursion,  the  best\n   that  can  be  done  is  to use a pattern that matches up to some fixed\n   depth of nesting. It is not possible to  handle  an  arbitrary  nesting\n   depth.\n\n   For some time, Perl has provided a facility that allows regular expres-\n   sions to recurse (amongst other things). It does this by  interpolating\n   Perl  code in the expression at run time, and the code can refer to the\n   expression itself. A Perl pattern using code interpolation to solve the\n   parentheses problem can be created like this:\n\n     $re = qr{\\( (?: (?&gt;[^()]+) | (?p{$re}) )* \\)}x;\n\n   The (?p{...}) item interpolates Perl code at run time, and in this case\n   refers recursively to the pattern in which it appears.\n\n   Obviously, PCRE cannot support the interpolation of Perl code. Instead,\n   it  supports  special  syntax  for recursion of the entire pattern, and\n   also for individual subpattern recursion.  After  its  introduction  in\n   PCRE  and  Python,  this  kind of recursion was subsequently introduced\n   into Perl at release 5.10.\n\n   A special item that consists of (? followed by a  number  greater  than\n   zero  and  a  closing parenthesis is a recursive subroutine call of the\n   subpattern of the given number, provided that  it  occurs  inside  that\n   subpattern.  (If  not,  it is a non-recursive subroutine call, which is\n   described in the next section.) The special item  (?R)  or  (?0)  is  a\n   recursive call of the entire regular expression.\n\n   This  PCRE  pattern  solves  the nested parentheses problem (assume the\n   PCRE_EXTENDED option is set so that white space is ignored):\n\n     \\( ( [^()]++ | (?R) )* \\)\n\n   First it matches an opening parenthesis. Then it matches any number  of\n   substrings  which  can  either  be  a sequence of non-parentheses, or a\n   recursive match of the pattern itself (that is, a  correctly  parenthe-\n   sized substring).  Finally there is a closing parenthesis. Note the use\n   of a possessive quantifier to avoid backtracking into sequences of non-\n   parentheses.\n\n   If  this  were  part of a larger pattern, you would not want to recurse\n   the entire pattern, so instead you could use this:\n\n     ( \\( ( [^()]++ | (?1) )* \\) )\n\n   We have put the pattern into parentheses, and caused the  recursion  to\n   refer to them instead of the whole pattern.\n\n   In  a  larger  pattern,  keeping  track  of  parenthesis numbers can be\n   tricky. This is made easier by the use of relative references.  Instead\n   of (?1) in the pattern above you can write (?-2) to refer to the second\n   most recently opened parentheses  preceding  the  recursion.  In  other\n   words,  a  negative  number counts capturing parentheses leftwards from\n   the point at which it is encountered.\n\n   It is also possible to refer to  subsequently  opened  parentheses,  by\n   writing  references  such  as (?+2). However, these cannot be recursive\n   because the reference is not inside the  parentheses  that  are  refer-\n   enced.  They are always non-recursive subroutine calls, as described in\n   the next section.\n\n   An alternative approach is to use named parentheses instead.  The  Perl\n   syntax  for  this  is (?&amp;name); PCRE's earlier syntax (?P&gt;name) is also\n   supported. We could rewrite the above example as follows:\n\n     (?&lt;pn&gt; \\( ( [^()]++ | (?&amp;pn) )* \\) )\n\n   If there is more than one subpattern with the same name,  the  earliest\n   one is used.\n\n   This  particular  example pattern that we have been looking at contains\n   nested unlimited repeats, and so the use of a possessive quantifier for\n   matching strings of non-parentheses is important when applying the pat-\n   tern to strings that do not match. For example, when  this  pattern  is\n   applied to\n\n     (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()\n\n   it  yields  \"no  match\" quickly. However, if a possessive quantifier is\n   not used, the match runs for a very long time indeed because there  are\n   so  many  different  ways the + and * repeats can carve up the subject,\n   and all have to be tested before failure can be reported.\n\n   At the end of a match, the values of capturing  parentheses  are  those\n   from  the outermost level. If you want to obtain intermediate values, a\n   callout function can be used (see below and the pcrecallout  documenta-\n   tion). If the pattern above is matched against\n\n     (ab(cd)ef)\n\n   the  value  for  the  inner capturing parentheses (numbered 2) is \"ef\",\n   which is the last value taken on at the top level. If a capturing  sub-\n   pattern  is  not  matched at the top level, its final captured value is\n   unset, even if it was (temporarily) set at a deeper  level  during  the\n   matching process.\n\n   If  there are more than 15 capturing parentheses in a pattern, PCRE has\n   to obtain extra memory to store data during a recursion, which it  does\n   by using pcre_malloc, freeing it via pcre_free afterwards. If no memory\n   can be obtained, the match fails with the PCRE_ERROR_NOMEMORY error.\n\n   Do not confuse the (?R) item with the condition (R),  which  tests  for\n   recursion.   Consider  this pattern, which matches text in angle brack-\n   ets, allowing for arbitrary nesting. Only digits are allowed in  nested\n   brackets  (that is, when recursing), whereas any characters are permit-\n   ted at the outer level.\n\n     &lt; (?: (?(R) \\d++  | [^&lt;&gt;]*+) | (?R)) * &gt;\n\n   In this pattern, (?(R) is the start of a conditional  subpattern,  with\n   two  different  alternatives for the recursive and non-recursive cases.\n   The (?R) item is the actual recursive call.\n</code></pre> <p>Differences in recursion processing between PCRE and Perl</p> <pre><code>   Recursion processing in PCRE differs from Perl in two  important  ways.\n   In  PCRE (like Python, but unlike Perl), a recursive subpattern call is\n   always treated as an atomic group. That is, once it has matched some of\n   the subject string, it is never re-entered, even if it contains untried\n   alternatives and there is a subsequent matching failure.  This  can  be\n   illustrated  by the following pattern, which purports to match a palin-\n   dromic string that contains an odd number of characters  (for  example,\n   \"a\", \"aba\", \"abcba\", \"abcdcba\"):\n\n     ^(.|(.)(?1)\\2)$\n\n   The idea is that it either matches a single character, or two identical\n   characters surrounding a sub-palindrome. In Perl, this  pattern  works;\n   in  PCRE  it  does  not if the pattern is longer than three characters.\n   Consider the subject string \"abcba\":\n\n   At the top level, the first character is matched, but as it is  not  at\n   the end of the string, the first alternative fails; the second alterna-\n   tive is taken and the recursion kicks in. The recursive call to subpat-\n   tern  1  successfully  matches the next character (\"b\"). (Note that the\n   beginning and end of line tests are not part of the recursion).\n\n   Back at the top level, the next character (\"c\") is compared  with  what\n   subpattern  2 matched, which was \"a\". This fails. Because the recursion\n   is treated as an atomic group, there are now  no  backtracking  points,\n   and  so  the  entire  match fails. (Perl is able, at this point, to re-\n   enter the recursion and try the second alternative.)  However,  if  the\n   pattern is written with the alternatives in the other order, things are\n   different:\n\n     ^((.)(?1)\\2|.)$\n\n   This time, the recursing alternative is tried first, and  continues  to\n   recurse  until  it runs out of characters, at which point the recursion\n   fails. But this time we do have  another  alternative  to  try  at  the\n   higher  level.  That  is  the  big difference: in the previous case the\n   remaining alternative is at a deeper recursion level, which PCRE cannot\n   use.\n\n   To  change  the pattern so that it matches all palindromic strings, not\n   just those with an odd number of characters, it is tempting  to  change\n   the pattern to this:\n\n     ^((.)(?1)\\2|.?)$\n\n   Again,  this  works  in Perl, but not in PCRE, and for the same reason.\n   When a deeper recursion has matched a single character,  it  cannot  be\n   entered  again  in  order  to match an empty string. The solution is to\n   separate the two cases, and write out the odd and even cases as  alter-\n   natives at the higher level:\n\n     ^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))\n\n   If  you  want  to match typical palindromic phrases, the pattern has to\n   ignore all non-word characters, which can be done like this:\n\n     ^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$\n\n   If run with the PCRE_CASELESS option, this pattern matches phrases such\n   as \"A man, a plan, a canal: Panama!\" and it works well in both PCRE and\n   Perl. Note the use of the possessive quantifier *+ to avoid  backtrack-\n   ing  into  sequences of non-word characters. Without this, PCRE takes a\n   great deal longer (ten times or more) to  match  typical  phrases,  and\n   Perl takes so long that you think it has gone into a loop.\n\n   WARNING:  The  palindrome-matching patterns above work only if the sub-\n   ject string does not start with a palindrome that is shorter  than  the\n   entire  string.  For example, although \"abcba\" is correctly matched, if\n   the subject is \"ababa\", PCRE finds the palindrome \"aba\" at  the  start,\n   then  fails at top level because the end of the string does not follow.\n   Once again, it cannot jump back into the recursion to try other  alter-\n   natives, so the entire match fails.\n\n   The  second  way  in which PCRE and Perl differ in their recursion pro-\n   cessing is in the handling of captured values. In Perl, when a  subpat-\n   tern  is  called recursively or as a subpattern (see the next section),\n   it has no access to any values that were captured  outside  the  recur-\n   sion,  whereas  in  PCRE  these values can be referenced. Consider this\n   pattern:\n\n     ^(.)(\\1|a(?2))\n\n   In PCRE, this pattern matches \"bab\". The  first  capturing  parentheses\n   match  \"b\",  then in the second group, when the back reference \\1 fails\n   to match \"b\", the second alternative matches \"a\" and then recurses.  In\n   the  recursion,  \\1 does now match \"b\" and so the whole match succeeds.\n   In Perl, the pattern fails to match because inside the  recursive  call\n   \\1 cannot access the externally set value.\n</code></pre> <p>SUBPATTERNS AS SUBROUTINES</p> <pre><code>   If  the  syntax for a recursive subpattern call (either by number or by\n   name) is used outside the parentheses to which it refers,  it  operates\n   like  a subroutine in a programming language. The called subpattern may\n   be defined before or after the reference. A numbered reference  can  be\n   absolute or relative, as in these examples:\n\n     (...(absolute)...)...(?2)...\n     (...(relative)...)...(?-1)...\n     (...(?+1)...(relative)...\n\n   An earlier example pointed out that the pattern\n\n     (sens|respons)e and \\1ibility\n\n   matches  \"sense and sensibility\" and \"response and responsibility\", but\n   not \"sense and responsibility\". If instead the pattern\n\n     (sens|respons)e and (?1)ibility\n\n   is used, it does match \"sense and responsibility\" as well as the  other\n   two  strings.  Another  example  is  given  in the discussion of DEFINE\n   above.\n\n   All subroutine calls, whether recursive or not, are always  treated  as\n   atomic  groups. That is, once a subroutine has matched some of the sub-\n   ject string, it is never re-entered, even if it contains untried alter-\n   natives  and  there  is  a  subsequent  matching failure. Any capturing\n   parentheses that are set during the subroutine  call  revert  to  their\n   previous values afterwards.\n\n   Processing  options  such as case-independence are fixed when a subpat-\n   tern is defined, so if it is used as a subroutine, such options  cannot\n   be changed for different calls. For example, consider this pattern:\n\n     (abc)(?i:(?-1))\n\n   It  matches  \"abcabc\". It does not match \"abcABC\" because the change of\n   processing option does not affect the called subpattern.\n</code></pre> <p>ONIGURUMA SUBROUTINE SYNTAX</p> <pre><code>   For compatibility with Oniguruma, the non-Perl syntax \\g followed by  a\n   name or a number enclosed either in angle brackets or single quotes, is\n   an alternative syntax for referencing a  subpattern  as  a  subroutine,\n   possibly  recursively. Here are two of the examples used above, rewrit-\n   ten using this syntax:\n\n     (?&lt;pn&gt; \\( ( (?&gt;[^()]+) | \\g&lt;pn&gt; )* \\) )\n     (sens|respons)e and \\g'1'ibility\n\n   PCRE supports an extension to Oniguruma: if a number is preceded  by  a\n   plus or a minus sign it is taken as a relative reference. For example:\n\n     (abc)(?i:\\g&lt;-1&gt;)\n\n   Note  that \\g{...} (Perl syntax) and \\g&lt;...&gt; (Oniguruma syntax) are not\n   synonymous. The former is a back reference; the latter is a  subroutine\n   call.\n</code></pre> <p>CALLOUTS</p> <pre><code>   Perl has a feature whereby using the sequence (?{...}) causes arbitrary\n   Perl code to be obeyed in the middle of matching a regular  expression.\n   This makes it possible, amongst other things, to extract different sub-\n   strings that match the same pair of parentheses when there is a repeti-\n   tion.\n\n   PCRE provides a similar feature, but of course it cannot obey arbitrary\n   Perl code. The feature is called \"callout\". The caller of PCRE provides\n   an  external function by putting its entry point in the global variable\n   pcre_callout (8-bit library) or pcre[16|32]_callout (16-bit  or  32-bit\n   library).   By default, this variable contains NULL, which disables all\n   calling out.\n\n   Within a regular expression, (?C) indicates the  points  at  which  the\n   external  function  is  to be called. If you want to identify different\n   callout points, you can put a number less than 256 after the letter  C.\n   The  default  value is zero.  For example, this pattern has two callout\n   points:\n\n     (?C1)abc(?C2)def\n\n   If the PCRE_AUTO_CALLOUT flag is passed to a compiling function,  call-\n   outs  are automatically installed before each item in the pattern. They\n   are all numbered 255. If there is a conditional group  in  the  pattern\n   whose condition is an assertion, an additional callout is inserted just\n   before the condition. An explicit callout may also be set at this posi-\n   tion, as in this example:\n\n     (?(?C9)(?=a)abc|def)\n\n   Note that this applies only to assertion conditions, not to other types\n   of condition.\n\n   During matching, when PCRE reaches a callout point, the external  func-\n   tion  is  called.  It  is  provided with the number of the callout, the\n   position in the pattern, and, optionally, one item of  data  originally\n   supplied  by  the caller of the matching function. The callout function\n   may cause matching to proceed, to backtrack, or to fail altogether.\n\n   By default, PCRE implements a number of optimizations at  compile  time\n   and  matching  time, and one side-effect is that sometimes callouts are\n   skipped. If you need all possible callouts to happen, you need  to  set\n   options  that  disable  the relevant optimizations. More details, and a\n   complete description of the interface  to  the  callout  function,  are\n   given in the pcrecallout documentation.\n</code></pre> <p>BACKTRACKING CONTROL</p> <pre><code>   Perl  5.10 introduced a number of \"Special Backtracking Control Verbs\",\n   which are still described in the Perl  documentation  as  \"experimental\n   and  subject to change or removal in a future version of Perl\". It goes\n   on to say: \"Their usage in production code should  be  noted  to  avoid\n   problems  during upgrades.\" The same remarks apply to the PCRE features\n   described in this section.\n\n   The new verbs make use of what was previously invalid syntax: an  open-\n   ing parenthesis followed by an asterisk. They are generally of the form\n   (*VERB) or (*VERB:NAME). Some may take either form,  possibly  behaving\n   differently  depending  on  whether or not a name is present. A name is\n   any sequence of characters that does not include a closing parenthesis.\n   The maximum length of name is 255 in the 8-bit library and 65535 in the\n   16-bit and 32-bit libraries. If the name is  empty,  that  is,  if  the\n   closing  parenthesis immediately follows the colon, the effect is as if\n   the colon were not there.  Any number of these verbs  may  occur  in  a\n   pattern.\n\n   Since  these  verbs  are  specifically related to backtracking, most of\n   them can be used only when the pattern is to be matched  using  one  of\n   the  traditional  matching  functions, because these use a backtracking\n   algorithm. With the exception of (*FAIL), which behaves like a  failing\n   negative  assertion,  the  backtracking control verbs cause an error if\n   encountered by a DFA matching function.\n\n   The behaviour of these verbs in repeated  groups,  assertions,  and  in\n   subpatterns called as subroutines (whether or not recursively) is docu-\n   mented below.\n</code></pre> <p>Optimizations that affect backtracking verbs</p> <pre><code>   PCRE contains some optimizations that are used to speed up matching  by\n   running some checks at the start of each match attempt. For example, it\n   may know the minimum length of matching subject, or that  a  particular\n   character must be present. When one of these optimizations bypasses the\n   running of a match,  any  included  backtracking  verbs  will  not,  of\n   course, be processed. You can suppress the start-of-match optimizations\n   by setting the PCRE_NO_START_OPTIMIZE  option  when  calling  pcre_com-\n   pile() or pcre_exec(), or by starting the pattern with (*NO_START_OPT).\n   There is more discussion of this option in the section entitled \"Option\n   bits for pcre_exec()\" in the pcreapi documentation.\n\n   Experiments  with  Perl  suggest that it too has similar optimizations,\n   sometimes leading to anomalous results.\n</code></pre> <p>Verbs that act immediately</p> <pre><code>   The following verbs act as soon as they are encountered. They  may  not\n   be followed by a name.\n\n      (*ACCEPT)\n\n   This  verb causes the match to end successfully, skipping the remainder\n   of the pattern. However, when it is inside a subpattern that is  called\n   as  a  subroutine, only that subpattern is ended successfully. Matching\n   then continues at the outer level. If (*ACCEPT) in triggered in a posi-\n   tive  assertion,  the  assertion succeeds; in a negative assertion, the\n   assertion fails.\n\n   If (*ACCEPT) is inside capturing parentheses, the data so far  is  cap-\n   tured. For example:\n\n     A((?:A|B(*ACCEPT)|C)D)\n\n   This  matches  \"AB\", \"AAD\", or \"ACD\"; when it matches \"AB\", \"B\" is cap-\n   tured by the outer parentheses.\n\n     (*FAIL) or (*F)\n\n   This verb causes a matching failure, forcing backtracking to occur.  It\n   is  equivalent to (?!) but easier to read. The Perl documentation notes\n   that it is probably useful only when combined  with  (?{})  or  (??{}).\n   Those  are,  of course, Perl features that are not present in PCRE. The\n   nearest equivalent is the callout feature, as for example in this  pat-\n   tern:\n\n     a+(?C)(*FAIL)\n\n   A  match  with the string \"aaaa\" always fails, but the callout is taken\n   before each backtrack happens (in this example, 10 times).\n</code></pre> <p>Recording which path was taken</p> <pre><code>   There is one verb whose main purpose  is  to  track  how  a  match  was\n   arrived  at,  though  it  also  has a secondary use in conjunction with\n   advancing the match starting point (see (*SKIP) below).\n\n     (*MARK:NAME) or (*:NAME)\n\n   A name is always  required  with  this  verb.  There  may  be  as  many\n   instances  of  (*MARK) as you like in a pattern, and their names do not\n   have to be unique.\n\n   When a match succeeds, the name of the  last-encountered  (*MARK:NAME),\n   (*PRUNE:NAME),  or  (*THEN:NAME) on the matching path is passed back to\n   the caller as  described  in  the  section  entitled  \"Extra  data  for\n   pcre_exec()\"  in  the  pcreapi  documentation.  Here  is  an example of\n   pcretest output, where the /K modifier requests the retrieval and  out-\n   putting of (*MARK) data:\n\n       re&gt; /X(*MARK:A)Y|X(*MARK:B)Z/K\n     data&gt; XY\n      0: XY\n     MK: A\n     XZ\n      0: XZ\n     MK: B\n\n   The (*MARK) name is tagged with \"MK:\" in this output, and in this exam-\n   ple it indicates which of the two alternatives matched. This is a  more\n   efficient  way of obtaining this information than putting each alterna-\n   tive in its own capturing parentheses.\n\n   If a verb with a name is encountered in a positive  assertion  that  is\n   true,  the  name  is recorded and passed back if it is the last-encoun-\n   tered. This does not happen for negative assertions or failing positive\n   assertions.\n\n   After  a  partial match or a failed match, the last encountered name in\n   the entire match process is returned. For example:\n\n       re&gt; /X(*MARK:A)Y|X(*MARK:B)Z/K\n     data&gt; XP\n     No match, mark = B\n\n   Note that in this unanchored example the  mark  is  retained  from  the\n   match attempt that started at the letter \"X\" in the subject. Subsequent\n   match attempts starting at \"P\" and then with an empty string do not get\n   as far as the (*MARK) item, but nevertheless do not reset it.\n\n   If  you  are  interested  in  (*MARK)  values after failed matches, you\n   should probably set the PCRE_NO_START_OPTIMIZE option  (see  above)  to\n   ensure that the match is always attempted.\n</code></pre> <p>Verbs that act after backtracking</p> <pre><code>   The following verbs do nothing when they are encountered. Matching con-\n   tinues with what follows, but if there is no subsequent match,  causing\n   a  backtrack  to  the  verb, a failure is forced. That is, backtracking\n   cannot pass to the left of the verb. However, when one of  these  verbs\n   appears inside an atomic group or an assertion that is true, its effect\n   is confined to that group, because once the  group  has  been  matched,\n   there  is never any backtracking into it. In this situation, backtrack-\n   ing can \"jump back\" to the left of the entire atomic  group  or  asser-\n   tion.  (Remember  also,  as  stated  above, that this localization also\n   applies in subroutine calls.)\n\n   These verbs differ in exactly what kind of failure  occurs  when  back-\n   tracking  reaches  them.  The behaviour described below is what happens\n   when the verb is not in a subroutine or an assertion.  Subsequent  sec-\n   tions cover these special cases.\n\n     (*COMMIT)\n\n   This  verb, which may not be followed by a name, causes the whole match\n   to fail outright if there is a later matching failure that causes back-\n   tracking  to  reach  it.  Even if the pattern is unanchored, no further\n   attempts to find a match by advancing the starting point take place. If\n   (*COMMIT)  is  the  only backtracking verb that is encountered, once it\n   has been passed pcre_exec() is committed to finding a match at the cur-\n   rent starting point, or not at all. For example:\n\n     a+(*COMMIT)b\n\n   This  matches  \"xxaab\" but not \"aacaab\". It can be thought of as a kind\n   of dynamic anchor, or \"I've started, so I must finish.\" The name of the\n   most  recently passed (*MARK) in the path is passed back when (*COMMIT)\n   forces a match failure.\n\n   If there is more than one backtracking verb in a pattern,  a  different\n   one  that  follows  (*COMMIT) may be triggered first, so merely passing\n   (*COMMIT) during a match does not always guarantee that a match must be\n   at this starting point.\n\n   Note  that  (*COMMIT)  at  the start of a pattern is not the same as an\n   anchor, unless PCRE's start-of-match optimizations are turned  off,  as\n   shown in this output from pcretest:\n\n       re&gt; /(*COMMIT)abc/\n     data&gt; xyzabc\n      0: abc\n     data&gt; xyzabc\\Y\n     No match\n\n   For this pattern, PCRE knows that any match must start with \"a\", so the\n   optimization skips along the subject to \"a\" before applying the pattern\n   to  the first set of data. The match attempt then succeeds. In the sec-\n   ond set of data, the escape sequence \\Y is interpreted by the  pcretest\n   program.  It  causes  the  PCRE_NO_START_OPTIMIZE option to be set when\n   pcre_exec() is called.  This disables the optimization that skips along\n   to the first character. The pattern is now applied starting at \"x\", and\n   so the (*COMMIT) causes the match to  fail  without  trying  any  other\n   starting points.\n\n     (*PRUNE) or (*PRUNE:NAME)\n\n   This  verb causes the match to fail at the current starting position in\n   the subject if there is a later matching failure that causes backtrack-\n   ing  to  reach it. If the pattern is unanchored, the normal \"bumpalong\"\n   advance to the next starting character then happens.  Backtracking  can\n   occur  as  usual to the left of (*PRUNE), before it is reached, or when\n   matching to the right of (*PRUNE), but if there  is  no  match  to  the\n   right,  backtracking cannot cross (*PRUNE). In simple cases, the use of\n   (*PRUNE) is just an alternative to an atomic group or possessive  quan-\n   tifier, but there are some uses of (*PRUNE) that cannot be expressed in\n   any other way. In an anchored pattern (*PRUNE) has the same  effect  as\n   (*COMMIT).\n\n   The   behaviour   of   (*PRUNE:NAME)   is   the   not   the   same   as\n   (*MARK:NAME)(*PRUNE).  It is like (*MARK:NAME)  in  that  the  name  is\n   remembered  for  passing  back  to  the  caller.  However, (*SKIP:NAME)\n   searches only for names set with (*MARK).\n\n     (*SKIP)\n\n   This verb, when given without a name, is like (*PRUNE), except that  if\n   the  pattern  is unanchored, the \"bumpalong\" advance is not to the next\n   character, but to the position in the subject where (*SKIP) was encoun-\n   tered.  (*SKIP)  signifies that whatever text was matched leading up to\n   it cannot be part of a successful match. Consider:\n\n     a+(*SKIP)b\n\n   If the subject is \"aaaac...\",  after  the  first  match  attempt  fails\n   (starting  at  the  first  character in the string), the starting point\n   skips on to start the next attempt at \"c\". Note that a possessive quan-\n   tifer  does not have the same effect as this example; although it would\n   suppress backtracking  during  the  first  match  attempt,  the  second\n   attempt  would  start at the second character instead of skipping on to\n   \"c\".\n\n     (*SKIP:NAME)\n\n   When (*SKIP) has an associated name, its behaviour is modified. When it\n   is triggered, the previous path through the pattern is searched for the\n   most recent (*MARK) that has the  same  name.  If  one  is  found,  the\n   \"bumpalong\" advance is to the subject position that corresponds to that\n   (*MARK) instead of to where (*SKIP) was encountered. If no (*MARK) with\n   a matching name is found, the (*SKIP) is ignored.\n\n   Note  that (*SKIP:NAME) searches only for names set by (*MARK:NAME). It\n   ignores names that are set by (*PRUNE:NAME) or (*THEN:NAME).\n\n     (*THEN) or (*THEN:NAME)\n\n   This verb causes a skip to the next innermost  alternative  when  back-\n   tracking  reaches  it.  That  is,  it  cancels any further backtracking\n   within the current alternative. Its name  comes  from  the  observation\n   that it can be used for a pattern-based if-then-else block:\n\n     ( COND1 (*THEN) FOO | COND2 (*THEN) BAR | COND3 (*THEN) BAZ ) ...\n\n   If  the COND1 pattern matches, FOO is tried (and possibly further items\n   after the end of the group if FOO succeeds); on  failure,  the  matcher\n   skips  to  the second alternative and tries COND2, without backtracking\n   into COND1. If that succeeds and BAR fails, COND3 is tried.  If  subse-\n   quently  BAZ fails, there are no more alternatives, so there is a back-\n   track to whatever came before the  entire  group.  If  (*THEN)  is  not\n   inside an alternation, it acts like (*PRUNE).\n\n   The    behaviour   of   (*THEN:NAME)   is   the   not   the   same   as\n   (*MARK:NAME)(*THEN).  It is like  (*MARK:NAME)  in  that  the  name  is\n   remembered  for  passing  back  to  the  caller.  However, (*SKIP:NAME)\n   searches only for names set with (*MARK).\n\n   A subpattern that does not contain a | character is just a part of  the\n   enclosing  alternative;  it  is  not a nested alternation with only one\n   alternative. The effect of (*THEN) extends beyond such a subpattern  to\n   the  enclosing alternative. Consider this pattern, where A, B, etc. are\n   complex pattern fragments that do not contain any | characters at  this\n   level:\n\n     A (B(*THEN)C) | D\n\n   If  A and B are matched, but there is a failure in C, matching does not\n   backtrack into A; instead it moves to the next alternative, that is, D.\n   However,  if the subpattern containing (*THEN) is given an alternative,\n   it behaves differently:\n\n     A (B(*THEN)C | (*FAIL)) | D\n\n   The effect of (*THEN) is now confined to the inner subpattern. After  a\n   failure in C, matching moves to (*FAIL), which causes the whole subpat-\n   tern to fail because there are no more alternatives  to  try.  In  this\n   case, matching does now backtrack into A.\n\n   Note  that  a  conditional  subpattern  is not considered as having two\n   alternatives, because only one is ever used.  In  other  words,  the  |\n   character in a conditional subpattern has a different meaning. Ignoring\n   white space, consider:\n\n     ^.*? (?(?=a) a | b(*THEN)c )\n\n   If the subject is \"ba\", this pattern does not  match.  Because  .*?  is\n   ungreedy,  it  initially  matches  zero characters. The condition (?=a)\n   then fails, the character \"b\" is matched,  but  \"c\"  is  not.  At  this\n   point,  matching does not backtrack to .*? as might perhaps be expected\n   from the presence of the | character.  The  conditional  subpattern  is\n   part of the single alternative that comprises the whole pattern, and so\n   the match fails. (If there was a backtrack into  .*?,  allowing  it  to\n   match \"b\", the match would succeed.)\n\n   The  verbs just described provide four different \"strengths\" of control\n   when subsequent matching fails. (*THEN) is the weakest, carrying on the\n   match  at  the next alternative. (*PRUNE) comes next, failing the match\n   at the current starting position, but allowing an advance to  the  next\n   character  (for an unanchored pattern). (*SKIP) is similar, except that\n   the advance may be more than one character. (*COMMIT) is the strongest,\n   causing the entire match to fail.\n</code></pre> <p>More than one backtracking verb</p> <pre><code>   If  more  than  one  backtracking verb is present in a pattern, the one\n   that is backtracked onto first acts. For example,  consider  this  pat-\n   tern, where A, B, etc. are complex pattern fragments:\n\n     (A(*COMMIT)B(*THEN)C|ABD)\n\n   If  A matches but B fails, the backtrack to (*COMMIT) causes the entire\n   match to fail. However, if A and B match, but C fails, the backtrack to\n   (*THEN)  causes  the next alternative (ABD) to be tried. This behaviour\n   is consistent, but is not always the same as Perl's. It means  that  if\n   two  or  more backtracking verbs appear in succession, all the the last\n   of them has no effect. Consider this example:\n\n     ...(*COMMIT)(*PRUNE)...\n\n   If there is a matching failure to the right, backtracking onto (*PRUNE)\n   causes  it to be triggered, and its action is taken. There can never be\n   a backtrack onto (*COMMIT).\n</code></pre> <p>Backtracking verbs in repeated groups</p> <pre><code>   PCRE differs from  Perl  in  its  handling  of  backtracking  verbs  in\n   repeated groups. For example, consider:\n\n     /(a(*COMMIT)b)+ac/\n\n   If  the  subject  is  \"abac\",  Perl matches, but PCRE fails because the\n   (*COMMIT) in the second repeat of the group acts.\n</code></pre> <p>Backtracking verbs in assertions</p> <pre><code>   (*FAIL) in an assertion has its normal effect: it forces  an  immediate\n   backtrack.\n\n   (*ACCEPT) in a positive assertion causes the assertion to succeed with-\n   out any further processing. In a negative assertion,  (*ACCEPT)  causes\n   the assertion to fail without any further processing.\n\n   The  other  backtracking verbs are not treated specially if they appear\n   in a positive assertion. In  particular,  (*THEN)  skips  to  the  next\n   alternative  in  the  innermost  enclosing group that has alternations,\n   whether or not this is within the assertion.\n\n   Negative assertions are, however, different, in order  to  ensure  that\n   changing  a  positive  assertion  into a negative assertion changes its\n   result. Backtracking into (*COMMIT), (*SKIP), or (*PRUNE) causes a neg-\n   ative assertion to be true, without considering any further alternative\n   branches in the assertion.  Backtracking into (*THEN) causes it to skip\n   to  the next enclosing alternative within the assertion (the normal be-\n   haviour), but if the assertion  does  not  have  such  an  alternative,\n   (*THEN) behaves like (*PRUNE).\n</code></pre> <p>Backtracking verbs in subroutines</p> <pre><code>   These  behaviours  occur whether or not the subpattern is called recur-\n   sively.  Perl's treatment of subroutines is different in some cases.\n\n   (*FAIL) in a subpattern called as a subroutine has its  normal  effect:\n   it forces an immediate backtrack.\n\n   (*ACCEPT)  in a subpattern called as a subroutine causes the subroutine\n   match to succeed without any further processing. Matching then  contin-\n   ues after the subroutine call.\n\n   (*COMMIT), (*SKIP), and (*PRUNE) in a subpattern called as a subroutine\n   cause the subroutine match to fail.\n\n   (*THEN) skips to the next alternative in the innermost enclosing  group\n   within  the subpattern that has alternatives. If there is no such group\n   within the subpattern, (*THEN) causes the subroutine match to fail.\n</code></pre> <p>SEE ALSO</p> <pre><code>   pcreapi(3), pcrecallout(3),  pcrematching(3),  pcresyntax(3),  pcre(3),\n   pcre16(3), pcre32(3).\n</code></pre> <p>AUTHOR</p> <pre><code>   Philip Hazel\n   University Computing Service\n   Cambridge CB2 3QH, England.\n</code></pre> <p>REVISION</p> <pre><code>   Last updated: 08 January 2014\n   Copyright (c) 1997-2014 University of Cambridge.\n</code></pre>"},{"location":"language-reference-guide/pcre-specifications/pcre-regular-expression-syntax-summary/","title":"Appendix A - PCRE Syntax Summary","text":""},{"location":"language-reference-guide/pcre-specifications/pcre-regular-expression-syntax-summary/#pcre-regular-expression-syntax-summary","title":"PCRE Regular Expression Syntax Summary","text":"<p>The following is a summary of search pattern syntax. PCRESYNTAX(3)              Library Functions Manual              PCRESYNTAX(3)</p> <p>NAME        PCRE - Perl-compatible regular expressions</p> <p>PCRE REGULAR EXPRESSION SYNTAX SUMMARY</p> <pre><code>   The  full syntax and semantics of the regular expressions that are sup-\n   ported by PCRE are described in  the  pcrepattern  documentation.  This\n   document contains a quick-reference summary of the syntax.\n</code></pre> <p>QUOTING</p> <pre><code>     \\x         where x is non-alphanumeric is a literal x\n     \\Q...\\E    treat enclosed characters as literal\n</code></pre> <p>CHARACTERS</p> <pre><code>     \\a         alarm, that is, the BEL character (hex 07)\n     \\cx        \"control-x\", where x is any ASCII character\n     \\e         escape (hex 1B)\n     \\f         form feed (hex 0C)\n     \\n         newline (hex 0A)\n     \\r         carriage return (hex 0D)\n     \\t         tab (hex 09)\n     \\0dd       character with octal code 0dd\n     \\ddd       character with octal code ddd, or backreference\n     \\o{ddd..}  character with octal code ddd..\n     \\xhh       character with hex code hh\n     \\x{hhh..}  character with hex code hhh..\n\n   Note that \\0dd is always an octal code, and that \\8 and \\9 are the lit-\n   eral characters \"8\" and \"9\".\n</code></pre> <p>CHARACTER TYPES</p> <pre><code>     .          any character except newline;\n                  in dotall mode, any character whatsoever\n     \\C         one data unit, even in UTF mode (best avoided)\n     \\d         a decimal digit\n     \\D         a character that is not a decimal digit\n     \\h         a horizontal white space character\n     \\H         a character that is not a horizontal white space character\n     \\N         a character that is not a newline\n     \\p{xx}     a character with the xx property\n     \\P{xx}     a character without the xx property\n     \\R         a newline sequence\n     \\s         a white space character\n     \\S         a character that is not a white space character\n     \\v         a vertical white space character\n     \\V         a character that is not a vertical white space character\n     \\w         a \"word\" character\n     \\W         a \"non-word\" character\n     \\X         a Unicode extended grapheme cluster\n\n   By default, \\d, \\s, and \\w match only ASCII characters, even  in  UTF-8\n   mode  or  in  the 16- bit and 32-bit libraries. However, if locale-spe-\n   cific matching is happening, \\s and \\w may also match  characters  with\n   code  points  in  the range 128-255. If the PCRE_UCP option is set, the\n   behaviour of these escape sequences is changed to use  Unicode  proper-\n   ties and they match many more characters.\n</code></pre> <p>GENERAL CATEGORY PROPERTIES FOR \\p and \\P</p> <pre><code>     C          Other\n     Cc         Control\n     Cf         Format\n     Cn         Unassigned\n     Co         Private use\n     Cs         Surrogate\n\n     L          Letter\n     Ll         Lower case letter\n     Lm         Modifier letter\n     Lo         Other letter\n     Lt         Title case letter\n     Lu         Upper case letter\n     L&amp;         Ll, Lu, or Lt\n\n     M          Mark\n     Mc         Spacing mark\n     Me         Enclosing mark\n     Mn         Non-spacing mark\n\n     N          Number\n     Nd         Decimal number\n     Nl         Letter number\n     No         Other number\n\n     P          Punctuation\n     Pc         Connector punctuation\n     Pd         Dash punctuation\n     Pe         Close punctuation\n     Pf         Final punctuation\n     Pi         Initial punctuation\n     Po         Other punctuation\n     Ps         Open punctuation\n\n     S          Symbol\n     Sc         Currency symbol\n     Sk         Modifier symbol\n     Sm         Mathematical symbol\n     So         Other symbol\n\n     Z          Separator\n     Zl         Line separator\n     Zp         Paragraph separator\n     Zs         Space separator\n</code></pre> <p>PCRE SPECIAL CATEGORY PROPERTIES FOR \\p and \\P</p> <pre><code>     Xan        Alphanumeric: union of properties L and N\n     Xps        POSIX space: property Z or tab, NL, VT, FF, CR\n     Xsp        Perl space: property Z or tab, NL, VT, FF, CR\n     Xuc        Univerally-named character: one that can be\n                  represented by a Universal Character Name\n     Xwd        Perl word: property Xan or underscore\n\n   Perl and POSIX space are now the same. Perl added VT to its space char-\n   acter set at release 5.18 and PCRE changed at release 8.34.\n</code></pre> <p>SCRIPT NAMES FOR \\p AND \\P</p> <pre><code>   Arabic, Armenian, Avestan, Balinese, Bamum, Bassa_Vah, Batak,  Bengali,\n   Bopomofo,  Brahmi,  Braille, Buginese, Buhid, Canadian_Aboriginal, Car-\n   ian, Caucasian_Albanian, Chakma, Cham, Cherokee, Common, Coptic, Cunei-\n   form, Cypriot, Cyrillic, Deseret, Devanagari, Duployan, Egyptian_Hiero-\n   glyphs,  Elbasan,  Ethiopic,  Georgian,  Glagolitic,  Gothic,  Grantha,\n   Greek,  Gujarati,  Gurmukhi,  Han,  Hangul,  Hanunoo, Hebrew, Hiragana,\n   Imperial_Aramaic,    Inherited,     Inscriptional_Pahlavi,     Inscrip-\n   tional_Parthian,   Javanese,   Kaithi,   Kannada,  Katakana,  Kayah_Li,\n   Kharoshthi, Khmer, Khojki, Khudawadi, Lao, Latin, Lepcha,  Limbu,  Lin-\n   ear_A,  Linear_B,  Lisu,  Lycian, Lydian, Mahajani, Malayalam, Mandaic,\n   Manichaean,     Meetei_Mayek,     Mende_Kikakui,      Meroitic_Cursive,\n   Meroitic_Hieroglyphs,  Miao,  Modi, Mongolian, Mro, Myanmar, Nabataean,\n   New_Tai_Lue,  Nko,  Ogham,  Ol_Chiki,  Old_Italic,   Old_North_Arabian,\n   Old_Permic, Old_Persian, Old_South_Arabian, Old_Turkic, Oriya, Osmanya,\n   Pahawh_Hmong,    Palmyrene,    Pau_Cin_Hau,    Phags_Pa,    Phoenician,\n   Psalter_Pahlavi,  Rejang,  Runic,  Samaritan, Saurashtra, Sharada, Sha-\n   vian, Siddham, Sinhala, Sora_Sompeng, Sundanese, Syloti_Nagri,  Syriac,\n   Tagalog,  Tagbanwa,  Tai_Le,  Tai_Tham, Tai_Viet, Takri, Tamil, Telugu,\n   Thaana, Thai, Tibetan, Tifinagh, Tirhuta, Ugaritic,  Vai,  Warang_Citi,\n   Yi.\n</code></pre> <p>CHARACTER CLASSES</p> <pre><code>     [...]       positive character class\n     [^...]      negative character class\n     [x-y]       range (can be used for hex characters)\n     [[:xxx:]]   positive POSIX named set\n     [[:^xxx:]]  negative POSIX named set\n\n     alnum       alphanumeric\n     alpha       alphabetic\n     ascii       0-127\n     blank       space or tab\n     cntrl       control character\n     digit       decimal digit\n     graph       printing, excluding space\n     lower       lower case letter\n     print       printing, including space\n     punct       printing, excluding alphanumeric\n     space       white space\n     upper       upper case letter\n     word        same as \\w\n     xdigit      hexadecimal digit\n\n   In  PCRE,  POSIX character set names recognize only ASCII characters by\n   default, but some of them use Unicode properties if  PCRE_UCP  is  set.\n   You can use \\Q...\\E inside a character class.\n</code></pre> <p>QUANTIFIERS</p> <pre><code>     ?           0 or 1, greedy\n     ?+          0 or 1, possessive\n     ??          0 or 1, lazy\n     *           0 or more, greedy\n     *+          0 or more, possessive\n     *?          0 or more, lazy\n     +           1 or more, greedy\n     ++          1 or more, possessive\n     +?          1 or more, lazy\n     {n}         exactly n\n     {n,m}       at least n, no more than m, greedy\n     {n,m}+      at least n, no more than m, possessive\n     {n,m}?      at least n, no more than m, lazy\n     {n,}        n or more, greedy\n     {n,}+       n or more, possessive\n     {n,}?       n or more, lazy\n</code></pre> <p>ANCHORS AND SIMPLE ASSERTIONS</p> <pre><code>     \\b          word boundary\n     \\B          not a word boundary\n     ^           start of subject\n                  also after internal newline in multiline mode\n     \\A          start of subject\n     $           end of subject\n                  also before newline at end of subject\n                  also before internal newline in multiline mode\n     \\Z          end of subject\n                  also before newline at end of subject\n     \\z          end of subject\n     \\G          first matching position in subject\n</code></pre> <p>MATCH POINT RESET</p> <pre><code>     \\K          reset start of match\n\n   \\K is honoured in positive assertions, but ignored in negative ones.\n</code></pre> <p>ALTERNATION</p> <pre><code>     expr|expr|expr...\n</code></pre> <p>CAPTURING</p> <pre><code>     (...)           capturing group\n     (?&lt;name&gt;...)    named capturing group (Perl)\n     (?'name'...)    named capturing group (Perl)\n     (?P&lt;name&gt;...)   named capturing group (Python)\n     (?:...)         non-capturing group\n     (?|...)         non-capturing group; reset group numbers for\n                      capturing groups in each alternative\n</code></pre> <p>ATOMIC GROUPS</p> <pre><code>     (?&gt;...)         atomic, non-capturing group\n</code></pre> <p>COMMENT</p> <pre><code>     (?#....)        comment (not nestable)\n</code></pre> <p>OPTION SETTING</p> <pre><code>     (?i)            caseless\n     (?J)            allow duplicate names\n     (?m)            multiline\n     (?s)            single line (dotall)\n     (?U)            default ungreedy (lazy)\n     (?x)            extended (ignore white space)\n     (?-...)         unset option(s)\n\n   The  following  are  recognized  only at the very start of a pattern or\n   after one of the newline or \\R options with similar syntax.  More  than\n   one of them may appear.\n\n     (*LIMIT_MATCH=d) set the match limit to d (decimal number)\n     (*LIMIT_RECURSION=d) set the recursion limit to d (decimal number)\n     (*NO_AUTO_POSSESS) no auto-possessification (PCRE_NO_AUTO_POSSESS)\n     (*NO_START_OPT) no start-match optimization (PCRE_NO_START_OPTIMIZE)\n     (*UTF8)         set UTF-8 mode: 8-bit library (PCRE_UTF8)\n     (*UTF16)        set UTF-16 mode: 16-bit library (PCRE_UTF16)\n     (*UTF32)        set UTF-32 mode: 32-bit library (PCRE_UTF32)\n     (*UTF)          set appropriate UTF mode for the library in use\n     (*UCP)          set PCRE_UCP (use Unicode properties for \\d etc)\n\n   Note  that LIMIT_MATCH and LIMIT_RECURSION can only reduce the value of\n   the limits set by the caller of pcre_exec(), not increase them.\n</code></pre> <p>NEWLINE CONVENTION</p> <pre><code>   These are recognized only at the very start of  the  pattern  or  after\n   option settings with a similar syntax.\n\n     (*CR)           carriage return only\n     (*LF)           linefeed only\n     (*CRLF)         carriage return followed by linefeed\n     (*ANYCRLF)      all three of the above\n     (*ANY)          any Unicode newline sequence\n</code></pre> <p>WHAT \\R MATCHES</p> <pre><code>   These  are  recognized  only  at the very start of the pattern or after\n   option setting with a similar syntax.\n\n     (*BSR_ANYCRLF)  CR, LF, or CRLF\n     (*BSR_UNICODE)  any Unicode newline sequence\n</code></pre> <p>LOOKAHEAD AND LOOKBEHIND ASSERTIONS</p> <pre><code>     (?=...)         positive look ahead\n     (?!...)         negative look ahead\n     (?&lt;=...)        positive look behind\n     (?&lt;!...)        negative look behind\n\n   Each top-level branch of a look behind must be of a fixed length.\n</code></pre> <p>BACKREFERENCES</p> <pre><code>     \\n              reference by number (can be ambiguous)\n     \\gn             reference by number\n     \\g{n}           reference by number\n     \\g{-n}          relative reference by number\n     \\k&lt;name&gt;        reference by name (Perl)\n     \\k'name'        reference by name (Perl)\n     \\g{name}        reference by name (Perl)\n     \\k{name}        reference by name (.NET)\n     (?P=name)       reference by name (Python)\n</code></pre> <p>SUBROUTINE REFERENCES (POSSIBLY RECURSIVE)</p> <pre><code>     (?R)            recurse whole pattern\n     (?n)            call subpattern by absolute number\n     (?+n)           call subpattern by relative number\n     (?-n)           call subpattern by relative number\n     (?&amp;name)        call subpattern by name (Perl)\n     (?P&gt;name)       call subpattern by name (Python)\n     \\g&lt;name&gt;        call subpattern by name (Oniguruma)\n     \\g'name'        call subpattern by name (Oniguruma)\n     \\g&lt;n&gt;           call subpattern by absolute number (Oniguruma)\n     \\g'n'           call subpattern by absolute number (Oniguruma)\n     \\g&lt;+n&gt;          call subpattern by relative number (PCRE extension)\n     \\g'+n'          call subpattern by relative number (PCRE extension)\n     \\g&lt;-n&gt;          call subpattern by relative number (PCRE extension)\n     \\g'-n'          call subpattern by relative number (PCRE extension)\n</code></pre> <p>CONDITIONAL PATTERNS</p> <pre><code>     (?(condition)yes-pattern)\n     (?(condition)yes-pattern|no-pattern)\n\n     (?(n)...        absolute reference condition\n     (?(+n)...       relative reference condition\n     (?(-n)...       relative reference condition\n     (?(&lt;name&gt;)...   named reference condition (Perl)\n     (?('name')...   named reference condition (Perl)\n     (?(name)...     named reference condition (PCRE)\n     (?(R)...        overall recursion condition\n     (?(Rn)...       specific group recursion condition\n     (?(R&amp;name)...   specific recursion condition\n     (?(DEFINE)...   define subpattern for reference\n     (?(assert)...   assertion condition\n</code></pre> <p>BACKTRACKING CONTROL</p> <pre><code>   The following act immediately they are reached:\n\n     (*ACCEPT)       force successful match\n     (*FAIL)         force backtrack; synonym (*F)\n     (*MARK:NAME)    set name to be passed back; synonym (*:NAME)\n\n   The following act only when a subsequent match failure causes  a  back-\n   track to reach them. They all force a match failure, but they differ in\n   what happens afterwards. Those that advance the start-of-match point do\n   so only if the pattern is not anchored.\n\n     (*COMMIT)       overall failure, no advance of starting point\n     (*PRUNE)        advance to next starting character\n     (*PRUNE:NAME)   equivalent to (*MARK:NAME)(*PRUNE)\n     (*SKIP)         advance to current matching position\n     (*SKIP:NAME)    advance to position corresponding to an earlier\n                     (*MARK:NAME); if not found, the (*SKIP) is ignored\n     (*THEN)         local failure, backtrack to next alternation\n     (*THEN:NAME)    equivalent to (*MARK:NAME)(*THEN)\n</code></pre> <p>CALLOUTS</p> <pre><code>     (?C)      callout\n     (?Cn)     callout with data n\n</code></pre> <p>SEE ALSO</p> <pre><code>   pcrepattern(3), pcreapi(3), pcrecallout(3), pcrematching(3), pcre(3).\n</code></pre> <p>AUTHOR</p> <pre><code>   Philip Hazel\n   University Computing Service\n   Cambridge CB2 3QH, England.\n</code></pre> <p>REVISION</p> <pre><code>   Last updated: 08 January 2014\n   Copyright (c) 1997-2014 University of Cambridge.\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/circular/","title":"Circular","text":"Circular R\u2190X\u25cbY <p><code>Y</code> must be numeric.  <code>X</code> must be an integer in the range <code>\u00af12 \u2264 X \u2264 12</code>. <code>R</code> is numeric.</p> <p><code>X</code> determines which of a family of trigonometric, hyperbolic, Pythagorean  and complex functions to apply to <code>Y</code>, from the following table. Note that when <code>Y</code> is complex, <code>a</code> and  <code>b</code> are used to represent its real and imaginary parts, while <code>\u03b8</code> represents its phase.</p> (-X) \u25cb Y X X \u25cb Y <code>(1-Y*2)*.5</code> <code>0</code> <code>(1-Y*2)*.5</code> <code>Arcsin Y</code> <code>1</code> <code>Sine Y</code> <code>Arccos Y</code> <code>2</code> <code>Cosine Y</code> <code>Arctan Y</code> <code>3</code> <code>Tangent Y</code> <code>Y=\u00af1:0 Y\u2260\u00af1:(Y+1)\u00d7((Y-1)\u00f7Y+1)*0.5</code> <code>4</code> <code>(1+Y*2)*.5</code> <code>Arcsinh Y</code> <code>5</code> <code>Sinh Y</code> <code>Arccosh Y</code> <code>6</code> <code>Cosh Y</code> <code>Arctanh Y</code> <code>7</code> <code>Tanh Y</code> <code>-8\u25cbY</code> <code>8</code> <code>(-1+Y*2)*0.5</code> <code>Y</code> <code>9</code> <code>a</code> <code>+Y</code> <code>10</code> <code>|Y</code> <code>Y\u00d70J1</code> <code>11</code> <code>b</code> <code>*Y\u00d70J1</code> <code>12</code> <code>\u03b8</code>"},{"location":"language-reference-guide/primitive-functions/circular/#examples","title":"Examples","text":"<pre><code>      0 \u00af1 \u25cb 1\n0 1.570796327\n\n      1\u25cb(PI\u2190\u25cb1)\u00f72 3 4\n1 0.8660254038  0.7071067812\n\n      2\u25cbPI\u00f73\n0.5\n</code></pre> <pre><code>\n      9 11\u25cb3.5J\u00af1.2\n3.5 \u00af1.2\n\n      9 11\u2218.\u25cb3.5J\u00af1.2 2J3 3J4\n 3.5 2 3\n\u00af1.2 3 4\n\n      \u00af4\u25cb\u00af1\n0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/mixed-functions/","title":"Mixed Functions","text":"<p>Mixed rank functions and special symbols are summarised in Table 1. For convenience, they are sub-divided into five classes:</p> <p>Mixed rank functions and special symbols</p> Structural These functions change the structure of the arguments in some way. Selection These functions select elements from an argument. Selector These functions identify specific elements by a Boolean map or by an ordered set of indices. Miscellaneous These functions transform arguments in some way, or provide information about the arguments. Special These symbols have special properties. <p>In general, the structure of the result of a mixed primitive function is different from that of its arguments.</p> <p>Scalar extension may apply to some, but not all, dyadic mixed functions.</p> <p>Mixed primitive functions are not pervasive. The function is applied to elements of the arguments, not necessarily independently.</p>"},{"location":"language-reference-guide/primitive-functions/mixed-functions/#examples","title":"Examples","text":"<pre><code>      'CAT' 'DOG' 'MOUSE'\u2373\u2282'DOG'\n2 \n      3\u2191 1 'TWO' 3 'FOUR'\n1  TWO  3\n</code></pre> <p>In the following tables, note that:</p> <ul> <li><code>[]</code> Implies axis specification is optional</li> <li>$  This function is in another class</li> </ul> <p>Structural Primitive Functions</p> Symbol Monadic Dyadic <code>\u2374</code> $ Reshape <code>,</code> Ravel  <code>[]</code> Catenate/Laminate <code>[]</code> <code>\u236a</code> Table Catenate First / Laminate  <code>[]</code> <code>\u233d</code> Reverse  <code>[]</code> Rotate  <code>[]</code> <code>\u2296</code> Reverse First  <code>[]</code> Rotate First  <code>[]</code> <code>\u2349</code> Transpose Transpose <code>\u2191</code> Mix / Disclose  <code>[]</code> $ <code>\u2193</code> Split  <code>[]</code> $ <code>\u2282</code> Enclose  <code>[]</code> Partitioned Enclose  <code>[]</code> <code>\u2286</code> Nest Partition  <code>[]</code> <code>\u220a</code> Enlist (See Type ) $ <p>Selection Primitive Functions</p> Symbol Monadic Dyadic <code>\u2283</code> Disclose  / Mix Pick <code>\u2191</code> $ Take  <code>[]</code> <code>\u2193</code> $ Drop  <code>[]</code> <code>/</code> Replicate  <code>[]</code> <code>\u233f</code> Replicate First  <code>[]</code> <code>\\</code> Expand  <code>[]</code> <code>\u2340</code> Expand First  <code>[]</code> <code>~</code> $ Without (Excluding) <code>\u2229</code> Intersection <code>\u222a</code> Unique Union <code>\u22a3</code> Same Left <code>\u22a2</code> Same Right <code>\u2337</code> Materialise Index <code>\u2260</code> Unique Mask <p>Selector Primitive Functions</p> Symbol Monadic Dyadic <code>\u2373</code> Index Generator Index Of <code>\u2378</code> Where Interval Index <code>\u220a</code> $ Membership <code>\u234b</code> Grade Up Grade Up <code>\u2352</code> Grade Down Grade Down <code>?</code> $ Deal <code>\u2377</code> Find <p>Miscellaneous Primitive Functions</p> Symbol Monadic Dyadic <code>\u2374</code> Shape $ <code>\u2261</code> Depth Match <code>\u2262</code> Tally Not Match <code>\u234e</code> Execute Execute <code>\u2355</code> Format Format <code>\u22a5</code> Decode (Base) <code>\u22a4</code> Encode (Representation) <code>\u2339</code> Matrix Inverse Matrix Divide <p>Special Syntax</p> Symbol Monadic Dyadic <code>\u2192</code> Abort <code>\u2192</code> Branch <code>\u2190</code> Assignment <code>[I]\u2190</code> Assignment(Indexed) <code>(I)\u2190</code> Assignment(Selective) <code>[]</code> Indexing"},{"location":"language-reference-guide/primitive-functions/notes/","title":"Notes","text":""},{"location":"language-reference-guide/primitive-functions/notes/#conformability","title":"Conformability","text":"<p>The arguments of a dyadic function are said to be CONFORMABLE if the shape of each argument meets the requirements of the function, possibly after scalar extension.</p>"},{"location":"language-reference-guide/primitive-functions/notes/#fill-elements","title":"Fill Elements","text":"<p>Some primitive functions may include fill elements in their result.  The fill element for an array is the enclosed type of the disclose of the array (<code>\u2282\u220a\u2283Y</code> for array <code>Y</code> with <code>\u2395ML\u21900</code>).  The Type function (<code>\u220a</code> with <code>\u2395ml\u21900</code>) replaces a numeric value with zero and a character value with <code>' '</code>.</p> <p>The Disclose function (<code>\u2283</code>) returns the first item of an array.  If the array is empty, <code>\u2283Y</code> is the PROTOTYPE of <code>Y</code>.  The prototype is the type of the first element of the original array.</p> <p>Primitive functions which may return an array including fill elements are Expand (<code>\\</code> or <code>\u2340</code>), Replicate (<code>/</code> or <code>\u233f</code>), Reshape (<code>\u2374</code>) and Take (<code>\u2191</code>).</p>"},{"location":"language-reference-guide/primitive-functions/notes/#examples","title":"Examples","text":"<pre><code>\n      ML\u21900\n      \u220a\u23735\n0 0 0 0 0\n\n      \u220a\u2283(\u23733)('ABC')\n0 0 0\n\n      \u2282\u220a\u2283(\u23733)('ABC')\n 0 0 0\n\n      \u2282\u220a\u2283\u2282(\u23733)('ABC')\n  0 0 0\n\n      A\u2190'ABC' (1 2 3)\n      A\u21900\u2374A\n      \u2282\u220a\u2283A\n\n      ' '=\u2282\u220a\u2283A\n 1 1 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/notes/#axis-operator","title":"Axis Operator","text":"<p>The axis operator may be applied to all scalar dyadic primitive functions and certain mixed primitive functions.  An integer axis identifies a specific axis along which the function is to be applied to one or both of its arguments.  If the primitive function is to be applied without an axis specification, a default axis is implied, either the first or last.</p>"},{"location":"language-reference-guide/primitive-functions/notes/#example","title":"Example","text":"<pre><code>      1 0 1/[1] 3 2\u2374\u23736\n1 2\n5 6\n</code></pre> <pre><code>      1 2 3+[2]2 3\u237410 20 30\n11 22 33\n11 22 33\n</code></pre> <p>Sometimes the axis value is fractional, indicating that a new axis or axes are to be created between the axes identified by the lower and upper integer bounds of the value (either of which might not exist).</p>"},{"location":"language-reference-guide/primitive-functions/notes/#example_1","title":"Example","text":"<pre><code>      'NAMES',[0.5]'='\nNAMES\n=====\n</code></pre> <p><code>\u2395IO</code> is an implicit argument of an axis specification.</p>"},{"location":"language-reference-guide/primitive-functions/notes/#migration-level","title":"Migration Level","text":"<p><code>\u2395ML</code> determines the degree of migration of the Dyalog APL language towards IBM's APL2. Unless otherwise stated, the manual assumes <code>\u2395ML</code> has a value of 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-table/","title":"Primitive Functions","text":"Glyph Glyph Name Monadic Function Dyadic Function <code>+</code> Plus Sign Conjugate Plus <code>^</code> And Lowest Common Multiple <code>!</code> Exclamation Mark Factorial Binomial <code>\u2308</code> Upstile Ceiling Maximum <code>\u25cb</code> Circle Pi Times Circular <code>?</code> Question Mark Roll Deal <code>\u22a5</code> Up Tack Symbol Decode <code>L</code> Mix <code>\u00d7</code> Times Sign Direction Signum Times <code>\u00f7</code> Divide Sign Reciprocal Divide <code>\u2193</code> Down Arrow Drop <code>\u2282</code> Left Shoe Enclose <code>\u22a4</code> Down Tack Symbol Encode <code>=</code> Equal Sign Equal <code>~</code> Tilde Not Without <code>\u2340</code> Slope Bar Expand First <code>*</code> Star Exponential Power <code>\u2377</code> Epsilon Underbar Find <code>\u230a</code> Downstile Floor Minimum <code>\u2355</code> Thorn Symbol Format Monadic Format Dyadic <code>\u2352</code> Grade Down Grade Down Monadic Grade Down Dyadic <code>\u234b</code> Grade Up Grade Up Monadic Grade Up Dyadic <code>\u2265</code> Greater Than Or Equal To Sign Greater Or Equal <code>\u22a2</code> Right Tack Identity Right <code>\u2373</code> Iota Index Generator Index Of <code>\u2337</code> Squad Symbol Materialise Index <code>\u2229</code> Up Shoe Intersection <code>\u2378</code> Iota Underbar Where Interval Index <code>\u22a3</code> Left Tack Same Left <code>\u2264</code> Less Than Or Equal To Sign Less Or Equal <code>\u235f</code> Log Natural Logarithm Logarithm <code>|</code> Stile Magnitude Residue <code>\u2261</code> Equal Underbar Sign Match <code>\u2339</code> Domino Matrix Inverse Matrix Divide <code>\u220a</code> Epsilon Membership <code>-</code> Minus Sign Negative Subtract <code>\u2372</code> Logical NAND Symbol Nand <code>\u2286</code> Left Shoe Underbar Nest <code>\u2371</code> Logical NOR Symbol Nor <code>\u2260</code> Not Equal To Unique Mask Not Equal <code>\u2262</code> Equal Underbar Slash Tally Not Match <code>\u2228</code> Logical Or Or Greatest Common Divisor <code>\u2283</code> Right Shoe Pick <code>,</code> Comma Ravel <code>\u2374</code> Rho Shape Reshape <code>\u236a</code> Comma Bar Table <code>\u2191</code> Up Arrow Take <code>\u2349</code> Circle Backslash Transpose Monadic Transpose Dyadic <code>\u222a</code> Set Union Unique Union"},{"location":"language-reference-guide/primitive-functions/scalar-functions/","title":"Scalar Functions","text":"<p>There is a class of primitive functions termed scalar functions This class is identified in Table 1 below. Scalar functions are pervasive, i.e. their properties apply at all levels of nesting.  Scalar functions have the following properties:</p> <p>Scalar Primitive Functions</p> Symbol Monadic Dyadic <code>+</code> Conjugate Plus (Add) <code>-</code> Negative Minus (Subtract) <code>\u00d7</code> Direction (Signum) Times (Multiply) <code>\u00f7</code> Reciproca l Divide <code>|</code> Magnitude Residue <code>\u230a</code> Floor Minimum <code>\u2308</code> Ceiling Maximum <code>*</code> Exponential Power <code>\u235f</code> Natural Logarithm Logarithm <code>\u25cb</code> Pi Times Circular <code>!</code> Factorial Binomial <code>~</code> Not $ <code>?</code> Roll $ <code>\u220a</code> Type (See Enlist ) $ <code>^</code> And <code>\u2228</code> Or <code>\u2372</code> Nand <code>\u2371</code> Nor <code>&lt;</code> Less <code>\u2264</code> Less Or Equal <code>=</code> Equal <code>\u2265</code> Greater Or Equal <code>&gt;</code> Greater <code>\u2260</code> Not Equal $ Dyadic form is not scalar"},{"location":"language-reference-guide/primitive-functions/scalar-functions/#monadic-scalar-functions","title":"Monadic Scalar Functions","text":"<ul> <li>The function is applied independently to each simple scalar in its argument.</li> <li>The function produces a result with a structure identical to its argument.</li> <li>When applied to an empty argument, the function produces an empty result.  With the exception of <code>+</code> and <code>\u220a</code>, the type of this result depends on the function, not on the type of the argument. By definition + and <code>\u220a</code> return a result of the same type as their arguments.</li> </ul>"},{"location":"language-reference-guide/primitive-functions/scalar-functions/#example","title":"Example","text":"<pre><code>      \u00f72 (1 4)\n0.5  1 0.25\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-functions/#dyadic-scalar-functions","title":"Dyadic Scalar Functions","text":"<ul> <li>The function is applied independently to corresponding pairs of simple scalars in its arguments.</li> <li>A simple scalar will be replicated to conform to the structure of the other argument.  If a simple scalar in the structure of an argument corresponds to a non-simple scalar in the other argument, then the function is applied between the simple scalar and the items of the non-simple scalar.  Replication of simple scalars is called scalar extension.</li> <li>A simple unit is treated as a scalar for scalar extension purposes.  A unit is a single element array of any rank.  If both arguments are simple units, the argument with lower rank is extended.</li> <li>The function produces a result with a structure identical to that of its arguments (after scalar extensions).</li> <li>If applied between empty arguments, the function produces a composite structure resulting from any scalar extensions, with type appropriate to the particular function. (All scalar dyadic functions return a result of numeric type.)</li> </ul>"},{"location":"language-reference-guide/primitive-functions/scalar-functions/#examples","title":"Examples","text":"<pre><code>      2 3 4 + 1 2 3\n3 5 7\n\n      2 (3 4) + 1 (2 3)\n3  5 7\n\n      (1 2) 3 + 4 (5 6)\n 5 6  8 9\n\n      10 \u00d7 2 (3 4)\n20  30 40\n\n      2 4 = 2 (4 6)\n1  1 0\n\n      (1 1\u23745) - 1 (2 3)\n4  3 2\n\n      1\u2191''+\u23730\n0\n       1\u2191(0\u2374\u2282' ' (0 0))\u00d7''\n0  0 0\n</code></pre> <p>Note:  The Axis operator applies to all scalar dyadic functions.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/abort/","title":"Abort","text":"Abort \u2192 <p>This is a special case of the Branch function used in the niladic sense.  If it occurs in a statement it must be the only symbol in an expression or the only symbol forming an expression in a text string to be executed by <code>\u234e</code>.  It clears the most recently suspended statement and all of its pendent statements from the state indicator.</p> <p>The Abort function has no explicit result.  The function is not in the function domain of operators.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/abort/#examples","title":"Examples","text":"<pre><code>      \u2207 F\n[1]    'F[1]'\n[2]    G\n[3]    'F[3]'\n      \u2207\n\n      \u2207 G\n[1]    'G[1]'\n[2]    \u2192\n[3]    'G[3]'\n      \u2207\n\n      F\nF[1]\nG[1]\n\n      \u2395VR'VALIDATE'\n     \u2207 VALIDATE\n [1]   \u2192(12=1\u2191\u2395AI)\u23740 \u22c4 'ACCOUNT NOT AUTHORISED' \u22c4 \u2192\n     \u2207\n\n      VALIDATE\nACCOUNT NOT AUTHORISED\n\n      1\u2191\u2395AI\n52\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/branch/","title":"Branch","text":"Branch \u2192Y <p><code>Y</code> may be a scalar or vector which, if not empty, has a simple numeric scalar as its first element.  The function has no explicit result.  It is used to modify the normal sequence of execution of expressions or to resume execution after a statement has been interrupted. Branch is not in the function domain of operators.</p> <p>The following distinct usages of the branch function occur:</p> Entered in a Statement in a Defined Function Entered in Immediate Execution Mode <code>\u2192LINE</code> Continue with the specific line Restart execution at the specific line of the most recently suspended function <code>\u2192\u23730</code> Continue with the next expression No effect <p>In a defined function, if <code>Y</code> is non-empty then the first element in <code>Y</code> specifies a statement line in the defined function to be executed next.  If the line does not exist, then execution of the function is terminated.  For this purpose, line 0 does not exist.  (Note that statement line numbers are independent of the index origin <code>\u2395IO</code>).</p> <p>If <code>Y</code> is empty, the branch function has no effect.  The next expression is executed on the same line, if any, or on the next line if not.  If there is no following line, the function is terminated.</p> <p>The <code>:GoTo</code> statement may be used in place of Branch in a defined function.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/branch/#example","title":"Example","text":"<pre><code>     \u2207 TEST\n[1]    1\n[2]    \u21924\n[3]    3\n[4]    4\n     \u2207\n\n      TEST\n1\n4\n</code></pre> <p>In general it is better to branch to a LABEL than to a line number.  A label occurs in a statement followed by a colon and is assigned the value of the statement line number when the function is defined.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/branch/#example_1","title":"Example","text":"<pre><code>     \u2207 TEST\n[1]    1\n[2]    \u2192FOUR\n[3]    3\n[4]   FOUR:4\n     \u2207\n\n</code></pre> <p>The previous examples illustrate unconditional branching. There are numerous APL idioms which result in conditional branching. Some popular idioms are identified in the following table:</p> Branch Expression Comment <code>\u2192TEST/L1</code> Branches to label <code>L1</code> if <code>TEST</code> results in 1 but not if <code>TEST</code> results in 0. <code>\u2192TEST\u2374L1</code> Similar to above. <code>\u2192TEST\u2191L1</code> Similar to above. <code>\u2192L1\u2374\u2368TEST</code> Similar to above. <code>\u2192L1\u2308\u2373TEST</code> Similar to above but only if <code>\u2395IO\u2190\u21921</code> . <code>\u2192L1\u00d7\u2373TEST</code> Similar to above but only if <code>\u2395IO\u2190\u21921</code> . <code>\u2192(L1,L2,L3)[N]</code> Unconditional branch to a selected label. <code>\u2192(T1,T2,T3)/L1,L2,L3</code> Branches to the first selected label dependent on tests <code>T1</code> , <code>T2</code> , <code>T3</code> . If all tests result in 0, there is no branch. <code>\u2192N\u233dL1,L2,L3</code> Unconditional branch to the first label after rotation. <p>A branch expression may occur within a statement including <code>\u22c4</code> separators:</p> <pre><code>[5]   \u2192NEXT\u2374\u2368TEST \u22c4 A\u2190A+1 \u22c4 \u2192END\n[6]  NEXT:\n</code></pre> <p>In this example, the expressions <code>'A\u2190A+1'</code> and <code>'\u2192END'</code> are executed only if <code>TEST</code> returns the value 1.  Otherwise control branches to label <code>NEXT</code>.</p> <p>In immediate execution mode, the branch function permits execution to be continued within the most recently suspended function, if any, in the state indicator.  If the state indicator is empty, or if the argument <code>Y</code> is the empty vector, the branch expression has no effect.  If a statement line is specified which does not exist, the function is terminated.  Otherwise, execution is restarted from the beginning of the specified statement line in the most recently suspended function.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/branch/#example_2","title":"Example","text":"<pre><code>     \u2207 F\n[1]   1\n[2]   2\n[3]   3\n     \u2207\n\n      2 \u2395STOP'F'\n      F\n1\n\nF[2]\n      )SI\n#.F[2]*\n      \u21922\n2\n3\n</code></pre> <p>The system constant <code>\u2395LC</code> returns a vector of the line numbers of statement lines in the state indicator, starting with that in the most recently suspended function.  It is convenient to restart execution in a suspended state by the expression:</p> <pre><code>      \u2192\u2395LC\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/decode/","title":"Decode","text":"Decode R\u2190X\u22a5Y <p><code>Y</code> must be a simple numeric array.  <code>X</code> must be a simple numeric array.  <code>R</code> is the numeric array which results from the evaluation of <code>Y</code> in the number system with radix <code>X</code>.</p> <p><code>X</code> and <code>Y</code> are conformable if the length of the last axis of <code>X</code> is the same as the length of the first axis of <code>Y</code>.  A scalar or 1-element vector is extended to a vector of the required length.  If the last axis of <code>X</code> or the first axis of <code>Y</code> has a length of 1, the array is extended along that axis to conform with the other argument.</p> <p>The shape of <code>R</code> is the catenation of the shape of <code>X</code> less the last dimension with the shape of <code>Y</code> less the first dimension.  That is:</p> <pre><code>      \u2374R \u2190\u2192 (\u00af1\u2193\u2374X),1\u2193\u2374Y\n</code></pre> <p>For vector arguments, each element of <code>X</code> defines the ratio between the units for corresponding pairs of elements in <code>Y</code>.  The first element of <code>X</code> has no effect on the result.</p> <p>This function is also known as Base Value.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/decode/#examples","title":"Examples","text":"<pre><code>      60 60\u22a53 13\n193\n\n      0 60\u22a53 13\n193\n\n      60\u22a53 13\n193\n\n      2\u22a51 0 1 0\n10\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/decode/#polynomial-evaluation","title":"Polynomial Evaluation","text":"<p>If <code>X</code> is a scalar and <code>Y</code> a vector of length n, decode evaluates the polynomial(Index origin 1):</p> <p>Y [ 1 ]</p> <p>X</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/decode/#n","title":"n","text":"<p>1</p> <p>+ Y [ 2 ]</p> <p>X</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/decode/#n_1","title":"n","text":"<p>2</p> <p>+ ... + Y [ n ]</p> <p>X</p> <p>0</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/decode/#examples_1","title":"Examples","text":"<pre><code>      2\u22a51 2 3 4\n26\n      3\u22a51 2 3 4\n58\n      1j1\u22a51 2 3 4\n5J9\n</code></pre> <p>For higher-rank array arguments, each of the vectors along the last axis of <code>X</code> is taken as the radix vector for each of the vectors along the first axis of <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/decode/#examples_2","title":"Examples","text":"<pre><code>      M\n0 0 0 0 1 1 1 1\n0 0 1 1 0 0 1 1\n0 1 0 1 0 1 0 1\n\n      A\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n\n      A\u22a5M\n0 1 1 2  1  2  2  3\n0 1 2 3  4  5  6  7\n0 1 3 4  9 10 12 13\n0 1 4 5 16 17 20 21\n</code></pre> <p>Scalar extension may be applied:</p> <pre><code>      2\u22a5M\n0 1 2 3 4 5 6 7\n</code></pre> <p>Extension along a unit axis may be applied:</p> <pre><code>      +A\u21902 1\u23742 10\n 2\n10\n      A\u22a5M\n0 1  2  3   4   5   6   7\n0 1 10 11 100 101 110 111\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/encode/","title":"Encode","text":"Encode R\u2190X\u22a4Y <p><code>Y</code> must be a simple numeric array.  <code>X</code> must be a simple numeric array.  <code>R</code> is the numeric array which results from the representation of <code>Y</code> in the number system defined by <code>X</code>.</p> <p>The shape of <code>R</code> is <code>(\u2374X),\u2374Y</code> (the catenation of the shapes of <code>X</code> and <code>Y</code>).</p> <p>If <code>X</code> is a vector or a scalar, the result for each element of <code>Y</code> is the value of the element expressed in the number system defined by radix <code>X</code>.  If <code>Y</code> is greater than can be expressed in the number system, the result is equal to the representation of the residue <code>(\u00d7/X)|Y</code>.  If the first element of <code>X</code> is 0, the value will be fully represented.</p> <p>This function is also known as Representation.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/encode/#examples","title":"Examples","text":"<pre><code>      10\u22a45 15 125\n5 5 5\n\n      0 10\u22a45 15 125\n0 1 12\n5 5  5\n</code></pre> <p>If <code>X</code> is a higher-rank array, each of the vectors along the first axis of <code>X</code> is used as the radix vector for each element of <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/encode/#examples_1","title":"Examples","text":"<pre><code>      A\n2 0  0\n2 0  0\n2 0  0\n2 0  0\n2 8  0\n2 8  0\n2 8 16\n2 8 16\n\n\n</code></pre> <p>This example shows binary, octal and hexadecimal representations of the decimal number 75.</p> <pre><code>      A\u22a475\n0 0  0\n1 0  0\n0 0  0\n0 0  0\n1 0  0\n0 1  0\n1 1  4\n1 3 11\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/encode/#examples_2","title":"Examples","text":"<pre><code>      0 1\u22a41.25 10.5\n1    10\n0.25  0.5\n\n      4 13\u22a413?52\n 3 1 0  2 3 2 0 1  3 1 2 3 1\n12 2 4 12 1 7 6 3 10 1 0 3 8\n</code></pre> <p><code>\u2395IO</code> is not an implicit argument of encode.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/execute/","title":"Execute","text":"Execute R\u2190{X}\u234eY <p><code>Y</code> must be a simple character scalar or vector containing an APL expression to be executed. The expression may contain one or more sub-expressions separated by <code>\u22c4</code> (Diamond) characters.</p> <p>If the result of the expression is used or is assigned to a name,  <code>R</code> is the result (if any) of the last-executed sub-expression and the non-shy results of all preceding expressions (that are not assigned within the expression) are displayed. Otherwise the unassigned non-shy results of all of the sub-expressions are displayed.</p> <p>If the expression is an empty vector or a vector containing only blanks or one that does not produce a result, then <code>\u234eY</code> has no value and using or assigning it to a name will generate <code>VALUE ERROR</code>.</p> <p>If <code>Y</code> contains a branch expression, the branch is effected in the environment from which the Execute was invoked, and <code>\u234eY</code> does not return.</p> <p>If specified, <code>X</code> must be a namespace reference or a simple character scalar or vector representing the name of a namespace in which the expression is to be executed. If <code>X</code> is omitted or is an empty character vector, the expression is executed in the current space.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/execute/#examples","title":"Examples","text":"<pre><code>\n      \u234e'2+2'\n4\n      \u234e'1+1 \u22c4 2+2'\n2\n4\n      A\u2190 \u234e'1+1 \u22c4 2+2'\n2\n      A\n4\n      4=\u234e'1+1 \u22c4 2+2'\n2\n1\n      \u234e'A\u21902|\u00af1\u2191\u2395TS \u22c4 \u21920\u2374\u2368A \u22c4 A'\n0\n      A\n0\n      A\u2190\u234e''\nVALUE ERROR: No result was provided when the context expected one\n      A\u2190\u234e''\n     \u2227\n      'myspace' \u2395NS''\n      myspace\u234e'A\u2190\u23736'\n      myspace.A\n1 2 3 4 5 6\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/matrix-divide/","title":"Matrix divide","text":"Matrix Divide R\u2190X\u2339Y <p><code>Y</code> must be a simple numeric array of rank 2 or less.  <code>X</code> must be a simple numeric array of rank 2 or less.  <code>Y</code> must be non-singular.  A scalar argument is treated as a matrix with one-element.  If <code>Y</code> is a vector, it is treated as a single column matrix.  If <code>X</code> is a vector, it is treated as a single column matrix.  The number of rows in <code>X</code> and <code>Y</code> must be the same.  <code>Y</code> must have at least the same number of rows as columns.</p> <p><code>R</code> is the result of matrix division of <code>X</code> by <code>Y</code>.  That is, the matrix product <code>Y+.\u00d7R</code> is <code>X</code>.</p> <p><code>R</code> is determined such that <code>(X-Y+.\u00d7R)*2</code> is minimised.</p> <p>The shape of <code>R</code> is <code>(1\u2193\u2374Y),1\u2193\u2374X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/matrix-divide/#examples","title":"Examples","text":"<pre><code>\n      \u2395PP\u21905\n\n      B\n3 1 4\n1 5 9\n2 6 5\n\n      35 89 79 \u2339 B\n2.1444 8.2111 5.0889\n\n      A\n35 36\n89 88\n79 75\n\n      A \u2339 B\n2.1444 2.1889\n8.2111 7.1222\n5.0889 5.5778\n</code></pre> <p>If there are more rows than columns in the right argument, the least squares solution results.  In the following example, the constants a and b which provide the best fit for the set of equations represented by P = a + bQ are determined:</p> <pre><code>\n      Q\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n\n      P\n12.03 8.78 6.01 3.75 \u00af0.31 \u00af2.79\n\n      P\u2339Q\n14.941 \u00af2.9609\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/matrix-divide/#example-linear-regression-on-complex-numbers","title":"Example: linear regression on complex numbers","text":"<pre><code>      x\u2190j\u233f\u00af50+?2 13 4\u2374100\n      y\u2190(x+.\u00d73 4 5 6) + j\u233f0.0001\u00d7\u00af50+?2 13\u2374100\n      \u2374x\n13 4\n      \u2374y\n13\n      y \u2339 x\n3J0.000011066 4J\u00af0.000018499 5J0.000005745 6J0.000050328\n      \u235d i.e. y\u2339x recovered the coefficients 3 4 5 6\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/matrix-divide/#additional-information","title":"Additional Information","text":"<pre><code>\n      x\u2339y \u2190\u2192 (\u2339(\u2349y)+.\u00d7y)+.\u00d7(\u2349y)+.\u00d7x\n\n</code></pre> <p>(Use <code>+\u2349</code> instead of <code>\u2349</code> for complex <code>y</code>.)</p> <p>This equivalence, familiar to mathematicians and statisticians, explains</p> <ul> <li>the conformability requirements for <code>\u2339</code></li> <li>how to compute the result for tall matrices from the better known square matrix case</li> </ul>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/matrix-inverse/","title":"Matrix inverse","text":"Matrix Inverse R\u2190\u2339Y <p><code>Y</code> must be a simple array of rank 2 or less.  <code>Y</code> must be non-singular.  If <code>Y</code> is a scalar, it is treated as a one-element matrix.  If <code>Y</code> is a vector, it is treated as a single-column matrix.  <code>Y</code> must have at least the same number of rows as columns.</p> <p><code>R</code> is the inverse of <code>Y</code> if <code>Y</code> is a square matrix, or the left inverse of <code>Y</code> if <code>Y</code> is not a square matrix.  That is, <code>R+.\u00d7Y</code> is an identity matrix.</p> <p>The shape of <code>R</code> is <code>\u233d\u2374Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/matrix-inverse/#examples","title":"Examples","text":"<pre><code>      M\n2 \u00af3\n4 10\n\n      +A\u2190\u2339M\n 0.3125 0.09375\n\u00af0.125  0.0625\n</code></pre> <p>Within calculation accuracy, <code>A+.\u00d7M</code> is the identity matrix.</p> <pre><code>      A+.\u00d7M\n1 0\n0 1\n\n\n      j\u2190{\u237a\u21900 \u22c4 \u237a+0J1\u00d7\u2375}\n      x\u2190j\u233f\u00af50+?2 5 5\u2374100\n      x\n\u00af37J\u00af41  25J015  \u00af5J\u00af09   3J020 \u00af29J041\n\u00af46J026  17J\u00af24  17J\u00af46  43J023 \u00af12J\u00af18\n  1J013  33J025 \u00af47J049 \u00af45J\u00af14   2J\u00af26\n 17J048 \u00af50J022 \u00af12J025 \u00af44J015  \u00af9J\u00af43\n 18J013   8J038  43J\u00af23  34J\u00af07   2J026\n      \u2374x\n5 5\n      id\u2190{\u2218.=\u2368\u2373\u2375}  \u235d identity matrix of order \u2375\n      \u2308/,| (id 1\u2191\u2374x) - x+.\u00d7\u2339x\n3.66384E\u00af16\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-computational-functions/zilde/","title":"Zilde","text":"Zilde R\u2190\u236c <p>The empty vector (<code>\u23730</code>) may be represented by the numeric constant <code>\u236c</code> called ZILDE.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/catenate-laminate/","title":"Catenate laminate","text":"Catenate/Laminate R\u2190X,[K]Y <p><code>Y</code> may be any array.  <code>X</code> may be any array.  The axis specification is optional.  If specified, <code>K</code> must be a numeric scalar or 1-element vector which may have a fractional value.  If not specified, the last axis is implied.</p> <p>The form <code>R\u2190X\u236aY</code> may be used to imply catenation along the first axis.</p> <p>Two cases of the function catenate  are permitted:</p> <ol> <li>With an integer axis specification, or implied axis specification.</li> <li>With a fractional axis specification, also called laminate. </li> </ol>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/catenate-laminate/#catenation-with-integer-or-implied-axis-specification","title":"Catenation with Integer or Implied Axis Specification","text":"<p>The arrays <code>X</code> and <code>Y</code> are joined along the required axis to form array <code>R</code>.  A scalar is extended to the shape of the other argument except that the required axis is restricted to a unit dimension.  <code>X</code> and <code>Y</code> must have the same shape (after extension) except along the required axis, or one of the arguments may have rank one less than the other, provided that their shapes conform to the prior rule after augmenting the array of lower rank to have a unit dimension along the required axis. The rank of <code>R</code> is the greater of the ranks of the arguments, but not less than 1.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/catenate-laminate/#examples","title":"Examples","text":"<pre><code>      'FUR','LONG'\nFURLONG\n\n      1,2\n1 2\n\n      (2 4\u2374'THISWEEK')\u236a'='\nTHIS\nWEEK\n====\n\n      S,[1]+\u233fS\u21902 3\u2374\u23736\n1 2 3\n4 5 6\n5 7 9\n</code></pre> <p>If, after extension, exactly one of <code>X</code> and <code>Y</code> have a length of zero along the joined axis, then the data type of <code>R</code> will be that of the argument with a non-zero length. Otherwise, the data type of <code>R</code> will be that of <code>X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/catenate-laminate/#lamination-with-fractional-axis-specification","title":"Lamination with Fractional Axis Specification","text":"<p>The arrays <code>X</code> and <code>Y</code> are joined along a new axis created before the <code>\u2308K</code>th axis.  The new axis has a length of 2.  <code>K</code> must exceed <code>\u2395IO</code> (the index origin) minus 1, and <code>K</code> must be less than <code>\u2395IO</code> plus the greater of the ranks of <code>X</code> and <code>Y</code>.  A scalar  argument is extended to the shape of the other argument.  Otherwise <code>X</code> and <code>Y</code> must have the same shape.</p> <p>The rank of <code>R</code> is one plus the greater of the ranks of <code>X</code> and <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/catenate-laminate/#examples_1","title":"Examples","text":"<pre><code>      'HEADING',[0.5]'-'\nHEADING\n-------\n\n      'NIGHT',[1.5]'*'\nN*\nI*\nG*\nH*\nT* \n      \u2395IO\u21900\n      'HEADING',[\u00af0.5]'-'\nHEADING\n-------\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/format-dyadic/","title":"Format dyadic","text":"Format (Dyadic) R\u2190X\u2355Y <p><code>Y</code> must be a simple real (non-complex) numeric array.  <code>X</code> must be a simple integer scalar or vector.  <code>R</code> is a character array displaying the array <code>Y</code> according to the specification <code>X</code>.  <code>R</code> has rank <code>1\u2308\u2374\u2374Y</code> and <code>\u00af1\u2193\u2374R</code> is <code>\u00af1\u2193\u2374Y</code>. If any element of <code>Y</code> is complex, dyadic <code>\u2355</code> reports a <code>DOMAIN ERROR</code>.</p> <p>Conformability requires that if <code>X</code> has more than two elements, then <code>\u2374X</code> must be <code>2\u00d7\u00af1\u2191\u2374Y</code>. If <code>X</code> contains one element, it is extended to <code>(2\u00d7\u00af1\u2191\u2374Y)\u23740,X</code>.  If <code>X</code> contains 2 elements, it is extended to <code>(2\u00d7\u00af1\u2191\u2374Y)\u2374X</code>.</p> <p><code>X</code> specifies two numbers (possibly after extension) for each column in <code>Y</code>.  For this purpose, scalar <code>Y</code> is treated as a one-element vector.  Each pair of numbers in <code>X</code> identifies a format width (<code>W</code>) and a format precision (<code>P</code>).</p> <p>If <code>P</code> is 0, the column is to be formatted as integers.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/format-dyadic/#examples","title":"Examples","text":"<pre><code>      5 0 \u2355 2 3\u2374\u23736\n    1    2    3\n    4    5    6\n\n      4 0\u23551.1 2 \u00af4 2.547\n   1   2  \u00af4   3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/format-dyadic/#example","title":"Example","text":"<p>If <code>P</code> is positive, the format is floating point with <code>P</code> significant digits to be displayed after the decimal point.</p> <pre><code>      4 1\u23551.1 2 \u00af4 2.547\n 1.1 2.0\u00af4.0 2.5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/format-dyadic/#example_1","title":"Example","text":"<p>If <code>P</code> is negative, scaled format is used with <code>|P</code> digits in the mantissa.</p> <pre><code>      7 \u00af3\u23555 15 155 1555\n5.00E0 1.50E1 1.55E2 1.56E3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/format-dyadic/#example_2","title":"Example","text":"<p>If <code>W</code> is 0 or absent, then the width of the corresponding columns of <code>R</code> are determined by the maximum width required by any element in the corresponding columns of <code>Y</code>, plus one separating space.</p> <pre><code>      3\u23552 3\u237410 15.2346 \u00af17.1 2 3 4\n 10.000 15.235 \u00af17.100\n  2.000  3.000   4.000\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/format-dyadic/#example_3","title":"Example","text":"<p>If a formatted element exceeds its specified field width when <code>W&gt;</code>0, the field width for that element is filled with asterisks.</p> <pre><code>      3 0 6 2 \u2355 3 2\u237410.1 15 1001 22.357 101 1110.1\n 10 15.00\n*** 22.36\n101******\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/format-dyadic/#example_4","title":"Example","text":"<p>If the format precision exceeds the internal precision, low order digits are replaced by the symbol '<code>_</code>'.</p> <pre><code>      26\u23552*100\n1267650600228229_______________.__________________________\n\n      \u237426\u23552*100\n59\n\n      0 20\u2355\u00f73\n 0.3333333333333333____\n\n      0 \u00af20\u2355\u00f73\n 3.333333333333333____E\u00af1\n</code></pre> <p>The shape of <code>R</code> is the same as the shape of <code>Y</code> except that the last dimension of <code>R</code> is the sum of the field widths specified in <code>X</code> or deduced by the function.  If <code>Y</code> is a scalar, the shape of <code>R</code> is the field width.</p> <pre><code>      \u23745 2 \u2355 2 3 4\u2374\u237324\n2 3 20\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/partition/","title":"Partition","text":"Partition <p>Classic Edition:  the symbol <code>\u2286</code> (Left Shoe Underbar) is not available in Classic Edition, and Partition is instead represented by <code>\u2395U2286</code>.</p> <p><code>Y</code> may be any non-scalar array.</p> <p><code>X</code> must be a simple scalar or vector of non-negative integers.</p> <p>The axis specification is optional.  If present, it must be a simple integer scalar or one element array representing an axis of <code>Y</code>.  If absent, the last axis is implied.</p> <p><code>R</code> is an array of the elements of <code>Y</code> partitioned according to <code>X</code>.</p> <p>A new partition is started in the result whenever the corresponding element in <code>X</code> is greater than the previous one. Items in <code>Y</code> corresponding to <code>0</code>s in <code>X</code> are not included in the result.</p> <p>Note that if <code>\u2395ML\u22653</code>, the symbol <code>\u2282</code> means the same as <code>\u2286</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/partition/#examples","title":"Examples","text":"<pre><code>      \u2395ML\u21903\n\n      ]display 1 1 1 2 2 3 3 3\u2286'NOWISTHE'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502NOW\u2502 \u2502IS\u2502 \u2502THE\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display 1 1 1 0 0 3 3 3\u2286'NOWISTHE'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502NOW\u2502 \u2502THE\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      TEXT\u2190'   NOW     IS      THE      TIME    '\n      ]display (' '\u2260TEXT)\u2286TEXT\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502NOW\u2502 \u2502IS\u2502 \u2502THE\u2502 \u2502TIME\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ]display CMAT\u2190\u2395FMT(' ',ROWS),COLS\u236aNMAT\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193           Jan   Feb  Mar \u2502\n\u2502 Cakes       0   100  150 \u2502\n\u2502 Biscuits    0     0  350 \u2502\n\u2502 Buns        0  1000  500 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ]display (\u2228\u233f' '\u2260CMAT)\u2286CMAT   \u235d Split at blank cols.\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502        \u2502 \u2502Jan\u2502 \u2502 Feb\u2502 \u2502Mar\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502Cakes   \u2502 \u2502  0\u2502 \u2502 100\u2502 \u2502150\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502Biscuits\u2502 \u2502  0\u2502 \u2502   0\u2502 \u2502350\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502Buns    \u2502 \u2502  0\u2502 \u25021000\u2502 \u2502500\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display N\u21904 4\u2374\u237316\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 1  2  3  4\u2502\n\u2502 5  6  7  8\u2502\n\u2502 9 10 11 12\u2502\n\u250213 14 15 16\u2502\n\u2514~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display 1 1 0 1\u2286N\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2510   \u250c\u2192\u2510  \u2502\n\u2502 \u25021 2\u2502   \u25024\u2502  \u2502\n\u2502 \u2514~\u2500\u2500\u2518   \u2514~\u2518  \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2510   \u250c\u2192\u2510  \u2502\n\u2502 \u25025 6\u2502   \u25028\u2502  \u2502\n\u2502 \u2514~\u2500\u2500\u2518   \u2514~\u2518  \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2510  \u250c\u2192\u2500\u2510 \u2502\n\u2502 \u25029 10\u2502  \u250212\u2502 \u2502\n\u2502 \u2514~\u2500\u2500\u2500\u2518  \u2514~\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u2502\n\u2502 \u250213 14\u2502 \u250216\u2502 \u2502\n\u2502 \u2514~\u2500\u2500\u2500\u2500\u2518 \u2514~\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ]display 1 1 0 1\u2286[1]N\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u25021 5\u2502 \u25022 6\u2502 \u25023 7\u2502 \u25024 8\u2502 \u2502\n\u2502 \u2514~\u2500\u2500\u2518 \u2514~\u2500\u2500\u2518 \u2514~\u2500\u2500\u2518 \u2514~\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2510  \u250c\u2192\u2500\u2510  \u250c\u2192\u2500\u2510  \u250c\u2192\u2500\u2510  \u2502\n\u2502 \u250213\u2502  \u250214\u2502  \u250215\u2502  \u250216\u2502  \u2502\n\u2502 \u2514~\u2500\u2518  \u2514~\u2500\u2518  \u2514~\u2500\u2518  \u2514~\u2500\u2518  \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/partitioned-enclose/","title":"Partitioned enclose","text":"Partitioned Enclose (\u2395ML&lt;3) <p><code>Y</code> may be any array.  <code>X</code> must be a simple integer scalar or vector. If <code>X</code> is a scalar it is extended to <code>(\u2262Y)\u2374X</code>.</p> <p>The axis specification is optional.  If present, it must be a simple integer scalar or one-element vector.  The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis of <code>Y</code> is implied.</p> <p><code>R</code> is a vector of items selected from <code>Y</code> by inserting 0 or more dividers, specified by <code>X</code>, between its major cells.</p> <p>Each element of <code>X</code> specifies the number of dividers to insert before the corresponding major cell of <code>Y</code>. The maximum length of <code>X</code> is <code>1+\u2262Y</code>, when the last element of <code>X</code> specifies the number of trailing dividers. Note that major cells of <code>Y</code> that precede the first divider (identified by the first non-zero element of <code>X</code>) are excluded from the result.</p> <p>The length of <code>R</code> is <code>+/X</code> (after possible extension).</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/partitioned-enclose/#examples","title":"Examples","text":"<pre><code>      0 0 1 0 0 1 0\u2282'abcdefg'\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502cde\u2502fg\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n      2 0 1 3 0 2 0 1\u2282'abcdefg'\n\u250c\u252c\u2500\u2500\u252c\u2500\u252c\u252c\u252c\u2500\u2500\u252c\u252c\u2500\u2500\u252c\u2510\n\u2502\u2502ab\u2502c\u2502\u2502\u2502de\u2502\u2502fg\u2502\u2502\n\u2514\u2534\u2500\u2500\u2534\u2500\u2534\u2534\u2534\u2500\u2500\u2534\u2534\u2500\u2500\u2534\u2518\n      0 2 0 1\u2282'abcdefg'\n\u250c\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502\u2502bc\u2502defg\u2502\n\u2514\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>The above examples may be explained pictorially by the diagram below.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/partitioned-enclose/#further-examples","title":"Further Examples","text":"<pre><code>      1 0 1\u2282[1]3 4\u2374\u237312\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 3 4\u25029 10 11 12\u2502\n\u25025 6 7 8\u2502          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      1 0 0 1\u2282[2]3 4\u2374\u237312\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u25021  2  3\u2502 4\u2502\n\u25025  6  7\u2502 8\u2502\n\u25029 10 11\u250212\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/reshape/","title":"Reshape","text":"Reshape R\u2190X\u2374Y <p><code>Y</code> may be any array.  <code>X</code> must be a simple scalar or vector of non-negative integers.  <code>R</code> is an array of shape <code>X</code> whose elements are taken from <code>Y</code> in row-major sequence and repeated cyclically if required.  If <code>Y</code> is empty, <code>R</code> is composed of fill elements of <code>Y</code> (<code>\u2282\u220a\u2283Y</code> with <code>\u2395ml\u21900</code>).  If <code>X</code> contains at least one zero, then <code>R</code> is empty.  If <code>X</code> is an empty vector, then <code>R</code> is scalar.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/reshape/#examples","title":"Examples","text":"<pre><code>      2 3\u2374\u23738\n1 2 3\n4 5 6\n\n      2 3\u2374\u23734\n1 2 3\n4 1 2\n\n      2 3\u2374\u23730\n0 0 0\n0 0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/rotate/","title":"Rotate","text":"Rotate R\u2190X\u233d[K]Y <p><code>Y</code> may be any array.  <code>X</code> must be a simple integer array.  The axis specification is optional.  If present, <code>K</code> must be a simple integer scalar or one-element vector.</p> <p>The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis of <code>Y</code> is implied.  The form <code>R\u2190X\u2296Y</code> implies the first axis.</p> <p><code>X</code> must have the same shape as <code>Y</code>, excluding <code>Y</code>'s <code>K</code>th axis. Otherwise, if <code>X</code> is a one-element array, it will be extended to conform.</p> <p><code>R</code> is an array with the same shape as <code>Y</code>, with the elements of each of the vectors along the <code>K</code>th axis of <code>Y</code> rotated by the value of the corresponding element of <code>X</code>.  If the value is positive, the rotation is in the sense of right to left.  If the value is negative, the rotation is in the sense of left to right.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/rotate/#examples","title":"Examples","text":"<pre><code>      3 \u233d 1 2 3 4 5 6 7\n4 5 6 7 1 2 3\n      \u00af2 \u233d 1 2 3 4 5\n4 5 1 2 3\n\n      M\n 1  2  3  4\n 5  6  7  8\n\n 9 10 11 12\n13 14 15 16\n\n      I\n0 1 \u00af1 0\n0 3  2 1\n\n      I\u233d[2]M\n 1  6  7  4\n 5  2  3  8\n\n 9 14 11 16\n13 10 15 12\n\n</code></pre> <pre><code>\n      J\n2 \u00af3\n3 \u00af2\n      J\u233dM\n 3  4  1  2\n 6  7  8  5\n\n12  9 10 11\n15 16 13 14\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/transpose-dyadic/","title":"Transpose dyadic","text":"Transpose (Dyadic) R\u2190X\u2349Y <p><code>Y</code> may be any array.  <code>X</code> must be a simple scalar or vector whose elements are included in the set <code>\u2373\u2374\u2374Y</code>.  Integer values in <code>X</code> may be repeated but all integers in the set <code>\u2373\u2308/X</code> must be included.  The length of <code>X</code> must equal the rank of <code>Y</code>.</p> <p><code>R</code> is an array formed by the transposition of the axes of <code>Y</code> as specified by <code>X</code>.  The <code>I</code>th element of <code>X</code> gives the new position for the <code>I</code>th axis of <code>Y</code>.  If <code>X</code> repositions two or more axes of <code>Y</code> to the same axis, the elements used to fill this axis are those whose indices on the relevant axes of <code>Y</code> are equal.</p> <p><code>\u2395IO</code> is an implicit argument of Dyadic Transpose.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/transpose-dyadic/#examples","title":"Examples","text":"<pre><code>      A\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n\n13 14 15 16\n17 18 19 20\n21 22 23 24\n</code></pre> <pre><code>\n\n      2 1 3\u2349A\n 1  2  3  4\n13 14 15 16\n\n 5  6  7  8\n17 18 19 20\n\n 9 10 11 12\n21 22 23 24\n\n      1 1 1\u2349A\n1 18\n\n      1 1 2\u2349A\n 1  2  3  4\n17 18 19 20\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/transpose-dyadic/#alternative-explanation","title":"Alternative Explanation","text":"<p>Assign a distinct letter for each unique integer in <code>X</code> :</p> <pre><code>0 1 2 3 \u2026\ni j k l\n</code></pre> <p>If <code>R\u2190X\u2349Y</code>, then <code>R[i;j;k;\u2026]</code> equals <code>Y</code> indexed by the letters corresponding to elements of <code>X</code> .</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-dyadic-structural-functions/transpose-dyadic/#for-example","title":"For example:","text":"<pre><code>      \u2395IO\u21900\n\n      Y\u2190 ? 5 13 19 17 11 \u2374 100\n\n      X\u2190 2 1 2 0 1\n      \u235d  k j k i j\n</code></pre> <pre><code>      R\u2190X\u2349Y\n</code></pre> <pre><code>      i\u2190?17 \u22c4 j\u2190?11 \u22c4 k\u2190?5\n      R[i;j;k] = Y[k;j;k;i;j]\n1\n      R[i;j;k]=Y[\u2282\u234e\u00a8'ijk'[X]]\n1\n</code></pre> <p>From the above it can be seen that:</p> <ul> <li>the rank of <code>R</code> is <code>0\u23081+\u2308/X</code></li> <li>the shape of R is <code>(\u2374Y)\u230a.+(\u2308/\u2374Y)\u00d7X\u2218.\u2260\u23730\u23081+\u2308/X</code></li> </ul>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/depth/","title":"Depth","text":"Depth (\u2395ML) <p><code>Y</code> may be any array. <code>R</code> is the maximum number of levels of nesting of <code>Y</code>. A simple scalar (rank-0 number, character or namespace-reference) has a depth of 0.</p> <p>A higher rank array, all of whose items are simple scalars, is termed a simple array and has a depth of 1. An array whose items are not all simple scalars is nested and has a depth 1 greater than that of its most deeply nested item.</p> <p><code>Y</code> is of uniform depth if it is simple or if all of its items have the same uniform depth.</p> <p>If <code>\u2395ML&lt;2</code> and <code>Y</code> is not of uniform depth then <code>R</code> is negated (therefore, when <code>\u2395ML&lt;2</code>, a negative value of <code>R</code> indicates non-uniform depth).</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/depth/#examples","title":"Examples","text":"<pre><code>      \u22611\n0\n      \u2261'A'\n0\n      \u2261'ABC'\n1\n      \u22611 'A'\n1 \n\n</code></pre> <pre><code>      \u2395ML\u21900\n\n      \u2261A\u2190(1 2)(3 (4 5)) \u235d Non-uniform array\n\u00af3\n      \u2261\u00a8A          \u235d A[1] is uniform, A[2] is non-uniform\n1 \u00af2\n      \u2261\u00a8\u00a8A\n 0 0  0 1 \n\n</code></pre> <pre><code>      \u2395ML\u21902\n\n      \u2261A\n3\n      \u2261\u00a8A\n1 2\n      \u2261\u00a8\u00a8A\n 0 0  0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/enclose-with-axes/","title":"Enclose with axes","text":"Enclose with Axes R\u2190\u2282[K]Y <p><code>Y</code> may be any array.  <code>K</code> is a vector of zero or more axes of <code>Y</code>.  <code>R</code> is an array of the elements of <code>Y</code> enclosed along the axes <code>K</code>.  The shape of <code>R</code> is the shape of <code>Y</code> with the <code>K</code> axes removed:</p> <pre><code>      \u2374R \u2190\u2192 (\u2374Y)[(\u2373\u2374\u2374R)~K]\n</code></pre> <p>The shape of each element of <code>R</code> is the shape of the <code>K</code>th axes of <code>Y</code>:</p> <pre><code>      \u2374\u2283R \u2190\u2192 (\u2374Y)[,K]\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/enclose-with-axes/#examples","title":"Examples","text":"<pre><code>      ]display A\u21902 3 4\u2374'DUCKSWANBIRDWORMCAKESEED'\n\u250c\u250c\u2192\u2500\u2500\u2500\u2510\n\u2193\u2193DUCK\u2502\n\u2502\u2502SWAN\u2502\n\u2502\u2502BIRD\u2502\n\u2502\u2502    \u2502\n\u2502\u2502WORM\u2502\n\u2502\u2502CAKE\u2502\n\u2502\u2502SEED\u2502\n\u2514\u2514\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      ]display \u2282[3]A\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502DUCK\u2502 \u2502SWAN\u2502 \u2502BIRD\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502WORM\u2502 \u2502CAKE\u2502 \u2502SEED\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      ]display \u2282[2 3]A\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2193DUCK\u2502 \u2193WORM\u2502 \u2502\n\u2502 \u2502SWAN\u2502 \u2502CAKE\u2502 \u2502\n\u2502 \u2502BIRD\u2502 \u2502SEED\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display \u2282[1 3]A\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2193DUCK\u2502 \u2193SWAN\u2502 \u2193BIRD\u2502 \u2502\n\u2502 \u2502WORM\u2502 \u2502CAKE\u2502 \u2502SEED\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/enclose/","title":"Enclose","text":"Enclose R\u2190\u2282Y <p><code>Y</code> may be any array.  <code>R</code> is a scalar array whose item is the array <code>Y</code>.  If <code>Y</code> is a simple scalar, <code>R</code> is the simple scalar unchanged.  Otherwise, <code>R</code> has a depth whose magnitude is one greater than the magnitude of the depth of <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/enclose/#examples","title":"Examples","text":"<pre><code>      \u22821\n1\n\n      \u2282'A'\nA\n\n      \u22821 2 3\n 1 2 3\n\n      \u22821,\u2282'CAT'\n 1  CAT\n\n      \u22822 4\u2374\u23738\n 1 2 3 4\n 5 6 7 8\n\n      \u2282\u23730\n\n      \u2282\u2282\u23730\n\n      \u2282\u228210\n10\n</code></pre> <p>See also: Enclose with Axes below.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/enlist/","title":"Enlist","text":"Enlist (\u2395ML\u22651) <p>Migration level must be such that <code>\u2395ML\u22651</code> (otherwise see \"Type\" on page 1).</p> <p><code>Y</code> may be any array, <code>R</code> is a simple vector created from all the elements of <code>Y</code> in ravel order.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/enlist/#examples","title":"Examples","text":"<pre><code>\n      \u2395ML\u21901         \u235d  Migration level 1\n      MAT\u21902 2\u2374'MISS' 'IS' 'SIP' 'PI' \u22c4 MAT\n MISS  IS\n SIP   PI\n      \u220aMAT\nMISSISSIPPI\n\n      M\u21901 (2 2\u23742 3 4 5) (6(7 8))\n      M\n1  2 3  6  7 8\n   4 5\n      \u220aM\n1 2 3 4 5 6 7 8\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/format-monadic/","title":"Format monadic","text":"Format (Monadic) R\u2190\u2355Y <p><code>Y</code> may be any array.  <code>R</code> is a simple character array which will display identically to the display produced by <code>Y</code>.  The result is independent of <code>\u2395PW</code>.  If <code>Y</code> is a simple character array, then <code>R</code> is <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/format-monadic/#example","title":"Example","text":"<pre><code>      +B\u2190\u2355A\u21902 6\u2374'HELLO PEOPLE'\nHELLO\nPEOPLE\n\n      B \u2261 A\n1\n</code></pre> <p>If <code>Y</code> is a simple numeric scalar, then <code>R</code> is a vector containing the formatted number without any spaces.  A floating point number is formatted according to the system variable <code>\u2395PP</code>.  <code>\u2395PP</code> is ignored when formatting integers.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/format-monadic/#examples","title":"Examples","text":"<pre><code>      \u2395PP\u21905\n\n      \u2374C\u2190\u2355\u23730\n0\n\n      \u2374C\u2190\u235510\n2\n\n      C\n10\n\n      \u2374C\u2190\u235512.34\n5\n\n      C\n12.34\n\n      \u2355123456789\n123456789\n\n      \u2355123.456789\n123.46\n</code></pre> <p>Scaled notation is used if the magnitude of the non-integer number is too large to represent with <code>\u2395PP</code> significant digits or if the number requires more than five leading zeroes after the decimal point.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/format-monadic/#examples_1","title":"Examples","text":"<pre><code>      \u2355123456.7\n1.2346E5\n\n      \u23550.0000001234\n1.234E\u00af7\n</code></pre> <p>If <code>Y</code> is a simple numeric vector, then <code>R</code> is a character vector in which each element of <code>Y</code> is independently formatted with a single separating space between formatted elements.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/format-monadic/#example_1","title":"Example","text":"<pre><code>      \u2374C\u2190\u2355\u00af123456 1 22.5 \u00af0.000000667 5.00001\n27\n\n      C\n\u00af1.2346E5 1 22.5 \u00af6.67E\u00af7 5\n</code></pre> <p>If <code>Y</code> is a simple numeric array rank higher than one, <code>R</code> is a character array with the same shape as <code>Y</code> except that the last dimension of <code>Y</code> is determined by the length of the formatted data.  The format width is determined independently for each column of <code>Y</code>, such that:</p> <ol> <li>the decimal points for floating point or scaled formats are aligned.</li> <li>the <code>E</code> characters for scaled formats are aligned, with trailing zeros added to the mantissae if necessary.</li> <li>integer formats are aligned to the left of the decimal point column, if any, or right-adjusted in the field otherwise.</li> <li>each formatted column is separated from its neighbours by a single blank column.</li> <li>the exponent values in scaled formats are left-adjusted to remove any blanks.</li> </ol>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/format-monadic/#examples_2","title":"Examples","text":"<pre><code>      C\u219022 \u00af0.000000123 2.34 \u00af212 123456 6.00002 0\n\n      \u2374C\u2190\u23552 2 3\u2374C\n2 2 29\n\n      C\n  22    \u00af1.2300E\u00af7  2.3400E0\n\u00af212     1.2346E5   6.0000E0\n\n   0     2.2000E1  \u00af1.2300E\u00af7\n   2.34 \u00af2.1200E2   1.2346E5\n</code></pre> <p>If <code>Y</code> is non-simple, and all items of <code>Y</code> at any depth are scalars or vectors, then <code>R</code> is a vector.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/format-monadic/#examples_3","title":"Examples","text":"<pre><code>      B\u2190\u2355A\u2190'ABC' 100 (1 2 (3 4 5)) 10\n\n      \u2374A\n4\n      \u2261A\n\u00af3\n\n      \u2374B\n26\n      \u2261B\n1\n\n      A\n ABC  100  1 2  3 4 5   10\n\n      B\n ABC  100  1 2  3 4 5   10\n</code></pre> <p>By replacing spaces with <code>^</code>, it is clearer to see how the result of <code>\u2355</code> is formed:</p> <pre><code>^ABC^^100^^1^2^^3^4^5^^^10\n</code></pre> <p>If <code>Y</code> is non-simple, and all items of <code>Y</code> at any depth are not scalars, then <code>R</code> is a matrix.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/format-monadic/#example_2","title":"Example","text":"<pre><code>      D\u2190\u2355C\u21901 'AB' (2 2\u23741+\u23734) (2 2 3\u2374'CDEFGHIJKLMN')\n\n      C\n1  AB  2 3  CDE\n       4 5  FGH\n\n            IJK\n            LMN\n\n      \u2374C\n4\n\n      \u2261C\n\u00af2\n\n      D\n1  AB  2 3  CDE\n       4 5  FGH\n\n            IJK\n            LMN\n\n      \u2374D\n5 16\n\n      \u2261D\n1\n</code></pre> <p>By replacing spaces with <code>^</code>, it is clearer to see how the result of <code>\u2355</code> is formed:</p> <pre><code>1^^AB^^2^3^^CDE^\n^^^^^^^4^5^^FGH^\n^^^^^^^^^^^^^^^^\n^^^^^^^^^^^^IJK^\n^^^^^^^^^^^^LMN^\n</code></pre> <p><code>\u2395PP</code> is an implicit argument of Monadic Format.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/mix/","title":"Mix","text":"Mix (\u2395ML) <p>The symbol chosen to represent Mix depends on the current Migration Level.</p> <p>If <code>\u2395ML&lt;2</code>, Mix is represented by the symbol: <code>\u2191</code>.</p> <p>If <code>\u2395ML\u22652</code>, Mix is represented by the symbol: <code>\u2283</code>.</p> <p><code>Y</code> may be any array whose items may be uniform in rank and shape, or differ in rank and shape. If the items of <code>Y</code> are non-uniform, they are extended prior to the application of the function as follows:</p> <ol> <li>If the items of <code>Y</code> have different ranks, each item is extended in rank to that of the greatest rank by padding with leading 1s. </li> <li>If the items of <code>Y</code> have different shapes, each is padded with the corresponding prototype to a shape that represents the greatest length along each axis of all items in <code>Y</code>.</li> </ol> <p>For the purposes of the following narrative,  <code>y</code> represents the virtual item in <code>Y</code> with the greatest rank and shape, with which all other items are extended to conform.</p> <p><code>R</code> is an array composed from the items of  <code>Y</code> assembled into a higher-rank array with one less level of nesting. <code>\u2374R</code> will be some permutation of <code>(\u2374Y),\u2374y</code>.</p> <p><code>K</code> is an optional axis specification whose value(s)  indicate where in the result the axes of <code>y</code> appear. There are three cases:</p> <ol> <li><code>K</code> may be a scalar or 1-element vector whose value is a fractional number indicating the two axes of <code>Y</code> between which new axes are to be inserted for <code>y</code>.  The shape of <code>R</code> is the shape of <code>Y</code> with the shape <code>\u2374y</code> inserted between the <code>\u230aK</code>th and the <code>\u2308K</code>th axes of <code>Y</code></li> <li><code>K</code> may be a scalar or 1-element vector integer whose value specifies the position of the first axis of <code>y</code> in the result. This case is identical to the fractional case where <code>K</code> (in this case) is <code>\u2308K</code> (in the fractional case).</li> <li><code>K</code> may be an integer vector, with the same length as <code>\u2374y</code>, each element of which specifies the position in the result of the corresponding axis of the <code>y</code>. </li> </ol> <p>If <code>K</code> is absent, the axes of <code>y</code> appear as the last axes of the result.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/mix/#simple-vector-examples","title":"Simple Vector Examples","text":"<p>In this example, the shape of <code>Y</code> is 3, and the shape of  <code>y</code> is 2. So the shape of the result will be a permutation of 2 and 3, i.e. in this simple example, either <code>(2 3)</code> or <code>(3 2</code>).</p> <p>If <code>K</code> is omitted, the shape of the result is <code>(\u2374Y),\u2374y</code>.</p> <pre><code>      \u2191(1 2)(3 4)(5 6)\n1 2\n3 4\n5 6\n</code></pre> <p>If <code>K</code> is between 0 and 1, the shape of the result is <code>(\u2374y),\u2374Y</code> because<code>(\u2374y)</code> is inserted between the 0th and the 1st axis of the result, i.e. at the beginning.</p> <pre><code>\n      \u2191[.5](1 2)(3 4)(5 6)\n1 3 5\n2 4 6\n</code></pre> <p>If <code>K</code> is between 1 and 2, the shape of the result is <code>(\u2374Y),\u2374y</code> because<code>(\u2374y)</code> is inserted between the 1st and 2nd axis of the result, i.e. at the end. This is the same as the case when <code>K</code> is omitted.</p> <pre><code>\n      \u2191[1.5](1 2)(3 4)(5 6)\n1 2\n3 4\n5 6\n\n</code></pre> <p>An integer <code>K</code> may be used instead. If <code>\u2395ML\u22652</code>,  <code>\u2283</code> is used instead of <code>\u2191</code>).</p> <pre><code>      \u2395ML\u21903\n      \u2283(1 2)(3 4)(5 6)\n1 2\n3 4\n5 6\n      \u2283[1](1 2)(3 4)(5 6)\n1 3 5\n2 4 6\n      \u2283[2](1 2)(3 4)(5 6)\n1 2\n3 4\n5 6\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/mix/#shape-extension","title":"Shape Extension","text":"<p>If the items of <code>Y</code> are unequal in shape, the shorter ones are extended:</p> <pre><code>      \u2395ML\u21903\n      \u2283(1)(3 4)(5)\n1 0\n3 4\n5 0\n       \u2283[1](1)(3 4)(5)\n1 3 5\n0 4 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/mix/#more-simple-vector-examples","title":"More Simple Vector Examples:","text":"<pre><code>      ]box on\nWas OFF\n       'Andy' 'Geoff' 'Pauline'\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Andy\u2502Geoff\u2502Pauline\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2191'Andy' 'Geoff' 'Pauline'\nAndy   \nGeoff  \nPauline\n\n        \u2395ML\u21903\n        \u2283('andy' 19)('geoff' 37)('pauline' 21)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502andy   \u250219\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502geoff  \u250237\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502pauline\u250221\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n        \u2283[1]('andy' 19)('geoff' 37)('pauline' 21)\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502andy\u2502geoff\u2502pauline\u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u250219  \u250237   \u250221     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2283('andy' 19)('geoff' 37)(\u2282'pauline')\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502andy   \u250219     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502geoff  \u250237     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502pauline\u2502       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>Notice that in the last statement, the shape of the third item was extended by catenating it with its prototype.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/mix/#example-matrix-of-matrices","title":"Example (Matrix of Matrices)","text":"<p>In the following examples, <code>Y</code> is a matrix of shape <code>(5 4)</code> and each item of <code>Y</code> (<code>y</code>) is a matrix of shape <code>(3 2)</code>. The shape of the result will be some permutation of <code>(5 4 3 2)</code>.</p> <pre><code>       Y\u21905 4\u2374(\u237320)\u00d7\u22823 2\u23741\n       Y\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 1  \u25022 2  \u25023 3  \u25024 4  \u2502\n\u25021 1  \u25022 2  \u25023 3  \u25024 4  \u2502\n\u25021 1  \u25022 2  \u25023 3  \u25024 4  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u25025 5  \u25026 6  \u25027 7  \u25028 8  \u2502\n\u25025 5  \u25026 6  \u25027 7  \u25028 8  \u2502\n\u25025 5  \u25026 6  \u25027 7  \u25028 8  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u25029 9  \u250210 10\u250211 11\u250212 12\u2502\n\u25029 9  \u250210 10\u250211 11\u250212 12\u2502\n\u25029 9  \u250210 10\u250211 11\u250212 12\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u250213 13\u250214 14\u250215 15\u250216 16\u2502\n\u250213 13\u250214 14\u250215 15\u250216 16\u2502\n\u250213 13\u250214 14\u250215 15\u250216 16\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u250217 17\u250218 18\u250219 19\u250220 20\u2502\n\u250217 17\u250218 18\u250219 19\u250220 20\u2502\n\u250217 17\u250218 18\u250219 19\u250220 20\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>By default, the axes of <code>y</code> appear in the last position in the shape of the result, but this position is altered by specifying the axis <code>K</code>. Notice where the <code>(3 2)</code> appears in the following results:</p> <pre><code>      \u2374\u2283Y\n5 4 3 2\n      \u2374\u2283[1]Y\n3 2 5 4\n      \u2374\u2283[2]Y\n5 3 2 4\n      \u2374\u2283[3]Y\n5 4 3 2\n      \u2374\u2283[4]Y\nINDEX ERROR\n      \u2374\u2283[4]Y\n     \u2227\n\n</code></pre> <p>Note that <code>\u2283[4]Y</code> generates an <code>INDEX ERROR</code> because 4 is greater than the length of the result.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/mix/#example-vector-k","title":"Example (Vector K)","text":"<p>The axes of <code>y</code> do not have to be contiguous in the shape of the result. By specifying a vector <code>K</code>, they can be distributed. Notice where the <code>3</code> and the <code>2</code> appear in the following results:</p> <pre><code>      \u2374\u2283[1 3]Y\n3 5 2 4\n      \u2374\u2283[1 4]Y\n3 5 4 2\n      \u2374\u2283[2 4]Y\n5 3 4 2\n      \u2374\u2283[4 2]Y\n5 2 4 3\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/mix/#rank-extension","title":"Rank Extension","text":"<p>If the items of <code>Y</code> are unequal in rank, the lower rank items are extended in rank by prefixing their shapes with 1s. Each additional 1 may then be increased to match the maximum shape of the other items along that axis.</p> <pre><code>      \u2395ML\u21903\n      Y\u2190(1)(2 3 4 5)(2 3\u237410\u00d7\u23738)\n      Y\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021\u25022 3 4 5\u250210 20 30\u2502\n\u2502 \u2502       \u250240 50 60\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2374\u2283Y\n3 2 4\n       \u2283Y\n 1  0  0 0\n 0  0  0 0\n\n 2  3  4 5\n 0  0  0 0\n\n10 20 30 0\n40 50 60 0\n</code></pre> <p>In the above example, the first item (1) becomes (<code>1 1\u23741</code>) to conform with the 3rd item which is rank 2. It is then extended in shape to become <code>(2 4\u21911 1\u23741)</code> to conform with the 2-row 3rd item, and 4-column 2nd item.. Likewise, the 2nd item becomes a 2-row matrix, and the 3rd item gains another column.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/nest/","title":"Nest","text":"Nest R\u2190\u2286Y <p>Classic Edition:  the symbol <code>\u2286</code> (Left Shoe Underbar) is not available in Classic Edition, and Nest is instead represented by <code>\u2395U2286</code>.</p> <p><code>Y</code> may be any array.</p> <p>If <code>Y</code> is simple, <code>R</code> is a scalar array whose item is the array <code>Y</code>.  If <code>Y</code> is a simple scalar or is already nested, <code>R</code> is <code>Y</code> unchanged.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/nest/#examples","title":"Examples","text":"<pre><code>      \u22861 2 3\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 3\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2286 1 (1 2 3)\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021\u25021 2 3\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2286'Dyalog'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Dyalog\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2286'Dyalog' 'APL'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502Dyalog\u2502APL\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/ravel-with-axes/","title":"Ravel with axes","text":"Ravel with Axes R\u2190,[K]Y <p><code>Y</code> may be any array.</p> <p><code>K</code> is either:</p> <ul> <li>A simple fractional scalar adjacent to an axis of <code>Y</code>, or</li> <li>A simple integer scalar or vector of axes of <code>Y</code>, or</li> <li>An empty vector</li> </ul> <p>Ravel with axis can be used with selective specification.</p> <p><code>R</code> depends on the case of <code>K</code> above.</p> <p>If <code>K</code> is a fraction, the result <code>R</code> is an array of the same shape as <code>Y</code>, but with a new axis of length 1 inserted at the <code>K</code>th position.</p> <pre><code>      \u2374\u2374R \u2190\u2192 1+\u2374\u2374Y\n      \u2374R  \u2190\u2192 (1,\u2374Y)[\u234bK,\u2373\u2374\u2374Y]\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/ravel-with-axes/#examples","title":"Examples","text":"<pre><code>      ,[0.5]'ABC'\nABC\n      \u2374,[0.5]'ABC'\n1 3\n      ,[1.5]'ABC'\nA\nB\nC\n      \u2374,[1.5]'ABC'\n3 1\n\n      MAT\u21903 4\u2374\u237312\n      \u2374,[0.5]MAT\n1 3 4\n      \u2374,[1.5]MAT\n3 1 4\n      \u2374,[2.5]MAT\n3 4 1\n</code></pre> <p>If <code>K</code> is an integer scalar or vector of axes of <code>Y</code>, then:</p> <ul> <li><code>K</code> must contain contiguous axes of <code>Y</code> in ascending order</li> <li><code>R</code> contains the elements of <code>Y</code> ravelled along the indicated axes</li> </ul> <p>Note that if <code>K</code> is a scalar or single element vector, <code>R \u2190\u2192 Y</code>.</p> <pre><code>      \u2374\u2374R \u2190\u2192 1+(\u2374\u2374Y)-\u2374,K\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/ravel-with-axes/#examples_1","title":"Examples","text":"<pre><code>      M\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n\n13 14 15 16\n17 18 19 20\n21 22 23 24\n      \u2374M\n2 3 4\n\n</code></pre> <pre><code>      ,[1 2]M\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n13 14 15 16\n17 18 19 20\n21 22 23 24\n      \u2374,[1 2]M\n6 4\n\n      ,[2 3]M\n 1  2  3  4  5  6  7  8  9 10 11 12\n13 14 15 16 17 18 19 20 21 22 23 24\n\n      \u2374,[2 3]M\n2 12\n</code></pre> <p>If <code>K</code> is an empty vector a new last axis of length 1 is created.</p> <pre><code>      \u2374R \u2190\u2192 (\u2374Y),1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/ravel-with-axes/#examples_2","title":"Examples","text":"<pre><code>      Q1\u2190'January' 'February' 'March'\n      ]display Q1\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502January\u2502 \u2502February\u2502 \u2502March\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      ]display ,[\u23730]Q1\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502 \u2502January\u2502  \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502February\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502 \u2502March\u2502    \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>See also: Ravel on page 1.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/ravel/","title":"Ravel","text":"Ravel R\u2190,Y <p><code>Y</code> may be any array.  <code>R</code> is a vector of the elements of <code>Y</code> taken in row-major order.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/ravel/#examples","title":"Examples","text":"<pre><code>      M\n1 2 3\n4 5 6\n\n      ,M\n1 2 3 4 5 6\n\n      A\nABC\nDEF\nGHI\nJKL\n      ,A\nABCDEFGHIJKL\n\n      \u2374,10\n1\n</code></pre> <p>See also: Ravel with Axes below.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/reverse/","title":"Reverse","text":"Reverse R\u2190\u233d[K]Y <p><code>Y</code> may be any array.  The axis specification is optional.  If present, <code>K</code> must be an integer scalar or one-element vector.  The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis is implied.  The form <code>R\u2190\u2296Y</code> implies the first axis.</p> <p><code>R</code> is the array <code>Y</code> reversed on the <code>K</code>th or implied axis.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/reverse/#examples","title":"Examples","text":"<pre><code>      \u233d1 2 3 4 5\n5 4 3 2 1\n\n      M\n1 2 3\n4 5 6\n      \u233dM\n3 2 1\n6 5 4\n      \u2296M\n4 5 6\n1 2 3\n      \u233d[1]M\n4 5 6\n1 2 3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/shape/","title":"Shape","text":"Shape R\u2190\u2374Y <p><code>Y</code> may be any array.  <code>R</code> is a non-negative integer vector whose elements are the dimensions of <code>Y</code>.  If <code>Y</code> is a scalar, then <code>R</code> is an empty vector.  The rank of <code>Y</code> is given by <code>\u2374\u2374Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/shape/#examples","title":"Examples","text":"<pre><code>      \u237410\n\n      \u2374'CAT'\n3\n\n      \u23743 4\u2374\u237312\n3 4\n\n      +G\u2190(2 3\u2374\u23736)('CAT' 'MOUSE' 'FLEA')\n 1 2 3   CAT  MOUSE  FLEA\n 4 5 6\n\n      \u2374G\n2\n\n      \u2374\u2374G\n1\n\n      \u2374\u00a8G\n 2 3  3\n\n      \u2374\u00a8\u00a8G\n          3  5  4\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/split/","title":"Split","text":"Split R\u2190\u2193[K]Y <p><code>Y</code> may be any array.  The axis specification is optional.  If present, <code>K</code> must be a simple integer scalar or one-element vector.  The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis is implied.</p> <p>The items of <code>R</code> are the sub-arrays of <code>Y</code> along the <code>K</code>th axis.  <code>R</code> is a scalar if <code>Y</code> is a scalar.  Otherwise <code>R</code> is an array whose rank is<code>\u00af1+\u2374\u2374Y</code> and whose shape is <code>(K\u2260\u2373\u2374\u2374Y)/\u2374Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/split/#examples","title":"Examples","text":"<pre><code>      \u21933 4\u2374'MINDTHATSTEP'\n MIND  THAT  STEP\n\n      \u21932 5\u2374\u237310\n 1 2 3 4 5  6 7 8 9 10\n\n      \u2193[1]2 5\u2374\u237310\n 1 6  2 7  3 8  4 9  5 10\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/table/","title":"Table","text":"Table R\u2190\u236aY <p><code>Y</code> may be any array. <code>R</code> is a 2-dimensional matrix of the elements of <code>Y</code> taken in row-major order, preserving the shape of the first dimension of <code>Y</code> if it exists</p> <p>Table has been implemented according to the Extended APL Standard (ISO/IEC 13751:2001).</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/table/#examples","title":"Examples","text":"<pre><code>      ]display {\u2375 (\u2374\u2375)} \u236a'a'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2193a\u2502 \u25021 1\u2502 \u2502\n\u2502 \u2514\u2500\u2518 \u2514~\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display {\u2375 (\u2374\u2375)} \u236a'hello'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2193h\u2502 \u25025 1\u2502 \u2502\n\u2502 \u2502e\u2502 \u2514~\u2500\u2500\u2518 \u2502\n\u2502 \u2502l\u2502       \u2502\n\u2502 \u2502l\u2502       \u2502\n\u2502 \u2502o\u2502       \u2502\n\u2502 \u2514\u2500\u2518       \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display {\u2375 (\u2374\u2375)} \u236a2 3 4\u2374\u237324\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2193 1  2  3  4  5  6  7  8  9 10 11 12\u2502 \u25022 12\u2502 \u2502\n\u2502 \u250213 14 15 16 17 18 19 20 21 22 23 24\u2502 \u2514~\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2514~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/tally/","title":"Tally","text":"Tally R\u2190\u2262Y <p><code>Y</code> may be any array.  <code>R</code> is a simple numeric scalar.</p> <p>Tally returns the number of major cells of <code>Y</code>. See Cells and Subarrays\"Cells and Sub-arrays\" on page 1.</p> <p>This can also be expressed as the length of the leading axis or 1 if <code>Y</code> is a scalar. Tally is equivalent to the function <code>{\u236c\u2374(\u2374\u2375),1}</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/tally/#examples","title":"Examples","text":"<pre><code>      \u22622 3 4\u2374\u237310\n2\n      \u22622\n1\n      \u2262\u236c\n0\n</code></pre> <p>Note that <code>\u2262V</code> is useful for returning the length of vector <code>V</code> as a scalar.  (In contrast, <code>\u2374V</code> is a one-element vector.)</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/transpose-monadic/","title":"Transpose monadic","text":"Transpose (Monadic) R\u2190\u2349Y <p><code>Y</code> may be any array.  <code>R</code> is an array of shape <code>\u233d\u2374Y</code>, similar to <code>Y</code> with the order of the axes reversed.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-monadic-structural-functions/transpose-monadic/#examples","title":"Examples","text":"<pre><code>      M\n1 2 3\n4 5 6\n\n      \u2349M\n1 4\n2 5\n3 6\n</code></pre> <pre><code>\n      cube    \u235d 3D array\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n\n13 14 15 16\n17 18 19 20\n21 22 23 24\n\n      \u2349 cube\n 1 13\n 5 17\n 9 21\n\n 2 14\n 6 18\n10 22\n\n 3 15\n 7 19\n11 23\n\n 4 16\n 8 20\n12 24\n\n      \u2374 cube\n2 3 4\n      \u2374 \u2349 cube    \u235d transpose reverses shape\n4 3 2\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/disclose/","title":"Disclose","text":"Disclose (\u2395ML) <p>The symbol chosen to represent Disclose depends on the current Migration Level.</p> <p>If  <code>\u2395ML&lt;2</code>, Disclose is represented by the symbol: <code>\u2283</code>.</p> <p>If  <code>\u2395ML\u22652</code>, Disclose is represented by the symbol: <code>\u2191</code>.</p> <p><code>Y</code> may be any array.  <code>R</code> is an array.  If <code>Y</code> is non-empty, <code>R</code> is the value of the first item of <code>Y</code> taken in ravel order.  If <code>Y</code> is empty, <code>R</code> is the prototype of <code>Y</code>.</p> <p>Disclose is the inverse of Enclose.  The identity <code>R\u2190\u2192\u2283\u2282R</code> holds for all <code>R</code>.  Disclose is also referred to as First.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/disclose/#examples","title":"Examples","text":"<pre><code>      \u22831\n1\n\n      \u22832 4 6\n2\n\n      \u2283'MONDAY' 'TUESDAY'\nMONDAY\n\n      \u2283(1 (2 3))(4 (5 6))\n1  2 3\n\n      \u2283\u23730\n0\n\n      ' '=\u2283''\n1\n\n      \u22831\u2193\u22821,\u22822 3\n0  0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/drop-with-axes/","title":"Drop with axes","text":"Drop with Axes R\u2190X\u2193[K]Y <p><code>Y</code> may be any non-scalar array.  <code>X</code> must be a simple integer scalar or vector.  <code>K</code> is a vector of zero or more axes of <code>Y</code>.</p> <p><code>R</code> is an array of the elements of <code>Y</code> with the first or last <code>X</code>[i] elements removed. Elements are removed from the beginning or end of <code>Y</code> according to the sign of <code>X</code>[i].</p> <p>The rank of <code>R</code> is the same as the rank of <code>Y</code>:</p> <pre><code>       \u2374\u2374R \u2190\u2192 \u2374\u2374Y\n</code></pre> <p>The size of each axis of <code>R</code> is determined by the corresponding element of <code>X</code>:</p> <pre><code>      (\u2374R)[,K] \u2190\u2192 0\u2308(\u2374Y)[,K]-|,X\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/drop-with-axes/#examples","title":"Examples","text":"<pre><code>      \u2395\u2190M\u21902 3 4\u2374\u237324\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n\n13 14 15 16\n17 18 19 20\n21 22 23 24\n\n      1\u2193[2]M\n 5  6  7  8\n 9 10 11 12\n\n17 18 19 20\n21 22 23 24\n\n      2\u2193[3]M\n 3  4\n 7  8\n11 12\n\n15 16\n19 20\n23 24\n\n      2 1\u2193[3 2]M\n 7  8\n11 12\n\n19 20\n23 24\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/drop/","title":"Drop","text":"Drop R\u2190X\u2193Y <p><code>Y</code> may be any array.  <code>X</code> must be a simple scalar or vector of integers. If <code>X</code> is a scalar, it is treated as a one-element vector.  If <code>Y</code> is a scalar, it is treated as an array whose shape is <code>(\u2374X)\u23741</code>. After any scalar extensions, the shape of <code>X</code> must be less than or equal to the rank of <code>Y</code>. Any missing trailing items in <code>X</code> default to 0.</p> <p><code>R</code> is an array with the same rank as <code>Y</code> but with elements removed from the vectors along each of the axes of <code>Y</code>. For the <code>I</code>th axis:</p> <ul> <li>if <code>X[I]</code> is positive, all but the first <code>X[I]</code> elements of the vectors result</li> <li>if <code>X[I]</code> is negative, all but the last <code>X[I]</code> elements of the vectors result</li> </ul> <p>If the magnitude of <code>X[I]</code> exceeds the length of the <code>I</code>th axis, the result is an empty array with zero length along that axis.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/drop/#examples","title":"Examples","text":"<pre><code>      4\u2193'OVERBOARD'\nBOARD\n\n      \u00af5\u2193'OVERBOARD'\nOVER\n\n      \u237410\u2193'OVERBOARD'\n0\n\n      M\nONE\nFAT\nFLY\n      0 \u00af2\u2193M\nO\nF\nF\n\n      \u00af2 \u00af1\u2193M\nON\n      1\u2193M\nFAT\nFLY\n      M3\u21902 3 4\u2374\u2395A\n\n      1 1\u2193M3\nQRST\nUVWX\n      \u00af1 \u00af1\u2193M3\nABCD\nEFGH\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/excluding/","title":"Excluding","text":"Excluding R\u2190X~Y <p><code>X</code> must be a scalar or vector.  <code>R</code> is a vector of the elements of <code>X</code> excluding those elements which occur in <code>Y</code> taken in the order in which they occur in <code>X</code>.</p> <p>Elements of <code>X</code> and <code>Y</code> are considered the same if <code>X\u2261Y</code> returns 1 for those elements.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Excluding. Excluding is also known as Without.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/excluding/#examples","title":"Examples","text":"<pre><code>      'HELLO'~'GOODBYE'\nHLL\n      'MONDAY' 'TUESDAY' 'WEDNESDAY'~'TUESDAY' 'FRIDAY'\n MONDAY  WEDNESDAY\n\n      5 10 15~\u237310\n15\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/expand/","title":"Expand","text":"Expand R\u2190X\\[K]Y <p><code>Y</code> may be any array.  <code>X</code> is a simple integer scalar or vector.  The axis specification is optional.  If present, <code>K</code> must be a simple integer scalar or 1-element vector.  The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis of <code>Y</code> is implied.  The form <code>R\u2190X\u2340Y</code> implies the first axis.  If <code>Y</code> is a scalar, it is treated as a one-element vector.</p> <p>If <code>Y</code> has length 1 along the <code>K</code>th (or implied) axis, it is extended along that axis to match the number of positive elements in <code>X</code>. Otherwise, the number of positive elements in <code>X</code> must be the length of the <code>K</code>th (or implied) axis of <code>Y</code>.</p> <p><code>R</code> is composed from the sub-arrays along the <code>K</code>th axis of <code>Y</code>. If <code>X[I]</code> (an element of <code>X</code>) is the <code>J</code>th positive element in <code>X</code>, then the <code>J</code>th sub-array along the <code>K</code>th axis of <code>Y</code> is replicated <code>X[I]</code> times. If <code>X[I]</code> is negative, then a sub-array of fill elements of <code>Y</code> is replicated <code>|X[I]</code> times and inserted in relative order along the <code>K</code>th axis of the result. If <code>X[I]</code> is zero, it is treated as the value <code>\u00af1</code>. The shape of <code>R</code> is the shape of <code>Y</code> except that the length of the <code>K</code>th axis is <code>+/1\u2308|X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/expand/#examples","title":"Examples","text":"<pre><code>      0\\\u23730\n0\n\n      1 \u00af2 3 \u00af4 5\\'A'\nA  AAA    AAAAA\n\n      M\n1 2 3\n4 5 6\n\n      1 \u00af2 2 0 1\\M\n1 0 0 2 2 0 3\n4 0 0 5 5 0 6\n\n      1 0 1\u2340M\n1 2 3\n0 0 0\n4 5 6\n\n      1 0 1\\[1]M\n1 2 3\n0 0 0\n4 5 6\n\n      1 \u00af2 1\\(1 2)(3 4 5)\n 1 2  0 0  0 0  3 4 5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/intersection/","title":"Intersection","text":"Intersection R\u2190X\u2229Y <p><code>Y</code> must be  a scalar or vector.  <code>X</code> must be a scalar or vector.  A scalar <code>X</code> or <code>Y</code> is treated as a one-element vector.  <code>R</code> is a vector composed of items occurring in both <code>X</code> and <code>Y</code> in the order of occurrence in <code>X</code>.  If an item is repeated in <code>X</code> and also occurs in <code>Y</code>, the item is also repeated in <code>R</code>.</p> <p>Items in <code>X</code> and <code>Y</code> are considered the same if <code>X\u2261Y</code> returns 1 for those items.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Intersection.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/intersection/#examples","title":"Examples","text":"<pre><code>      'ABRA'\u2229'CAR'\nARA\n\n      1 'PLUS' 2 \u2229 \u23735\n1 2\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/left/","title":"Left","text":"Left R\u2190X\u22a3Y <p><code>X</code> and <code>Y</code> may be any arrays.</p> <p>The result <code>R</code> is the left argument <code>X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/left/#example","title":"Example","text":"<pre><code>      42\u22a3'abc' 1 2 3\n42\n</code></pre> <p>Note that when <code>\u22a3</code> is applied using reduction, the derived function selects the first sub-array of the array along the specified dimension. This is implemented as an idiom.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/left/#examples","title":"Examples","text":"<pre><code>      \u22a3/1 2 3\n1\n\n      mat\u2190\u2191'scent' 'canoe' 'arson' 'rouse' 'fleet'\n      \u22a3\u233fmat  \u235d first row                          \nscent\n      \u22a3/mat  \u235d first column                       \nscarf\n</code></pre> <pre><code>      \u22a3/[2]2 3 4\u2374\u237324 \u235d first row from each plane\n 1  2  3  4\n13 14 15 16\n</code></pre> <p>Similarly, with expansion:</p> <pre><code>      \u22a3\\mat\nsssss\nccccc\naaaaa\nrrrrr\nfffff\n      \u22a3\u2340mat\nscent\nscent\nscent\nscent\nscent\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/pick/","title":"Pick","text":"Pick R\u2190X\u2283Y <p><code>Y</code> may be any array.</p> <p><code>X</code> is a scalar or vector of indices of <code>Y</code>.</p> <p><code>R</code> is an item selected from the structure of <code>Y</code> according to <code>X</code>.</p> <p>Elements of <code>X</code> select from successively deeper levels in the structure of <code>Y</code>.  The items of <code>X</code> are simple integer scalars or vectors which identify a set of indices, one per axis at the particular level of nesting of <code>Y</code> in row-major order.  Simple scalar items in <code>Y</code> may be picked by empty vector items in <code>X</code> to any arbitrary depth.</p> <p><code>\u2395IO</code> is an implicit argument of Pick.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/pick/#examples","title":"Examples","text":"<pre><code>      G\u2190('ABC' 1)('DEF' 2)('GHI' 3)('JKL' 4)\n\n      G\u21902 3\u2374G,('MNO' 5)('PQR' 6)\n\n      G\n  ABC  1   DEF  2   GHI  3\n  JKL  4   MNO  5   PQR  6\n\n</code></pre> <pre><code>    ((\u22822 1),1)\u2283G\nJKL\n\n      (\u22822 1)\u2283G\n JKL  4\n\n      ((2 1)1 2)\u2283G\nK\n\n      (5\u2374\u2282\u23730)\u228310\n10\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/replicate/","title":"Replicate","text":"Replicate R\u2190X/[K]Y <p><code>Y</code> may be any array.  <code>X</code> is a simple integer vector or scalar.</p> <p>The axis specification is optional.  If present, <code>K</code> must be a simple integer scalar or 1-element vector.  The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis of <code>Y</code> is implied.  The form <code>R\u2190X\u233fY</code> implies the first axis of <code>Y</code>.</p> <p>If <code>Y</code> has length 1 along the <code>K</code>th (or implied) axis, it is extended along that axis to match the length of <code>X</code>. Otherwise, the length of <code>X</code> must be the length of the <code>K</code>th (or implied) axis of <code>Y</code>. However, if <code>X</code> is a scalar or one-element vector, it will be extended to the length of the <code>K</code>th axis.</p> <p><code>R</code> is composed from sub-arrays along the <code>K</code>th axis of <code>Y</code>.  If <code>X[I]</code> (an element of <code>X</code>) is positive, then the corresponding sub-array is replicated <code>X[I]</code> times.  If <code>X[I]</code> is zero, then the corresponding sub-array of <code>Y</code> is excluded.  If <code>X[I]</code> is negative, then the fill element of  <code>Y</code> is replicated <code>|X[I]</code> times.  Each of the (replicated) sub-arrays and fill items are joined along the <code>K</code>th axis in the order of occurrence.  The shape of <code>R</code> is the shape of <code>Y</code> except that the length of the (implied) <code>K</code>th axis is <code>+/|X</code> (after possible extension).</p> <p>This function is sometimes called Compress when <code>X</code> is Boolean.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/replicate/#examples","title":"Examples","text":"<pre><code>      1 0 1 0 1/\u23735\n1 3 5\n\n      1 \u00af2 3 \u00af4 5/\u23735\n1 0 0 3 3 3 0 0 0 0 5 5 5 5 5\n\n      M\n1 2 3\n4 5 6\n\n      2 0 1/M\n1 1 3\n4 4 6\n\n      0 1\u233fM\n4 5 6\n\n      0 1/[1]M\n4 5 6\n</code></pre> <p>If <code>Y</code> is a singleton <code>(1=\u00d7/\u2374,Y)</code> its value is notionally extended to the length of <code>X</code> along the specified axis.</p> <pre><code>      1 0 1/4\n4 4\n      1 0 1/,3\n3 3\n      1 0 1/1 1\u23745\n5 5\n\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/right/","title":"Right","text":"Right R\u2190X\u22a2Y <p><code>X</code> and <code>Y</code> may be any arrays. The result <code>R</code> is the right argument <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/right/#examples","title":"Examples","text":"<pre><code>      42 \u22a2'abc' 1 2 3\n abc  1 2 3\n</code></pre> <pre><code>      32+1.8\u00d7\u22a20 100      \u235d {32+1.8\u00d7\u2375} 0 100\n32 212\n\n</code></pre> <pre><code>      (\u22a2\u00f7+/) 4 3 0 1     \u235d {\u2375\u00f7+/\u2375} 4 3 0 1\n0.5 0.375 0 0.125\n\n      \u2193\u23632\u22a22 2 2 2\u2374\u2395A     \u235d (\u2193\u23632)2 2 2 2\u2374\u2395A\n  AB  CD    EF  GH  \n  IJ  KL    MN  OP  \n\n</code></pre> <p>When <code>\u22a2</code> is applied using reduction, the derived function selects the last sub-array of the array along the specified dimension. This is implemented as an idiom.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/right/#examples_1","title":"Examples","text":"<pre><code>      \u22a2/1 2 3\n3\n      mat\u2190\u2191'scent' 'canoe' 'arson' 'rouse' 'fleet'\n\n      \u22a2\u233fmat  \u235d last row                           \nfleet\n      \u22a2/mat  \u235d last column\ntenet\n\n      \u22a2/[2]2 3 4\u2374\u237324 \u235d last row from each plane\n 9 10 11 12\n21 22 23 24\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/same/","title":"Same","text":"Same R\u2190\u22a3YR\u2190\u22a2Y <p><code>Y</code> may be any array.</p> <p>The result <code>R</code> is the argument <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/same/#examples","title":"Examples","text":"<pre><code>      \u22a3'abc' 1 2 3\n abc  1 2 3\n</code></pre> <pre><code>      (\u22a2,\u2395size) 'a'\u2395nl 4 \u235d left tine of fork meaning \"it\"\nacc      572\nand      492\nascan    740\nascana   716\nat      1764\navl    17476\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/take-with-axes/","title":"Take with axes","text":"Take with Axes R\u2190X\u2191[K]Y <p><code>Y</code> may be any non-scalar array.  <code>X</code> must be a simple integer scalar or vector.  <code>K</code> is a vector of zero or more axes of <code>Y</code>.</p> <p><code>R</code> is an array of the first or last elements of <code>Y</code> taken along the axes <code>K</code> depending on whether the corresponding element of <code>X</code> is positive or negative respectively.</p> <p>The rank of <code>R</code> is the same as the rank of <code>Y</code>:</p> <pre><code>      \u2374\u2374R \u2190\u2192 \u2374\u2374Y\n</code></pre> <p>The size of each axis of <code>R</code> is determined by the corresponding element of <code>X</code>:</p> <pre><code>      (\u2374R)[,K] \u2190\u2192 |,X\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/take-with-axes/#examples","title":"Examples","text":"<pre><code>      \u2395\u2190M\u21902 3 4\u2374\u237324\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n\n13 14 15 16\n17 18 19 20\n21 22 23 24\n\n      2\u2191[2]M\n 1  2  3  4\n 5  6  7  8\n\n13 14 15 16\n17 18 19 20\n\n      2\u2191[3]M\n 1  2\n 5  6\n 9 10\n\n13 14\n17 18\n21 22\n\n\n      2 \u00af2\u2191[3 2]M\n 5  6\n 9 10\n\n17 18\n21 22\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/take/","title":"Take","text":"Take R\u2190X\u2191Y <p><code>Y</code> may be any array.  <code>X</code> must be a simple integer scalar or vector.</p> <p>If <code>Y</code> is a scalar, it is treated as a one-element array of shape <code>(\u2374,X)\u23741</code>.  The length of <code>X</code> must be the same as or less than the rank of <code>Y</code>. If the length of <code>X</code> is less than the rank of <code>Y</code>, the missing elements of <code>X</code> default to the length of the corresponding axis of <code>Y</code>.</p> <p><code>R</code> is an array of the same rank as <code>Y</code> (after possible extension), and of shape <code>|X</code>.  If <code>X[I]</code> (an element of <code>X</code>) is positive, then <code>X[I]</code> sub-arrays are taken from the beginning of the <code>I</code>th axis of <code>Y</code>.  If <code>X[I]</code> is negative, then <code>X[I]</code> sub-arrays are taken from the end of the <code>I</code>th axis of <code>Y</code>.</p> <p>If more elements are taken than exist on axis <code>I</code>, the extra positions in <code>R</code> are filled with the fill element of <code>Y</code> (<code>\u2282\u220a\u2283Y</code> with <code>\u2395ml\u21900</code>).</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/take/#examples","title":"Examples","text":"<pre><code>      5\u2191'ABCDEF'\nABCDE\n\n      5\u21911 2 3\n1 2 3 0 0\n\n      \u00af5\u21911 2 3\n0 0 1 2 3\n\n      5\u2191(\u23733) (\u23734) (\u23735)\n 1 2 3  1 2 3 4  1 2 3 4 5  0 0 0  0 0 0\n\n</code></pre> <pre><code>      M\n1 2 3 4\n5 6 7 8\n\n      2 3\u2191M\n1 2 3\n5 6 7\n\n      \u00af1 \u00af2\u2191M\n7 8\n      M3\u21902 3 4\u2374\u2395A\n      1\u2191M3\nABCD\nEFGH\nIJKL\n      \u00af1\u2191M3\nMNOP\nQRST\nUVWX\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/union/","title":"Union","text":"Union R\u2190X\u222aY <p><code>Y</code> must be a vector.  <code>X</code> must be a vector.  If either argument is a scalar, it is treated as a one-element vector.  <code>R</code> is a vector of the elements of <code>X</code> catenated with the elements of <code>Y</code> which are not found in <code>X</code>.</p> <p>Items in <code>X</code> and <code>Y</code> are considered the same if <code>X\u2261Y</code> returns 1 for those items.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Union.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/union/#examples","title":"Examples","text":"<pre><code>      'WASH' \u222a 'SHOUT'\nWASHOUT\n\n      'ONE' 'TWO' \u222a 'TWO' 'THREE'\n ONE  TWO  THREE\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/unique-mask/","title":"Unique mask","text":"Unique Mask R\u2190\u2260Y <p><code>Y</code> may be any array.</p> <p><code>R</code> is a Boolean vector whose length is the number of major cells in <code>Y</code>. For each major cell of <code>Y</code>, the corresponding element of  <code>R</code> is 1 if it is the first occurrence of that value, and 0 if it is a duplicate of an earlier major cell.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Unique.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/unique-mask/#examples","title":"Examples","text":"<pre><code>      \u226022 10 22 22 21 10 5 10\n1 1 0 0 1 0 1 0\n\n</code></pre> <pre><code>\n      \u2260 v\u2190'CAT' 'DOG' 'CAT' 'DUCK' 'DOG' 'DUCK'\n1 1 0 1 0 0\n\n      \u22a2mat\u2190\u2191v \nCAT \nDOG \nCAT \nDUCK\nDOG \nDUCK\n      \u2260mat\n1 1 0 1 0 0\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/unique/","title":"Unique","text":"Unique R\u2190\u222aY <p><code>Y</code> may be any array. <code>R</code> is a vector of the unique major cells of <code>Y</code> (the unique items of a vector, the unique rows of a matrix and so forth), in the order in which they first appear in <code>Y</code>.  For further information, see Cells and SubarraysMajor Cells on page 1.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Unique.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selection-functions/unique/#examples","title":"Examples","text":"<pre><code>\n      \u222a 22 10 22 22 21 10 5 10\n22 10 21 5\n\n      \u222a v\u2190'CAT' 'DOG' 'CAT' 'DUCK' 'DOG' 'DUCK'\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502CAT\u2502DOG\u2502DUCK\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n      \u22a2mat\u2190\u2191v                                   \nCAT \nDOG \nCAT \nDUCK\nDOG \nDUCK\n      \u222amat                                       \nCAT \nDOG \nDUCK\n\n</code></pre> <pre><code>      a\u21903 4 5\u2374\u237320\n      a\n 1  2  3  4  5\n 6  7  8  9 10\n11 12 13 14 15\n16 17 18 19 20\n\n 1  2  3  4  5\n 6  7  8  9 10\n11 12 13 14 15\n16 17 18 19 20\n\n 1  2  3  4  5\n 6  7  8  9 10\n11 12 13 14 15\n16 17 18 19 20\n      \u222aa\n 1  2  3  4  5\n 6  7  8  9 10\n11 12 13 14 15\n16 17 18 19 20\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/","title":"Index","text":"Index R\u2190X\u2337Y <p><code>X</code> must be a scalar or vector of depth <code>\u22642</code> of integers each <code>\u2265\u2395IO</code>. <code>Y</code> may be any array. In general, the result <code>R</code> is similar to that obtained by square-bracket indexing in that:</p> <pre><code>      (I J ... \u2337 Y) \u2261 Y[I;J;...]\n</code></pre> <p>The length of left argument <code>X</code> must be less than or equal to the rank of right argument <code>Y</code>. Any missing trailing items of <code>X</code> default to the index vector of the corresponding axis of <code>Y</code>.</p> <p>Note that in common with square-bracket indexing, items of the left argument <code>X</code> may be of any rank and that the shape of the result is the concatenation of the shapes of the items of the left argument:</p> <pre><code>      (\u2374X\u2337Y) \u2261 \u2191,/\u2374\u00a8X\n</code></pre> <p>Index is sometimes referred to as squad indexing.</p> <p>Note that index may be used with selective specification.</p> <p><code>\u2395IO</code> is an implicit argument of index.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/#examples","title":"Examples","text":"<pre><code>      \u2395IO\u21901\n\n      VEC\u2190111 222 333 444\n      3\u2337VEC\n333\n      (\u22824 3)\u2337VEC\n444 333\n      (\u22822 3\u23743 1 4 1 2 3)\u2337VEC\n333 111 444\n111 222 333\n\n      \u2395\u2190MAT\u219010\u22a5\u00a8\u23733 4\n11 12 13 14\n21 22 23 24\n31 32 33 34\n\n      2 1\u2337MAT\n21\n      2\u2337MAT\n21 22 23 24\n\n</code></pre> <pre><code>\n      3(2 1)\u2337MAT\n32 31\n      (2 3)1\u2337MAT\n21 31\n      (2 3)(,1)\u2337MAT\n21\n31\n      \u2374(2 1\u23741)(3 4\u23742)\u2337MAT\n2 1 3 4\n      \u2374\u236c \u236c\u2337MAT\n0 0\n      (3(2 1)\u2337MAT)\u21900 \u22c4 MAT    \u235d Selective assignment.\n11 12 13 14\n21 22 23 24\n 0  0 33 34\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/#indexing-classes","title":"Indexing  Classes","text":"<p>If <code>Y</code> is a ref to an instance of a Class with a Default property, <code>\u2337</code> is applied to the Default property. Similarly, <code>\u2337</code> applied to a COM or .NET collection returns the appropriate item(s) of the collection.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/#example","title":"Example","text":"<pre><code>      \u2191\u2395SRC c\n:Class c                 \n    :Property Default p  \n    :Access Public Shared\n        \u2207 r\u2190get          \n          r\u21902 3 4\u2374\u2395A     \n        \u2207                \n    :EndProperty         \n:EndClass                \n\n      2\u2337c\nMNOP\nQRST\nUVWX\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/deal/","title":"Deal","text":"Deal R\u2190X?Y <p><code>Y</code> must be a simple scalar or 1-element vector containing a non-negative integer. <code>X</code> must be a simple scalar or 1-element vector containing a non-negative integer and <code>X\u2264Y</code>.</p> <p><code>R</code> is an integer  vector obtained by making <code>X</code> random selections from <code>\u2373Y</code> without repetition.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/deal/#examples","title":"Examples","text":"<pre><code>\n      13?52\n7 40 24 28 12 3 36 49 20 44 2 35 1\n\n      13?52\n20 4 22 36 31 49 45 28 5 35 37 48 40\n</code></pre> <p><code>\u2395IO</code> and <code>\u2395RL</code> are implicit arguments of Deal. A side effect of Deal is to change the value of <code>\u2395RL</code>. See \"Random Link: \" on page 1.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/find/","title":"Find","text":"Find R\u2190X\u2377Y <p><code>X</code> and <code>Y</code> may be any arrays.  <code>R</code> is a simple Boolean array the same shape as Y which identifies occurrences of <code>X</code> within <code>Y</code>.</p> <p>If the rank of <code>X</code> is smaller than the rank of <code>Y</code>, <code>X</code> is treated as if it were the same rank with leading axes of size 1.  For example a vector is treated as a 1-row matrix.</p> <p>If the rank of <code>X</code> is larger than the rank of <code>Y</code>, no occurrences of <code>X</code> are found in <code>Y</code>.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are implicit arguments of Find.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/find/#examples","title":"Examples","text":"<pre><code>      'AN'\u2377'BANANA'\n0 1 0 1 0 0\n\n      'ANA'\u2377'BANANA'\n0 1 0 1 0 0\n\n      'BIRDS' 'NEST'\u2377'BIRDS' 'NEST' 'SOUP'\n1 0 0\n\n      MAT\nIS YOU IS\nOR IS YOU\nISN'T\n      'IS'\u2377MAT\n1 0 0 0 0 0 0 1 0\n0 0 0 1 0 0 0 0 0\n1 0 0 0 0 0 0 0 0\n      'IS YOU'\u2377MAT\n1 0 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/grade-down-dyadic/","title":"Grade down dyadic","text":"Grade Down (Dyadic) R\u2190X\u2352Y <p><code>Y</code> must be a simple character array of rank greater than 0.  <code>X</code> must be a simple character array of rank 1 or greater.  <code>R</code> is a simple integer vector of shape <code>1\u2191\u2374Y</code> containing the permutation of <code>\u23731\u2191\u2374Y</code> that places the sub-arrays of <code>Y</code> along the first axis in descending order according to the collation sequence <code>X</code>.  The indices of any set of identical sub-arrays in <code>Y</code> occur in <code>R</code> in ascending order.</p> <p>If <code>X</code> is a vector, the following identity holds:</p> <pre><code>      X\u2352Y \u2190\u2192 \u2352X\u2373Y\n</code></pre> <p>A left argument of rank greater than 1 allows successive resolution of duplicate orderings in the following way.</p> <p>Starting with the last axis:</p> <ul> <li>The characters in the right argument are located along the current axis of the left argument.  The position of the first occurrence gives the ordering value of the character.</li> <li>If a character occurs more than once in the left argument its lowest position along the current axis is used.</li> <li>If a character of the right argument does not occur in the left argument, the ordering value is one more than the maximum index of the current axis - as with dyadic iota.</li> </ul> <p>The process is repeated using each axis in turn, from the last to the first, resolving duplicates until either no duplicates result or all axes have been exhausted.</p> <p>For example, if index origin is 1:</p> Left argument: Right argument: abc ABA ab ac Aa Ac <p>Along last axis:</p> Character: Value: Ordering: ab ac Aa Ac 1 2 1 3 1 1 1 3 3 =1   &lt;-duplicate ordering with 4 =1   &lt;-respect to last axis. <p>Duplicates exist, so resolve these with respect to the first axis:</p> Character: Value: Ordering: ac Ac 1 1 2 1 2 1 <p>So the final row ordering is:</p> <pre><code>        ab              3\n        ac              2\n        Aa              4\n        Ac              1\n</code></pre> <p>That is, the order of rows is 4 2 1 3 which corresponds to a descending row sort of:</p> <pre><code>        Ac              1\n        ac              2\n        ab              3\n        Aa              4\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/grade-down-dyadic/#examples","title":"Examples","text":"<pre><code>      \u2374S1\n2 27\n      S1\n ABCDEFGHIJKLMNOPQRSTUVWXYZ\n abcdefghijklmnopqrstuvwxyz\n      S2\n ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n      S3\n AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n      S4\n ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n</code></pre> <p>The following results are tabulated for comparison:</p> <pre><code>X       X[S1\u2352X;]    X[S2\u2352X;]    X[S3\u2352X;]    X[S4\u2352X;]\nFIRsT     TAPE        rAT         TAPE        TAPE\nTAP       TAP         fIRST       TAP         TAP\nRATE      RATE        TAPE        rAT         RATE\nFiRST     rAT         TAP         RATE        rAT\nFIRST     RAT         RATE        RAT         RAT\nrAT       MAT         RAT         MAT         MAT\nfIRST     fIRST       MAT         fIRST       FIRsT\nTAPE      FiRST       FiRST       FiRST       FiRST\nMAT       FIRsT       FIRsT       FIRsT       FIRST\nRAT       FIRST       FIRST       FIRST       fIRST\n</code></pre> <p><code>\u2395IO</code> is an implicit argument of Grade Down.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/grade-down-monadic/","title":"Grade down monadic","text":"Grade Down (Monadic) R\u2190\u2352Y <p><code>Y</code> may be any array of rank greater than 0 but may not contain namespaces.  <code>R</code> is an integer vector being the permutation of <code>\u23731\u2191\u2374Y</code> that places the sub-arrays along the first axis in descending order. For the rules for comparing items of <code>Y</code> with one another, see Grade Up (Monadic) on page 1.</p> <p><code>\u2395IO</code> is an implicit argument of Grade Down.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/grade-down-monadic/#examples","title":"Examples","text":"<pre><code>      \u235222.5 1 15 3 \u00af4\n1 3 4 2 5\n\n</code></pre> <pre><code>      M\n2 3 5\n1 4 7\n\n2 3 4\n5 2 4\n\n2 3 5\n1 2 6\n      \u2352M\n1 3 2\n\n</code></pre> <p>Note that character arrays sort differently in the Unicode and Classic Editions.</p> <pre><code>      M\nGoldilocks\nporridge   \nPorridge   \n3 bears \n</code></pre> Unicode Edition Classic Edition \u2352M 2 3 1 4 \u2352M 3 1 4 2 M[\u2352M;] porridge Porridge Goldilocks 3 bears M[\u2352M;] Porridge Goldilocks 3 bears porridge <pre><code>      \u2374pb\n6 3\n      pb\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502Rivers  \u2502Jason\u2502554\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Daintree\u2502John \u2502532\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Rivers  \u2502Jason\u2502543\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Foad    \u2502Jay  \u2502558\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Scholes \u2502John \u2502547\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Scholes \u2502John \u2502535\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n      \u2352pb\n5 6 1 3 4 2\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/grade-up-dyadic/","title":"Grade up dyadic","text":"Grade Up (Dyadic) R\u2190X\u234bY <p><code>Y</code> must be a simple character array of rank greater than 0.  <code>X</code> must be a simple character array of rank 1 or greater.  <code>R</code> is a simple integer vector being the permutation of <code>\u23731\u2191\u2374Y</code> that places the sub-arrays of <code>Y</code> along the first axis in ascending order according to the collation sequence <code>X</code>.</p> <p>If <code>X</code> is a vector, the following identity holds:</p> <pre><code>      X\u234bY \u2190\u2192 \u234bX\u2373Y\n</code></pre> <p>If <code>X</code> is a higher-rank array, each axis of <code>X</code> represents a grading attribute in increasing order of importance (the first axis is the least significant and the last axis is the most significant).  If a character is repeated in <code>X</code>, it is treated as though it were located at the position in the array determined by the lowest index in each axis for all occurrences of the character.  The character has the same weighting as the character located at the derived position in <code>X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/grade-up-dyadic/#examples","title":"Examples","text":"<pre><code>      (2 2\u2374'ABBA') \u234b 'AB'[?5 2\u23742] \u235d A and B are equivalent\n1 2 3 4 5\n\n        ]display A\u21902 14\u2374' abcdegiklmnrt ABCDEGIKLMNRT'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 abcdegiklmnrt\u2502\n\u2502 ABCDEGIKLMNRT\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      V\u2190'Ab' 'AB' 'aba' 'ABA' 'abaca' 'abecedarian'\n      V,\u2190'Abelian' 'black' 'blackball' 'black belt'\n      V,\u2190'blacking' 'Black Mass'\n\n      ]display M\u2190\u2191V\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193Ab         \u2502\n\u2502AB         \u2502\n\u2502aba        \u2502\n\u2502ABA        \u2502\n\u2502abaca      \u2502\n\u2502abecedarian\u2502\n\u2502Abelian    \u2502\n\u2502black      \u2502\n\u2502blackball  \u2502\n\u2502black belt \u2502\n\u2502blacking   \u2502\n\u2502Black Mass \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>  ]display M (M[(,A)\u234bM;]) (M[(,\u2349A)\u234bM;]) (M[A\u234bM;])\n</code></pre> <p>\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2193Ab         \u2502 \u2193aba        \u2502 \u2193aba        \u2502 \u2193Ab         \u2502 \u2502 \u2502 \u2502AB         \u2502 \u2502abaca      \u2502 \u2502abaca      \u2502 \u2502AB         \u2502 \u2502 \u2502 \u2502aba        \u2502 \u2502abecedarian\u2502 \u2502abecedarian\u2502 \u2502aba        \u2502 \u2502 \u2502 \u2502ABA        \u2502 \u2502black      \u2502 \u2502Ab         \u2502 \u2502ABA        \u2502 \u2502 \u2502 \u2502abaca      \u2502 \u2502black belt \u2502 \u2502Abelian    \u2502 \u2502abaca      \u2502 \u2502 \u2502 \u2502abecedarian\u2502 \u2502blackball  \u2502 \u2502AB         \u2502 \u2502abecedarian\u2502 \u2502 \u2502 \u2502Abelian    \u2502 \u2502blacking   \u2502 \u2502ABA        \u2502 \u2502Abelian    \u2502 \u2502 \u2502 \u2502black      \u2502 \u2502Ab         \u2502 \u2502black      \u2502 \u2502black      \u2502 \u2502 \u2502 \u2502blackball  \u2502 \u2502Abelian    \u2502 \u2502black belt \u2502 \u2502black belt \u2502 \u2502 \u2502 \u2502black belt \u2502 \u2502AB         \u2502 \u2502blackball  \u2502 \u2502Black Mass \u2502 \u2502 \u2502 \u2502blacking   \u2502 \u2502ABA        \u2502 \u2502blacking   \u2502 \u2502blackball  \u2502 \u2502 \u2502 \u2502Black Mass \u2502 \u2502Black Mass \u2502 \u2502Black Mass \u2502 \u2502blacking   \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518'</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/grade-up-monadic/","title":"Grade up monadic","text":"Grade Up (Monadic) R\u2190\u234bY <p><code>Y</code> may be any array of rank greater than 0 but may not contain namespaces.  <code>R</code> is an integer vector being the permutation of <code>\u23731\u2191\u2374Y</code> that places the sub-arrays along the first axis in ascending order. The rules for comparing items of <code>Y</code> with one another are as follows:</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/grade-up-monadic/#rules-for-comparing-simple-scalars","title":"Rules for comparing simple scalars","text":"<ul> <li>Numeric comparisons are  exact, as if <code>\u2395CT\u2190\u2395DCT\u21900</code> and <code>\u2395FR\u21901287</code></li> <li>Two real numbers are compared numerically, thus 1.2 precedes 3.</li> <li>In the  Unicode Edition two characters are compared numerically according to their position in the Unicode table. Thus <code>'a'</code> (<code>\u2395UCS 97</code>) precedes<code>'b'</code> (<code>\u2395UCS 98</code>). In the Classic Edition characters are compared according to their index in <code>\u2395AV</code>.</li> <li>Complex numbers are ordered by first comparing their real parts. If these are equal, the order is determined by comparing their imaginary parts.Thus <code>1J\u00af2</code> precedes <code>1</code> which precedes <code>1J2</code>.</li> <li><code>\u2395NULL</code> (which represents a null item obtained from an external source) precedes all numbers, and all numbers precede all characters.Thus <code>\u2395NULL</code> precedes 100, and 100 precedes <code>'A'</code>. </li> </ul>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/grade-up-monadic/#rules-for-comparing-non-scalar-arrays","title":"Rules for comparing non-scalar arrays","text":"<ul> <li>Arrays are compared item by item in ravel order.</li> <li>For arrays of equal  shape, the order is determined by the first pair of items which differ, thus <code>(1949 4 29 )</code> precedes <code>(1949 4 30 )</code>. Similarly <code>('April' 29 )</code> precedes <code>('April' 30 )</code>.</li> <li>Arrays with the same rank but different shape are ordered as if the shorter array were padded with items that precede all other types of item (negative infinity) including <code>\u2395NULL</code>. Thus <code>'car'</code> precedes <code>'carpet'</code>and <code>(1949 4)</code> precedes <code>(1949 4 30)</code>. An alternative model is to say that shorter arrays precede longer ones that begin the same way. For character vectors this is described as Lexicographical ordering, which is the order that words appear in a dictionary.</li> <li>Arrays with differing rank are ordered by first extending the shape of the lower-ranked array with 1s at the beginning, and then comparing the resultant equal-rank arrays as described above. So, to compare a vector (rank 1) with a matrix (rank 2), the vector is reshaped into a 1-row matrix.</li> <li>Empty arrays are compared first by type alone, so an empty numeric array precedes an empty character array, regardless of rank or shape.Thus <code>((0 3 2)\u23740)</code> precedes <code>''</code>. If the empty arrays are of the same type, they are sorted in order of their shape vector, working right to left.So <code>((0 5 2 )\u237499)</code> precedes <code>((0 3 4 )\u23740)</code>  and<code>((0 3 4)\u2374'')</code> precedes <code>((1 0 5 4)\u2374'')</code>.</li> </ul> <p><code>\u2395IO</code> is an implicit argument of Grade Up</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/grade-up-monadic/#examples","title":"Examples","text":"<pre><code>      \u234b22.5 1 15 3 \u00af4\n5 2 4 3 1\n\n</code></pre> <pre><code>      M\n2 3 5\n1 4 7\n\n2 3 4\n5 2 4\n\n2 3 5\n1 2 6\n      \u234bM\n2 3 1\n\n</code></pre> <p>Note that character arrays sort differently in the Unicode and Classic Editions.</p> <pre><code>      M\nGoldilocks\nporridge   \nPorridge   \n3 bears   \n</code></pre> Unicode Edition Classic Edition \u234bM 4 1 3 2 \u234bM 2 4 1 3 M[\u234bM;] 3 bears Goldilocks Porridge porridge M[\u234bM;] porridge 3 bears Goldilocks Porridge <pre><code>      \u2374pb\n6 3\n      pb\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502Rivers  \u2502Jason\u2502554\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Daintree\u2502John \u2502532\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Rivers  \u2502Jason\u2502543\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Foad    \u2502Jay  \u2502558\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Scholes \u2502John \u2502547\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Scholes \u2502John \u2502535\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n      \u234bpb\n2 4 3 1 6 5\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/index-generator/","title":"Index generator","text":"Index Generator R\u2190\u2373Y <p><code>Y</code> must be a simple scalar or vector array of non-negative numbers. <code>R</code> is a numeric array composed of the set of all possible coordinates of an array of shape <code>Y</code>. The shape of <code>R</code> is <code>Y</code> and each element of <code>R</code> occurs in its self-indexing position in <code>R</code>. In particular, the following identity holds:</p> <pre><code>      \u2373Y \u2190\u2192 (\u2373Y)[\u2373Y]\n</code></pre> <p><code>\u2395IO</code> is an implicit argument of Index Generator. This function is also known as Interval.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/index-generator/#examples","title":"Examples","text":"<pre><code>      \u2395IO\n1\n      \u2374\u23730\n0\n      \u23735\n1 2 3 4 5\n\n      \u23732 3\n 1 1  1 2  1 3\n 2 1  2 2  2 3\n\n      \u22a2A\u21902 4\u2374'MAINEXIT'\nMAIN\nEXIT\n      A[\u2373\u2374A]\nMAIN\nEXIT\n\n</code></pre> <pre><code>      \u2395IO\u21900\n      \u23735\n0 1 2 3 4\n\n      \u23732 3\n 0 0  0 1  0 2\n 1 0  1 1  1 2\n\n      A[\u2373\u2374A]\nMAIN\nEXIT\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/index-of/","title":"Index of","text":"Index Of R\u2190X\u2373Y <p><code>Y</code> may be any array. <code>X</code> may be any array of rank 1 or more.</p> <p>In general, the function locates the first occurrence of sub-arrays in <code>Y</code> which match major cells of  <code>X</code>, where a major cell is  a sub-array on the leading dimension of <code>X</code> with shape <code>1\u2193\u2374X</code>. The shape of the result <code>R</code> is <code>(1-\u2374\u2374X)\u2193\u2374Y</code>.</p> <p>If a sub-array of <code>Y</code> cannot be found in <code>X</code>, then the corresponding element of <code>R</code> will be <code>\u2395IO+\u2283\u2374X</code>.</p> <p>In particular, if <code>X</code> is a vector, the result <code>R</code> is a simple integer array with the same shape as <code>Y</code> identifying where elements of <code>Y</code> are first found in <code>X</code>. If an element of <code>Y</code> cannot be found in <code>X</code>, then the corresponding element of <code>R</code> will be <code>\u2395IO+\u2283\u2374X</code>.</p> <p>Elements of <code>X</code> and <code>Y</code> are considered the same if <code>X\u2261Y</code> returns 1 for those elements.</p> <p><code>\u2395IO</code>,  <code>\u2395CT</code> and <code>\u2395DCT</code> are implicit arguments of Index Of.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/index-of/#examples","title":"Examples","text":"<pre><code>      \u2395IO\u21901\n\n      2 4 3 1 4\u23731 2 3 4 5\n4 1 3 2 6\n\n      'CAT' 'DOG' 'MOUSE'\u2373'DOG' 'BIRD'\n2 4\n</code></pre> <pre><code>      X\u21903 4\u2374\u237312\n</code></pre> <pre><code>\n      X\n1  2  3  4\n5  6  7  8\n9 10 11 12\n</code></pre> <pre><code>\n      X\u23731 2 3 4\n1\n\n</code></pre> <pre><code>\n      Y\u21902 4\u23741 2 3 4 9 10 11 12\n      Y\n1  2  3  4\n9 10 11 12\n\n      X\u2373Y\n1 3\n      X\u23732 3 4 1\n4\n\n</code></pre> <pre><code>      X1\u219010 100 1000\u2218.+X\n      X1\n  11   12   13   14\n  15   16   17   18\n  19   20   21   22\n\n 101  102  103  104\n 105  106  107  108\n 109  110  111  112\n\n1001 1002 1003 1004\n1005 1006 1007 1008\n1009 1010 1011 1012\n\n</code></pre> <pre><code>      X1\u2373100 1000\u2218.+X\n2 3\n</code></pre> <pre><code>      x\nUnited Kingdom\nGermany       \nFrance        \nItaly         \nUnited States \nCanada        \nJapan         \nCanada        \nFrance        \n      y\nUnited Kingdom\nGermany       \nFrance        \nItaly         \nUSA           \n\nCanada        \nJapan         \nChina         \nIndia         \nDeutschland   \n\n</code></pre> <pre><code>      \u2374x\n9 14\n      \u2374y\n2 5 14\n      x\u2373y\n1 2  3  4 10\n6 7 10 10 10\n\n      x\u2373x\n1 2 3 4 5 6 7 6 3\n\n</code></pre> <p>Note that the expression <code>y\u2373x</code> signals a <code>LENGTH ERROR</code> because it looks for major cells in the left argument, whose shape is <code>5 14</code> (that is <code>1\u2193\u2374y</code>), which is not the same as the trailing shape of <code>x</code>.</p> <pre><code>\n      y\u2373x\nLENGTH ERROR\n      y\u2373x\n     \u2227\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/index-with-axes/","title":"Index with axes","text":"Index with Axes R\u2190{X}\u2337[K]Y <p><code>X</code> must be a scalar or vector of depth <code>\u22642</code>, of integers each <code>\u2265\u2395IO</code>. <code>Y</code> may be any array. <code>K</code> is a simple scalar or vector specifying axes of <code>Y</code>. The length of <code>K</code> must be the same as the length of <code>X</code>:</p> <pre><code>      (\u2374,X) \u2261 \u2374,K\n</code></pre> <p>In general, the result <code>R</code> is similar to that obtained by square-bracket indexing with elided subscripts. Items of <code>K</code> distribute items of <code>X</code> along the axes of <code>Y</code>. For example:</p> <pre><code>      I J \u2337[1 3] Y  \u2190\u2192  Y[I;;J] \n</code></pre> <p>Note that index with axis may be used with selective specification. <code>\u2395IO</code> is an implicit argument of index with axis.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/index-with-axes/#examples","title":"Examples","text":"<pre><code>     \u2395IO\u21901\n\n     \u2395\u2190CUBE\u219010\u22a5\u00a8\u23732 3 4\n111 112 113 114\n121 122 123 124\n131 132 133 134\n\n211 212 213 214\n221 222 223 224\n231 232 233 234\n\n      2\u2337[1]CUBE\n211 212 213 214\n221 222 223 224\n231 232 233 234\n\n      2\u2337[3]CUBE\n112 122 132\n212 222 232\n\n      CUBE[;;2] \u2261 2\u2337[3]CUBE\n1\n      (1 3)4\u2337[2 3]CUBE\n114 134\n214 234\n\n      CUBE[;1 3;4] \u2261 (1 3)4\u2337[2 3]CUBE\n1\n\n</code></pre> <pre><code>      (2(1 3)\u2337[1 3]CUBE)\u21900 \u22c4 CUBE \u235d Selective assignment.\n111 112 113 114\n121 122 123 124\n131 132 133 134\n\n  0 212   0 214\n  0 222   0 224\n  0 232   0 234\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/interval-index/","title":"Interval index","text":"Interval Index R\u2190X\u2378Y <p>Classic Edition:  the symbol <code>\u2378</code> (Iota Underbar) is not available in Classic Edition, and Interval Index is instead represented by <code>\u2395U2378</code>.</p> <p><code>X</code> is an ordered non-scalar array that represents a set of intervals or ranges.</p> <p>Note that the <code>i</code>th interval starts at  <code>X[i]</code>, then includes all subsequent values up to but not including <code>X[i+1]</code>.</p> <p>For example, if <code>X</code> is  <code>(1 3 5)</code> it defines 4 intervals numbered 0 to 3 as follows.</p> 0 less than 1 <code>&lt;1</code> 1 between 1 and 3 <code>(\u22651)\u2227(&lt;3)</code> 2 between 3 and 5 <code>(\u22653)\u2227(&lt;5)</code> 3 greater than or equal to 5 <code>\u22655</code> <p>If <code>X</code> is <code>'AEIOU'</code> it defines 6 intervals numbered 0 to 5 as follows:</p> 0 before A <code>\u2395UCS 0,\u237364</code> 1 between A and E <code>ABCD</code> 2 between E and I <code>EFGH</code> 3 between I and O <code>IJKLMN</code> 4 between O and U <code>OPQREST</code> 5 U and after <code>UVWXYZ...</code> <p><code>Y</code> is an array of the same type (numeric or character) as <code>X</code>.</p> <p>The result <code>R</code> is an integer array that identifies into which interval  the corresponding value in <code>Y</code> falls.</p> <p>Like dyadic <code>\u2373</code> (see Index Of on page 1), Interval Index works with major cells. For a vector these are its elements; for a matrix its rows, and so forth.</p> <p><code>X</code> and <code>Y</code> are compared using  the same logic as monadic <code>\u234b</code> (see Grade Up (Monadic) on page 1) which is independent of <code>\u2395CT</code> and <code>\u2395DCT</code>.</p> <p><code>\u2395IO</code> is an implicit argument of Interval Index. In all the following examples, <code>\u2395IO</code> is 1.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/interval-index/#examples","title":"Examples","text":"<pre><code>\n      10 20 30\u237811 1 31 21\n1 0 3 2\n</code></pre> <p>In the above example:</p> <ul> <li>11 is between <code>X[1]</code> and <code>X[2]</code> so the answer is 1.</li> <li>1 is less than  <code>X[1]</code> so the answer is 0</li> <li>31 is greater than <code>X[\u2374X]</code> so the answer is 3</li> <li>21 is between <code>X[2]</code> and <code>X[3]</code> so the answer is 2.```apl       'AEIOU' \u2378 'DYALOG' 1 5 1 3 4 2</li> </ul> <pre><code>\nAnd in the alphabetic example above:\n\n- \"D\" is between `X[1]` and `X[2]`, so the answer is 1\n- \"Y\" is after `X[\u2374X]` so the answer is 5\n- \"A\" is between `X[1]` and `X[2]`, so the answer is 1\n- as so on ...\n## Example (Classification)\n\nCommercially, olive oil is graded as follows:\n\n- if its acidity is less than 0.8%, as \"Extra Virgin\"\n- if its acidity is less than 2%, as \"Virgin\"\n- if its acidity is less than 3.3%, as \"Ordinary\"\n- otherwise, as \"Lampante\"```apl\n\n     grades\u2190'Extra Virgin' 'Virgin' 'Ordinary' 'Lampante'\n     acidity\u21900.8 2 3.3\n\n     samples\u21901.3 1.9 0.7 4 .6 3.2\n     acidity\u2378samples\n1 1 0 3 0 2\n     samples,\u236agrades[1+acidity\u2378samples]\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021.3\u2502Virgin      \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021.9\u2502Virgin      \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25020.7\u2502Extra Virgin\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25024  \u2502Lampante    \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25020.6\u2502Extra Virgin\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25023.2\u2502Ordinary    \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/interval-index/#example-data-consolidation-by-interval","title":"Example (Data Consolidation by Interval)","text":"<p><code>x</code> represents some data sampled in chronological order at timestamps <code>t</code>.</p> <pre><code>\n      \u2374x\n200000\n      x\n3984300 2020650 819000 1677100 3959200 2177250 3431800 ...\n</code></pre> <pre><code>\n      \u2374t\n200000 3\n</code></pre> <pre><code>      (10\u2191t) (\u00af10\u2191t)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020 0 0\u250223 59 54\u2502\n\u25020 0 0\u250223 59 55\u2502\n\u25020 0 0\u250223 59 56\u2502\n\u25020 0 0\u250223 59 56\u2502\n\u25020 0 0\u250223 59 58\u2502\n\u25020 0 2\u250223 59 58\u2502\n\u25020 0 3\u250223 59 59\u2502\n\u25020 0 3\u250223 59 59\u2502\n\u25020 0 4\u250223 59 59\u2502\n\u25020 0 5\u250223 59 59\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>u</code> represents timestamps for 5-minute intervals:</p> <pre><code>\n      \u2374u\n288 3\n      (10\u2191u) (\u00af10\u2191u)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020  0 0\u250223 10 0\u2502\n\u25020  5 0\u250223 15 0\u2502\n\u25020 10 0\u250223 20 0\u2502\n\u25020 15 0\u250223 25 0\u2502\n\u25020 20 0\u250223 30 0\u2502\n\u25020 25 0\u250223 35 0\u2502\n\u25020 30 0\u250223 40 0\u2502\n\u25020 35 0\u250223 45 0\u2502\n\u25020 40 0\u250223 50 0\u2502\n\u25020 45 0\u250223 55 0\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Therefore, the expression <code>(u\u2378t){+/\u2375}\u2338x</code> summarises <code>x</code> in 5-minute intervals.</p> <pre><code>\n      u \u2378 t\n1 1 1 1 1 1 1 1 1 1 ... 288 288 288 288 288 288\n\n      (u\u2378t) {+/\u2375}\u2338 x\n1339083050 1365108650 1541944750 1393476000 1454347100 ...\n\n      (u\u2378t) {(\u237a\u2337u),+/\u2375}\u2338 x\n 0  0 0 1339083050\n 0  5 0 1365108650\n 0 10 0 1541944750\n 0 15 0 1393476000\n   ...\n23 45 0 1388823150\n23 50 0 1453472350\n23 55 0 1492078850\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/interval-index/#higher-rank-left-argument","title":"Higher-Rank Left Argument","text":"<p>If <code>X</code> is a higher rank array, the function compares sub-arrays in <code>Y</code>  with the major cells of  <code>X</code>, where a major cell is  a sub-array on the leading dimension of <code>X</code> with shape <code>1\u2193\u2374X</code>. In this case, the shape of the result <code>R</code> is <code>(1-\u2374\u2374X)\u2193\u2374Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/interval-index/#example","title":"Example","text":"<pre><code>      x \u2190 \u2191 'Fi' 'Jay' 'John' 'Morten' 'Roger'\n      x\nFi\nJay   \nJohn  \nMorten\nRoger \n      \u2374x\n5 6\n\n</code></pre> <pre><code>      y \u2190 x \u236a \u2191 'JD' 'Jd' 'Geoff' 'Alpha' 'Omega' 'Zeus  '\n      y\nFi\nJay   \nJohn  \nMorten\nRoger \nJD    \nJd    \nGeoff \nAlpha \nOmega \nZeus\n\n</code></pre> <pre><code>      x \u2378 y\n1 2 3 4 5 1 2 1 0 4 5\n      y ,\u236a x\u2378y\nFi     1\nJay    2\nJohn   3\nMorten 4\nRoger  5\nJD     1\nJd     2\nGeoff  1\nAlpha  0\nOmega  4\nZeus   5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/interval-index/#further-example","title":"Further Example","text":"<pre><code>      \u2374x\n5 6\n      \u2374y\n3 3 6\n      x\nFi    \nJay   \nJohn  \nMorten\nRoger \n      y\nFi    \nJay   \nJohn  \n\nMorten\nRoger \nJD    \n\nJd    \nGeoff \nAlpha \n      x\u2378y\n1 2 3\n4 5 1\n2 1 0\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/interval-index/#nested-array-example","title":"Nested Array Example","text":"<p>A card-player likes to sort a hand into suits spades, hearts, diamond, clubs (fortunately alphabetic) and high-to-low within each suit.</p> <pre><code>      suits\u2190'Clubs' 'Diamonds' 'Hearts' 'Spades'\n      pack\u2190,(\u2282\u00a8suits)\u2218.,1\u219314 \u235d 11=Jack ... 14=Ace\n      hand\u2190\u2191(,pack)[7?52]\n      hand\u2190hand[\u2352hand;]\n      hand\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502Spades  \u250212\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u250212\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u25027 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u25022 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Diamonds\u250211\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Diamonds\u25029 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Clubs   \u25028 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n\n</code></pre> <p>Another card, the 10 of diamonds is dealt. Where must it go in the hand ?</p> <pre><code>      (\u2296hand)\u2378'Diamonds' 10 \u235d left arg must be sorted up\n2\n      (\u00af2\u2193hand)\u236a'Diamonds' 10\u236a\u00af2\u2191hand\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502Spades  \u250212\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u250212\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u25027 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u25022 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Diamonds\u250211\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Diamonds\u250210\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Diamonds\u25029 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Clubs   \u25028 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n</code></pre> <p>Note that if <code>(\u2227/Y\u220aX)</code> and <code>X</code> is sorted and <code>\u2395CT=0</code> ,then <code>x\u2378y</code> is the same as <code>x\u2373y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/match/","title":"Match","text":"Match R\u2190X\u2261Y <p><code>Y</code> may be any array.  <code>X</code> may be any array.  <code>R</code> is a simple Boolean scalar.  If <code>X</code> is identical to <code>Y</code>, then <code>R</code> is 1.  Otherwise <code>R</code> is 0.</p> <p>Non-empty arrays are identical if they have the same structure and the same values in all corresponding locations.  Empty arrays are identical if they have the same shape and the same prototype (disclosed nested structure).</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Match.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/match/#examples","title":"Examples","text":"<pre><code>      \u236c\u2261\u23730\n1\n      ''\u2261\u23730\n0\n      A\nTHIS\nWORD\n\n      A\u22612 4\u2374'THISWORD'\n1\n      A\u2261\u237310\n0\n      +B\u2190A A\n THIS  THIS\n WORD  WORD\n\n      A\u2261\u2283B\n1\n\n      (0\u2374A)\u22610\u2374B\n0\n\n      ' '=\u22830\u2374B\n1 1 1 1\n1 1 1 1\n\n      ' '=\u22830\u2374A\n1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/membership/","title":"Membership","text":"Membership R\u2190X\u220aY <p><code>Y</code> may be any array.  <code>X</code> may be any array.  <code>R</code> is Boolean. An element of <code>R</code> is 1 if the corresponding element of <code>X</code> can be found in <code>Y</code>.</p> <p>An element of <code>X</code> is considered identical to an element in <code>Y</code> if <code>X\u2261Y</code> returns 1 for those elements.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Membership.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/membership/#examples","title":"Examples","text":"<pre><code>      'THIS NOUN' \u220a 'THAT WORD'\n1 1 0 0 1 0 1 0 0\n\n      'CAT' 'DOG' 'MOUSE' \u220a 'CAT' 'FOX' 'DOG' 'LLAMA'\n1 1 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/not-match/","title":"Not match","text":"Not Match R\u2190X\u2262Y <p><code>Y</code>may be any array.  <code>X</code> may be any array.  <code>R</code> is a simple Boolean scalar.  If <code>X</code> is identical to <code>Y</code>, then <code>R</code> is 0.  Otherwise <code>R</code> is 1.</p> <p>Non-empty arrays are identical if they have the same structure and the same values in all corresponding locations.  Empty arrays are identical if they have the same shape and the same prototype (disclosed nested structure).</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Not Match.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/not-match/#examples","title":"Examples","text":"<pre><code>      \u236c\u2262\u23730\n0\n      ''\u2262\u23730\n1\n</code></pre> <pre><code>\n      \u22a2A\u2190\u2282(\u23733) 'ABC'\n  1 2 3  ABC\n</code></pre> <pre><code>\n      A\u2262(\u23733)'ABC'\n1\n      A\u2262\u2282(\u23733) 'ABC'\n0\n      \u236c\u22620\u2374A\n1\n      (1\u21910\u2374A)\u2262\u2282(0 0 0) '   '\n1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/where/","title":"Where","text":"Where R\u2190\u2378Y <p>Classic Edition:  the symbol <code>\u2378</code> (Iota Underbar) is not available in Classic Edition, and Where is instead represented by <code>\u2395U2378</code>.</p> <p><code>Y</code> must be a simple Boolean or numeric array of non-negative integers.</p> <p>The model for Where can be expressed as <code>{(,\u2375)/,\u2373\u2374\u2375}</code>.</p> <p>If <code>Y</code> is Boolean, <code>R</code> is a vector of the indices of all the 1s in <code>Y</code>. If <code>Y</code> is all zeros, <code>R</code> is an empty vector.</p> <p><code>\u2395IO</code> is an implicit argument of Where.</p>"},{"location":"language-reference-guide/primitive-functions/non-scalar-selector-functions/where/#examples","title":"Examples","text":"<pre><code>      \u2395IO\n1\n      \u2378 1 0 1 0 0 0 0 1 0\n1 3 8\n\n      \u2378'e'='Pete'\n2 4\n\n      3 4\u23740 1 1\n0 1 1 0\n1 1 0 1\n1 0 1 1\n\n      \u2378 3 4\u23740 1 1\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25021 2\u25021 3\u25022 1\u25022 2\u25022 4\u25023 1\u25023 3\u25023 4\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\n      \u23782 3 4\u23740 0 0 0 1\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 1\u25021 3 2\u25022 1 3\u25022 2 4\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n      \u2378 0 1 0 2\n2 4 4\n\n      {\u2375/\u2365,\u2373\u2374\u2375} 0 1 0 2\n2 4 4\n      \u23782 2\u23740 1 2 3\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25021 2\u25022 1\u25022 1\u25022 2\u25022 2\u25022 2\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/key-to-notation/","title":"Key to Notation","text":"<p>The following definitions and conventions apply throughout this section:</p> <code>f</code> A function, or an operator's left operand (function or array). <code>g</code> A function, or an operator's right operand (function or array). <code>A</code> An operator's left argument when an array. <code>B</code> An operator's right argument when an array. <code>X</code> The left argument of a function. <code>Y</code> The right argument of a function. <code>R</code> The explicit result of a function. <code>[K]</code> Axis specification. <code>[I]</code> Index specification. <code>{X}</code> The left argument of a function is optional. <code>{R}\u2190</code> The function may or may not return a result, or the result may be suppressed. <p>function may refer to a primitive function, a system function, a defined (canonical, dfn or assigned) function or a derived (from an operator) function.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/","title":"Index","text":"Index R\u2190X\u2337Y <p><code>X</code> must be a scalar or vector of depth <code>\u22642</code> of integers each <code>\u2265\u2395IO</code>. <code>Y</code> may be any array. In general, the result <code>R</code> is similar to that obtained by square-bracket indexing in that:</p> <pre><code>      (I J ... \u2337 Y) \u2261 Y[I;J;...]\n</code></pre> <p>The length of left argument <code>X</code> must be less than or equal to the rank of right argument <code>Y</code>. Any missing trailing items of <code>X</code> default to the index vector of the corresponding axis of <code>Y</code>.</p> <p>Note that in common with square-bracket indexing, items of the left argument <code>X</code> may be of any rank and that the shape of the result is the concatenation of the shapes of the items of the left argument:</p> <pre><code>      (\u2374X\u2337Y) \u2261 \u2191,/\u2374\u00a8X\n</code></pre> <p>Index is sometimes referred to as squad indexing.</p> <p>Note that index may be used with selective specification.</p> <p><code>\u2395IO</code> is an implicit argument of index.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/#examples","title":"Examples","text":"<pre><code>      \u2395IO\u21901\n\n      VEC\u2190111 222 333 444\n      3\u2337VEC\n333\n      (\u22824 3)\u2337VEC\n444 333\n      (\u22822 3\u23743 1 4 1 2 3)\u2337VEC\n333 111 444\n111 222 333\n\n      \u2395\u2190MAT\u219010\u22a5\u00a8\u23733 4\n11 12 13 14\n21 22 23 24\n31 32 33 34\n\n      2 1\u2337MAT\n21\n      2\u2337MAT\n21 22 23 24\n\n</code></pre> <pre><code>\n      3(2 1)\u2337MAT\n32 31\n      (2 3)1\u2337MAT\n21 31\n      (2 3)(,1)\u2337MAT\n21\n31\n      \u2374(2 1\u23741)(3 4\u23742)\u2337MAT\n2 1 3 4\n      \u2374\u236c \u236c\u2337MAT\n0 0\n      (3(2 1)\u2337MAT)\u21900 \u22c4 MAT    \u235d Selective assignment.\n11 12 13 14\n21 22 23 24\n 0  0 33 34\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/#indexing-classes","title":"Indexing  Classes","text":"<p>If <code>Y</code> is a ref to an instance of a Class with a Default property, <code>\u2337</code> is applied to the Default property. Similarly, <code>\u2337</code> applied to a COM or .NET collection returns the appropriate item(s) of the collection.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/#example","title":"Example","text":"<pre><code>      \u2191\u2395SRC c\n:Class c                 \n    :Property Default p  \n    :Access Public Shared\n        \u2207 r\u2190get          \n          r\u21902 3 4\u2374\u2395A     \n        \u2207                \n    :EndProperty         \n:EndClass                \n\n      2\u2337c\nMNOP\nQRST\nUVWX\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/abort/","title":"Abort","text":"Abort \u2192 <p>This is a special case of the Branch function used in the niladic sense.  If it occurs in a statement it must be the only symbol in an expression or the only symbol forming an expression in a text string to be executed by <code>\u234e</code>.  It clears the most recently suspended statement and all of its pendent statements from the state indicator.</p> <p>The Abort function has no explicit result.  The function is not in the function domain of operators.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/abort/#examples","title":"Examples","text":"<pre><code>      \u2207 F\n[1]    'F[1]'\n[2]    G\n[3]    'F[3]'\n      \u2207\n\n      \u2207 G\n[1]    'G[1]'\n[2]    \u2192\n[3]    'G[3]'\n      \u2207\n\n      F\nF[1]\nG[1]\n\n      \u2395VR'VALIDATE'\n     \u2207 VALIDATE\n [1]   \u2192(12=1\u2191\u2395AI)\u23740 \u22c4 'ACCOUNT NOT AUTHORISED' \u22c4 \u2192\n     \u2207\n\n      VALIDATE\nACCOUNT NOT AUTHORISED\n\n      1\u2191\u2395AI\n52\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/add/","title":"Add","text":"Add R\u2190X+Y <p><code>Y</code> must be numeric.  <code>X</code> must be numeric.  <code>R</code> is the arithmetic sum of <code>X</code> and <code>Y</code>.  <code>R</code> is numeric. This function is also known as Plus.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/add/#examples","title":"Examples","text":"<pre><code>      1 2 + 3 4\n4 6\n\n      1 2 + 3,\u22824 5\n4  6 7\n\n      1J1 2J2 + 3J3\n4J4 5J5\n\n      \u00af5 + 4J4 5J5\n\u00af1J4 0J5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/and-lowest-common-multiple/","title":"And, Lowest Common Multiple","text":"And, Lowest Common Multiple R\u2190X^Y"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/and-lowest-common-multiple/#case-1-x-and-y-are-boolean","title":"Case 1: X and Y are Boolean","text":"<p><code>R</code> is Boolean is determined as follows:</p> <pre><code>             X   Y     R\n\n             0   0     0\n             0   1     0\n             1   0     0\n             1   1     1\n</code></pre> <p>Note that the ASCII caret (^) will also be interpreted as an APL And (<code>^</code>).</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/and-lowest-common-multiple/#example","title":"Example","text":"<pre><code>      0 1 0 1 ^ 0 0 1 1\n0 0 0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/and-lowest-common-multiple/#case-2-either-or-both-x-and-y-are-numeric-non-boolean","title":"Case 2: Either or both X and Y are numeric (non-Boolean)","text":"<p><code>R</code> is the lowest common multiple of <code>X</code> and <code>Y</code>. Note that in this case, <code>\u2395CT</code> and <code>\u2395DCT</code> are implicit arguments.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/and-lowest-common-multiple/#example_1","title":"Example","text":"<pre><code>      15 1 2 7 ^ 35 1 4 0\n105 1 4 0\n\n      2 3 4 \u2227 0j1 1j2 2j3\n0J2 3J6 8J12\n\n      2j2 2j4 \u2227 5j5 4j4\n10J10 \u00af4J12\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-indexed/","title":"Assignment (Indexed)","text":"Assignment (Indexed) {R}\u2190X[I]\u2190Y <p>Indexed Assignment is the Assignment function modified by the Indexing function.  The phrase <code>[I]\u2190</code> is treated as the function for descriptive purposes.</p> <p><code>Y</code> may be any array.  <code>X</code> may be the name of any array or a selection from a named array <code>(EXP X)[I]\u2190Y</code>, see \"Assignment (Selective)\" on page 1.  <code>I</code> must be a valid index specification.  The shape of <code>Y</code> must conform with the shape (implied) of the indexed structure defined by <code>I</code>.  If <code>Y</code> is a scalar or a 1-element vector it will be extended to conform.  A side effect of Indexed Assignment is to change the value of the indexed elements of <code>X</code>.</p> <p><code>R</code> is the value of <code>Y</code>.  If the result is not explicitly assigned or used it is suppressed.</p> <p><code>\u2395IO</code> is an implicit argument of Indexed Assignment.</p> <p>Three forms of indexing are permitted.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-indexed/#simple-indexed-assignment","title":"Simple Indexed Assignment","text":"<p>For vector <code>X</code>, <code>I</code> is a simple integer array whose items are from the set <code>\u2373\u2374R</code>.  Elements of <code>X</code> identified by index positions <code>I</code> are replaced by corresponding elements of <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-indexed/#examples","title":"Examples","text":"<pre><code>      +A\u2190\u23735\n1 2 3 4 5\n\n      A[2 3]\u219010 \u22c4 A\n1 10 10 4 5\n\n</code></pre> <p>The last-most element of <code>Y</code> is assigned when an index is repeated in <code>I</code>:</p> <pre><code>      A[2 2]\u2190100 101 \u22c4 A\n1 101 10 4 5\n</code></pre> <p>For matrix <code>X</code>, <code>I</code> is composed of two simple integer arrays separated by the semicolon character (<code>;</code>).  The arrays select indices from the rows and columns of <code>X</code> respectively.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-indexed/#examples_1","title":"Examples","text":"<pre><code>      +B\u21902 3\u2374'REDSUN'\nRED\nSUN\n\n      B[2;2]\u2190'O' \u22c4 B\nRED\nSON\n</code></pre> <p>For higher-rank array <code>X</code>, <code>I</code> is a series of simple integer arrays with adjacent arrays separated by a single semicolon character (<code>;</code>).  Each array selects indices from an axis of <code>X</code> taken in row-major order.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-indexed/#examples_2","title":"Examples","text":"<pre><code>      C\n11 12 13\n14 15 16\n\n21 22 23\n24 25 26\n\n      C[1;1;3]\u2190103 \u22c4 C\n11 12 103\n14 15  16\n\n21 22  23\n24 25  26\n</code></pre> <p>An indexing array may be ELIDED.  That is, if an indexing array is omitted from the <code>K</code>th axis, the indexing vector <code>\u2373(\u2374X)[K]</code> is implied:</p> <pre><code>      C[;1;2 3]\u21902 2\u2374112 113 122 123 \u22c4 C\n11 112 113\n14  15  16\n\n21 122 123\n24  25  26\n\n      C[;;]\u21900 \u22c4 C\n0 0 0\n0 0 0\n\n0 0 0\n0 0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-indexed/#choose-indexed-assignment","title":"Choose Indexed Assignment","text":"<p>The index specification <code>I</code> is a non-simple integer array. Each item identifies a single element of <code>X</code> by a set of indices with one element per axis of <code>X</code> in row-major order.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-indexed/#examples_3","title":"Examples","text":"<pre><code>      C\n11 12 13 14\n21 22 23 24\n\n      C[\u22821 1]\u2190101 \u22c4 C\n101 12 13 14\n 21 22 23 24\n\n      C[(1 2) (2 3)]\u2190102 203 \u22c4 C\n101 102  13 14\n 21  22 203 24\n\n      C[2 2\u2374(1 3)(2 4)(2 1)(1 4)]\u21902 2\u2374103 204 201 104 \u22c4 C\n101 102 103 104\n201  22 203 204\n</code></pre> <p>A scalar may be indexed by the enclosed empty vector:</p> <pre><code>      S\n10\n      S[\u2282\u23730]\u2190\u2282'VECTOR' \u22c4 S\n VECTOR \n      S[\u2282\u23730]\u21905 \u22c4 S\n5\n</code></pre> <p>Choose Indexed Assignment may be used very effectively in conjunction with Index Generator (<code>\u2373</code>) and Structural functions in order to assign into an array:</p> <pre><code>      C\n11 12 13 14\n21 22 23 24\n\n      \u2373\u2374C\n1 1  1 2  1 3  1 4\n2 1  2 2  2 3  2 4\n\n      C[1 1\u2349\u2373\u2374C]\u21901 2 \u22c4 C\n 1 12 13 14\n21  2 23 24\n\n      C[2 \u00af1\u2191\u2373\u2374C]\u219099 \u22c4 C\n 1 12 13 99\n21  2 23 99\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-indexed/#reach-indexed-assignment","title":"Reach Indexed Assignment","text":"<p>The index specification <code>I</code> is a non-simple integer array, each of whose items reach down to a nested element of <code>X</code>.  The items of an item of <code>I</code> are simple vectors (or scalars) forming sets of indices that index arrays at successive levels of <code>X</code> starting at the top-most level.  A set of indices has one element per axis at the respective level of nesting of <code>X</code> in row-major order.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-indexed/#examples_4","title":"Examples","text":"<pre><code>      D\u2190(2 3\u2374\u23736)(2 2\u2374'SMITH' 'JONES' 'SAM' 'BILL')\n\n      D\n 1 2 3   SMITH  JONES\n 4 5 6   SAM    BILL\n\n      \u2261J\u2190\u22822 (1 2)\n\u00af3\n\n      D[J]\u2190\u2282'WILLIAMS' \u22c4 D\n 1 2 3   SMITH  WILLIAMS\n 4 5 6   SAM    BILL\n\n      D[(1 (1 1))(2 (2 2) 1)]\u219010 'W' \u22c4 D\n 10 2 3   SMITH  WILLIAMS\n  4 5 6   SAM    WILL\n\n      E\n GREEN  YELLOW  RED\n\n      E[\u22822 1]\u2190'M' \u22c4 E\n GREEN  MELLOW  RED\n</code></pre> <p>The context of indexing is important.  In the last example, the indexing method is determined to be Reach rather than Choose since <code>E</code> is a vector, not a matrix as would be required for Choose.  Observe that:</p> <pre><code>      \u22822 1 \u2190\u2192 \u2282(\u22822),(\u22821)\n</code></pre> <p>Note that for any array <code>A</code>, <code>A[\u2282\u236c]</code> represents a scalar quantity, which is the whole of <code>A</code>, so:</p> <pre><code>      A\u21905\u23740\n      A\n0 0 0 0 0\n      A[\u2282\u236c]\u21901\n      A\n1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-indexed/#combined-indexed-and-selective-assignment","title":"Combined Indexed and Selective Assignment","text":"<p>Instead of <code>X</code> being a name, it may be a selection from a named array, and the statement is of the form <code>(EXP X)[I]\u2190Y</code>.</p> <pre><code>      MAT\u21904 3\u2374'Hello' 'World'\n      (2\u2191\u00a8MAT)[1 2;]\u2190'#'\n      MAT\n ##llo  ##rld  ##llo \n ##rld  ##llo  ##rld \n Hello  World  Hello \n World  Hello  World\n</code></pre> <pre><code>      MAT\u21904 3\u2374'Hello' 'World'\n      \u2395ML\u21901 \u235d \u220a is Enlist\n     (\u220aMAT)[2\u00d7\u2373\u230a0.5\u00d7\u2374\u220aMAT]\u2190'#'\n      MAT\n H#l#o  #o#l#  H#l#o \n #o#l#  H#l#o  #o#l# \n H#l#o  #o#l#  H#l#o \n #o#l#  H#l#o  #o#l# \n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-selective/","title":"Assignment (Selective)","text":"Assignment (Selective) (EXP X)\u2190Y <p><code>X</code> is the name of a variable in the workspace, possibly modified by the indexing function <code>(EXP X[I])\u2190Y</code>, see \"Assignment (Indexed)\" on page 1.  <code>EXP</code> is an expression that selects elements of <code>X</code>.  <code>Y</code> is an array expression. The result of the expression <code>Y</code> is allocated to the elements of <code>X</code> selected by <code>EXP</code>. Note that <code>X</code> may refer to a single name only.</p> <p>The following functions may appear in the selection expression. Where appropriate these functions may be used with axis <code>[]</code> and with the Each operator <code>\u00a8</code>.</p> <p>Functions for Selective Assignment</p> \u2191 Take \u2193 Drop , Ravel \u236a Table \u233d\u2296 Reverse, Rotate \u2374 Reshape \u2283 Disclose, Pick \u2349 Transpose (Monadic and Dyadic) /\u233f Replicate \\\u2340 Expand \u2337 Index \u220a Enlist ( <code>\u2395ML\u22651</code> ) <p>Note: Mix and Split (monadic <code>\u2191</code> and <code>\u2193</code>), Type (monadic <code>\u220a</code> when <code>\u2395ML&lt;1</code>) and Membership (dyadic <code>\u220a</code>) may not be used in the selection expression.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-selective/#examples","title":"Examples","text":"<pre><code>      A\u2190'HELLO'\n      ((A\u220a'AEIOU')/A)\u2190'*'\n\n      A\nH*LL*\n\n      Z\u21903 4\u2374\u237312\n      (5\u2191,Z)\u21900\n\n      Z\n0  0  0  0\n0  6  7  8\n9 10 11 12\n\n</code></pre> <pre><code>      MAT\u21903 3\u2374\u23739\n      (1 1\u2349MAT)\u21900\n\n      MAT\n0 2 3\n4 0 6\n7 8 0\n\n      \u2395ML\u21901\u235d so \u220a is Enlist\n      names\u2190'Andy' 'Karen' 'Liam'\n      (('a'=\u220anames)/\u220anames)\u2190'*'\n      names\n Andy  K*ren  Li*m\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-selective/#each-operator","title":"Each Operator","text":"<p>The functions listed in the table above may also be used with the Each Operator <code>\u00a8</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-selective/#examples_1","title":"Examples","text":"<pre><code>      A\u2190'HELLO' 'WORLD'\n      (2\u2191\u00a8A)\u2190'*'\n      A\n **LLO  **RLD\n\n      A\u2190'HELLO' 'WORLD'\n      ((A='O')/\u00a8A)\u2190'*'\n      A\n HELL*  W*RLD\n\n      A\u2190'HELLO' 'WORLD'\n      ((A\u220a\u00a8\u2282'LO')/\u00a8A)\u2190'*'\n      A\n HE***  W*R*D\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-selective/#bracket-indexing","title":"Bracket Indexing","text":"<p>Bracket indexing may also be applied to the expression on the left of the assignment arrow.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment-selective/#examples_2","title":"Examples","text":"<pre><code>      MAT\u21904 3\u2374'Hello' 'World'\n      (\u00af2\u2191\u00a8MAT[;1 3])\u2190'$'\n      MAT\n Hel$$  World  Hel$$ \n Wor$$  Hello  Wor$$ \n Hel$$  World  Hel$$ \n Wor$$  Hello  Wor$$ \n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment/","title":"Assignment","text":"Assignment X\u2190Y <p>Assignment  allocates the result of the expression <code>Y</code> to the name or names in <code>X</code>.</p> <p>If <code>Y</code> is an array expression, <code>X</code> must contain one or more names which are variables, system variables, or are undefined. Following assignment, the name(s) in <code>X</code> become variable(s) with value(s) taken from the result of the expression <code>Y</code>.</p> <p>If <code>X</code> contains a single name, the variable assumes the value of <code>Y</code>. If <code>X</code> contains multiple names then <code>Y</code> can be a single-item array of any rank (including a scalar) or  a vector. If <code>Y</code> is a single-item array, the scalar value <code>\u2283Y</code> is assigned to all names in <code>X</code>. Otherwise, each element of <code>Y</code> is assigned to the corresponding name in <code>X</code>.  Although not mandatory, Dyalog recommends that the names in <code>X</code> are enclosed in parentheses to reduce potential ambiguity in assignment statements.</p> <p>The assignment arrow (or specification arrow) is often read as 'Is' or 'Gets'.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment/#examples-of-single-assignment","title":"Examples of single assignment","text":"<pre><code>\n      A\u21902.3\n      A\n2.3\n\n      A\u2190\u23733\n      A\n1 2 3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment/#examples-of-multiple-assignment-using-parentheses","title":"Examples of multiple assignment using parentheses","text":"<pre><code>\n      (A B)\u21902\n      A\n2\n      B\n2\n\n      (P \u2395IO Q)\u2190'TEXT' 1 (1 2 3)\n      P\nTEXT\n      \u2395IO\n1\n      Q\n1 2 3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment/#example-of-multiple-assignment-without-parentheses","title":"Example of multiple assignment without parentheses","text":"<pre><code>\n      year month day\u21902017 05 24\n      day\n24\n      month\n5\n      year\n2017            \n\n</code></pre> <p>Implementation note: erroneous expressions such as <code>var 3\u21905</code> will result in <code>5</code> being assigned to <code>var</code>, even though a <code>SYNTAX ERROR</code> will be generated. In the case of <code>(var 3)\u21905</code> no assignment will be made.</p> <p>Pass-through assignments are permitted. The value of <code>Y</code> is carried through each assignment:</p> <pre><code>\n      I\u2190J\u2190K\u21900\n      I,J,K\n0 0 0\n\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment/#function-assignment","title":"Function Assignment","text":"<p>If <code>Y</code> is a function expression, <code>X</code> must be a single name which is either undefined, or is the name of an existing function or defined operator. <code>X</code> may not be the name of a system function, or a primitive symbol.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment/#examples","title":"Examples","text":"<pre><code>\n      PLUS\u2190+\n      PLUS\n+\n\n      SUM\u2190+/\n      SUM\n+/\n\n      MEAN\u2190{(+/\u2375)\u00f7\u2374\u2375}\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment/#namespace-reference-assignment","title":"Namespace Reference Assignment","text":"<p>If an expression evaluates to a namespace reference, or ref, you may assign it to a name. A name assigned to a simple scalar ref, has name class 9, whereas one assigned to an array containing refs has name class 2.</p> <pre><code>\n      'f1'\u2395WC'Form'\n      'ns1' \u2395NS ''\n\n      N\u2190ns1\n      \u2395NC'N'           \u235d name class of a scalar ref\n9\n      F\u2190f1\n      \u2395NC'F'           \u235d name class of a scalar ref\n9\n      refs\u2190N F         \u235d vector of refs.\n      \u2395NC'refs'        \u235d nameclass of vector.\n2\n      F2\u21902\u2283refs\n      \u2395NC 'F2'\n9\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/assignment/#re-assignment","title":"Re-Assignment","text":"<p>A name that already exists may be assigned a new value if the assignment will not alter its name class, or will change it from 2 to 9 or vice versa. The table of permitted re-assignments is as follows:</p> Ref Variable Function Operator Ref Yes Yes Variable Yes Yes Function Yes Yes Operator Yes Yes"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/binomial/","title":"Binomial","text":"Binomial R\u2190X!Y <p><code>X</code> and <code>Y</code> may be any numbers except that if <code>Y</code> is a negative integer then <code>X</code> must be an integer. <code>R</code> is numeric. An element of <code>R</code> is integer if corresponding elements of <code>X</code> and <code>Y</code> are integers.</p> <p>Binomial is defined in terms of the function Factorial:</p> <pre><code>      X!Y \u2190\u2192 (!Y)\u00f7(!X)\u00d7!Y-X\n</code></pre> <p>Results are derived smoothly from the Beta function:</p> <pre><code>      Beta(X,Y) \u2190\u2192 \u00f7Y\u00d7(X-1)!X+Y-1\n</code></pre> <p>For positive integer arguments, <code>R</code> is the number of selections of <code>X</code> things from <code>Y</code> things.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/binomial/#example","title":"Example","text":"<pre><code>      1 1.2 1.4 1.6 1.8 2!5\n5 6.105689248 7.219424686 8.281104786 9.227916704 10\n\n      2!3j2\n1J5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/branch/","title":"Branch","text":"Branch \u2192Y <p><code>Y</code> may be a scalar or vector which, if not empty, has a simple numeric scalar as its first element.  The function has no explicit result.  It is used to modify the normal sequence of execution of expressions or to resume execution after a statement has been interrupted. Branch is not in the function domain of operators.</p> <p>The following distinct usages of the branch function occur:</p> Entered in a Statement in a Defined Function Entered in Immediate Execution Mode <code>\u2192LINE</code> Continue with the specific line Restart execution at the specific line of the most recently suspended function <code>\u2192\u23730</code> Continue with the next expression No effect <p>In a defined function, if <code>Y</code> is non-empty then the first element in <code>Y</code> specifies a statement line in the defined function to be executed next.  If the line does not exist, then execution of the function is terminated.  For this purpose, line 0 does not exist.  (Note that statement line numbers are independent of the index origin <code>\u2395IO</code>).</p> <p>If <code>Y</code> is empty, the branch function has no effect.  The next expression is executed on the same line, if any, or on the next line if not.  If there is no following line, the function is terminated.</p> <p>The <code>:GoTo</code> statement may be used in place of Branch in a defined function.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/branch/#example","title":"Example","text":"<pre><code>     \u2207 TEST\n[1]    1\n[2]    \u21924\n[3]    3\n[4]    4\n     \u2207\n\n      TEST\n1\n4\n</code></pre> <p>In general it is better to branch to a LABEL than to a line number.  A label occurs in a statement followed by a colon and is assigned the value of the statement line number when the function is defined.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/branch/#example_1","title":"Example","text":"<pre><code>     \u2207 TEST\n[1]    1\n[2]    \u2192FOUR\n[3]    3\n[4]   FOUR:4\n     \u2207\n\n</code></pre> <p>The previous examples illustrate unconditional branching. There are numerous APL idioms which result in conditional branching. Some popular idioms are identified in the following table:</p> Branch Expression Comment <code>\u2192TEST/L1</code> Branches to label <code>L1</code> if <code>TEST</code> results in 1 but not if <code>TEST</code> results in 0. <code>\u2192TEST\u2374L1</code> Similar to above. <code>\u2192TEST\u2191L1</code> Similar to above. <code>\u2192L1\u2374\u2368TEST</code> Similar to above. <code>\u2192L1\u2308\u2373TEST</code> Similar to above but only if <code>\u2395IO\u2190\u21921</code> . <code>\u2192L1\u00d7\u2373TEST</code> Similar to above but only if <code>\u2395IO\u2190\u21921</code> . <code>\u2192(L1,L2,L3)[N]</code> Unconditional branch to a selected label. <code>\u2192(T1,T2,T3)/L1,L2,L3</code> Branches to the first selected label dependent on tests <code>T1</code> , <code>T2</code> , <code>T3</code> . If all tests result in 0, there is no branch. <code>\u2192N\u233dL1,L2,L3</code> Unconditional branch to the first label after rotation. <p>A branch expression may occur within a statement including <code>\u22c4</code> separators:</p> <pre><code>[5]   \u2192NEXT\u2374\u2368TEST \u22c4 A\u2190A+1 \u22c4 \u2192END\n[6]  NEXT:\n</code></pre> <p>In this example, the expressions <code>'A\u2190A+1'</code> and <code>'\u2192END'</code> are executed only if <code>TEST</code> returns the value 1.  Otherwise control branches to label <code>NEXT</code>.</p> <p>In immediate execution mode, the branch function permits execution to be continued within the most recently suspended function, if any, in the state indicator.  If the state indicator is empty, or if the argument <code>Y</code> is the empty vector, the branch expression has no effect.  If a statement line is specified which does not exist, the function is terminated.  Otherwise, execution is restarted from the beginning of the specified statement line in the most recently suspended function.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/branch/#example_2","title":"Example","text":"<pre><code>     \u2207 F\n[1]   1\n[2]   2\n[3]   3\n     \u2207\n\n      2 \u2395STOP'F'\n      F\n1\n\nF[2]\n      )SI\n#.F[2]*\n      \u21922\n2\n3\n</code></pre> <p>The system constant <code>\u2395LC</code> returns a vector of the line numbers of statement lines in the state indicator, starting with that in the most recently suspended function.  It is convenient to restart execution in a suspended state by the expression:</p> <pre><code>      \u2192\u2395LC\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/catenate-first/","title":"Catenate First","text":"Catenate First R\u2190X\u236a[K]Y <p>The form <code>R\u2190X\u236aY</code> implies catenation along the first axis whereas the form <code>R\u2190X,Y</code> implies catenation along the last axis (columns).  See Catenate/Laminate: above.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/catenate-laminate/","title":"Catenate/Laminate","text":"Catenate/Laminate R\u2190X,[K]Y <p><code>Y</code> may be any array.  <code>X</code> may be any array.  The axis specification is optional.  If specified, <code>K</code> must be a numeric scalar or 1-element vector which may have a fractional value.  If not specified, the last axis is implied.</p> <p>The form <code>R\u2190X\u236aY</code> may be used to imply catenation along the first axis.</p> <p>Two cases of the function catenate  are permitted:</p> <ol> <li>With an integer axis specification, or implied axis specification.</li> <li>With a fractional axis specification, also called laminate. </li> </ol>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/catenate-laminate/#catenation-with-integer-or-implied-axis-specification","title":"Catenation with Integer or Implied Axis Specification","text":"<p>The arrays <code>X</code> and <code>Y</code> are joined along the required axis to form array <code>R</code>.  A scalar is extended to the shape of the other argument except that the required axis is restricted to a unit dimension.  <code>X</code> and <code>Y</code> must have the same shape (after extension) except along the required axis, or one of the arguments may have rank one less than the other, provided that their shapes conform to the prior rule after augmenting the array of lower rank to have a unit dimension along the required axis. The rank of <code>R</code> is the greater of the ranks of the arguments, but not less than 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/catenate-laminate/#examples","title":"Examples","text":"<pre><code>      'FUR','LONG'\nFURLONG\n\n      1,2\n1 2\n\n      (2 4\u2374'THISWEEK')\u236a'='\nTHIS\nWEEK\n====\n\n      S,[1]+\u233fS\u21902 3\u2374\u23736\n1 2 3\n4 5 6\n5 7 9\n</code></pre> <p>If, after extension, exactly one of <code>X</code> and <code>Y</code> have a length of zero along the joined axis, then the data type of <code>R</code> will be that of the argument with a non-zero length. Otherwise, the data type of <code>R</code> will be that of <code>X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/catenate-laminate/#lamination-with-fractional-axis-specification","title":"Lamination with Fractional Axis Specification","text":"<p>The arrays <code>X</code> and <code>Y</code> are joined along a new axis created before the <code>\u2308K</code>th axis.  The new axis has a length of 2.  <code>K</code> must exceed <code>\u2395IO</code> (the index origin) minus 1, and <code>K</code> must be less than <code>\u2395IO</code> plus the greater of the ranks of <code>X</code> and <code>Y</code>.  A scalar  argument is extended to the shape of the other argument.  Otherwise <code>X</code> and <code>Y</code> must have the same shape.</p> <p>The rank of <code>R</code> is one plus the greater of the ranks of <code>X</code> and <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/catenate-laminate/#examples_1","title":"Examples","text":"<pre><code>      'HEADING',[0.5]'-'\nHEADING\n-------\n\n      'NIGHT',[1.5]'*'\nN*\nI*\nG*\nH*\nT* \n      \u2395IO\u21900\n      'HEADING',[\u00af0.5]'-'\nHEADING\n-------\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/ceiling/","title":"Ceiling","text":"Ceiling R\u2190\u2308Y <p>Ceiling is defined in terms of Floor as <code>\u2308Y\u2190\u2192-\u230a-Y</code></p> <p><code>Y</code> must be numeric.</p> <p>If an element of <code>Y</code> is real, the corresponding element of <code>R</code> is the least integer greater than or equal to the value of <code>Y</code>.</p> <p>If an element of <code>Y</code> is complex, the corresponding element of <code>R</code> depends on the relationship between the real and imaginary parts of the numbers in <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/ceiling/#examples","title":"Examples","text":"<pre><code>      \u2308\u00af2.3  0.1  100  3.3\n\u00af2 1 100 4\n\n      \u23081.2j2.5 1.2j\u00af2.5\n1J3 1J\u00af2\n</code></pre> <p>For further explanation, see \"Floor\" on page 1.</p> <p><code>\u2395CT</code> is an implied argument of Ceiling.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/circular/","title":"Circular","text":"Circular R\u2190X\u25cbY <p><code>Y</code> must be numeric.  <code>X</code> must be an integer in the range <code>\u00af12 \u2264 X \u2264 12</code>. <code>R</code> is numeric.</p> <p><code>X</code> determines which of a family of trigonometric, hyperbolic, Pythagorean  and complex functions to apply to <code>Y</code>, from the following table. Note that when <code>Y</code> is complex, <code>a</code> and  <code>b</code> are used to represent its real and imaginary parts, while <code>\u03b8</code> represents its phase.</p> (-X) \u25cb Y X X \u25cb Y <code>(1-Y*2)*.5</code> <code>0</code> <code>(1-Y*2)*.5</code> <code>Arcsin Y</code> <code>1</code> <code>Sine Y</code> <code>Arccos Y</code> <code>2</code> <code>Cosine Y</code> <code>Arctan Y</code> <code>3</code> <code>Tangent Y</code> <code>Y=\u00af1:0 Y\u2260\u00af1:(Y+1)\u00d7((Y-1)\u00f7Y+1)*0.5</code> <code>4</code> <code>(1+Y*2)*.5</code> <code>Arcsinh Y</code> <code>5</code> <code>Sinh Y</code> <code>Arccosh Y</code> <code>6</code> <code>Cosh Y</code> <code>Arctanh Y</code> <code>7</code> <code>Tanh Y</code> <code>-8\u25cbY</code> <code>8</code> <code>(-1+Y*2)*0.5</code> <code>Y</code> <code>9</code> <code>a</code> <code>+Y</code> <code>10</code> <code>|Y</code> <code>Y\u00d70J1</code> <code>11</code> <code>b</code> <code>*Y\u00d70J1</code> <code>12</code> <code>\u03b8</code>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/circular/#examples","title":"Examples","text":"<pre><code>      0 \u00af1 \u25cb 1\n0 1.570796327\n\n      1\u25cb(PI\u2190\u25cb1)\u00f72 3 4\n1 0.8660254038  0.7071067812\n\n      2\u25cbPI\u00f73\n0.5\n</code></pre> <pre><code>\n      9 11\u25cb3.5J\u00af1.2\n3.5 \u00af1.2\n\n      9 11\u2218.\u25cb3.5J\u00af1.2 2J3 3J4\n 3.5 2 3\n\u00af1.2 3 4\n\n      \u00af4\u25cb\u00af1\n0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/conjugate/","title":"Conjugate","text":"Conjugate R\u2190+Y <p>If <code>Y</code> is complex, <code>R</code> is <code>Y</code> with the imaginary part of all elements negated.</p> <p>If <code>Y</code> is real or non-numeric, <code>R</code> is the same array unchanged, although <code>\u22a3</code> is faster. See Same on page 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/conjugate/#examples","title":"Examples","text":"<pre><code>      +3j4\n3J\u00af4\n      +1j2 2j3 3j4\n1J\u00af2 2J\u00af3 3J\u00af4\n\n      3j4++3j4\n6\n      3j4\u00d7+3j4\n25\n\n      +A\u2190\u23735\n1 2 3 4 5\n\n      +\u2395EX'A'\n1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/deal/","title":"Deal","text":"Deal R\u2190X?Y <p><code>Y</code> must be a simple scalar or 1-element vector containing a non-negative integer. <code>X</code> must be a simple scalar or 1-element vector containing a non-negative integer and <code>X\u2264Y</code>.</p> <p><code>R</code> is an integer  vector obtained by making <code>X</code> random selections from <code>\u2373Y</code> without repetition.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/deal/#examples","title":"Examples","text":"<pre><code>\n      13?52\n7 40 24 28 12 3 36 49 20 44 2 35 1\n\n      13?52\n20 4 22 36 31 49 45 28 5 35 37 48 40\n</code></pre> <p><code>\u2395IO</code> and <code>\u2395RL</code> are implicit arguments of Deal. A side effect of Deal is to change the value of <code>\u2395RL</code>. See \"Random Link: \" on page 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/decode/","title":"Decode","text":"Decode R\u2190X\u22a5Y <p><code>Y</code> must be a simple numeric array.  <code>X</code> must be a simple numeric array.  <code>R</code> is the numeric array which results from the evaluation of <code>Y</code> in the number system with radix <code>X</code>.</p> <p><code>X</code> and <code>Y</code> are conformable if the length of the last axis of <code>X</code> is the same as the length of the first axis of <code>Y</code>.  A scalar or 1-element vector is extended to a vector of the required length.  If the last axis of <code>X</code> or the first axis of <code>Y</code> has a length of 1, the array is extended along that axis to conform with the other argument.</p> <p>The shape of <code>R</code> is the catenation of the shape of <code>X</code> less the last dimension with the shape of <code>Y</code> less the first dimension.  That is:</p> <pre><code>      \u2374R \u2190\u2192 (\u00af1\u2193\u2374X),1\u2193\u2374Y\n</code></pre> <p>For vector arguments, each element of <code>X</code> defines the ratio between the units for corresponding pairs of elements in <code>Y</code>.  The first element of <code>X</code> has no effect on the result.</p> <p>This function is also known as Base Value.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/decode/#examples","title":"Examples","text":"<pre><code>      60 60\u22a53 13\n193\n\n      0 60\u22a53 13\n193\n\n      60\u22a53 13\n193\n\n      2\u22a51 0 1 0\n10\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/decode/#polynomial-evaluation","title":"Polynomial Evaluation","text":"<p>If <code>X</code> is a scalar and <code>Y</code> a vector of length n, decode evaluates the polynomial(Index origin 1):</p> <p>Y [ 1 ]</p> <p>X</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/decode/#n","title":"n","text":"<p>1</p> <p>+ Y [ 2 ]</p> <p>X</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/decode/#n_1","title":"n","text":"<p>2</p> <p>+ ... + Y [ n ]</p> <p>X</p> <p>0</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/decode/#examples_1","title":"Examples","text":"<pre><code>      2\u22a51 2 3 4\n26\n      3\u22a51 2 3 4\n58\n      1j1\u22a51 2 3 4\n5J9\n</code></pre> <p>For higher-rank array arguments, each of the vectors along the last axis of <code>X</code> is taken as the radix vector for each of the vectors along the first axis of <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/decode/#examples_2","title":"Examples","text":"<pre><code>      M\n0 0 0 0 1 1 1 1\n0 0 1 1 0 0 1 1\n0 1 0 1 0 1 0 1\n\n      A\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n\n      A\u22a5M\n0 1 1 2  1  2  2  3\n0 1 2 3  4  5  6  7\n0 1 3 4  9 10 12 13\n0 1 4 5 16 17 20 21\n</code></pre> <p>Scalar extension may be applied:</p> <pre><code>      2\u22a5M\n0 1 2 3 4 5 6 7\n</code></pre> <p>Extension along a unit axis may be applied:</p> <pre><code>      +A\u21902 1\u23742 10\n 2\n10\n      A\u22a5M\n0 1  2  3   4   5   6   7\n0 1 10 11 100 101 110 111\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/depth/","title":"Depth","text":"Depth (\u2395ML) <p><code>Y</code> may be any array. <code>R</code> is the maximum number of levels of nesting of <code>Y</code>. A simple scalar (rank-0 number, character or namespace-reference) has a depth of 0.</p> <p>A higher rank array, all of whose items are simple scalars, is termed a simple array and has a depth of 1. An array whose items are not all simple scalars is nested and has a depth 1 greater than that of its most deeply nested item.</p> <p><code>Y</code> is of uniform depth if it is simple or if all of its items have the same uniform depth.</p> <p>If <code>\u2395ML&lt;2</code> and <code>Y</code> is not of uniform depth then <code>R</code> is negated (therefore, when <code>\u2395ML&lt;2</code>, a negative value of <code>R</code> indicates non-uniform depth).</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/depth/#examples","title":"Examples","text":"<pre><code>      \u22611\n0\n      \u2261'A'\n0\n      \u2261'ABC'\n1\n      \u22611 'A'\n1 \n\n</code></pre> <pre><code>      \u2395ML\u21900\n\n      \u2261A\u2190(1 2)(3 (4 5)) \u235d Non-uniform array\n\u00af3\n      \u2261\u00a8A          \u235d A[1] is uniform, A[2] is non-uniform\n1 \u00af2\n      \u2261\u00a8\u00a8A\n 0 0  0 1 \n\n</code></pre> <pre><code>      \u2395ML\u21902\n\n      \u2261A\n3\n      \u2261\u00a8A\n1 2\n      \u2261\u00a8\u00a8A\n 0 0  0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/direction/","title":"Direction (Signum)","text":"Direction (Signum) R\u2190\u00d7Y <p><code>Y</code> may be any numeric array.</p> <p>Where an element of <code>Y</code> is real, the corresponding element of <code>R</code> is an integer whose value indicates whether the value is negative (<code>\u00af1</code>), zero (<code>0</code>) or positive (<code>1</code>).</p> <p>Where an element of <code>Y</code> is complex, the corresponding element of <code>R</code> is a number with the same phase but with magnitude (absolute value) 1. It is equivalent to <code>Y\u00f7|Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/direction/#examples","title":"Examples","text":"<pre><code>      \u00d7\u00af15.3 0 101\n\u00af1 0 1\n\n      \u00d73j4 4j5\n0.6J0.8 0.6246950476J0.7808688094\n\n      {\u2375\u00f7|\u2375}3j4 4j5\n0.6J0.8 0.6246950476J0.7808688094\n\n      |\u00d73j4 4j5\n1 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/disclose/","title":"Disclose","text":"Disclose (\u2395ML) <p>The symbol chosen to represent Disclose depends on the current Migration Level.</p> <p>If  <code>\u2395ML&lt;2</code>, Disclose is represented by the symbol: <code>\u2283</code>.</p> <p>If  <code>\u2395ML\u22652</code>, Disclose is represented by the symbol: <code>\u2191</code>.</p> <p><code>Y</code> may be any array.  <code>R</code> is an array.  If <code>Y</code> is non-empty, <code>R</code> is the value of the first item of <code>Y</code> taken in ravel order.  If <code>Y</code> is empty, <code>R</code> is the prototype of <code>Y</code>.</p> <p>Disclose is the inverse of Enclose.  The identity <code>R\u2190\u2192\u2283\u2282R</code> holds for all <code>R</code>.  Disclose is also referred to as First.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/disclose/#examples","title":"Examples","text":"<pre><code>      \u22831\n1\n\n      \u22832 4 6\n2\n\n      \u2283'MONDAY' 'TUESDAY'\nMONDAY\n\n      \u2283(1 (2 3))(4 (5 6))\n1  2 3\n\n      \u2283\u23730\n0\n\n      ' '=\u2283''\n1\n\n      \u22831\u2193\u22821,\u22822 3\n0  0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/divide/","title":"Divide","text":"Divide R\u2190X\u00f7Y <p><code>Y</code> must be a numeric array.  <code>X</code> must be a numeric array.  <code>R</code> is the numeric array resulting from <code>X</code> divided by <code>Y</code>.  System variable <code>\u2395DIV</code> is an implicit argument of Divide.</p> <p>If <code>\u2395DIV=0</code> and <code>Y=0</code> then if <code>X=0</code>, the result of <code>X\u00f7Y</code> is 1; if <code>X\u22600</code> then <code>X\u00f7Y</code> is a <code>DOMAIN ERROR.</code></p> <p>If <code>\u2395DIV=1</code> and <code>Y=0</code>, the result of <code>X\u00f7Y</code> is <code>0</code> for all values of <code>X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/divide/#examples","title":"Examples","text":"<pre><code>      2 0 5\u00f74 0 2\n0.5 1 2.5\n\n      3j1 2.5 4j5\u00f72 1j1 .2\n1.5J0.5 1.25J\u00af1.25 20J25\n\n      \u2395DIV\u21901\n      2 0 5\u00f74 0 0\n0.5 0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/drop-with-axes/","title":"Drop with Axes","text":"Drop with Axes R\u2190X\u2193[K]Y <p><code>Y</code> may be any non-scalar array.  <code>X</code> must be a simple integer scalar or vector.  <code>K</code> is a vector of zero or more axes of <code>Y</code>.</p> <p><code>R</code> is an array of the elements of <code>Y</code> with the first or last <code>X</code>[i] elements removed. Elements are removed from the beginning or end of <code>Y</code> according to the sign of <code>X</code>[i].</p> <p>The rank of <code>R</code> is the same as the rank of <code>Y</code>:</p> <pre><code>       \u2374\u2374R \u2190\u2192 \u2374\u2374Y\n</code></pre> <p>The size of each axis of <code>R</code> is determined by the corresponding element of <code>X</code>:</p> <pre><code>      (\u2374R)[,K] \u2190\u2192 0\u2308(\u2374Y)[,K]-|,X\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/drop-with-axes/#examples","title":"Examples","text":"<pre><code>      \u2395\u2190M\u21902 3 4\u2374\u237324\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n\n13 14 15 16\n17 18 19 20\n21 22 23 24\n\n      1\u2193[2]M\n 5  6  7  8\n 9 10 11 12\n\n17 18 19 20\n21 22 23 24\n\n      2\u2193[3]M\n 3  4\n 7  8\n11 12\n\n15 16\n19 20\n23 24\n\n      2 1\u2193[3 2]M\n 7  8\n11 12\n\n19 20\n23 24\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/drop/","title":"Drop","text":"Drop R\u2190X\u2193Y <p><code>Y</code> may be any array.  <code>X</code> must be a simple scalar or vector of integers. If <code>X</code> is a scalar, it is treated as a one-element vector.  If <code>Y</code> is a scalar, it is treated as an array whose shape is <code>(\u2374X)\u23741</code>. After any scalar extensions, the shape of <code>X</code> must be less than or equal to the rank of <code>Y</code>. Any missing trailing items in <code>X</code> default to 0.</p> <p><code>R</code> is an array with the same rank as <code>Y</code> but with elements removed from the vectors along each of the axes of <code>Y</code>. For the <code>I</code>th axis:</p> <ul> <li>if <code>X[I]</code> is positive, all but the first <code>X[I]</code> elements of the vectors result</li> <li>if <code>X[I]</code> is negative, all but the last <code>X[I]</code> elements of the vectors result</li> </ul> <p>If the magnitude of <code>X[I]</code> exceeds the length of the <code>I</code>th axis, the result is an empty array with zero length along that axis.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/drop/#examples","title":"Examples","text":"<pre><code>      4\u2193'OVERBOARD'\nBOARD\n\n      \u00af5\u2193'OVERBOARD'\nOVER\n\n      \u237410\u2193'OVERBOARD'\n0\n\n      M\nONE\nFAT\nFLY\n      0 \u00af2\u2193M\nO\nF\nF\n\n      \u00af2 \u00af1\u2193M\nON\n      1\u2193M\nFAT\nFLY\n      M3\u21902 3 4\u2374\u2395A\n\n      1 1\u2193M3\nQRST\nUVWX\n      \u00af1 \u00af1\u2193M3\nABCD\nEFGH\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/enclose-with-axes/","title":"Enclose with Axes","text":"Enclose with Axes R\u2190\u2282[K]Y <p><code>Y</code> may be any array.  <code>K</code> is a vector of zero or more axes of <code>Y</code>.  <code>R</code> is an array of the elements of <code>Y</code> enclosed along the axes <code>K</code>.  The shape of <code>R</code> is the shape of <code>Y</code> with the <code>K</code> axes removed:</p> <pre><code>      \u2374R \u2190\u2192 (\u2374Y)[(\u2373\u2374\u2374R)~K]\n</code></pre> <p>The shape of each element of <code>R</code> is the shape of the <code>K</code>th axes of <code>Y</code>:</p> <pre><code>      \u2374\u2283R \u2190\u2192 (\u2374Y)[,K]\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/enclose-with-axes/#examples","title":"Examples","text":"<pre><code>      ]display A\u21902 3 4\u2374'DUCKSWANBIRDWORMCAKESEED'\n\u250c\u250c\u2192\u2500\u2500\u2500\u2510\n\u2193\u2193DUCK\u2502\n\u2502\u2502SWAN\u2502\n\u2502\u2502BIRD\u2502\n\u2502\u2502    \u2502\n\u2502\u2502WORM\u2502\n\u2502\u2502CAKE\u2502\n\u2502\u2502SEED\u2502\n\u2514\u2514\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      ]display \u2282[3]A\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502DUCK\u2502 \u2502SWAN\u2502 \u2502BIRD\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502WORM\u2502 \u2502CAKE\u2502 \u2502SEED\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      ]display \u2282[2 3]A\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2193DUCK\u2502 \u2193WORM\u2502 \u2502\n\u2502 \u2502SWAN\u2502 \u2502CAKE\u2502 \u2502\n\u2502 \u2502BIRD\u2502 \u2502SEED\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display \u2282[1 3]A\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2193DUCK\u2502 \u2193SWAN\u2502 \u2193BIRD\u2502 \u2502\n\u2502 \u2502WORM\u2502 \u2502CAKE\u2502 \u2502SEED\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/enclose/","title":"Enclose","text":"Enclose R\u2190\u2282Y <p><code>Y</code> may be any array.  <code>R</code> is a scalar array whose item is the array <code>Y</code>.  If <code>Y</code> is a simple scalar, <code>R</code> is the simple scalar unchanged.  Otherwise, <code>R</code> has a depth whose magnitude is one greater than the magnitude of the depth of <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/enclose/#examples","title":"Examples","text":"<pre><code>      \u22821\n1\n\n      \u2282'A'\nA\n\n      \u22821 2 3\n 1 2 3\n\n      \u22821,\u2282'CAT'\n 1  CAT\n\n      \u22822 4\u2374\u23738\n 1 2 3 4\n 5 6 7 8\n\n      \u2282\u23730\n\n      \u2282\u2282\u23730\n\n      \u2282\u228210\n10\n</code></pre> <p>See also: Enclose with Axes below.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/encode/","title":"Encode","text":"Encode R\u2190X\u22a4Y <p><code>Y</code> must be a simple numeric array.  <code>X</code> must be a simple numeric array.  <code>R</code> is the numeric array which results from the representation of <code>Y</code> in the number system defined by <code>X</code>.</p> <p>The shape of <code>R</code> is <code>(\u2374X),\u2374Y</code> (the catenation of the shapes of <code>X</code> and <code>Y</code>).</p> <p>If <code>X</code> is a vector or a scalar, the result for each element of <code>Y</code> is the value of the element expressed in the number system defined by radix <code>X</code>.  If <code>Y</code> is greater than can be expressed in the number system, the result is equal to the representation of the residue <code>(\u00d7/X)|Y</code>.  If the first element of <code>X</code> is 0, the value will be fully represented.</p> <p>This function is also known as Representation.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/encode/#examples","title":"Examples","text":"<pre><code>      10\u22a45 15 125\n5 5 5\n\n      0 10\u22a45 15 125\n0 1 12\n5 5  5\n</code></pre> <p>If <code>X</code> is a higher-rank array, each of the vectors along the first axis of <code>X</code> is used as the radix vector for each element of <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/encode/#examples_1","title":"Examples","text":"<pre><code>      A\n2 0  0\n2 0  0\n2 0  0\n2 0  0\n2 8  0\n2 8  0\n2 8 16\n2 8 16\n\n\n</code></pre> <p>This example shows binary, octal and hexadecimal representations of the decimal number 75.</p> <pre><code>      A\u22a475\n0 0  0\n1 0  0\n0 0  0\n0 0  0\n1 0  0\n0 1  0\n1 1  4\n1 3 11\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/encode/#examples_2","title":"Examples","text":"<pre><code>      0 1\u22a41.25 10.5\n1    10\n0.25  0.5\n\n      4 13\u22a413?52\n 3 1 0  2 3 2 0 1  3 1 2 3 1\n12 2 4 12 1 7 6 3 10 1 0 3 8\n</code></pre> <p><code>\u2395IO</code> is not an implicit argument of encode.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/enlist/","title":"Enlist","text":"Enlist (\u2395ML\u22651) <p>Migration level must be such that <code>\u2395ML\u22651</code> (otherwise see \"Type\" on page 1).</p> <p><code>Y</code> may be any array, <code>R</code> is a simple vector created from all the elements of <code>Y</code> in ravel order.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/enlist/#examples","title":"Examples","text":"<pre><code>\n      \u2395ML\u21901         \u235d  Migration level 1\n      MAT\u21902 2\u2374'MISS' 'IS' 'SIP' 'PI' \u22c4 MAT\n MISS  IS\n SIP   PI\n      \u220aMAT\nMISSISSIPPI\n\n      M\u21901 (2 2\u23742 3 4 5) (6(7 8))\n      M\n1  2 3  6  7 8\n   4 5\n      \u220aM\n1 2 3 4 5 6 7 8\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/equal/","title":"Equal","text":"Equal R\u2190X=Y <p><code>Y</code> may be any array. <code>X</code> may be any array. <code>R</code> is Boolean.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Equal.</p> <p>If <code>X</code> and <code>Y</code> are refs, then <code>R</code> is 1 if they are refs to the same object. If <code>X</code> is a ref and <code>Y</code> is not, or vice-versa, then <code>R</code> is 0.</p> <p>If <code>X</code> and <code>Y</code> are character, then <code>R</code> is 1 if they are the same character. If <code>X</code> is character and <code>Y</code> is numeric, or vice-versa, then <code>R</code> is 0.</p> <p>If <code>X</code> and <code>Y</code> are numeric, then <code>R</code> is 1 if <code>X</code> and <code>Y</code> are within comparison tolerance of each other.</p> <p>For real numbers <code>X</code> and <code>Y</code>, <code>X</code> is considered equal to <code>Y</code> if <code>(|X-Y)</code> is not greater than <code>\u2395CT\u00d7(|X)\u2308|Y</code>.</p> <p>For complex numbers <code>X=Y</code> is 1 if the magnitude of <code>X-Y</code> does not exceed <code>\u2395CT</code> times the larger of the magnitudes of <code>X</code> and <code>Y</code>; geometrically, <code>X=Y</code> if the number smaller in magnitude lies on or within a circle centred on the one with larger magnitude, having radius <code>\u2395CT</code> times the larger magnitude.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/equal/#examples","title":"Examples","text":"<pre><code>      3=3.1 3 \u00af2 \u00af3\n0 1 0 0\n\n      a\u21902+0j1\u00d7\u2395CT \n      a\n2J1E\u00af14\n      a=2j.00000000000001 2j.0000000000001\n1 0\n\n      'CAT'='FAT'\n0 1 1\n\n      'CAT'=1 2 3\n0 0 0\n\n      'CAT'='C' 2 3\n1 0 0\n\n      \u2395CT\u21901E\u00af10\n      1=1.000000000001\n1\n\n      1=1.0000001\n0\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/excluding/","title":"Excluding","text":"Excluding R\u2190X~Y <p><code>X</code> must be a scalar or vector.  <code>R</code> is a vector of the elements of <code>X</code> excluding those elements which occur in <code>Y</code> taken in the order in which they occur in <code>X</code>.</p> <p>Elements of <code>X</code> and <code>Y</code> are considered the same if <code>X\u2261Y</code> returns 1 for those elements.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Excluding. Excluding is also known as Without.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/excluding/#examples","title":"Examples","text":"<pre><code>      'HELLO'~'GOODBYE'\nHLL\n      'MONDAY' 'TUESDAY' 'WEDNESDAY'~'TUESDAY' 'FRIDAY'\n MONDAY  WEDNESDAY\n\n      5 10 15~\u237310\n15\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/execute/","title":"Execute","text":"Execute R\u2190{X}\u234eY <p><code>Y</code> must be a simple character scalar or vector containing an APL expression to be executed. The expression may contain one or more sub-expressions separated by <code>\u22c4</code> (Diamond) characters.</p> <p>If the result of the expression is used or is assigned to a name,  <code>R</code> is the result (if any) of the last-executed sub-expression and the non-shy results of all preceding expressions (that are not assigned within the expression) are displayed. Otherwise the unassigned non-shy results of all of the sub-expressions are displayed.</p> <p>If the expression is an empty vector or a vector containing only blanks or one that does not produce a result, then <code>\u234eY</code> has no value and using or assigning it to a name will generate <code>VALUE ERROR</code>.</p> <p>If <code>Y</code> contains a branch expression, the branch is effected in the environment from which the Execute was invoked, and <code>\u234eY</code> does not return.</p> <p>If specified, <code>X</code> must be a namespace reference or a simple character scalar or vector representing the name of a namespace in which the expression is to be executed. If <code>X</code> is omitted or is an empty character vector, the expression is executed in the current space.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/execute/#examples","title":"Examples","text":"<pre><code>\n      \u234e'2+2'\n4\n      \u234e'1+1 \u22c4 2+2'\n2\n4\n      A\u2190 \u234e'1+1 \u22c4 2+2'\n2\n      A\n4\n      4=\u234e'1+1 \u22c4 2+2'\n2\n1\n      \u234e'A\u21902|\u00af1\u2191\u2395TS \u22c4 \u21920\u2374\u2368A \u22c4 A'\n0\n      A\n0\n      A\u2190\u234e''\nVALUE ERROR: No result was provided when the context expected one\n      A\u2190\u234e''\n     \u2227\n      'myspace' \u2395NS''\n      myspace\u234e'A\u2190\u23736'\n      myspace.A\n1 2 3 4 5 6\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/expand-first/","title":"Expand First","text":"Expand First R\u2190X\u2340Y <p>The form <code>R\u2190X\u2340Y</code> implies expansion along the first axis whereas the form <code>R\u2190X\\Y</code> implies expansion along the last axis (columns).  See \"Expand\" above.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/expand/","title":"Expand","text":"Expand R\u2190X\\[K]Y <p><code>Y</code> may be any array.  <code>X</code> is a simple integer scalar or vector.  The axis specification is optional.  If present, <code>K</code> must be a simple integer scalar or 1-element vector.  The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis of <code>Y</code> is implied.  The form <code>R\u2190X\u2340Y</code> implies the first axis.  If <code>Y</code> is a scalar, it is treated as a one-element vector.</p> <p>If <code>Y</code> has length 1 along the <code>K</code>th (or implied) axis, it is extended along that axis to match the number of positive elements in <code>X</code>. Otherwise, the number of positive elements in <code>X</code> must be the length of the <code>K</code>th (or implied) axis of <code>Y</code>.</p> <p><code>R</code> is composed from the sub-arrays along the <code>K</code>th axis of <code>Y</code>. If <code>X[I]</code> (an element of <code>X</code>) is the <code>J</code>th positive element in <code>X</code>, then the <code>J</code>th sub-array along the <code>K</code>th axis of <code>Y</code> is replicated <code>X[I]</code> times. If <code>X[I]</code> is negative, then a sub-array of fill elements of <code>Y</code> is replicated <code>|X[I]</code> times and inserted in relative order along the <code>K</code>th axis of the result. If <code>X[I]</code> is zero, it is treated as the value <code>\u00af1</code>. The shape of <code>R</code> is the shape of <code>Y</code> except that the length of the <code>K</code>th axis is <code>+/1\u2308|X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/expand/#examples","title":"Examples","text":"<pre><code>      0\\\u23730\n0\n\n      1 \u00af2 3 \u00af4 5\\'A'\nA  AAA    AAAAA\n\n      M\n1 2 3\n4 5 6\n\n      1 \u00af2 2 0 1\\M\n1 0 0 2 2 0 3\n4 0 0 5 5 0 6\n\n      1 0 1\u2340M\n1 2 3\n0 0 0\n4 5 6\n\n      1 0 1\\[1]M\n1 2 3\n0 0 0\n4 5 6\n\n      1 \u00af2 1\\(1 2)(3 4 5)\n 1 2  0 0  0 0  3 4 5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/exponential/","title":"Exponential","text":"Exponential R\u2190*Y <p><code>Y</code> must be numeric. <code>R</code> is numeric and is the <code>Y</code>th power of e, the base of natural logarithms.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/exponential/#example","title":"Example","text":"<pre><code>      *1 0\n2.718281828 1\n\n      *0j1 1j2\n0.5403023059J0.8414709848 \u00af1.131204384J2.471726672\n\n      1+*\u25cb0j1 \u235d Euler Identity\n0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/factorial/","title":"Factorial","text":"Factorial R\u2190!Y <p><code>Y</code> must be numeric excluding negative integers.  <code>R</code> is numeric.  <code>R</code> is the product of the first <code>Y</code> integers for positive integer values of <code>Y</code>. In general, <code>!Y</code> is gamma <code>Y+1</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/factorial/#examples","title":"Examples","text":"<pre><code>      !1 2 3 4 5\n1 2 6 24 120\n\n      !\u00af1.5 0 1.5 3.3\n\u00af3.544907702 1 1.329340388 8.85534336\n\n      !0j1 1j2\n0.4980156681J\u00af0.1549498283 0.1122942423J0.3236128855\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/find/","title":"Find","text":"Find R\u2190X\u2377Y <p><code>X</code> and <code>Y</code> may be any arrays.  <code>R</code> is a simple Boolean array the same shape as Y which identifies occurrences of <code>X</code> within <code>Y</code>.</p> <p>If the rank of <code>X</code> is smaller than the rank of <code>Y</code>, <code>X</code> is treated as if it were the same rank with leading axes of size 1.  For example a vector is treated as a 1-row matrix.</p> <p>If the rank of <code>X</code> is larger than the rank of <code>Y</code>, no occurrences of <code>X</code> are found in <code>Y</code>.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are implicit arguments of Find.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/find/#examples","title":"Examples","text":"<pre><code>      'AN'\u2377'BANANA'\n0 1 0 1 0 0\n\n      'ANA'\u2377'BANANA'\n0 1 0 1 0 0\n\n      'BIRDS' 'NEST'\u2377'BIRDS' 'NEST' 'SOUP'\n1 0 0\n\n      MAT\nIS YOU IS\nOR IS YOU\nISN'T\n      'IS'\u2377MAT\n1 0 0 0 0 0 0 1 0\n0 0 0 1 0 0 0 0 0\n1 0 0 0 0 0 0 0 0\n      'IS YOU'\u2377MAT\n1 0 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/first/","title":"First","text":"First (\u2395ML) <p>See function \"Disclose\".</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/floor/","title":"Floor","text":"Floor R\u2190\u230aY <p><code>Y</code> must be numeric.</p> <p>For real numbers, <code>R</code> is the largest integer value less than or equal to <code>Y</code> within the comparison tolerance <code>\u2395CT</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/floor/#examples","title":"Examples","text":"<pre><code>      \u230a\u00af2.3 0.1 100 3.3\n\u00af3 0 100 3\n\n      \u230a0.5 + 0.4 0.5 0.6\n0 1 1\n</code></pre> <p>For complex numbers, <code>R</code> depends on the relationship between the real and imaginary parts of the numbers in <code>Y</code>.</p> <pre><code>      \u230a1j3.2 3.3j2.5 \u00af3.3j\u00af2.5\n1J3 3J2 \u00af3J\u00af3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/floor/#complex-floor","title":"Complex Floor","text":"<p>The following (deliberately) simple function illustrates one way to express the rules for evaluating complex Floor.</p> <pre><code>     \u2207 fl\u2190CpxFloor cpxs;a;b\n[1]   \u235d Complex floor of scalar complex number (a+ib)\n[2]    a b\u21909 11\u25cbcpxs\n[3]    :If 1&gt;(a-\u230aa)+b-\u230ab\n[4]        fl\u2190(\u230aa)+0J1\u00d7\u230ab\n[5]    :Else\n[6]        :If (a-\u230aa)&lt;b-\u230ab\n[7]            fl\u2190(\u230aa)+0J1\u00d71+\u230ab\n[8]        :Else\n[9]            fl\u2190(1+\u230aa)+0J1\u00d7\u230ab\n[10]       :EndIf\n[11]   :EndIf\n     \u2207\n\n      CpxFloor\u00a81j3.2 3.3j2.5 \u00af3.3j\u00af2.5\n1J3 3J2 \u00af3J\u00af3\n</code></pre> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Floor.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-dyadic/","title":"Format (Dyadic)","text":"Format (Dyadic) R\u2190X\u2355Y <p><code>Y</code> must be a simple real (non-complex) numeric array.  <code>X</code> must be a simple integer scalar or vector.  <code>R</code> is a character array displaying the array <code>Y</code> according to the specification <code>X</code>.  <code>R</code> has rank <code>1\u2308\u2374\u2374Y</code> and <code>\u00af1\u2193\u2374R</code> is <code>\u00af1\u2193\u2374Y</code>. If any element of <code>Y</code> is complex, dyadic <code>\u2355</code> reports a <code>DOMAIN ERROR</code>.</p> <p>Conformability requires that if <code>X</code> has more than two elements, then <code>\u2374X</code> must be <code>2\u00d7\u00af1\u2191\u2374Y</code>. If <code>X</code> contains one element, it is extended to <code>(2\u00d7\u00af1\u2191\u2374Y)\u23740,X</code>.  If <code>X</code> contains 2 elements, it is extended to <code>(2\u00d7\u00af1\u2191\u2374Y)\u2374X</code>.</p> <p><code>X</code> specifies two numbers (possibly after extension) for each column in <code>Y</code>.  For this purpose, scalar <code>Y</code> is treated as a one-element vector.  Each pair of numbers in <code>X</code> identifies a format width (<code>W</code>) and a format precision (<code>P</code>).</p> <p>If <code>P</code> is 0, the column is to be formatted as integers.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-dyadic/#examples","title":"Examples","text":"<pre><code>      5 0 \u2355 2 3\u2374\u23736\n    1    2    3\n    4    5    6\n\n      4 0\u23551.1 2 \u00af4 2.547\n   1   2  \u00af4   3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-dyadic/#example","title":"Example","text":"<p>If <code>P</code> is positive, the format is floating point with <code>P</code> significant digits to be displayed after the decimal point.</p> <pre><code>      4 1\u23551.1 2 \u00af4 2.547\n 1.1 2.0\u00af4.0 2.5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-dyadic/#example_1","title":"Example","text":"<p>If <code>P</code> is negative, scaled format is used with <code>|P</code> digits in the mantissa.</p> <pre><code>      7 \u00af3\u23555 15 155 1555\n5.00E0 1.50E1 1.55E2 1.56E3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-dyadic/#example_2","title":"Example","text":"<p>If <code>W</code> is 0 or absent, then the width of the corresponding columns of <code>R</code> are determined by the maximum width required by any element in the corresponding columns of <code>Y</code>, plus one separating space.</p> <pre><code>      3\u23552 3\u237410 15.2346 \u00af17.1 2 3 4\n 10.000 15.235 \u00af17.100\n  2.000  3.000   4.000\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-dyadic/#example_3","title":"Example","text":"<p>If a formatted element exceeds its specified field width when <code>W&gt;</code>0, the field width for that element is filled with asterisks.</p> <pre><code>      3 0 6 2 \u2355 3 2\u237410.1 15 1001 22.357 101 1110.1\n 10 15.00\n*** 22.36\n101******\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-dyadic/#example_4","title":"Example","text":"<p>If the format precision exceeds the internal precision, low order digits are replaced by the symbol '<code>_</code>'.</p> <pre><code>      26\u23552*100\n1267650600228229_______________.__________________________\n\n      \u237426\u23552*100\n59\n\n      0 20\u2355\u00f73\n 0.3333333333333333____\n\n      0 \u00af20\u2355\u00f73\n 3.333333333333333____E\u00af1\n</code></pre> <p>The shape of <code>R</code> is the same as the shape of <code>Y</code> except that the last dimension of <code>R</code> is the sum of the field widths specified in <code>X</code> or deduced by the function.  If <code>Y</code> is a scalar, the shape of <code>R</code> is the field width.</p> <pre><code>      \u23745 2 \u2355 2 3 4\u2374\u237324\n2 3 20\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-monadic/","title":"Format (Monadic)","text":"Format (Monadic) R\u2190\u2355Y <p><code>Y</code> may be any array.  <code>R</code> is a simple character array which will display identically to the display produced by <code>Y</code>.  The result is independent of <code>\u2395PW</code>.  If <code>Y</code> is a simple character array, then <code>R</code> is <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-monadic/#example","title":"Example","text":"<pre><code>      +B\u2190\u2355A\u21902 6\u2374'HELLO PEOPLE'\nHELLO\nPEOPLE\n\n      B \u2261 A\n1\n</code></pre> <p>If <code>Y</code> is a simple numeric scalar, then <code>R</code> is a vector containing the formatted number without any spaces.  A floating point number is formatted according to the system variable <code>\u2395PP</code>.  <code>\u2395PP</code> is ignored when formatting integers.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-monadic/#examples","title":"Examples","text":"<pre><code>      \u2395PP\u21905\n\n      \u2374C\u2190\u2355\u23730\n0\n\n      \u2374C\u2190\u235510\n2\n\n      C\n10\n\n      \u2374C\u2190\u235512.34\n5\n\n      C\n12.34\n\n      \u2355123456789\n123456789\n\n      \u2355123.456789\n123.46\n</code></pre> <p>Scaled notation is used if the magnitude of the non-integer number is too large to represent with <code>\u2395PP</code> significant digits or if the number requires more than five leading zeroes after the decimal point.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-monadic/#examples_1","title":"Examples","text":"<pre><code>      \u2355123456.7\n1.2346E5\n\n      \u23550.0000001234\n1.234E\u00af7\n</code></pre> <p>If <code>Y</code> is a simple numeric vector, then <code>R</code> is a character vector in which each element of <code>Y</code> is independently formatted with a single separating space between formatted elements.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-monadic/#example_1","title":"Example","text":"<pre><code>      \u2374C\u2190\u2355\u00af123456 1 22.5 \u00af0.000000667 5.00001\n27\n\n      C\n\u00af1.2346E5 1 22.5 \u00af6.67E\u00af7 5\n</code></pre> <p>If <code>Y</code> is a simple numeric array rank higher than one, <code>R</code> is a character array with the same shape as <code>Y</code> except that the last dimension of <code>Y</code> is determined by the length of the formatted data.  The format width is determined independently for each column of <code>Y</code>, such that:</p> <ol> <li>the decimal points for floating point or scaled formats are aligned.</li> <li>the <code>E</code> characters for scaled formats are aligned, with trailing zeros added to the mantissae if necessary.</li> <li>integer formats are aligned to the left of the decimal point column, if any, or right-adjusted in the field otherwise.</li> <li>each formatted column is separated from its neighbours by a single blank column.</li> <li>the exponent values in scaled formats are left-adjusted to remove any blanks.</li> </ol>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-monadic/#examples_2","title":"Examples","text":"<pre><code>      C\u219022 \u00af0.000000123 2.34 \u00af212 123456 6.00002 0\n\n      \u2374C\u2190\u23552 2 3\u2374C\n2 2 29\n\n      C\n  22    \u00af1.2300E\u00af7  2.3400E0\n\u00af212     1.2346E5   6.0000E0\n\n   0     2.2000E1  \u00af1.2300E\u00af7\n   2.34 \u00af2.1200E2   1.2346E5\n</code></pre> <p>If <code>Y</code> is non-simple, and all items of <code>Y</code> at any depth are scalars or vectors, then <code>R</code> is a vector.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-monadic/#examples_3","title":"Examples","text":"<pre><code>      B\u2190\u2355A\u2190'ABC' 100 (1 2 (3 4 5)) 10\n\n      \u2374A\n4\n      \u2261A\n\u00af3\n\n      \u2374B\n26\n      \u2261B\n1\n\n      A\n ABC  100  1 2  3 4 5   10\n\n      B\n ABC  100  1 2  3 4 5   10\n</code></pre> <p>By replacing spaces with <code>^</code>, it is clearer to see how the result of <code>\u2355</code> is formed:</p> <pre><code>^ABC^^100^^1^2^^3^4^5^^^10\n</code></pre> <p>If <code>Y</code> is non-simple, and all items of <code>Y</code> at any depth are not scalars, then <code>R</code> is a matrix.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/format-monadic/#example_2","title":"Example","text":"<pre><code>      D\u2190\u2355C\u21901 'AB' (2 2\u23741+\u23734) (2 2 3\u2374'CDEFGHIJKLMN')\n\n      C\n1  AB  2 3  CDE\n       4 5  FGH\n\n            IJK\n            LMN\n\n      \u2374C\n4\n\n      \u2261C\n\u00af2\n\n      D\n1  AB  2 3  CDE\n       4 5  FGH\n\n            IJK\n            LMN\n\n      \u2374D\n5 16\n\n      \u2261D\n1\n</code></pre> <p>By replacing spaces with <code>^</code>, it is clearer to see how the result of <code>\u2355</code> is formed:</p> <pre><code>1^^AB^^2^3^^CDE^\n^^^^^^^4^5^^FGH^\n^^^^^^^^^^^^^^^^\n^^^^^^^^^^^^IJK^\n^^^^^^^^^^^^LMN^\n</code></pre> <p><code>\u2395PP</code> is an implicit argument of Monadic Format.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/grade-down-dyadic/","title":"Grade Down (Dyadic)","text":"Grade Down (Dyadic) R\u2190X\u2352Y <p><code>Y</code> must be a simple character array of rank greater than 0.  <code>X</code> must be a simple character array of rank 1 or greater.  <code>R</code> is a simple integer vector of shape <code>1\u2191\u2374Y</code> containing the permutation of <code>\u23731\u2191\u2374Y</code> that places the sub-arrays of <code>Y</code> along the first axis in descending order according to the collation sequence <code>X</code>.  The indices of any set of identical sub-arrays in <code>Y</code> occur in <code>R</code> in ascending order.</p> <p>If <code>X</code> is a vector, the following identity holds:</p> <pre><code>      X\u2352Y \u2190\u2192 \u2352X\u2373Y\n</code></pre> <p>A left argument of rank greater than 1 allows successive resolution of duplicate orderings in the following way.</p> <p>Starting with the last axis:</p> <ul> <li>The characters in the right argument are located along the current axis of the left argument.  The position of the first occurrence gives the ordering value of the character.</li> <li>If a character occurs more than once in the left argument its lowest position along the current axis is used.</li> <li>If a character of the right argument does not occur in the left argument, the ordering value is one more than the maximum index of the current axis - as with dyadic iota.</li> </ul> <p>The process is repeated using each axis in turn, from the last to the first, resolving duplicates until either no duplicates result or all axes have been exhausted.</p> <p>For example, if index origin is 1:</p> Left argument: Right argument: abc ABA ab ac Aa Ac <p>Along last axis:</p> Character: Value: Ordering: ab ac Aa Ac 1 2 1 3 1 1 1 3 3 =1   &lt;-duplicate ordering with 4 =1   &lt;-respect to last axis. <p>Duplicates exist, so resolve these with respect to the first axis:</p> Character: Value: Ordering: ac Ac 1 1 2 1 2 1 <p>So the final row ordering is:</p> <pre><code>        ab              3\n        ac              2\n        Aa              4\n        Ac              1\n</code></pre> <p>That is, the order of rows is 4 2 1 3 which corresponds to a descending row sort of:</p> <pre><code>        Ac              1\n        ac              2\n        ab              3\n        Aa              4\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/grade-down-dyadic/#examples","title":"Examples","text":"<pre><code>      \u2374S1\n2 27\n      S1\n ABCDEFGHIJKLMNOPQRSTUVWXYZ\n abcdefghijklmnopqrstuvwxyz\n      S2\n ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n      S3\n AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n      S4\n ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n</code></pre> <p>The following results are tabulated for comparison:</p> <pre><code>X       X[S1\u2352X;]    X[S2\u2352X;]    X[S3\u2352X;]    X[S4\u2352X;]\nFIRsT     TAPE        rAT         TAPE        TAPE\nTAP       TAP         fIRST       TAP         TAP\nRATE      RATE        TAPE        rAT         RATE\nFiRST     rAT         TAP         RATE        rAT\nFIRST     RAT         RATE        RAT         RAT\nrAT       MAT         RAT         MAT         MAT\nfIRST     fIRST       MAT         fIRST       FIRsT\nTAPE      FiRST       FiRST       FiRST       FiRST\nMAT       FIRsT       FIRsT       FIRsT       FIRST\nRAT       FIRST       FIRST       FIRST       fIRST\n</code></pre> <p><code>\u2395IO</code> is an implicit argument of Grade Down.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/grade-down-monadic/","title":"Grade Down (Monadic)","text":"Grade Down (Monadic) R\u2190\u2352Y <p><code>Y</code> may be any array of rank greater than 0 but may not contain namespaces.  <code>R</code> is an integer vector being the permutation of <code>\u23731\u2191\u2374Y</code> that places the sub-arrays along the first axis in descending order. For the rules for comparing items of <code>Y</code> with one another, see Grade Up (Monadic) on page 1.</p> <p><code>\u2395IO</code> is an implicit argument of Grade Down.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/grade-down-monadic/#examples","title":"Examples","text":"<pre><code>      \u235222.5 1 15 3 \u00af4\n1 3 4 2 5\n\n</code></pre> <pre><code>      M\n2 3 5\n1 4 7\n\n2 3 4\n5 2 4\n\n2 3 5\n1 2 6\n      \u2352M\n1 3 2\n\n</code></pre> <p>Note that character arrays sort differently in the Unicode and Classic Editions.</p> <pre><code>      M\nGoldilocks\nporridge   \nPorridge   \n3 bears \n</code></pre> Unicode Edition Classic Edition \u2352M 2 3 1 4 \u2352M 3 1 4 2 M[\u2352M;] porridge Porridge Goldilocks 3 bears M[\u2352M;] Porridge Goldilocks 3 bears porridge <pre><code>      \u2374pb\n6 3\n      pb\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502Rivers  \u2502Jason\u2502554\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Daintree\u2502John \u2502532\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Rivers  \u2502Jason\u2502543\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Foad    \u2502Jay  \u2502558\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Scholes \u2502John \u2502547\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Scholes \u2502John \u2502535\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n      \u2352pb\n5 6 1 3 4 2\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/grade-up-dyadic/","title":"Grade Up (Dyadic)","text":"Grade Up (Dyadic) R\u2190X\u234bY <p><code>Y</code> must be a simple character array of rank greater than 0.  <code>X</code> must be a simple character array of rank 1 or greater.  <code>R</code> is a simple integer vector being the permutation of <code>\u23731\u2191\u2374Y</code> that places the sub-arrays of <code>Y</code> along the first axis in ascending order according to the collation sequence <code>X</code>.</p> <p>If <code>X</code> is a vector, the following identity holds:</p> <pre><code>      X\u234bY \u2190\u2192 \u234bX\u2373Y\n</code></pre> <p>If <code>X</code> is a higher-rank array, each axis of <code>X</code> represents a grading attribute in increasing order of importance (the first axis is the least significant and the last axis is the most significant).  If a character is repeated in <code>X</code>, it is treated as though it were located at the position in the array determined by the lowest index in each axis for all occurrences of the character.  The character has the same weighting as the character located at the derived position in <code>X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/grade-up-dyadic/#examples","title":"Examples","text":"<pre><code>      (2 2\u2374'ABBA') \u234b 'AB'[?5 2\u23742] \u235d A and B are equivalent\n1 2 3 4 5\n\n        ]display A\u21902 14\u2374' abcdegiklmnrt ABCDEGIKLMNRT'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 abcdegiklmnrt\u2502\n\u2502 ABCDEGIKLMNRT\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      V\u2190'Ab' 'AB' 'aba' 'ABA' 'abaca' 'abecedarian'\n      V,\u2190'Abelian' 'black' 'blackball' 'black belt'\n      V,\u2190'blacking' 'Black Mass'\n\n      ]display M\u2190\u2191V\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193Ab         \u2502\n\u2502AB         \u2502\n\u2502aba        \u2502\n\u2502ABA        \u2502\n\u2502abaca      \u2502\n\u2502abecedarian\u2502\n\u2502Abelian    \u2502\n\u2502black      \u2502\n\u2502blackball  \u2502\n\u2502black belt \u2502\n\u2502blacking   \u2502\n\u2502Black Mass \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>  ]display M (M[(,A)\u234bM;]) (M[(,\u2349A)\u234bM;]) (M[A\u234bM;])\n</code></pre> <p>\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2193Ab         \u2502 \u2193aba        \u2502 \u2193aba        \u2502 \u2193Ab         \u2502 \u2502 \u2502 \u2502AB         \u2502 \u2502abaca      \u2502 \u2502abaca      \u2502 \u2502AB         \u2502 \u2502 \u2502 \u2502aba        \u2502 \u2502abecedarian\u2502 \u2502abecedarian\u2502 \u2502aba        \u2502 \u2502 \u2502 \u2502ABA        \u2502 \u2502black      \u2502 \u2502Ab         \u2502 \u2502ABA        \u2502 \u2502 \u2502 \u2502abaca      \u2502 \u2502black belt \u2502 \u2502Abelian    \u2502 \u2502abaca      \u2502 \u2502 \u2502 \u2502abecedarian\u2502 \u2502blackball  \u2502 \u2502AB         \u2502 \u2502abecedarian\u2502 \u2502 \u2502 \u2502Abelian    \u2502 \u2502blacking   \u2502 \u2502ABA        \u2502 \u2502Abelian    \u2502 \u2502 \u2502 \u2502black      \u2502 \u2502Ab         \u2502 \u2502black      \u2502 \u2502black      \u2502 \u2502 \u2502 \u2502blackball  \u2502 \u2502Abelian    \u2502 \u2502black belt \u2502 \u2502black belt \u2502 \u2502 \u2502 \u2502black belt \u2502 \u2502AB         \u2502 \u2502blackball  \u2502 \u2502Black Mass \u2502 \u2502 \u2502 \u2502blacking   \u2502 \u2502ABA        \u2502 \u2502blacking   \u2502 \u2502blackball  \u2502 \u2502 \u2502 \u2502Black Mass \u2502 \u2502Black Mass \u2502 \u2502Black Mass \u2502 \u2502blacking   \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518'</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/grade-up-monadic/","title":"Grade Up (Monadic)","text":"Grade Up (Monadic) R\u2190\u234bY <p><code>Y</code> may be any array of rank greater than 0 but may not contain namespaces.  <code>R</code> is an integer vector being the permutation of <code>\u23731\u2191\u2374Y</code> that places the sub-arrays along the first axis in ascending order. The rules for comparing items of <code>Y</code> with one another are as follows:</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/grade-up-monadic/#rules-for-comparing-simple-scalars","title":"Rules for comparing simple scalars","text":"<ul> <li>Numeric comparisons are  exact, as if <code>\u2395CT\u2190\u2395DCT\u21900</code> and <code>\u2395FR\u21901287</code></li> <li>Two real numbers are compared numerically, thus 1.2 precedes 3.</li> <li>In the  Unicode Edition two characters are compared numerically according to their position in the Unicode table. Thus <code>'a'</code> (<code>\u2395UCS 97</code>) precedes<code>'b'</code> (<code>\u2395UCS 98</code>). In the Classic Edition characters are compared according to their index in <code>\u2395AV</code>.</li> <li>Complex numbers are ordered by first comparing their real parts. If these are equal, the order is determined by comparing their imaginary parts.Thus <code>1J\u00af2</code> precedes <code>1</code> which precedes <code>1J2</code>.</li> <li><code>\u2395NULL</code> (which represents a null item obtained from an external source) precedes all numbers, and all numbers precede all characters.Thus <code>\u2395NULL</code> precedes 100, and 100 precedes <code>'A'</code>. </li> </ul>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/grade-up-monadic/#rules-for-comparing-non-scalar-arrays","title":"Rules for comparing non-scalar arrays","text":"<ul> <li>Arrays are compared item by item in ravel order.</li> <li>For arrays of equal  shape, the order is determined by the first pair of items which differ, thus <code>(1949 4 29 )</code> precedes <code>(1949 4 30 )</code>. Similarly <code>('April' 29 )</code> precedes <code>('April' 30 )</code>.</li> <li>Arrays with the same rank but different shape are ordered as if the shorter array were padded with items that precede all other types of item (negative infinity) including <code>\u2395NULL</code>. Thus <code>'car'</code> precedes <code>'carpet'</code>and <code>(1949 4)</code> precedes <code>(1949 4 30)</code>. An alternative model is to say that shorter arrays precede longer ones that begin the same way. For character vectors this is described as Lexicographical ordering, which is the order that words appear in a dictionary.</li> <li>Arrays with differing rank are ordered by first extending the shape of the lower-ranked array with 1s at the beginning, and then comparing the resultant equal-rank arrays as described above. So, to compare a vector (rank 1) with a matrix (rank 2), the vector is reshaped into a 1-row matrix.</li> <li>Empty arrays are compared first by type alone, so an empty numeric array precedes an empty character array, regardless of rank or shape.Thus <code>((0 3 2)\u23740)</code> precedes <code>''</code>. If the empty arrays are of the same type, they are sorted in order of their shape vector, working right to left.So <code>((0 5 2 )\u237499)</code> precedes <code>((0 3 4 )\u23740)</code>  and<code>((0 3 4)\u2374'')</code> precedes <code>((1 0 5 4)\u2374'')</code>.</li> </ul> <p><code>\u2395IO</code> is an implicit argument of Grade Up</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/grade-up-monadic/#examples","title":"Examples","text":"<pre><code>      \u234b22.5 1 15 3 \u00af4\n5 2 4 3 1\n\n</code></pre> <pre><code>      M\n2 3 5\n1 4 7\n\n2 3 4\n5 2 4\n\n2 3 5\n1 2 6\n      \u234bM\n2 3 1\n\n</code></pre> <p>Note that character arrays sort differently in the Unicode and Classic Editions.</p> <pre><code>      M\nGoldilocks\nporridge   \nPorridge   \n3 bears   \n</code></pre> Unicode Edition Classic Edition \u234bM 4 1 3 2 \u234bM 2 4 1 3 M[\u234bM;] 3 bears Goldilocks Porridge porridge M[\u234bM;] porridge 3 bears Goldilocks Porridge <pre><code>      \u2374pb\n6 3\n      pb\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502Rivers  \u2502Jason\u2502554\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Daintree\u2502John \u2502532\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Rivers  \u2502Jason\u2502543\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Foad    \u2502Jay  \u2502558\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Scholes \u2502John \u2502547\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502Scholes \u2502John \u2502535\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n      \u234bpb\n2 4 3 1 6 5\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/greater-or-equal/","title":"Greater Or Equal","text":"Greater Or Equal R\u2190X\u2265Y <p><code>Y</code> must be numeric.  <code>X</code> must be numeric.  <code>R</code> is Boolean.  <code>R</code> is 1 if <code>X</code> is greater than <code>Y</code> or <code>X=Y</code>.  Otherwise <code>R</code> is 0.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Greater Or Equal.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/greater-or-equal/#examples","title":"Examples","text":"<pre><code>      1 2 3 4 5 \u2265 3\n0 0 1 1 1\n\n      \u2395CT\u21901E\u00af10\n\n      1\u22651\n1\n\n      1\u22651.00000000001\n1\n\n      1\u22651.00000001\n0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/greater/","title":"Greater","text":"Greater R\u2190X&gt;Y <p><code>Y</code> must be numeric.  <code>X</code> must be numeric.  <code>R</code> is Boolean.  <code>R</code> is 1 if <code>X</code> is greater than <code>Y</code> and <code>X=Y</code> is 0.  Otherwise <code>R</code> is 0.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Greater.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/greater/#examples","title":"Examples","text":"<pre><code>      1 2 3 4 5 &gt; 2\n0 0 1 1 1\n\n      \u2395CT\u21901E\u00af10\n\n      1 1.00000000001 1.000000001 &gt; 1\n0 0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/index-generator/","title":"Index Generator","text":"Index Generator R\u2190\u2373Y <p><code>Y</code> must be a simple scalar or vector array of non-negative numbers. <code>R</code> is a numeric array composed of the set of all possible coordinates of an array of shape <code>Y</code>. The shape of <code>R</code> is <code>Y</code> and each element of <code>R</code> occurs in its self-indexing position in <code>R</code>. In particular, the following identity holds:</p> <pre><code>      \u2373Y \u2190\u2192 (\u2373Y)[\u2373Y]\n</code></pre> <p><code>\u2395IO</code> is an implicit argument of Index Generator. This function is also known as Interval.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/index-generator/#examples","title":"Examples","text":"<pre><code>      \u2395IO\n1\n      \u2374\u23730\n0\n      \u23735\n1 2 3 4 5\n\n      \u23732 3\n 1 1  1 2  1 3\n 2 1  2 2  2 3\n\n      \u22a2A\u21902 4\u2374'MAINEXIT'\nMAIN\nEXIT\n      A[\u2373\u2374A]\nMAIN\nEXIT\n\n</code></pre> <pre><code>      \u2395IO\u21900\n      \u23735\n0 1 2 3 4\n\n      \u23732 3\n 0 0  0 1  0 2\n 1 0  1 1  1 2\n\n      A[\u2373\u2374A]\nMAIN\nEXIT\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/index-of/","title":"Index Of","text":"Index Of R\u2190X\u2373Y <p><code>Y</code> may be any array. <code>X</code> may be any array of rank 1 or more.</p> <p>In general, the function locates the first occurrence of sub-arrays in <code>Y</code> which match major cells of  <code>X</code>, where a major cell is  a sub-array on the leading dimension of <code>X</code> with shape <code>1\u2193\u2374X</code>. The shape of the result <code>R</code> is <code>(1-\u2374\u2374X)\u2193\u2374Y</code>.</p> <p>If a sub-array of <code>Y</code> cannot be found in <code>X</code>, then the corresponding element of <code>R</code> will be <code>\u2395IO+\u2283\u2374X</code>.</p> <p>In particular, if <code>X</code> is a vector, the result <code>R</code> is a simple integer array with the same shape as <code>Y</code> identifying where elements of <code>Y</code> are first found in <code>X</code>. If an element of <code>Y</code> cannot be found in <code>X</code>, then the corresponding element of <code>R</code> will be <code>\u2395IO+\u2283\u2374X</code>.</p> <p>Elements of <code>X</code> and <code>Y</code> are considered the same if <code>X\u2261Y</code> returns 1 for those elements.</p> <p><code>\u2395IO</code>,  <code>\u2395CT</code> and <code>\u2395DCT</code> are implicit arguments of Index Of.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/index-of/#examples","title":"Examples","text":"<pre><code>      \u2395IO\u21901\n\n      2 4 3 1 4\u23731 2 3 4 5\n4 1 3 2 6\n\n      'CAT' 'DOG' 'MOUSE'\u2373'DOG' 'BIRD'\n2 4\n</code></pre> <pre><code>      X\u21903 4\u2374\u237312\n</code></pre> <pre><code>\n      X\n1  2  3  4\n5  6  7  8\n9 10 11 12\n</code></pre> <pre><code>\n      X\u23731 2 3 4\n1\n\n</code></pre> <pre><code>\n      Y\u21902 4\u23741 2 3 4 9 10 11 12\n      Y\n1  2  3  4\n9 10 11 12\n\n      X\u2373Y\n1 3\n      X\u23732 3 4 1\n4\n\n</code></pre> <pre><code>      X1\u219010 100 1000\u2218.+X\n      X1\n  11   12   13   14\n  15   16   17   18\n  19   20   21   22\n\n 101  102  103  104\n 105  106  107  108\n 109  110  111  112\n\n1001 1002 1003 1004\n1005 1006 1007 1008\n1009 1010 1011 1012\n\n</code></pre> <pre><code>      X1\u2373100 1000\u2218.+X\n2 3\n</code></pre> <pre><code>      x\nUnited Kingdom\nGermany       \nFrance        \nItaly         \nUnited States \nCanada        \nJapan         \nCanada        \nFrance        \n      y\nUnited Kingdom\nGermany       \nFrance        \nItaly         \nUSA           \n\nCanada        \nJapan         \nChina         \nIndia         \nDeutschland   \n\n</code></pre> <pre><code>      \u2374x\n9 14\n      \u2374y\n2 5 14\n      x\u2373y\n1 2  3  4 10\n6 7 10 10 10\n\n      x\u2373x\n1 2 3 4 5 6 7 6 3\n\n</code></pre> <p>Note that the expression <code>y\u2373x</code> signals a <code>LENGTH ERROR</code> because it looks for major cells in the left argument, whose shape is <code>5 14</code> (that is <code>1\u2193\u2374y</code>), which is not the same as the trailing shape of <code>x</code>.</p> <pre><code>\n      y\u2373x\nLENGTH ERROR\n      y\u2373x\n     \u2227\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/index-with-axes/","title":"Index with Axes","text":"Index with Axes R\u2190{X}\u2337[K]Y <p><code>X</code> must be a scalar or vector of depth <code>\u22642</code>, of integers each <code>\u2265\u2395IO</code>. <code>Y</code> may be any array. <code>K</code> is a simple scalar or vector specifying axes of <code>Y</code>. The length of <code>K</code> must be the same as the length of <code>X</code>:</p> <pre><code>      (\u2374,X) \u2261 \u2374,K\n</code></pre> <p>In general, the result <code>R</code> is similar to that obtained by square-bracket indexing with elided subscripts. Items of <code>K</code> distribute items of <code>X</code> along the axes of <code>Y</code>. For example:</p> <pre><code>      I J \u2337[1 3] Y  \u2190\u2192  Y[I;;J] \n</code></pre> <p>Note that index with axis may be used with selective specification. <code>\u2395IO</code> is an implicit argument of index with axis.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/index-with-axes/#examples","title":"Examples","text":"<pre><code>     \u2395IO\u21901\n\n     \u2395\u2190CUBE\u219010\u22a5\u00a8\u23732 3 4\n111 112 113 114\n121 122 123 124\n131 132 133 134\n\n211 212 213 214\n221 222 223 224\n231 232 233 234\n\n      2\u2337[1]CUBE\n211 212 213 214\n221 222 223 224\n231 232 233 234\n\n      2\u2337[3]CUBE\n112 122 132\n212 222 232\n\n      CUBE[;;2] \u2261 2\u2337[3]CUBE\n1\n      (1 3)4\u2337[2 3]CUBE\n114 134\n214 234\n\n      CUBE[;1 3;4] \u2261 (1 3)4\u2337[2 3]CUBE\n1\n\n</code></pre> <pre><code>      (2(1 3)\u2337[1 3]CUBE)\u21900 \u22c4 CUBE \u235d Selective assignment.\n111 112 113 114\n121 122 123 124\n131 132 133 134\n\n  0 212   0 214\n  0 222   0 224\n  0 232   0 234\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/","title":"Indexing","text":"Indexing R\u2190X[Y] <p><code>X</code> may be  any array. <code>Y</code> must be a valid index specification. <code>R</code> is an array composed of elements indexed from <code>X</code> and the shape of <code>X</code> is determined by the index specification.</p> <p>This form of Indexing, using brackets, does not follow the normal syntax of a dyadic function. For an alternative method of indexing, see \"Index\" on page 1.</p> <p><code>\u2395IO</code> is an implicit argument of Indexing.</p> <p>Three forms of indexing are permitted. The form used is determined by context.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#simple-indexing","title":"Simple Indexing","text":"<p>For vector <code>X</code>, <code>Y</code> is a simple integer array composed of items from the set <code>\u2373\u2374X</code>.</p> <p><code>R</code> consists of elements selected according to index positions in <code>Y</code>. <code>R</code> has the same shape as <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#examples","title":"Examples","text":"<pre><code>      A\u219010 20 30 40 50\n\n      A[2 3\u23741 1 1 2 2 2]\n10 10 10\n20 20 20\n\n      A[3]\n30\n\n      'ONE' 'TWO' 'THREE'[2]\n TWO\n</code></pre> <p>For matrix <code>X</code>, <code>Y</code> is composed of two simple integer arrays separated by the semicolon character (<code>;</code>). The arrays select indices from the rows and columns of <code>X</code> respectively.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#examples_1","title":"Examples","text":"<pre><code>      +M\u21902 4\u237410\u00d7\u23738\n10 20 30 40\n50 60 70 80\n\n      M[2;3]\n70\n</code></pre> <p>For higher-rank array <code>X</code>, <code>Y</code> is composed of a simple integer array for each axis of <code>X</code> with adjacent arrays separated by a single semicolon character (<code>;</code>). The arrays select indices from the respective axes of <code>X</code>, taken in row-major order.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#examples_2","title":"Examples","text":"<pre><code>      \u22a2A\u21902 3 4\u237410\u00d7\u237324\n 10  20  30  40\n 50  60  70  80\n 90 100 110 120\n\n130 140 150 160\n170 180 190 200\n210 220 230 240\n\n      A[1;1;1]\n10\n\n      A[2;3 2;4 1]\n240 210\n200 170\n</code></pre> <p>If an indexing array is omitted for the <code>K</code>th axis, the index vector <code>\u2373(\u2374X)[K]</code> is assumed for that axis.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#examples_3","title":"Examples","text":"<pre><code>      A[;2;]\n 50  60  70  80\n170 180 190 200\n\n      M\n10 20 30 40\n50 60 70 80\n\n      M[;]\n10 20 30 40\n50 60 70 80\n\n      M[1;]\n10 20 30 40\n\n      M[;1]\n10 50\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#choose-indexing","title":"Choose Indexing","text":"<p>The index specification <code>Y</code> is a non-simple array. Each item identifies a single element of <code>X</code> by a set of indices with one element per axis of <code>X</code> in row-major order.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#examples_4","title":"Examples","text":"<pre><code>      M\n10 20 30 40\n50 60 70 80\n\n      M[\u22821 2]\n20\n\n      M[2 2\u2374\u22822 4]\n80 80\n80 80\n\n      M[(2 1)(1 2)]\n50 20\n</code></pre> <p>A scalar may be indexed by the enclosed empty vector:</p> <pre><code>      S\u2190'Z'\n      S[3\u2374\u2282\u23730]\nZZZ\n</code></pre> <p>Simple and Choose indexing are indistinguishable for vector <code>X</code>:</p> <pre><code>      V\u219010 20 30 40\n\n      V[\u22822]\n20\n      \u22822\n2\n      V[2]\n20\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#reach-indexing","title":"Reach Indexing","text":"<p>The index specification <code>Y</code> is a non-simple integer array, each of whose items reach down to a nested element of <code>X</code>. The items of an item of <code>Y</code> are simple vectors (or scalars) forming sets of indices that index arrays at successive levels of <code>X</code> starting at the top-most level. A set of indices has one element per axis at the respective level of nesting of <code>X</code> in row-major order.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#examples_5","title":"Examples","text":"<pre><code>      G\u2190('ABC' 1)('DEF' 2)('GHI' 3)('JKL' 4)\n      G\u21902 3\u2374G,('MNO' 5)('PQR' 6)\n      G\n  ABC  1   DEF  2   GHI  3\n  JKL  4   MNO  5   PQR  6\n\n      G[((1 2)1)((2 3)2)]\n DEF  6\n\n      G[2 2\u2374\u2282(2 2)2]\n5 5\n5 5\n      G[\u2282\u22821 1]\n  ABC  1\n\n      G[\u22821 1]\n  ABC  1\n\n      V\u2190,G\n\n      V[\u2282\u22821]\n  ABC  1\n\n      V[\u22821]\n  ABC  1\n\n      V[1]\n  ABC  1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#indexing-classes","title":"Indexing  Classes","text":"<p>If <code>Y</code> is a ref to an instance of a Class with a Default property, indexing is applied to the Default property. Similarly, indexing applied to a .NET collection returns the appropriate item(s) of the collection.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/indexing/#example","title":"Example","text":"<pre><code>      \u2191\u2395SRC c\n:Class c                 \n    :Property Default p  \n    :Access Public Shared\n        \u2207 r\u2190get          \n          r\u21902 3 4\u2374\u2395A     \n        \u2207                \n    :EndProperty         \n:EndClass                \n      c[2;3;]\nUVWX\n\n</code></pre> <p>See also: Indexing  Classes on page 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/intersection/","title":"Intersection","text":"Intersection R\u2190X\u2229Y <p><code>Y</code> must be  a scalar or vector.  <code>X</code> must be a scalar or vector.  A scalar <code>X</code> or <code>Y</code> is treated as a one-element vector.  <code>R</code> is a vector composed of items occurring in both <code>X</code> and <code>Y</code> in the order of occurrence in <code>X</code>.  If an item is repeated in <code>X</code> and also occurs in <code>Y</code>, the item is also repeated in <code>R</code>.</p> <p>Items in <code>X</code> and <code>Y</code> are considered the same if <code>X\u2261Y</code> returns 1 for those items.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Intersection.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/intersection/#examples","title":"Examples","text":"<pre><code>      'ABRA'\u2229'CAR'\nARA\n\n      1 'PLUS' 2 \u2229 \u23735\n1 2\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/interval-index/","title":"Interval Index","text":"Interval Index R\u2190X\u2378Y <p>Classic Edition:  the symbol <code>\u2378</code> (Iota Underbar) is not available in Classic Edition, and Interval Index is instead represented by <code>\u2395U2378</code>.</p> <p><code>X</code> is an ordered non-scalar array that represents a set of intervals or ranges.</p> <p>Note that the <code>i</code>th interval starts at  <code>X[i]</code>, then includes all subsequent values up to but not including <code>X[i+1]</code>.</p> <p>For example, if <code>X</code> is  <code>(1 3 5)</code> it defines 4 intervals numbered 0 to 3 as follows.</p> 0 less than 1 <code>&lt;1</code> 1 between 1 and 3 <code>(\u22651)\u2227(&lt;3)</code> 2 between 3 and 5 <code>(\u22653)\u2227(&lt;5)</code> 3 greater than or equal to 5 <code>\u22655</code> <p>If <code>X</code> is <code>'AEIOU'</code> it defines 6 intervals numbered 0 to 5 as follows:</p> 0 before A <code>\u2395UCS 0,\u237364</code> 1 between A and E <code>ABCD</code> 2 between E and I <code>EFGH</code> 3 between I and O <code>IJKLMN</code> 4 between O and U <code>OPQREST</code> 5 U and after <code>UVWXYZ...</code> <p><code>Y</code> is an array of the same type (numeric or character) as <code>X</code>.</p> <p>The result <code>R</code> is an integer array that identifies into which interval  the corresponding value in <code>Y</code> falls.</p> <p>Like dyadic <code>\u2373</code> (see Index Of on page 1), Interval Index works with major cells. For a vector these are its elements; for a matrix its rows, and so forth.</p> <p><code>X</code> and <code>Y</code> are compared using  the same logic as monadic <code>\u234b</code> (see Grade Up (Monadic) on page 1) which is independent of <code>\u2395CT</code> and <code>\u2395DCT</code>.</p> <p><code>\u2395IO</code> is an implicit argument of Interval Index. In all the following examples, <code>\u2395IO</code> is 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/interval-index/#examples","title":"Examples","text":"<pre><code>\n      10 20 30\u237811 1 31 21\n1 0 3 2\n</code></pre> <p>In the above example:</p> <ul> <li>11 is between <code>X[1]</code> and <code>X[2]</code> so the answer is 1.</li> <li>1 is less than  <code>X[1]</code> so the answer is 0</li> <li>31 is greater than <code>X[\u2374X]</code> so the answer is 3</li> <li>21 is between <code>X[2]</code> and <code>X[3]</code> so the answer is 2.```apl       'AEIOU' \u2378 'DYALOG' 1 5 1 3 4 2</li> </ul> <pre><code>\nAnd in the alphabetic example above:\n\n- \"D\" is between `X[1]` and `X[2]`, so the answer is 1\n- \"Y\" is after `X[\u2374X]` so the answer is 5\n- \"A\" is between `X[1]` and `X[2]`, so the answer is 1\n- as so on ...\n## Example (Classification)\n\nCommercially, olive oil is graded as follows:\n\n- if its acidity is less than 0.8%, as \"Extra Virgin\"\n- if its acidity is less than 2%, as \"Virgin\"\n- if its acidity is less than 3.3%, as \"Ordinary\"\n- otherwise, as \"Lampante\"```apl\n\n     grades\u2190'Extra Virgin' 'Virgin' 'Ordinary' 'Lampante'\n     acidity\u21900.8 2 3.3\n\n     samples\u21901.3 1.9 0.7 4 .6 3.2\n     acidity\u2378samples\n1 1 0 3 0 2\n     samples,\u236agrades[1+acidity\u2378samples]\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021.3\u2502Virgin      \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021.9\u2502Virgin      \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25020.7\u2502Extra Virgin\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25024  \u2502Lampante    \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25020.6\u2502Extra Virgin\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25023.2\u2502Ordinary    \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/interval-index/#example-data-consolidation-by-interval","title":"Example (Data Consolidation by Interval)","text":"<p><code>x</code> represents some data sampled in chronological order at timestamps <code>t</code>.</p> <pre><code>\n      \u2374x\n200000\n      x\n3984300 2020650 819000 1677100 3959200 2177250 3431800 ...\n</code></pre> <pre><code>\n      \u2374t\n200000 3\n</code></pre> <pre><code>      (10\u2191t) (\u00af10\u2191t)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020 0 0\u250223 59 54\u2502\n\u25020 0 0\u250223 59 55\u2502\n\u25020 0 0\u250223 59 56\u2502\n\u25020 0 0\u250223 59 56\u2502\n\u25020 0 0\u250223 59 58\u2502\n\u25020 0 2\u250223 59 58\u2502\n\u25020 0 3\u250223 59 59\u2502\n\u25020 0 3\u250223 59 59\u2502\n\u25020 0 4\u250223 59 59\u2502\n\u25020 0 5\u250223 59 59\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>u</code> represents timestamps for 5-minute intervals:</p> <pre><code>\n      \u2374u\n288 3\n      (10\u2191u) (\u00af10\u2191u)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020  0 0\u250223 10 0\u2502\n\u25020  5 0\u250223 15 0\u2502\n\u25020 10 0\u250223 20 0\u2502\n\u25020 15 0\u250223 25 0\u2502\n\u25020 20 0\u250223 30 0\u2502\n\u25020 25 0\u250223 35 0\u2502\n\u25020 30 0\u250223 40 0\u2502\n\u25020 35 0\u250223 45 0\u2502\n\u25020 40 0\u250223 50 0\u2502\n\u25020 45 0\u250223 55 0\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Therefore, the expression <code>(u\u2378t){+/\u2375}\u2338x</code> summarises <code>x</code> in 5-minute intervals.</p> <pre><code>\n      u \u2378 t\n1 1 1 1 1 1 1 1 1 1 ... 288 288 288 288 288 288\n\n      (u\u2378t) {+/\u2375}\u2338 x\n1339083050 1365108650 1541944750 1393476000 1454347100 ...\n\n      (u\u2378t) {(\u237a\u2337u),+/\u2375}\u2338 x\n 0  0 0 1339083050\n 0  5 0 1365108650\n 0 10 0 1541944750\n 0 15 0 1393476000\n   ...\n23 45 0 1388823150\n23 50 0 1453472350\n23 55 0 1492078850\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/interval-index/#higher-rank-left-argument","title":"Higher-Rank Left Argument","text":"<p>If <code>X</code> is a higher rank array, the function compares sub-arrays in <code>Y</code>  with the major cells of  <code>X</code>, where a major cell is  a sub-array on the leading dimension of <code>X</code> with shape <code>1\u2193\u2374X</code>. In this case, the shape of the result <code>R</code> is <code>(1-\u2374\u2374X)\u2193\u2374Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/interval-index/#example","title":"Example","text":"<pre><code>      x \u2190 \u2191 'Fi' 'Jay' 'John' 'Morten' 'Roger'\n      x\nFi\nJay   \nJohn  \nMorten\nRoger \n      \u2374x\n5 6\n\n</code></pre> <pre><code>      y \u2190 x \u236a \u2191 'JD' 'Jd' 'Geoff' 'Alpha' 'Omega' 'Zeus  '\n      y\nFi\nJay   \nJohn  \nMorten\nRoger \nJD    \nJd    \nGeoff \nAlpha \nOmega \nZeus\n\n</code></pre> <pre><code>      x \u2378 y\n1 2 3 4 5 1 2 1 0 4 5\n      y ,\u236a x\u2378y\nFi     1\nJay    2\nJohn   3\nMorten 4\nRoger  5\nJD     1\nJd     2\nGeoff  1\nAlpha  0\nOmega  4\nZeus   5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/interval-index/#further-example","title":"Further Example","text":"<pre><code>      \u2374x\n5 6\n      \u2374y\n3 3 6\n      x\nFi    \nJay   \nJohn  \nMorten\nRoger \n      y\nFi    \nJay   \nJohn  \n\nMorten\nRoger \nJD    \n\nJd    \nGeoff \nAlpha \n      x\u2378y\n1 2 3\n4 5 1\n2 1 0\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/interval-index/#nested-array-example","title":"Nested Array Example","text":"<p>A card-player likes to sort a hand into suits spades, hearts, diamond, clubs (fortunately alphabetic) and high-to-low within each suit.</p> <pre><code>      suits\u2190'Clubs' 'Diamonds' 'Hearts' 'Spades'\n      pack\u2190,(\u2282\u00a8suits)\u2218.,1\u219314 \u235d 11=Jack ... 14=Ace\n      hand\u2190\u2191(,pack)[7?52]\n      hand\u2190hand[\u2352hand;]\n      hand\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502Spades  \u250212\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u250212\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u25027 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u25022 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Diamonds\u250211\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Diamonds\u25029 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Clubs   \u25028 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n\n</code></pre> <p>Another card, the 10 of diamonds is dealt. Where must it go in the hand ?</p> <pre><code>      (\u2296hand)\u2378'Diamonds' 10 \u235d left arg must be sorted up\n2\n      (\u00af2\u2193hand)\u236a'Diamonds' 10\u236a\u00af2\u2191hand\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502Spades  \u250212\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u250212\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u25027 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Hearts  \u25022 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Diamonds\u250211\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Diamonds\u250210\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Diamonds\u25029 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502Clubs   \u25028 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n</code></pre> <p>Note that if <code>(\u2227/Y\u220aX)</code> and <code>X</code> is sorted and <code>\u2395CT=0</code> ,then <code>x\u2378y</code> is the same as <code>x\u2373y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/left/","title":"Left","text":"Left R\u2190X\u22a3Y <p><code>X</code> and <code>Y</code> may be any arrays.</p> <p>The result <code>R</code> is the left argument <code>X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/left/#example","title":"Example","text":"<pre><code>      42\u22a3'abc' 1 2 3\n42\n</code></pre> <p>Note that when <code>\u22a3</code> is applied using reduction, the derived function selects the first sub-array of the array along the specified dimension. This is implemented as an idiom.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/left/#examples","title":"Examples","text":"<pre><code>      \u22a3/1 2 3\n1\n\n      mat\u2190\u2191'scent' 'canoe' 'arson' 'rouse' 'fleet'\n      \u22a3\u233fmat  \u235d first row                          \nscent\n      \u22a3/mat  \u235d first column                       \nscarf\n</code></pre> <pre><code>      \u22a3/[2]2 3 4\u2374\u237324 \u235d first row from each plane\n 1  2  3  4\n13 14 15 16\n</code></pre> <p>Similarly, with expansion:</p> <pre><code>      \u22a3\\mat\nsssss\nccccc\naaaaa\nrrrrr\nfffff\n      \u22a3\u2340mat\nscent\nscent\nscent\nscent\nscent\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/less-or-equal/","title":"Less Or Equal","text":"Less Or Equal R\u2190X\u2264Y <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array.  <code>R</code> is Boolean.  <code>R</code> is 1 if <code>X</code> is less than <code>Y</code> or <code>X=Y</code>.  Otherwise <code>R</code> is 0.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Less Or Equal.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/less-or-equal/#examples","title":"Examples","text":"<pre><code>      2 4 6 8 10 \u2264 6\n1 1 1 0 0\n\n      \u2395CT\u21901E\u00af10\n\n      1  1.00000000001 1.00000001 \u2264 1\n1 1 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/less/","title":"Less","text":"Less R\u2190X   `Y` may be any numeric array.  `X` may be any numeric array.  `R` is Boolean.  `R` is 1 if `X` is less than `Y` and `X=Y` is 0.  Otherwise `R` is 0.  `\u2395CT` and `\u2395DCT` are  implicit arguments of Less.  # Examples  <pre><code>      (2 4) (6 8 10) &lt; 6\n 1 1  0 0 0\n\n      \u2395CT\u21901E\u00af10\n\n      1 0.99999999999 0.9999999999&lt;1\n0 0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/logarithm/","title":"Logarithm","text":"Logarithm R\u2190X\u235fY <p><code>X</code> and <code>Y</code> must be numeric arrays. <code>X</code> cannot be 1 unless <code>Y</code> is also 1. <code>R</code> is the base <code>X</code> logarithm of <code>Y</code>.</p> <p>Note that Logarithm (dyadic <code>\u235f</code>) is defined in terms of Natural Logarithm (monadic <code>\u235f</code>) as:</p> <pre><code>      X\u235fY\u2190\u2192(\u235fY)\u00f7\u235fX\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/logarithm/#examples","title":"Examples","text":"<pre><code>      10\u235f100 2\n2 0.3010299957\n\n      2 10\u235f0J1 1J2\n0J2.266180071 0.3494850022J0.4808285788\n\n      1 \u235f 1\n1\n      2 \u235f 1\n0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/magnitude/","title":"Magnitude","text":"Magnitude R\u2190|Y <p><code>Y</code> may be any numeric array. <code>R</code> is numeric composed of the absolute (unsigned) values of <code>Y</code>.</p> <p>Note that the magnitude of a complex number (a+ib) is defined to be a2+b2</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/magnitude/#examples","title":"Examples","text":"<pre><code>      |2 \u00af3.4 0 \u00af2.7\n2 3.4 0 2.7\n\n      |3j4\n5\n</code></pre> <p><code>\u2395IO</code> is an implicit argument of magnitude.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/match/","title":"Match","text":"Match R\u2190X\u2261Y <p><code>Y</code> may be any array.  <code>X</code> may be any array.  <code>R</code> is a simple Boolean scalar.  If <code>X</code> is identical to <code>Y</code>, then <code>R</code> is 1.  Otherwise <code>R</code> is 0.</p> <p>Non-empty arrays are identical if they have the same structure and the same values in all corresponding locations.  Empty arrays are identical if they have the same shape and the same prototype (disclosed nested structure).</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Match.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/match/#examples","title":"Examples","text":"<pre><code>      \u236c\u2261\u23730\n1\n      ''\u2261\u23730\n0\n      A\nTHIS\nWORD\n\n      A\u22612 4\u2374'THISWORD'\n1\n      A\u2261\u237310\n0\n      +B\u2190A A\n THIS  THIS\n WORD  WORD\n\n      A\u2261\u2283B\n1\n\n      (0\u2374A)\u22610\u2374B\n0\n\n      ' '=\u22830\u2374B\n1 1 1 1\n1 1 1 1\n\n      ' '=\u22830\u2374A\n1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/matrix-divide/","title":"Matrix Divide","text":"Matrix Divide R\u2190X\u2339Y <p><code>Y</code> must be a simple numeric array of rank 2 or less.  <code>X</code> must be a simple numeric array of rank 2 or less.  <code>Y</code> must be non-singular.  A scalar argument is treated as a matrix with one-element.  If <code>Y</code> is a vector, it is treated as a single column matrix.  If <code>X</code> is a vector, it is treated as a single column matrix.  The number of rows in <code>X</code> and <code>Y</code> must be the same.  <code>Y</code> must have at least the same number of rows as columns.</p> <p><code>R</code> is the result of matrix division of <code>X</code> by <code>Y</code>.  That is, the matrix product <code>Y+.\u00d7R</code> is <code>X</code>.</p> <p><code>R</code> is determined such that <code>(X-Y+.\u00d7R)*2</code> is minimised.</p> <p>The shape of <code>R</code> is <code>(1\u2193\u2374Y),1\u2193\u2374X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/matrix-divide/#examples","title":"Examples","text":"<pre><code>\n      \u2395PP\u21905\n\n      B\n3 1 4\n1 5 9\n2 6 5\n\n      35 89 79 \u2339 B\n2.1444 8.2111 5.0889\n\n      A\n35 36\n89 88\n79 75\n\n      A \u2339 B\n2.1444 2.1889\n8.2111 7.1222\n5.0889 5.5778\n</code></pre> <p>If there are more rows than columns in the right argument, the least squares solution results.  In the following example, the constants a and b which provide the best fit for the set of equations represented by P = a + bQ are determined:</p> <pre><code>\n      Q\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n\n      P\n12.03 8.78 6.01 3.75 \u00af0.31 \u00af2.79\n\n      P\u2339Q\n14.941 \u00af2.9609\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/matrix-divide/#example-linear-regression-on-complex-numbers","title":"Example: linear regression on complex numbers","text":"<pre><code>      x\u2190j\u233f\u00af50+?2 13 4\u2374100\n      y\u2190(x+.\u00d73 4 5 6) + j\u233f0.0001\u00d7\u00af50+?2 13\u2374100\n      \u2374x\n13 4\n      \u2374y\n13\n      y \u2339 x\n3J0.000011066 4J\u00af0.000018499 5J0.000005745 6J0.000050328\n      \u235d i.e. y\u2339x recovered the coefficients 3 4 5 6\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/matrix-divide/#additional-information","title":"Additional Information","text":"<pre><code>\n      x\u2339y \u2190\u2192 (\u2339(\u2349y)+.\u00d7y)+.\u00d7(\u2349y)+.\u00d7x\n\n</code></pre> <p>(Use <code>+\u2349</code> instead of <code>\u2349</code> for complex <code>y</code>.)</p> <p>This equivalence, familiar to mathematicians and statisticians, explains</p> <ul> <li>the conformability requirements for <code>\u2339</code></li> <li>how to compute the result for tall matrices from the better known square matrix case</li> </ul>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/matrix-inverse/","title":"Matrix Inverse","text":"Matrix Inverse R\u2190\u2339Y <p><code>Y</code> must be a simple array of rank 2 or less.  <code>Y</code> must be non-singular.  If <code>Y</code> is a scalar, it is treated as a one-element matrix.  If <code>Y</code> is a vector, it is treated as a single-column matrix.  <code>Y</code> must have at least the same number of rows as columns.</p> <p><code>R</code> is the inverse of <code>Y</code> if <code>Y</code> is a square matrix, or the left inverse of <code>Y</code> if <code>Y</code> is not a square matrix.  That is, <code>R+.\u00d7Y</code> is an identity matrix.</p> <p>The shape of <code>R</code> is <code>\u233d\u2374Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/matrix-inverse/#examples","title":"Examples","text":"<pre><code>      M\n2 \u00af3\n4 10\n\n      +A\u2190\u2339M\n 0.3125 0.09375\n\u00af0.125  0.0625\n</code></pre> <p>Within calculation accuracy, <code>A+.\u00d7M</code> is the identity matrix.</p> <pre><code>      A+.\u00d7M\n1 0\n0 1\n\n\n      j\u2190{\u237a\u21900 \u22c4 \u237a+0J1\u00d7\u2375}\n      x\u2190j\u233f\u00af50+?2 5 5\u2374100\n      x\n\u00af37J\u00af41  25J015  \u00af5J\u00af09   3J020 \u00af29J041\n\u00af46J026  17J\u00af24  17J\u00af46  43J023 \u00af12J\u00af18\n  1J013  33J025 \u00af47J049 \u00af45J\u00af14   2J\u00af26\n 17J048 \u00af50J022 \u00af12J025 \u00af44J015  \u00af9J\u00af43\n 18J013   8J038  43J\u00af23  34J\u00af07   2J026\n      \u2374x\n5 5\n      id\u2190{\u2218.=\u2368\u2373\u2375}  \u235d identity matrix of order \u2375\n      \u2308/,| (id 1\u2191\u2374x) - x+.\u00d7\u2339x\n3.66384E\u00af16\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/maximum/","title":"Maximum","text":"Maximum R\u2190X\u2308Y <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array.  <code>R</code> is numeric.  <code>R</code> is the larger of the numbers <code>X</code> and <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/maximum/#example","title":"Example","text":"<pre><code>      \u00af2.01 0.1 15.3 \u2308 \u00af3.2 \u00af1.1 22.7\n\u00af2.01 0.1 22.7\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/membership/","title":"Membership","text":"Membership R\u2190X\u220aY <p><code>Y</code> may be any array.  <code>X</code> may be any array.  <code>R</code> is Boolean. An element of <code>R</code> is 1 if the corresponding element of <code>X</code> can be found in <code>Y</code>.</p> <p>An element of <code>X</code> is considered identical to an element in <code>Y</code> if <code>X\u2261Y</code> returns 1 for those elements.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Membership.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/membership/#examples","title":"Examples","text":"<pre><code>      'THIS NOUN' \u220a 'THAT WORD'\n1 1 0 0 1 0 1 0 0\n\n      'CAT' 'DOG' 'MOUSE' \u220a 'CAT' 'FOX' 'DOG' 'LLAMA'\n1 1 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/minimum/","title":"Minimum","text":"Minimum R\u2190X\u230aY <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array.  <code>R</code> is numeric.  <code>R</code> is the smaller of <code>X</code> and <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/minimum/#example","title":"Example","text":"<pre><code>      \u00af2.1 0.1 15.3 \u230a \u00af3.2 1 22\n\u00af3.2 0.1 15.3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/minus/","title":"Minus","text":"Minus R\u2190X-Y <p>See \"Subtract\" on page 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/mix/","title":"Mix","text":"Mix (\u2395ML) <p>The symbol chosen to represent Mix depends on the current Migration Level.</p> <p>If <code>\u2395ML&lt;2</code>, Mix is represented by the symbol: <code>\u2191</code>.</p> <p>If <code>\u2395ML\u22652</code>, Mix is represented by the symbol: <code>\u2283</code>.</p> <p><code>Y</code> may be any array whose items may be uniform in rank and shape, or differ in rank and shape. If the items of <code>Y</code> are non-uniform, they are extended prior to the application of the function as follows:</p> <ol> <li>If the items of <code>Y</code> have different ranks, each item is extended in rank to that of the greatest rank by padding with leading 1s. </li> <li>If the items of <code>Y</code> have different shapes, each is padded with the corresponding prototype to a shape that represents the greatest length along each axis of all items in <code>Y</code>.</li> </ol> <p>For the purposes of the following narrative,  <code>y</code> represents the virtual item in <code>Y</code> with the greatest rank and shape, with which all other items are extended to conform.</p> <p><code>R</code> is an array composed from the items of  <code>Y</code> assembled into a higher-rank array with one less level of nesting. <code>\u2374R</code> will be some permutation of <code>(\u2374Y),\u2374y</code>.</p> <p><code>K</code> is an optional axis specification whose value(s)  indicate where in the result the axes of <code>y</code> appear. There are three cases:</p> <ol> <li><code>K</code> may be a scalar or 1-element vector whose value is a fractional number indicating the two axes of <code>Y</code> between which new axes are to be inserted for <code>y</code>.  The shape of <code>R</code> is the shape of <code>Y</code> with the shape <code>\u2374y</code> inserted between the <code>\u230aK</code>th and the <code>\u2308K</code>th axes of <code>Y</code></li> <li><code>K</code> may be a scalar or 1-element vector integer whose value specifies the position of the first axis of <code>y</code> in the result. This case is identical to the fractional case where <code>K</code> (in this case) is <code>\u2308K</code> (in the fractional case).</li> <li><code>K</code> may be an integer vector, with the same length as <code>\u2374y</code>, each element of which specifies the position in the result of the corresponding axis of the <code>y</code>. </li> </ol> <p>If <code>K</code> is absent, the axes of <code>y</code> appear as the last axes of the result.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/mix/#simple-vector-examples","title":"Simple Vector Examples","text":"<p>In this example, the shape of <code>Y</code> is 3, and the shape of  <code>y</code> is 2. So the shape of the result will be a permutation of 2 and 3, i.e. in this simple example, either <code>(2 3)</code> or <code>(3 2</code>).</p> <p>If <code>K</code> is omitted, the shape of the result is <code>(\u2374Y),\u2374y</code>.</p> <pre><code>      \u2191(1 2)(3 4)(5 6)\n1 2\n3 4\n5 6\n</code></pre> <p>If <code>K</code> is between 0 and 1, the shape of the result is <code>(\u2374y),\u2374Y</code> because<code>(\u2374y)</code> is inserted between the 0th and the 1st axis of the result, i.e. at the beginning.</p> <pre><code>\n      \u2191[.5](1 2)(3 4)(5 6)\n1 3 5\n2 4 6\n</code></pre> <p>If <code>K</code> is between 1 and 2, the shape of the result is <code>(\u2374Y),\u2374y</code> because<code>(\u2374y)</code> is inserted between the 1st and 2nd axis of the result, i.e. at the end. This is the same as the case when <code>K</code> is omitted.</p> <pre><code>\n      \u2191[1.5](1 2)(3 4)(5 6)\n1 2\n3 4\n5 6\n\n</code></pre> <p>An integer <code>K</code> may be used instead. If <code>\u2395ML\u22652</code>,  <code>\u2283</code> is used instead of <code>\u2191</code>).</p> <pre><code>      \u2395ML\u21903\n      \u2283(1 2)(3 4)(5 6)\n1 2\n3 4\n5 6\n      \u2283[1](1 2)(3 4)(5 6)\n1 3 5\n2 4 6\n      \u2283[2](1 2)(3 4)(5 6)\n1 2\n3 4\n5 6\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/mix/#shape-extension","title":"Shape Extension","text":"<p>If the items of <code>Y</code> are unequal in shape, the shorter ones are extended:</p> <pre><code>      \u2395ML\u21903\n      \u2283(1)(3 4)(5)\n1 0\n3 4\n5 0\n       \u2283[1](1)(3 4)(5)\n1 3 5\n0 4 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/mix/#more-simple-vector-examples","title":"More Simple Vector Examples:","text":"<pre><code>      ]box on\nWas OFF\n       'Andy' 'Geoff' 'Pauline'\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Andy\u2502Geoff\u2502Pauline\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2191'Andy' 'Geoff' 'Pauline'\nAndy   \nGeoff  \nPauline\n\n        \u2395ML\u21903\n        \u2283('andy' 19)('geoff' 37)('pauline' 21)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502andy   \u250219\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502geoff  \u250237\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502pauline\u250221\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n        \u2283[1]('andy' 19)('geoff' 37)('pauline' 21)\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502andy\u2502geoff\u2502pauline\u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u250219  \u250237   \u250221     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2283('andy' 19)('geoff' 37)(\u2282'pauline')\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502andy   \u250219     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502geoff  \u250237     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502pauline\u2502       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>Notice that in the last statement, the shape of the third item was extended by catenating it with its prototype.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/mix/#example-matrix-of-matrices","title":"Example (Matrix of Matrices)","text":"<p>In the following examples, <code>Y</code> is a matrix of shape <code>(5 4)</code> and each item of <code>Y</code> (<code>y</code>) is a matrix of shape <code>(3 2)</code>. The shape of the result will be some permutation of <code>(5 4 3 2)</code>.</p> <pre><code>       Y\u21905 4\u2374(\u237320)\u00d7\u22823 2\u23741\n       Y\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 1  \u25022 2  \u25023 3  \u25024 4  \u2502\n\u25021 1  \u25022 2  \u25023 3  \u25024 4  \u2502\n\u25021 1  \u25022 2  \u25023 3  \u25024 4  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u25025 5  \u25026 6  \u25027 7  \u25028 8  \u2502\n\u25025 5  \u25026 6  \u25027 7  \u25028 8  \u2502\n\u25025 5  \u25026 6  \u25027 7  \u25028 8  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u25029 9  \u250210 10\u250211 11\u250212 12\u2502\n\u25029 9  \u250210 10\u250211 11\u250212 12\u2502\n\u25029 9  \u250210 10\u250211 11\u250212 12\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u250213 13\u250214 14\u250215 15\u250216 16\u2502\n\u250213 13\u250214 14\u250215 15\u250216 16\u2502\n\u250213 13\u250214 14\u250215 15\u250216 16\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u250217 17\u250218 18\u250219 19\u250220 20\u2502\n\u250217 17\u250218 18\u250219 19\u250220 20\u2502\n\u250217 17\u250218 18\u250219 19\u250220 20\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>By default, the axes of <code>y</code> appear in the last position in the shape of the result, but this position is altered by specifying the axis <code>K</code>. Notice where the <code>(3 2)</code> appears in the following results:</p> <pre><code>      \u2374\u2283Y\n5 4 3 2\n      \u2374\u2283[1]Y\n3 2 5 4\n      \u2374\u2283[2]Y\n5 3 2 4\n      \u2374\u2283[3]Y\n5 4 3 2\n      \u2374\u2283[4]Y\nINDEX ERROR\n      \u2374\u2283[4]Y\n     \u2227\n\n</code></pre> <p>Note that <code>\u2283[4]Y</code> generates an <code>INDEX ERROR</code> because 4 is greater than the length of the result.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/mix/#example-vector-k","title":"Example (Vector K)","text":"<p>The axes of <code>y</code> do not have to be contiguous in the shape of the result. By specifying a vector <code>K</code>, they can be distributed. Notice where the <code>3</code> and the <code>2</code> appear in the following results:</p> <pre><code>      \u2374\u2283[1 3]Y\n3 5 2 4\n      \u2374\u2283[1 4]Y\n3 5 4 2\n      \u2374\u2283[2 4]Y\n5 3 4 2\n      \u2374\u2283[4 2]Y\n5 2 4 3\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/mix/#rank-extension","title":"Rank Extension","text":"<p>If the items of <code>Y</code> are unequal in rank, the lower rank items are extended in rank by prefixing their shapes with 1s. Each additional 1 may then be increased to match the maximum shape of the other items along that axis.</p> <pre><code>      \u2395ML\u21903\n      Y\u2190(1)(2 3 4 5)(2 3\u237410\u00d7\u23738)\n      Y\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021\u25022 3 4 5\u250210 20 30\u2502\n\u2502 \u2502       \u250240 50 60\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2374\u2283Y\n3 2 4\n       \u2283Y\n 1  0  0 0\n 0  0  0 0\n\n 2  3  4 5\n 0  0  0 0\n\n10 20 30 0\n40 50 60 0\n</code></pre> <p>In the above example, the first item (1) becomes (<code>1 1\u23741</code>) to conform with the 3rd item which is rank 2. It is then extended in shape to become <code>(2 4\u21911 1\u23741)</code> to conform with the 2-row 3rd item, and 4-column 2nd item.. Likewise, the 2nd item becomes a 2-row matrix, and the 3rd item gains another column.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/multiply/","title":"Multiply","text":"Multiply R\u2190X\u00d7Y <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array.  <code>R</code> is the arithmetic product of <code>X</code> and <code>Y</code>.</p> <p>This function is also known as Times.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/multiply/#example","title":"Example","text":"<pre><code>      3 2 1 0 \u00d7 2 4 9 6\n6 8 9 0\n\n       2j3\u00d7.3j.5 1j2 3j4 .5\n\u00af0.9J1.9 \u00af4J7 \u00af6J17 1J1.5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/nand/","title":"Nand","text":"Nand R\u2190X\u2372Y <p><code>Y</code> must be a Boolean array.  <code>X</code> must be a Boolean array.  <code>R</code> is Boolean.  The value of <code>R</code> is the truth value of the proposition \"not both <code>X</code> and <code>Y</code>\", and is determined as follows:</p> <pre><code>             X   Y     R\n\n             0   0     1\n             0   1     1\n             1   0     1\n             1   1     0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/nand/#example","title":"Example","text":"<pre><code>      (0 1)(1 0) \u2372 (0 0)(1 1)\n 1 1  0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/natural-logarithm/","title":"Natural Logarithm","text":"Natural Logarithm R\u2190\u235fY <p><code>Y</code> must be a numeric array. <code>R</code> is numeric.  <code>R</code> is the natural (or Napierian) logarithm of <code>Y</code> whose base is the mathematical constant e=2.71828....</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/natural-logarithm/#example","title":"Example","text":"<pre><code>      \u235f1 2\n0 0.6931471806\n\n      \u235f2 2\u23740j1 1j2 2j3 3j4\n0.000000000J1.570796327  0.8047189562J1.107148718\n1.282474679J0.9827937232 1.6094379120J0.927295218\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/negative/","title":"Negative","text":"Negative R\u2190-Y <p><code>Y</code> may be any numeric array. <code>R</code> is numeric and is the negative value of <code>Y</code>. For complex numbers both the real and imaginary parts are negated.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/negative/#example","title":"Example","text":"<pre><code>      -4 2 0 \u00af3 \u00af5\n\u00af4 \u00af2 0 3 5\n\n      -1j2 \u00af2J3 4J\u00af5\n\u00af1J\u00af2 2J\u00af3 \u00af4J5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/nest/","title":"Nest","text":"Nest R\u2190\u2286Y <p>Classic Edition:  the symbol <code>\u2286</code> (Left Shoe Underbar) is not available in Classic Edition, and Nest is instead represented by <code>\u2395U2286</code>.</p> <p><code>Y</code> may be any array.</p> <p>If <code>Y</code> is simple, <code>R</code> is a scalar array whose item is the array <code>Y</code>.  If <code>Y</code> is a simple scalar or is already nested, <code>R</code> is <code>Y</code> unchanged.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/nest/#examples","title":"Examples","text":"<pre><code>      \u22861 2 3\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 3\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2286 1 (1 2 3)\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021\u25021 2 3\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2286'Dyalog'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Dyalog\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2286'Dyalog' 'APL'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502Dyalog\u2502APL\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/nor/","title":"Nor","text":"Nor R\u2190X\u2371Y <p><code>Y</code> must be a Boolean array.  <code>X</code> must be a Boolean array.  <code>R</code> is Boolean.  The value of <code>R</code> is the truth value of the proposition \"neither <code>X</code> nor <code>Y</code>\", and is determined as follows:</p> <pre><code>             X   Y     R\n\n             0   0     1\n             0   1     0\n             1   0     0\n             1   1     0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/nor/#example","title":"Example","text":"<pre><code>      0 0 1 1 \u2371 0 1 0 1\n1 0 0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/not-equal/","title":"Not Equal","text":"Not Equal R\u2190X\u2260Y <p><code>Y</code> may be any array.  <code>X</code> may be any array.  <code>R</code> is Boolean.  <code>R</code> is 0 if <code>X=Y</code>.  Otherwise <code>R</code> is 1.</p> <p>For Boolean <code>X</code> and <code>Y</code>, the value of <code>R</code> is the exclusive or (XOR)  result, determined as follows:</p> <pre><code>             X   Y     R\n\n             0   0     0\n             0   1     1\n             1   0     1\n             1   1     0\n</code></pre> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Not Equal.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/not-equal/#examples","title":"Examples","text":"<pre><code>      1 2 3 \u2260 1.1 2 3\n1 0 0\n\n      \u2395CT\u21901E\u00af10\n\n      1\u22601 1.00000000001 1.0000001\n0 0 1\n\n      1 2 3 \u2260'CAT'\n1 1 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/not-match/","title":"Not Match","text":"Not Match R\u2190X\u2262Y <p><code>Y</code>may be any array.  <code>X</code> may be any array.  <code>R</code> is a simple Boolean scalar.  If <code>X</code> is identical to <code>Y</code>, then <code>R</code> is 0.  Otherwise <code>R</code> is 1.</p> <p>Non-empty arrays are identical if they have the same structure and the same values in all corresponding locations.  Empty arrays are identical if they have the same shape and the same prototype (disclosed nested structure).</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Not Match.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/not-match/#examples","title":"Examples","text":"<pre><code>      \u236c\u2262\u23730\n0\n      ''\u2262\u23730\n1\n</code></pre> <pre><code>\n      \u22a2A\u2190\u2282(\u23733) 'ABC'\n  1 2 3  ABC\n</code></pre> <pre><code>\n      A\u2262(\u23733)'ABC'\n1\n      A\u2262\u2282(\u23733) 'ABC'\n0\n      \u236c\u22620\u2374A\n1\n      (1\u21910\u2374A)\u2262\u2282(0 0 0) '   '\n1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/not/","title":"Not","text":"Not R\u2190~Y <p><code>Y</code> must be a Boolean array.  <code>R</code> is Boolean.  The value of <code>R</code> is 0 if <code>Y</code> is 1, and <code>R</code> is 1 if <code>Y</code> is 0.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/not/#example","title":"Example","text":"<pre><code>      ~0 1\n1 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/or-greatest-common-divisor/","title":"Or, Greatest Common Divisor","text":"Or, Greatest Common Divisor R\u2190X\u2228Y"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/or-greatest-common-divisor/#case-1-x-and-y-are-boolean","title":"Case 1: X and Y are Boolean","text":"<p>R is Boolean and is determined as follows:</p> <pre><code>             X   Y     R\n\n             0   0     0\n             0   1     1\n             1   0     1\n             1   1     1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/or-greatest-common-divisor/#example","title":"Example","text":"<pre><code>      0 0 1 1 \u2228 0 1 0 1\n0 1 1 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/or-greatest-common-divisor/#case-2-x-and-y-are-numeric-non-boolean","title":"Case 2: X and Y are numeric (non-Boolean)","text":"<p>R is the Greatest Common Divisor of <code>X</code> and <code>Y</code>. Note that in this case, <code>\u2395CT</code> and <code>\u2395DCT</code> are implicit arguments.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/or-greatest-common-divisor/#examples","title":"Examples","text":"<pre><code>      15 1 2 7 \u2228 35 1 4 0\n5 1 2 7\n\n      rational\u2190{\u2191\u2375 1\u00f7\u22821\u2228\u2375} \u235d rational (\u2395CT) approximation\n                           \u235d to floating array.\n      rational 0.4321 0.1234 6.66, \u00f71 2 3\n 4321  617 333 1 1 1\n10000 5000  50 1 2 3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/partition/","title":"Partition","text":"Partition <p>Classic Edition:  the symbol <code>\u2286</code> (Left Shoe Underbar) is not available in Classic Edition, and Partition is instead represented by <code>\u2395U2286</code>.</p> <p><code>Y</code> may be any non-scalar array.</p> <p><code>X</code> must be a simple scalar or vector of non-negative integers.</p> <p>The axis specification is optional.  If present, it must be a simple integer scalar or one element array representing an axis of <code>Y</code>.  If absent, the last axis is implied.</p> <p><code>R</code> is an array of the elements of <code>Y</code> partitioned according to <code>X</code>.</p> <p>A new partition is started in the result whenever the corresponding element in <code>X</code> is greater than the previous one. Items in <code>Y</code> corresponding to <code>0</code>s in <code>X</code> are not included in the result.</p> <p>Note that if <code>\u2395ML\u22653</code>, the symbol <code>\u2282</code> means the same as <code>\u2286</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/partition/#examples","title":"Examples","text":"<pre><code>      \u2395ML\u21903\n\n      ]display 1 1 1 2 2 3 3 3\u2286'NOWISTHE'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502NOW\u2502 \u2502IS\u2502 \u2502THE\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display 1 1 1 0 0 3 3 3\u2286'NOWISTHE'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502NOW\u2502 \u2502THE\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      TEXT\u2190'   NOW     IS      THE      TIME    '\n      ]display (' '\u2260TEXT)\u2286TEXT\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502NOW\u2502 \u2502IS\u2502 \u2502THE\u2502 \u2502TIME\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ]display CMAT\u2190\u2395FMT(' ',ROWS),COLS\u236aNMAT\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193           Jan   Feb  Mar \u2502\n\u2502 Cakes       0   100  150 \u2502\n\u2502 Biscuits    0     0  350 \u2502\n\u2502 Buns        0  1000  500 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ]display (\u2228\u233f' '\u2260CMAT)\u2286CMAT   \u235d Split at blank cols.\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502        \u2502 \u2502Jan\u2502 \u2502 Feb\u2502 \u2502Mar\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502Cakes   \u2502 \u2502  0\u2502 \u2502 100\u2502 \u2502150\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502Biscuits\u2502 \u2502  0\u2502 \u2502   0\u2502 \u2502350\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2502Buns    \u2502 \u2502  0\u2502 \u25021000\u2502 \u2502500\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display N\u21904 4\u2374\u237316\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 1  2  3  4\u2502\n\u2502 5  6  7  8\u2502\n\u2502 9 10 11 12\u2502\n\u250213 14 15 16\u2502\n\u2514~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display 1 1 0 1\u2286N\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2510   \u250c\u2192\u2510  \u2502\n\u2502 \u25021 2\u2502   \u25024\u2502  \u2502\n\u2502 \u2514~\u2500\u2500\u2518   \u2514~\u2518  \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2510   \u250c\u2192\u2510  \u2502\n\u2502 \u25025 6\u2502   \u25028\u2502  \u2502\n\u2502 \u2514~\u2500\u2500\u2518   \u2514~\u2518  \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2510  \u250c\u2192\u2500\u2510 \u2502\n\u2502 \u25029 10\u2502  \u250212\u2502 \u2502\n\u2502 \u2514~\u2500\u2500\u2500\u2518  \u2514~\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u2502\n\u2502 \u250213 14\u2502 \u250216\u2502 \u2502\n\u2502 \u2514~\u2500\u2500\u2500\u2500\u2518 \u2514~\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ]display 1 1 0 1\u2286[1]N\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u25021 5\u2502 \u25022 6\u2502 \u25023 7\u2502 \u25024 8\u2502 \u2502\n\u2502 \u2514~\u2500\u2500\u2518 \u2514~\u2500\u2500\u2518 \u2514~\u2500\u2500\u2518 \u2514~\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2510  \u250c\u2192\u2500\u2510  \u250c\u2192\u2500\u2510  \u250c\u2192\u2500\u2510  \u2502\n\u2502 \u250213\u2502  \u250214\u2502  \u250215\u2502  \u250216\u2502  \u2502\n\u2502 \u2514~\u2500\u2518  \u2514~\u2500\u2518  \u2514~\u2500\u2518  \u2514~\u2500\u2518  \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/partitioned-enclose/","title":"Partitioned Enclose","text":"Partitioned Enclose (\u2395ML&lt;3) <p><code>Y</code> may be any array.  <code>X</code> must be a simple integer scalar or vector. If <code>X</code> is a scalar it is extended to <code>(\u2262Y)\u2374X</code>.</p> <p>The axis specification is optional.  If present, it must be a simple integer scalar or one-element vector.  The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis of <code>Y</code> is implied.</p> <p><code>R</code> is a vector of items selected from <code>Y</code> by inserting 0 or more dividers, specified by <code>X</code>, between its major cells.</p> <p>Each element of <code>X</code> specifies the number of dividers to insert before the corresponding major cell of <code>Y</code>. The maximum length of <code>X</code> is <code>1+\u2262Y</code>, when the last element of <code>X</code> specifies the number of trailing dividers. Note that major cells of <code>Y</code> that precede the first divider (identified by the first non-zero element of <code>X</code>) are excluded from the result.</p> <p>The length of <code>R</code> is <code>+/X</code> (after possible extension).</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/partitioned-enclose/#examples","title":"Examples","text":"<pre><code>      0 0 1 0 0 1 0\u2282'abcdefg'\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502cde\u2502fg\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n      2 0 1 3 0 2 0 1\u2282'abcdefg'\n\u250c\u252c\u2500\u2500\u252c\u2500\u252c\u252c\u252c\u2500\u2500\u252c\u252c\u2500\u2500\u252c\u2510\n\u2502\u2502ab\u2502c\u2502\u2502\u2502de\u2502\u2502fg\u2502\u2502\n\u2514\u2534\u2500\u2500\u2534\u2500\u2534\u2534\u2534\u2500\u2500\u2534\u2534\u2500\u2500\u2534\u2518\n      0 2 0 1\u2282'abcdefg'\n\u250c\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502\u2502bc\u2502defg\u2502\n\u2514\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>The above examples may be explained pictorially by the diagram below.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/partitioned-enclose/#further-examples","title":"Further Examples","text":"<pre><code>      1 0 1\u2282[1]3 4\u2374\u237312\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 3 4\u25029 10 11 12\u2502\n\u25025 6 7 8\u2502          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      1 0 0 1\u2282[2]3 4\u2374\u237312\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u25021  2  3\u2502 4\u2502\n\u25025  6  7\u2502 8\u2502\n\u25029 10 11\u250212\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/pi-times/","title":"Pi Times","text":"Pi Times R\u2190\u25cbY <p><code>Y</code> may be any numeric array. <code>R</code> is numeric. The value of <code>R</code> is the product of the mathematical constant \u03c0=3.14159... (Pi), and <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/pi-times/#example","title":"Example","text":"<pre><code>      \u25cb0.5 1 2\n1.570796327 3.141592654 6.283185307\n\n      \u25cb0J1\n0J3.141592654\n\n      *\u25cb0J1 \u235d Euler\n\u00af1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/pick/","title":"Pick","text":"Pick R\u2190X\u2283Y <p><code>Y</code> may be any array.</p> <p><code>X</code> is a scalar or vector of indices of <code>Y</code>.</p> <p><code>R</code> is an item selected from the structure of <code>Y</code> according to <code>X</code>.</p> <p>Elements of <code>X</code> select from successively deeper levels in the structure of <code>Y</code>.  The items of <code>X</code> are simple integer scalars or vectors which identify a set of indices, one per axis at the particular level of nesting of <code>Y</code> in row-major order.  Simple scalar items in <code>Y</code> may be picked by empty vector items in <code>X</code> to any arbitrary depth.</p> <p><code>\u2395IO</code> is an implicit argument of Pick.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/pick/#examples","title":"Examples","text":"<pre><code>      G\u2190('ABC' 1)('DEF' 2)('GHI' 3)('JKL' 4)\n\n      G\u21902 3\u2374G,('MNO' 5)('PQR' 6)\n\n      G\n  ABC  1   DEF  2   GHI  3\n  JKL  4   MNO  5   PQR  6\n\n</code></pre> <pre><code>    ((\u22822 1),1)\u2283G\nJKL\n\n      (\u22822 1)\u2283G\n JKL  4\n\n      ((2 1)1 2)\u2283G\nK\n\n      (5\u2374\u2282\u23730)\u228310\n10\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/plus/","title":"Plus","text":"Plus R\u2190X+Y <p>See \"Add: \" on page 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/power/","title":"Power","text":"Power R\u2190X*Y <p><code>Y</code> must be a numeric array.  <code>X</code> must be a numeric array.  <code>R</code> is numeric.  The value of <code>R</code> is <code>X</code> raised to the power of <code>Y</code>.</p> <p>If <code>Y</code> is zero, <code>R</code> is defined to be 1.</p> <p>If <code>X</code> is zero, <code>Y</code> must be non-negative.</p> <p>In general, <code>X*Y</code> is defined as <code>*Y\u00d7\u235fX</code>. If <code>X</code> is negative, the result <code>R</code> is likely to be complex.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/power/#examples","title":"Examples","text":"<pre><code>      2*2 \u00af2\n4 0.25\n\n      9 64*0.5\n3 8\n\n      \u00af27*3 2 1.2 .5\n\u00af19683 729 \u00af42.22738244J\u00af30.67998919 0J5.196152423\n\n      \u00af8*\u00f73\n1J1.732050808\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/ravel-with-axes/","title":"Ravel with Axes","text":"Ravel with Axes R\u2190,[K]Y <p><code>Y</code> may be any array.</p> <p><code>K</code> is either:</p> <ul> <li>A simple fractional scalar adjacent to an axis of <code>Y</code>, or</li> <li>A simple integer scalar or vector of axes of <code>Y</code>, or</li> <li>An empty vector</li> </ul> <p>Ravel with axis can be used with selective specification.</p> <p><code>R</code> depends on the case of <code>K</code> above.</p> <p>If <code>K</code> is a fraction, the result <code>R</code> is an array of the same shape as <code>Y</code>, but with a new axis of length 1 inserted at the <code>K</code>th position.</p> <pre><code>      \u2374\u2374R \u2190\u2192 1+\u2374\u2374Y\n      \u2374R  \u2190\u2192 (1,\u2374Y)[\u234bK,\u2373\u2374\u2374Y]\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/ravel-with-axes/#examples","title":"Examples","text":"<pre><code>      ,[0.5]'ABC'\nABC\n      \u2374,[0.5]'ABC'\n1 3\n      ,[1.5]'ABC'\nA\nB\nC\n      \u2374,[1.5]'ABC'\n3 1\n\n      MAT\u21903 4\u2374\u237312\n      \u2374,[0.5]MAT\n1 3 4\n      \u2374,[1.5]MAT\n3 1 4\n      \u2374,[2.5]MAT\n3 4 1\n</code></pre> <p>If <code>K</code> is an integer scalar or vector of axes of <code>Y</code>, then:</p> <ul> <li><code>K</code> must contain contiguous axes of <code>Y</code> in ascending order</li> <li><code>R</code> contains the elements of <code>Y</code> ravelled along the indicated axes</li> </ul> <p>Note that if <code>K</code> is a scalar or single element vector, <code>R \u2190\u2192 Y</code>.</p> <pre><code>      \u2374\u2374R \u2190\u2192 1+(\u2374\u2374Y)-\u2374,K\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/ravel-with-axes/#examples_1","title":"Examples","text":"<pre><code>      M\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n\n13 14 15 16\n17 18 19 20\n21 22 23 24\n      \u2374M\n2 3 4\n\n</code></pre> <pre><code>      ,[1 2]M\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n13 14 15 16\n17 18 19 20\n21 22 23 24\n      \u2374,[1 2]M\n6 4\n\n      ,[2 3]M\n 1  2  3  4  5  6  7  8  9 10 11 12\n13 14 15 16 17 18 19 20 21 22 23 24\n\n      \u2374,[2 3]M\n2 12\n</code></pre> <p>If <code>K</code> is an empty vector a new last axis of length 1 is created.</p> <pre><code>      \u2374R \u2190\u2192 (\u2374Y),1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/ravel-with-axes/#examples_2","title":"Examples","text":"<pre><code>      Q1\u2190'January' 'February' 'March'\n      ]display Q1\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502January\u2502 \u2502February\u2502 \u2502March\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      ]display ,[\u23730]Q1\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502 \u2502January\u2502  \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502February\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502 \u2502March\u2502    \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>See also: Ravel on page 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/ravel/","title":"Ravel","text":"Ravel R\u2190,Y <p><code>Y</code> may be any array.  <code>R</code> is a vector of the elements of <code>Y</code> taken in row-major order.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/ravel/#examples","title":"Examples","text":"<pre><code>      M\n1 2 3\n4 5 6\n\n      ,M\n1 2 3 4 5 6\n\n      A\nABC\nDEF\nGHI\nJKL\n      ,A\nABCDEFGHIJKL\n\n      \u2374,10\n1\n</code></pre> <p>See also: Ravel with Axes below.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/reciprocal/","title":"Reciprocal","text":"Reciprocal R\u2190\u00f7Y <p><code>Y</code> must be a numeric array.  <code>R</code> is numeric.  <code>R</code> is the reciprocal of <code>Y</code>; that is <code>1\u00f7Y</code>.  If <code>\u2395DIV=0</code>, <code>\u00f70</code> results in a <code>DOMAIN ERROR</code>.  If <code>\u2395DIV=1</code>, <code>\u00f70</code> returns 0.</p> <p><code>\u2395DIV</code> is an implicit argument of Reciprocal.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/reciprocal/#examples","title":"Examples","text":"<pre><code>      \u00f74 2 5\n0.25 0.5 0.2\n\n      \u00f70j1 0j\u00af1 2j2 4j4\n0J\u00af1 0J1 0.25J\u00af0.25 0.125J\u00af0.125\n\n      \u2395DIV\u21901 \n      \u00f70 0.5\n0 2\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/replicate/","title":"Replicate","text":"Replicate R\u2190X/[K]Y <p><code>Y</code> may be any array.  <code>X</code> is a simple integer vector or scalar.</p> <p>The axis specification is optional.  If present, <code>K</code> must be a simple integer scalar or 1-element vector.  The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis of <code>Y</code> is implied.  The form <code>R\u2190X\u233fY</code> implies the first axis of <code>Y</code>.</p> <p>If <code>Y</code> has length 1 along the <code>K</code>th (or implied) axis, it is extended along that axis to match the length of <code>X</code>. Otherwise, the length of <code>X</code> must be the length of the <code>K</code>th (or implied) axis of <code>Y</code>. However, if <code>X</code> is a scalar or one-element vector, it will be extended to the length of the <code>K</code>th axis.</p> <p><code>R</code> is composed from sub-arrays along the <code>K</code>th axis of <code>Y</code>.  If <code>X[I]</code> (an element of <code>X</code>) is positive, then the corresponding sub-array is replicated <code>X[I]</code> times.  If <code>X[I]</code> is zero, then the corresponding sub-array of <code>Y</code> is excluded.  If <code>X[I]</code> is negative, then the fill element of  <code>Y</code> is replicated <code>|X[I]</code> times.  Each of the (replicated) sub-arrays and fill items are joined along the <code>K</code>th axis in the order of occurrence.  The shape of <code>R</code> is the shape of <code>Y</code> except that the length of the (implied) <code>K</code>th axis is <code>+/|X</code> (after possible extension).</p> <p>This function is sometimes called Compress when <code>X</code> is Boolean.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/replicate/#examples","title":"Examples","text":"<pre><code>      1 0 1 0 1/\u23735\n1 3 5\n\n      1 \u00af2 3 \u00af4 5/\u23735\n1 0 0 3 3 3 0 0 0 0 5 5 5 5 5\n\n      M\n1 2 3\n4 5 6\n\n      2 0 1/M\n1 1 3\n4 4 6\n\n      0 1\u233fM\n4 5 6\n\n      0 1/[1]M\n4 5 6\n</code></pre> <p>If <code>Y</code> is a singleton <code>(1=\u00d7/\u2374,Y)</code> its value is notionally extended to the length of <code>X</code> along the specified axis.</p> <pre><code>      1 0 1/4\n4 4\n      1 0 1/,3\n3 3\n      1 0 1/1 1\u23745\n5 5\n\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/reshape/","title":"Reshape","text":"Reshape R\u2190X\u2374Y <p><code>Y</code> may be any array.  <code>X</code> must be a simple scalar or vector of non-negative integers.  <code>R</code> is an array of shape <code>X</code> whose elements are taken from <code>Y</code> in row-major sequence and repeated cyclically if required.  If <code>Y</code> is empty, <code>R</code> is composed of fill elements of <code>Y</code> (<code>\u2282\u220a\u2283Y</code> with <code>\u2395ml\u21900</code>).  If <code>X</code> contains at least one zero, then <code>R</code> is empty.  If <code>X</code> is an empty vector, then <code>R</code> is scalar.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/reshape/#examples","title":"Examples","text":"<pre><code>      2 3\u2374\u23738\n1 2 3\n4 5 6\n\n      2 3\u2374\u23734\n1 2 3\n4 1 2\n\n      2 3\u2374\u23730\n0 0 0\n0 0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/residue/","title":"Residue","text":"Residue R\u2190X|Y <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array.</p> <p>For positive arguments, <code>R</code> is the remainder when <code>Y</code> is divided by <code>X</code>. If <code>X=0</code>, <code>R</code> is <code>Y</code>.</p> <p>For other argument values, <code>R</code> is given by the expression <code>Y-X\u00d7\u230aY\u00f7X+0=X</code>. This expression also applies when <code>X</code> and/or <code>Y</code> are complex if the simple <code>\u230a</code> is replaced by the <code>CpxFloor</code> function. See Complex Floor on page 1.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Residue.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/residue/#examples","title":"Examples","text":"<pre><code>      3 3 \u00af3 \u00af3|\u00af5 5 \u00af4 4\n1 2 \u00af1 \u00af2\n\n      0.5|3.12 \u00af1 \u00af0.6\n0.12 0 0.4\n\n      \u00af1 0 1|\u00af5.25 0 2.41\n\u00af0.25 0 0.41\n\n      1j2|2j3 3j4 5j6\n1J1 \u00af1J1 0J1\n</code></pre> <p>Note that the ASCII Broken Bar (<code>\u2395UCS 166</code>, U+00A6) is not interpreted as Residue.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/reverse-first/","title":"Reverse First","text":"Reverse First R\u2190\u2296[K]Y <p>The form <code>R\u2190\u2296Y</code> implies reversal along the first axis.  See \"Reverse\" above.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/reverse/","title":"Reverse","text":"Reverse R\u2190\u233d[K]Y <p><code>Y</code> may be any array.  The axis specification is optional.  If present, <code>K</code> must be an integer scalar or one-element vector.  The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis is implied.  The form <code>R\u2190\u2296Y</code> implies the first axis.</p> <p><code>R</code> is the array <code>Y</code> reversed on the <code>K</code>th or implied axis.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/reverse/#examples","title":"Examples","text":"<pre><code>      \u233d1 2 3 4 5\n5 4 3 2 1\n\n      M\n1 2 3\n4 5 6\n      \u233dM\n3 2 1\n6 5 4\n      \u2296M\n4 5 6\n1 2 3\n      \u233d[1]M\n4 5 6\n1 2 3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/right/","title":"Right","text":"Right R\u2190X\u22a2Y <p><code>X</code> and <code>Y</code> may be any arrays. The result <code>R</code> is the right argument <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/right/#examples","title":"Examples","text":"<pre><code>      42 \u22a2'abc' 1 2 3\n abc  1 2 3\n</code></pre> <pre><code>      32+1.8\u00d7\u22a20 100      \u235d {32+1.8\u00d7\u2375} 0 100\n32 212\n\n</code></pre> <pre><code>      (\u22a2\u00f7+/) 4 3 0 1     \u235d {\u2375\u00f7+/\u2375} 4 3 0 1\n0.5 0.375 0 0.125\n\n      \u2193\u23632\u22a22 2 2 2\u2374\u2395A     \u235d (\u2193\u23632)2 2 2 2\u2374\u2395A\n  AB  CD    EF  GH  \n  IJ  KL    MN  OP  \n\n</code></pre> <p>When <code>\u22a2</code> is applied using reduction, the derived function selects the last sub-array of the array along the specified dimension. This is implemented as an idiom.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/right/#examples_1","title":"Examples","text":"<pre><code>      \u22a2/1 2 3\n3\n      mat\u2190\u2191'scent' 'canoe' 'arson' 'rouse' 'fleet'\n\n      \u22a2\u233fmat  \u235d last row                           \nfleet\n      \u22a2/mat  \u235d last column\ntenet\n\n      \u22a2/[2]2 3 4\u2374\u237324 \u235d last row from each plane\n 9 10 11 12\n21 22 23 24\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/roll/","title":"Roll","text":"Roll R\u2190?Y <p><code>Y</code> may be any non-negative integer array. <code>R</code> has the same shape as <code>Y</code> at each depth.</p> <p>For each positive element of <code>Y</code> the corresponding element of <code>R</code> is an integer, pseudo-randomly selected from the integers <code>\u2373Y</code> with each integer in this population having an equal chance of being selected.</p> <p>For each zero element of <code>Y</code>, the corresponding element of <code>R</code> is a pseudo-random floating-point value in the range 0 - 1, but excluding 0 and 1, i.e. <code>(0&lt;R[I]&lt;1)</code>.</p> <p><code>\u2395IO</code> and <code>\u2395RL</code> are implicit arguments of Roll. A side effect of Roll is to change the value of <code>\u2395RL</code>.</p> <p>Note that different random number generators are available; see <code>\u2395RL</code> for more information.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/roll/#examples","title":"Examples","text":"<pre><code>\n      ?9 9 9\n2 7 5\n      ?3\u23740\n0.3205466592 0.3772891947 0.5456603511\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/rotate-first/","title":"Rotate First","text":"Rotate First R\u2190X\u2296[K]Y <p>The form <code>R\u2190X\u2296Y</code> implies rotation along the first axis.  See \"Rotate\" above.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/rotate/","title":"Rotate","text":"Rotate R\u2190X\u233d[K]Y <p><code>Y</code> may be any array.  <code>X</code> must be a simple integer array.  The axis specification is optional.  If present, <code>K</code> must be a simple integer scalar or one-element vector.</p> <p>The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis of <code>Y</code> is implied.  The form <code>R\u2190X\u2296Y</code> implies the first axis.</p> <p><code>X</code> must have the same shape as <code>Y</code>, excluding <code>Y</code>'s <code>K</code>th axis. Otherwise, if <code>X</code> is a one-element array, it will be extended to conform.</p> <p><code>R</code> is an array with the same shape as <code>Y</code>, with the elements of each of the vectors along the <code>K</code>th axis of <code>Y</code> rotated by the value of the corresponding element of <code>X</code>.  If the value is positive, the rotation is in the sense of right to left.  If the value is negative, the rotation is in the sense of left to right.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/rotate/#examples","title":"Examples","text":"<pre><code>      3 \u233d 1 2 3 4 5 6 7\n4 5 6 7 1 2 3\n      \u00af2 \u233d 1 2 3 4 5\n4 5 1 2 3\n\n      M\n 1  2  3  4\n 5  6  7  8\n\n 9 10 11 12\n13 14 15 16\n\n      I\n0 1 \u00af1 0\n0 3  2 1\n\n      I\u233d[2]M\n 1  6  7  4\n 5  2  3  8\n\n 9 14 11 16\n13 10 15 12\n\n</code></pre> <pre><code>\n      J\n2 \u00af3\n3 \u00af2\n      J\u233dM\n 3  4  1  2\n 6  7  8  5\n\n12  9 10 11\n15 16 13 14\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/same/","title":"Same","text":"Same R\u2190\u22a3YR\u2190\u22a2Y <p><code>Y</code> may be any array.</p> <p>The result <code>R</code> is the argument <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/same/#examples","title":"Examples","text":"<pre><code>      \u22a3'abc' 1 2 3\n abc  1 2 3\n</code></pre> <pre><code>      (\u22a2,\u2395size) 'a'\u2395nl 4 \u235d left tine of fork meaning \"it\"\nacc      572\nand      492\nascan    740\nascana   716\nat      1764\navl    17476\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/shape/","title":"Shape","text":"Shape R\u2190\u2374Y <p><code>Y</code> may be any array.  <code>R</code> is a non-negative integer vector whose elements are the dimensions of <code>Y</code>.  If <code>Y</code> is a scalar, then <code>R</code> is an empty vector.  The rank of <code>Y</code> is given by <code>\u2374\u2374Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/shape/#examples","title":"Examples","text":"<pre><code>      \u237410\n\n      \u2374'CAT'\n3\n\n      \u23743 4\u2374\u237312\n3 4\n\n      +G\u2190(2 3\u2374\u23736)('CAT' 'MOUSE' 'FLEA')\n 1 2 3   CAT  MOUSE  FLEA\n 4 5 6\n\n      \u2374G\n2\n\n      \u2374\u2374G\n1\n\n      \u2374\u00a8G\n 2 3  3\n\n      \u2374\u00a8\u00a8G\n          3  5  4\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/split/","title":"Split","text":"Split R\u2190\u2193[K]Y <p><code>Y</code> may be any array.  The axis specification is optional.  If present, <code>K</code> must be a simple integer scalar or one-element vector.  The value of <code>K</code> must be an axis of <code>Y</code>.  If absent, the last axis is implied.</p> <p>The items of <code>R</code> are the sub-arrays of <code>Y</code> along the <code>K</code>th axis.  <code>R</code> is a scalar if <code>Y</code> is a scalar.  Otherwise <code>R</code> is an array whose rank is<code>\u00af1+\u2374\u2374Y</code> and whose shape is <code>(K\u2260\u2373\u2374\u2374Y)/\u2374Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/split/#examples","title":"Examples","text":"<pre><code>      \u21933 4\u2374'MINDTHATSTEP'\n MIND  THAT  STEP\n\n      \u21932 5\u2374\u237310\n 1 2 3 4 5  6 7 8 9 10\n\n      \u2193[1]2 5\u2374\u237310\n 1 6  2 7  3 8  4 9  5 10\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/subtract/","title":"Subtract","text":"Subtract R\u2190X-Y <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array. <code>R</code> is numeric. The value of <code>R</code> is the difference between <code>X</code> and <code>Y</code>.</p> <p>This function is also known as Minus.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/subtract/#example","title":"Example","text":"<pre><code>      3 \u00af2 4 0 - 2 1 \u00af2 4\n1 \u00af3 6 \u00af4\n\n      2j3-.3j5  \u235d (a+bi)-(c+di) = (a-c)+(b-d)i\n1.7J\u00af2\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/table/","title":"Table","text":"Table R\u2190\u236aY <p><code>Y</code> may be any array. <code>R</code> is a 2-dimensional matrix of the elements of <code>Y</code> taken in row-major order, preserving the shape of the first dimension of <code>Y</code> if it exists</p> <p>Table has been implemented according to the Extended APL Standard (ISO/IEC 13751:2001).</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/table/#examples","title":"Examples","text":"<pre><code>      ]display {\u2375 (\u2374\u2375)} \u236a'a'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2193a\u2502 \u25021 1\u2502 \u2502\n\u2502 \u2514\u2500\u2518 \u2514~\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display {\u2375 (\u2374\u2375)} \u236a'hello'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 \u2193h\u2502 \u25025 1\u2502 \u2502\n\u2502 \u2502e\u2502 \u2514~\u2500\u2500\u2518 \u2502\n\u2502 \u2502l\u2502       \u2502\n\u2502 \u2502l\u2502       \u2502\n\u2502 \u2502o\u2502       \u2502\n\u2502 \u2514\u2500\u2518       \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      ]display {\u2375 (\u2374\u2375)} \u236a2 3 4\u2374\u237324\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2193 1  2  3  4  5  6  7  8  9 10 11 12\u2502 \u25022 12\u2502 \u2502\n\u2502 \u250213 14 15 16 17 18 19 20 21 22 23 24\u2502 \u2514~\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2514~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/take-with-axes/","title":"Take with Axes","text":"Take with Axes R\u2190X\u2191[K]Y <p><code>Y</code> may be any non-scalar array.  <code>X</code> must be a simple integer scalar or vector.  <code>K</code> is a vector of zero or more axes of <code>Y</code>.</p> <p><code>R</code> is an array of the first or last elements of <code>Y</code> taken along the axes <code>K</code> depending on whether the corresponding element of <code>X</code> is positive or negative respectively.</p> <p>The rank of <code>R</code> is the same as the rank of <code>Y</code>:</p> <pre><code>      \u2374\u2374R \u2190\u2192 \u2374\u2374Y\n</code></pre> <p>The size of each axis of <code>R</code> is determined by the corresponding element of <code>X</code>:</p> <pre><code>      (\u2374R)[,K] \u2190\u2192 |,X\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/take-with-axes/#examples","title":"Examples","text":"<pre><code>      \u2395\u2190M\u21902 3 4\u2374\u237324\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n\n13 14 15 16\n17 18 19 20\n21 22 23 24\n\n      2\u2191[2]M\n 1  2  3  4\n 5  6  7  8\n\n13 14 15 16\n17 18 19 20\n\n      2\u2191[3]M\n 1  2\n 5  6\n 9 10\n\n13 14\n17 18\n21 22\n\n\n      2 \u00af2\u2191[3 2]M\n 5  6\n 9 10\n\n17 18\n21 22\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/take/","title":"Take","text":"Take R\u2190X\u2191Y <p><code>Y</code> may be any array.  <code>X</code> must be a simple integer scalar or vector.</p> <p>If <code>Y</code> is a scalar, it is treated as a one-element array of shape <code>(\u2374,X)\u23741</code>.  The length of <code>X</code> must be the same as or less than the rank of <code>Y</code>. If the length of <code>X</code> is less than the rank of <code>Y</code>, the missing elements of <code>X</code> default to the length of the corresponding axis of <code>Y</code>.</p> <p><code>R</code> is an array of the same rank as <code>Y</code> (after possible extension), and of shape <code>|X</code>.  If <code>X[I]</code> (an element of <code>X</code>) is positive, then <code>X[I]</code> sub-arrays are taken from the beginning of the <code>I</code>th axis of <code>Y</code>.  If <code>X[I]</code> is negative, then <code>X[I]</code> sub-arrays are taken from the end of the <code>I</code>th axis of <code>Y</code>.</p> <p>If more elements are taken than exist on axis <code>I</code>, the extra positions in <code>R</code> are filled with the fill element of <code>Y</code> (<code>\u2282\u220a\u2283Y</code> with <code>\u2395ml\u21900</code>).</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/take/#examples","title":"Examples","text":"<pre><code>      5\u2191'ABCDEF'\nABCDE\n\n      5\u21911 2 3\n1 2 3 0 0\n\n      \u00af5\u21911 2 3\n0 0 1 2 3\n\n      5\u2191(\u23733) (\u23734) (\u23735)\n 1 2 3  1 2 3 4  1 2 3 4 5  0 0 0  0 0 0\n\n</code></pre> <pre><code>      M\n1 2 3 4\n5 6 7 8\n\n      2 3\u2191M\n1 2 3\n5 6 7\n\n      \u00af1 \u00af2\u2191M\n7 8\n      M3\u21902 3 4\u2374\u2395A\n      1\u2191M3\nABCD\nEFGH\nIJKL\n      \u00af1\u2191M3\nMNOP\nQRST\nUVWX\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/tally/","title":"Tally","text":"Tally R\u2190\u2262Y <p><code>Y</code> may be any array.  <code>R</code> is a simple numeric scalar.</p> <p>Tally returns the number of major cells of <code>Y</code>. See Cells and Subarrays\"Cells and Sub-arrays\" on page 1.</p> <p>This can also be expressed as the length of the leading axis or 1 if <code>Y</code> is a scalar. Tally is equivalent to the function <code>{\u236c\u2374(\u2374\u2375),1}</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/tally/#examples","title":"Examples","text":"<pre><code>      \u22622 3 4\u2374\u237310\n2\n      \u22622\n1\n      \u2262\u236c\n0\n</code></pre> <p>Note that <code>\u2262V</code> is useful for returning the length of vector <code>V</code> as a scalar.  (In contrast, <code>\u2374V</code> is a one-element vector.)</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/times/","title":"Times","text":"Times R\u2190X\u00d7Y <p>See \"Multiply\" on page 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/transpose-dyadic/","title":"Transpose (Dyadic)","text":"Transpose (Dyadic) R\u2190X\u2349Y <p><code>Y</code> may be any array.  <code>X</code> must be a simple scalar or vector whose elements are included in the set <code>\u2373\u2374\u2374Y</code>.  Integer values in <code>X</code> may be repeated but all integers in the set <code>\u2373\u2308/X</code> must be included.  The length of <code>X</code> must equal the rank of <code>Y</code>.</p> <p><code>R</code> is an array formed by the transposition of the axes of <code>Y</code> as specified by <code>X</code>.  The <code>I</code>th element of <code>X</code> gives the new position for the <code>I</code>th axis of <code>Y</code>.  If <code>X</code> repositions two or more axes of <code>Y</code> to the same axis, the elements used to fill this axis are those whose indices on the relevant axes of <code>Y</code> are equal.</p> <p><code>\u2395IO</code> is an implicit argument of Dyadic Transpose.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/transpose-dyadic/#examples","title":"Examples","text":"<pre><code>      A\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n\n13 14 15 16\n17 18 19 20\n21 22 23 24\n</code></pre> <pre><code>\n\n      2 1 3\u2349A\n 1  2  3  4\n13 14 15 16\n\n 5  6  7  8\n17 18 19 20\n\n 9 10 11 12\n21 22 23 24\n\n      1 1 1\u2349A\n1 18\n\n      1 1 2\u2349A\n 1  2  3  4\n17 18 19 20\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/transpose-dyadic/#alternative-explanation","title":"Alternative Explanation","text":"<p>Assign a distinct letter for each unique integer in <code>X</code> :</p> <pre><code>0 1 2 3 \u2026\ni j k l\n</code></pre> <p>If <code>R\u2190X\u2349Y</code>, then <code>R[i;j;k;\u2026]</code> equals <code>Y</code> indexed by the letters corresponding to elements of <code>X</code> .</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/transpose-dyadic/#for-example","title":"For example:","text":"<pre><code>      \u2395IO\u21900\n\n      Y\u2190 ? 5 13 19 17 11 \u2374 100\n\n      X\u2190 2 1 2 0 1\n      \u235d  k j k i j\n</code></pre> <pre><code>      R\u2190X\u2349Y\n</code></pre> <pre><code>      i\u2190?17 \u22c4 j\u2190?11 \u22c4 k\u2190?5\n      R[i;j;k] = Y[k;j;k;i;j]\n1\n      R[i;j;k]=Y[\u2282\u234e\u00a8'ijk'[X]]\n1\n</code></pre> <p>From the above it can be seen that:</p> <ul> <li>the rank of <code>R</code> is <code>0\u23081+\u2308/X</code></li> <li>the shape of R is <code>(\u2374Y)\u230a.+(\u2308/\u2374Y)\u00d7X\u2218.\u2260\u23730\u23081+\u2308/X</code></li> </ul>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/transpose-monadic/","title":"Transpose (Monadic)","text":"Transpose (Monadic) R\u2190\u2349Y <p><code>Y</code> may be any array.  <code>R</code> is an array of shape <code>\u233d\u2374Y</code>, similar to <code>Y</code> with the order of the axes reversed.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/transpose-monadic/#examples","title":"Examples","text":"<pre><code>      M\n1 2 3\n4 5 6\n\n      \u2349M\n1 4\n2 5\n3 6\n</code></pre> <pre><code>\n      cube    \u235d 3D array\n 1  2  3  4\n 5  6  7  8\n 9 10 11 12\n\n13 14 15 16\n17 18 19 20\n21 22 23 24\n\n      \u2349 cube\n 1 13\n 5 17\n 9 21\n\n 2 14\n 6 18\n10 22\n\n 3 15\n 7 19\n11 23\n\n 4 16\n 8 20\n12 24\n\n      \u2374 cube\n2 3 4\n      \u2374 \u2349 cube    \u235d transpose reverses shape\n4 3 2\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/type/","title":"Type","text":"Type (\u2395ML&lt;1) <p>Migration level must be such that <code>\u2395ML&lt;1</code> (otherwise <code>\u220a</code> means Enlist. See \"Enlist\" on page 1).</p> <p><code>Y</code> may be any array.  <code>R</code> is an array with the same shape and structure as <code>Y</code> in which a numeric value is replaced by 0 and a character value is replaced by <code>' '</code>.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/type/#examples","title":"Examples","text":"<pre><code>      \u220a(2 3\u2374\u23736)(1 4\u2374'TEXT')\n 0 0 0\n 0 0 0\n\n      ' '=\u220a'X'\n1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/union/","title":"Union","text":"Union R\u2190X\u222aY <p><code>Y</code> must be a vector.  <code>X</code> must be a vector.  If either argument is a scalar, it is treated as a one-element vector.  <code>R</code> is a vector of the elements of <code>X</code> catenated with the elements of <code>Y</code> which are not found in <code>X</code>.</p> <p>Items in <code>X</code> and <code>Y</code> are considered the same if <code>X\u2261Y</code> returns 1 for those items.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Union.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/union/#examples","title":"Examples","text":"<pre><code>      'WASH' \u222a 'SHOUT'\nWASHOUT\n\n      'ONE' 'TWO' \u222a 'TWO' 'THREE'\n ONE  TWO  THREE\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/unique-mask/","title":"Unique Mask","text":"Unique Mask R\u2190\u2260Y <p><code>Y</code> may be any array.</p> <p><code>R</code> is a Boolean vector whose length is the number of major cells in <code>Y</code>. For each major cell of <code>Y</code>, the corresponding element of  <code>R</code> is 1 if it is the first occurrence of that value, and 0 if it is a duplicate of an earlier major cell.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Unique.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/unique-mask/#examples","title":"Examples","text":"<pre><code>      \u226022 10 22 22 21 10 5 10\n1 1 0 0 1 0 1 0\n\n</code></pre> <pre><code>\n      \u2260 v\u2190'CAT' 'DOG' 'CAT' 'DUCK' 'DOG' 'DUCK'\n1 1 0 1 0 0\n\n      \u22a2mat\u2190\u2191v \nCAT \nDOG \nCAT \nDUCK\nDOG \nDUCK\n      \u2260mat\n1 1 0 1 0 0\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/unique/","title":"Unique","text":"Unique R\u2190\u222aY <p><code>Y</code> may be any array. <code>R</code> is a vector of the unique major cells of <code>Y</code> (the unique items of a vector, the unique rows of a matrix and so forth), in the order in which they first appear in <code>Y</code>.  For further information, see Cells and SubarraysMajor Cells on page 1.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Unique.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/unique/#examples","title":"Examples","text":"<pre><code>\n      \u222a 22 10 22 22 21 10 5 10\n22 10 21 5\n\n      \u222a v\u2190'CAT' 'DOG' 'CAT' 'DUCK' 'DOG' 'DUCK'\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502CAT\u2502DOG\u2502DUCK\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n      \u22a2mat\u2190\u2191v                                   \nCAT \nDOG \nCAT \nDUCK\nDOG \nDUCK\n      \u222amat                                       \nCAT \nDOG \nDUCK\n\n</code></pre> <pre><code>      a\u21903 4 5\u2374\u237320\n      a\n 1  2  3  4  5\n 6  7  8  9 10\n11 12 13 14 15\n16 17 18 19 20\n\n 1  2  3  4  5\n 6  7  8  9 10\n11 12 13 14 15\n16 17 18 19 20\n\n 1  2  3  4  5\n 6  7  8  9 10\n11 12 13 14 15\n16 17 18 19 20\n      \u222aa\n 1  2  3  4  5\n 6  7  8  9 10\n11 12 13 14 15\n16 17 18 19 20\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/where/","title":"Where","text":"Where R\u2190\u2378Y <p>Classic Edition:  the symbol <code>\u2378</code> (Iota Underbar) is not available in Classic Edition, and Where is instead represented by <code>\u2395U2378</code>.</p> <p><code>Y</code> must be a simple Boolean or numeric array of non-negative integers.</p> <p>The model for Where can be expressed as <code>{(,\u2375)/,\u2373\u2374\u2375}</code>.</p> <p>If <code>Y</code> is Boolean, <code>R</code> is a vector of the indices of all the 1s in <code>Y</code>. If <code>Y</code> is all zeros, <code>R</code> is an empty vector.</p> <p><code>\u2395IO</code> is an implicit argument of Where.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/where/#examples","title":"Examples","text":"<pre><code>      \u2395IO\n1\n      \u2378 1 0 1 0 0 0 0 1 0\n1 3 8\n\n      \u2378'e'='Pete'\n2 4\n\n      3 4\u23740 1 1\n0 1 1 0\n1 1 0 1\n1 0 1 1\n\n      \u2378 3 4\u23740 1 1\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25021 2\u25021 3\u25022 1\u25022 2\u25022 4\u25023 1\u25023 3\u25023 4\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\n      \u23782 3 4\u23740 0 0 0 1\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 1\u25021 3 2\u25022 1 3\u25022 2 4\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n      \u2378 0 1 0 2\n2 4 4\n\n      {\u2375/\u2365,\u2373\u2374\u2375} 0 1 0 2\n2 4 4\n      \u23782 2\u23740 1 2 3\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25021 2\u25022 1\u25022 1\u25022 2\u25022 2\u25022 2\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/without/","title":"Without","text":"Without R\u2190X~Y <p>See \"Excluding\" on page 1.</p>"},{"location":"language-reference-guide/primitive-functions/primitive-functions-a-z/primitive-functions-a-z/zilde/","title":"Zilde","text":"Zilde R\u2190\u236c <p>The empty vector (<code>\u23730</code>) may be represented by the numeric constant <code>\u236c</code> called ZILDE.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/add/","title":"Add","text":"Add R\u2190X+Y <p><code>Y</code> must be numeric.  <code>X</code> must be numeric.  <code>R</code> is the arithmetic sum of <code>X</code> and <code>Y</code>.  <code>R</code> is numeric. This function is also known as Plus.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/add/#examples","title":"Examples","text":"<pre><code>      1 2 + 3 4\n4 6\n\n      1 2 + 3,\u22824 5\n4  6 7\n\n      1J1 2J2 + 3J3\n4J4 5J5\n\n      \u00af5 + 4J4 5J5\n\u00af1J4 0J5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/binomial/","title":"Binomial","text":"Binomial R\u2190X!Y <p><code>X</code> and <code>Y</code> may be any numbers except that if <code>Y</code> is a negative integer then <code>X</code> must be an integer. <code>R</code> is numeric. An element of <code>R</code> is integer if corresponding elements of <code>X</code> and <code>Y</code> are integers.</p> <p>Binomial is defined in terms of the function Factorial:</p> <pre><code>      X!Y \u2190\u2192 (!Y)\u00f7(!X)\u00d7!Y-X\n</code></pre> <p>Results are derived smoothly from the Beta function:</p> <pre><code>      Beta(X,Y) \u2190\u2192 \u00f7Y\u00d7(X-1)!X+Y-1\n</code></pre> <p>For positive integer arguments, <code>R</code> is the number of selections of <code>X</code> things from <code>Y</code> things.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/binomial/#example","title":"Example","text":"<pre><code>      1 1.2 1.4 1.6 1.8 2!5\n5 6.105689248 7.219424686 8.281104786 9.227916704 10\n\n      2!3j2\n1J5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/divide/","title":"Divide","text":"Divide R\u2190X\u00f7Y <p><code>Y</code> must be a numeric array.  <code>X</code> must be a numeric array.  <code>R</code> is the numeric array resulting from <code>X</code> divided by <code>Y</code>.  System variable <code>\u2395DIV</code> is an implicit argument of Divide.</p> <p>If <code>\u2395DIV=0</code> and <code>Y=0</code> then if <code>X=0</code>, the result of <code>X\u00f7Y</code> is 1; if <code>X\u22600</code> then <code>X\u00f7Y</code> is a <code>DOMAIN ERROR.</code></p> <p>If <code>\u2395DIV=1</code> and <code>Y=0</code>, the result of <code>X\u00f7Y</code> is <code>0</code> for all values of <code>X</code>.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/divide/#examples","title":"Examples","text":"<pre><code>      2 0 5\u00f74 0 2\n0.5 1 2.5\n\n      3j1 2.5 4j5\u00f72 1j1 .2\n1.5J0.5 1.25J\u00af1.25 20J25\n\n      \u2395DIV\u21901\n      2 0 5\u00f74 0 0\n0.5 0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/logarithm/","title":"Logarithm","text":"Logarithm R\u2190X\u235fY <p><code>X</code> and <code>Y</code> must be numeric arrays. <code>X</code> cannot be 1 unless <code>Y</code> is also 1. <code>R</code> is the base <code>X</code> logarithm of <code>Y</code>.</p> <p>Note that Logarithm (dyadic <code>\u235f</code>) is defined in terms of Natural Logarithm (monadic <code>\u235f</code>) as:</p> <pre><code>      X\u235fY\u2190\u2192(\u235fY)\u00f7\u235fX\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/logarithm/#examples","title":"Examples","text":"<pre><code>      10\u235f100 2\n2 0.3010299957\n\n      2 10\u235f0J1 1J2\n0J2.266180071 0.3494850022J0.4808285788\n\n      1 \u235f 1\n1\n      2 \u235f 1\n0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/maximum/","title":"Maximum","text":"Maximum R\u2190X\u2308Y <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array.  <code>R</code> is numeric.  <code>R</code> is the larger of the numbers <code>X</code> and <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/maximum/#example","title":"Example","text":"<pre><code>      \u00af2.01 0.1 15.3 \u2308 \u00af3.2 \u00af1.1 22.7\n\u00af2.01 0.1 22.7\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/minimum/","title":"Minimum","text":"Minimum R\u2190X\u230aY <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array.  <code>R</code> is numeric.  <code>R</code> is the smaller of <code>X</code> and <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/minimum/#example","title":"Example","text":"<pre><code>      \u00af2.1 0.1 15.3 \u230a \u00af3.2 1 22\n\u00af3.2 0.1 15.3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/multiply/","title":"Multiply","text":"Multiply R\u2190X\u00d7Y <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array.  <code>R</code> is the arithmetic product of <code>X</code> and <code>Y</code>.</p> <p>This function is also known as Times.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/multiply/#example","title":"Example","text":"<pre><code>      3 2 1 0 \u00d7 2 4 9 6\n6 8 9 0\n\n       2j3\u00d7.3j.5 1j2 3j4 .5\n\u00af0.9J1.9 \u00af4J7 \u00af6J17 1J1.5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/power/","title":"Power","text":"Power R\u2190X*Y <p><code>Y</code> must be a numeric array.  <code>X</code> must be a numeric array.  <code>R</code> is numeric.  The value of <code>R</code> is <code>X</code> raised to the power of <code>Y</code>.</p> <p>If <code>Y</code> is zero, <code>R</code> is defined to be 1.</p> <p>If <code>X</code> is zero, <code>Y</code> must be non-negative.</p> <p>In general, <code>X*Y</code> is defined as <code>*Y\u00d7\u235fX</code>. If <code>X</code> is negative, the result <code>R</code> is likely to be complex.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/power/#examples","title":"Examples","text":"<pre><code>      2*2 \u00af2\n4 0.25\n\n      9 64*0.5\n3 8\n\n      \u00af27*3 2 1.2 .5\n\u00af19683 729 \u00af42.22738244J\u00af30.67998919 0J5.196152423\n\n      \u00af8*\u00f73\n1J1.732050808\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/residue/","title":"Residue","text":"Residue R\u2190X|Y <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array.</p> <p>For positive arguments, <code>R</code> is the remainder when <code>Y</code> is divided by <code>X</code>. If <code>X=0</code>, <code>R</code> is <code>Y</code>.</p> <p>For other argument values, <code>R</code> is given by the expression <code>Y-X\u00d7\u230aY\u00f7X+0=X</code>. This expression also applies when <code>X</code> and/or <code>Y</code> are complex if the simple <code>\u230a</code> is replaced by the <code>CpxFloor</code> function. See Complex Floor on page 1.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Residue.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/residue/#examples","title":"Examples","text":"<pre><code>      3 3 \u00af3 \u00af3|\u00af5 5 \u00af4 4\n1 2 \u00af1 \u00af2\n\n      0.5|3.12 \u00af1 \u00af0.6\n0.12 0 0.4\n\n      \u00af1 0 1|\u00af5.25 0 2.41\n\u00af0.25 0 0.41\n\n      1j2|2j3 3j4 5j6\n1J1 \u00af1J1 0J1\n</code></pre> <p>Note that the ASCII Broken Bar (<code>\u2395UCS 166</code>, U+00A6) is not interpreted as Residue.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/subtract/","title":"Subtract","text":"Subtract R\u2190X-Y <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array. <code>R</code> is numeric. The value of <code>R</code> is the difference between <code>X</code> and <code>Y</code>.</p> <p>This function is also known as Minus.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-arithmetic-functions/subtract/#example","title":"Example","text":"<pre><code>      3 \u00af2 4 0 - 2 1 \u00af2 4\n1 \u00af3 6 \u00af4\n\n      2j3-.3j5  \u235d (a+bi)-(c+di) = (a-c)+(b-d)i\n1.7J\u00af2\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/and-lowest-common-multiple/","title":"And lowest common multiple","text":"And, Lowest Common Multiple R\u2190X^Y"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/and-lowest-common-multiple/#case-1-x-and-y-are-boolean","title":"Case 1: X and Y are Boolean","text":"<p><code>R</code> is Boolean is determined as follows:</p> <pre><code>             X   Y     R\n\n             0   0     0\n             0   1     0\n             1   0     0\n             1   1     1\n</code></pre> <p>Note that the ASCII caret (^) will also be interpreted as an APL And (<code>^</code>).</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/and-lowest-common-multiple/#example","title":"Example","text":"<pre><code>      0 1 0 1 ^ 0 0 1 1\n0 0 0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/and-lowest-common-multiple/#case-2-either-or-both-x-and-y-are-numeric-non-boolean","title":"Case 2: Either or both X and Y are numeric (non-Boolean)","text":"<p><code>R</code> is the lowest common multiple of <code>X</code> and <code>Y</code>. Note that in this case, <code>\u2395CT</code> and <code>\u2395DCT</code> are implicit arguments.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/and-lowest-common-multiple/#example_1","title":"Example","text":"<pre><code>      15 1 2 7 ^ 35 1 4 0\n105 1 4 0\n\n      2 3 4 \u2227 0j1 1j2 2j3\n0J2 3J6 8J12\n\n      2j2 2j4 \u2227 5j5 4j4\n10J10 \u00af4J12\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/equal/","title":"Equal","text":"Equal R\u2190X=Y <p><code>Y</code> may be any array. <code>X</code> may be any array. <code>R</code> is Boolean.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Equal.</p> <p>If <code>X</code> and <code>Y</code> are refs, then <code>R</code> is 1 if they are refs to the same object. If <code>X</code> is a ref and <code>Y</code> is not, or vice-versa, then <code>R</code> is 0.</p> <p>If <code>X</code> and <code>Y</code> are character, then <code>R</code> is 1 if they are the same character. If <code>X</code> is character and <code>Y</code> is numeric, or vice-versa, then <code>R</code> is 0.</p> <p>If <code>X</code> and <code>Y</code> are numeric, then <code>R</code> is 1 if <code>X</code> and <code>Y</code> are within comparison tolerance of each other.</p> <p>For real numbers <code>X</code> and <code>Y</code>, <code>X</code> is considered equal to <code>Y</code> if <code>(|X-Y)</code> is not greater than <code>\u2395CT\u00d7(|X)\u2308|Y</code>.</p> <p>For complex numbers <code>X=Y</code> is 1 if the magnitude of <code>X-Y</code> does not exceed <code>\u2395CT</code> times the larger of the magnitudes of <code>X</code> and <code>Y</code>; geometrically, <code>X=Y</code> if the number smaller in magnitude lies on or within a circle centred on the one with larger magnitude, having radius <code>\u2395CT</code> times the larger magnitude.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/equal/#examples","title":"Examples","text":"<pre><code>      3=3.1 3 \u00af2 \u00af3\n0 1 0 0\n\n      a\u21902+0j1\u00d7\u2395CT \n      a\n2J1E\u00af14\n      a=2j.00000000000001 2j.0000000000001\n1 0\n\n      'CAT'='FAT'\n0 1 1\n\n      'CAT'=1 2 3\n0 0 0\n\n      'CAT'='C' 2 3\n1 0 0\n\n      \u2395CT\u21901E\u00af10\n      1=1.000000000001\n1\n\n      1=1.0000001\n0\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/greater-or-equal/","title":"Greater or equal","text":"Greater Or Equal R\u2190X\u2265Y <p><code>Y</code> must be numeric.  <code>X</code> must be numeric.  <code>R</code> is Boolean.  <code>R</code> is 1 if <code>X</code> is greater than <code>Y</code> or <code>X=Y</code>.  Otherwise <code>R</code> is 0.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Greater Or Equal.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/greater-or-equal/#examples","title":"Examples","text":"<pre><code>      1 2 3 4 5 \u2265 3\n0 0 1 1 1\n\n      \u2395CT\u21901E\u00af10\n\n      1\u22651\n1\n\n      1\u22651.00000000001\n1\n\n      1\u22651.00000001\n0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/greater/","title":"Greater","text":"Greater R\u2190X&gt;Y <p><code>Y</code> must be numeric.  <code>X</code> must be numeric.  <code>R</code> is Boolean.  <code>R</code> is 1 if <code>X</code> is greater than <code>Y</code> and <code>X=Y</code> is 0.  Otherwise <code>R</code> is 0.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Greater.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/greater/#examples","title":"Examples","text":"<pre><code>      1 2 3 4 5 &gt; 2\n0 0 1 1 1\n\n      \u2395CT\u21901E\u00af10\n\n      1 1.00000000001 1.000000001 &gt; 1\n0 0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/less-or-equal/","title":"Less or equal","text":"Less Or Equal R\u2190X\u2264Y <p><code>Y</code> may be any numeric array.  <code>X</code> may be any numeric array.  <code>R</code> is Boolean.  <code>R</code> is 1 if <code>X</code> is less than <code>Y</code> or <code>X=Y</code>.  Otherwise <code>R</code> is 0.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Less Or Equal.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/less-or-equal/#examples","title":"Examples","text":"<pre><code>      2 4 6 8 10 \u2264 6\n1 1 1 0 0\n\n      \u2395CT\u21901E\u00af10\n\n      1  1.00000000001 1.00000001 \u2264 1\n1 1 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/less/","title":"Less","text":"Less R\u2190X   `Y` may be any numeric array.  `X` may be any numeric array.  `R` is Boolean.  `R` is 1 if `X` is less than `Y` and `X=Y` is 0.  Otherwise `R` is 0.  `\u2395CT` and `\u2395DCT` are  implicit arguments of Less.  # Examples  <pre><code>      (2 4) (6 8 10) &lt; 6\n 1 1  0 0 0\n\n      \u2395CT\u21901E\u00af10\n\n      1 0.99999999999 0.9999999999&lt;1\n0 0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/nand/","title":"Nand","text":"Nand R\u2190X\u2372Y <p><code>Y</code> must be a Boolean array.  <code>X</code> must be a Boolean array.  <code>R</code> is Boolean.  The value of <code>R</code> is the truth value of the proposition \"not both <code>X</code> and <code>Y</code>\", and is determined as follows:</p> <pre><code>             X   Y     R\n\n             0   0     1\n             0   1     1\n             1   0     1\n             1   1     0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/nand/#example","title":"Example","text":"<pre><code>      (0 1)(1 0) \u2372 (0 0)(1 1)\n 1 1  0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/nor/","title":"Nor","text":"Nor R\u2190X\u2371Y <p><code>Y</code> must be a Boolean array.  <code>X</code> must be a Boolean array.  <code>R</code> is Boolean.  The value of <code>R</code> is the truth value of the proposition \"neither <code>X</code> nor <code>Y</code>\", and is determined as follows:</p> <pre><code>             X   Y     R\n\n             0   0     1\n             0   1     0\n             1   0     0\n             1   1     0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/nor/#example","title":"Example","text":"<pre><code>      0 0 1 1 \u2371 0 1 0 1\n1 0 0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/not-equal/","title":"Not equal","text":"Not Equal R\u2190X\u2260Y <p><code>Y</code> may be any array.  <code>X</code> may be any array.  <code>R</code> is Boolean.  <code>R</code> is 0 if <code>X=Y</code>.  Otherwise <code>R</code> is 1.</p> <p>For Boolean <code>X</code> and <code>Y</code>, the value of <code>R</code> is the exclusive or (XOR)  result, determined as follows:</p> <pre><code>             X   Y     R\n\n             0   0     0\n             0   1     1\n             1   0     1\n             1   1     0\n</code></pre> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Not Equal.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/not-equal/#examples","title":"Examples","text":"<pre><code>      1 2 3 \u2260 1.1 2 3\n1 0 0\n\n      \u2395CT\u21901E\u00af10\n\n      1\u22601 1.00000000001 1.0000001\n0 0 1\n\n      1 2 3 \u2260'CAT'\n1 1 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/or-greatest-common-divisor/","title":"Or greatest common divisor","text":"Or, Greatest Common Divisor R\u2190X\u2228Y"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/or-greatest-common-divisor/#case-1-x-and-y-are-boolean","title":"Case 1: X and Y are Boolean","text":"<p>R is Boolean and is determined as follows:</p> <pre><code>             X   Y     R\n\n             0   0     0\n             0   1     1\n             1   0     1\n             1   1     1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/or-greatest-common-divisor/#example","title":"Example","text":"<pre><code>      0 0 1 1 \u2228 0 1 0 1\n0 1 1 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/or-greatest-common-divisor/#case-2-x-and-y-are-numeric-non-boolean","title":"Case 2: X and Y are numeric (non-Boolean)","text":"<p>R is the Greatest Common Divisor of <code>X</code> and <code>Y</code>. Note that in this case, <code>\u2395CT</code> and <code>\u2395DCT</code> are implicit arguments.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-dyadic-logical-functions/or-greatest-common-divisor/#examples","title":"Examples","text":"<pre><code>      15 1 2 7 \u2228 35 1 4 0\n5 1 2 7\n\n      rational\u2190{\u2191\u2375 1\u00f7\u22821\u2228\u2375} \u235d rational (\u2395CT) approximation\n                           \u235d to floating array.\n      rational 0.4321 0.1234 6.66, \u00f71 2 3\n 4321  617 333 1 1 1\n10000 5000  50 1 2 3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/ceiling/","title":"Ceiling","text":"Ceiling R\u2190\u2308Y <p>Ceiling is defined in terms of Floor as <code>\u2308Y\u2190\u2192-\u230a-Y</code></p> <p><code>Y</code> must be numeric.</p> <p>If an element of <code>Y</code> is real, the corresponding element of <code>R</code> is the least integer greater than or equal to the value of <code>Y</code>.</p> <p>If an element of <code>Y</code> is complex, the corresponding element of <code>R</code> depends on the relationship between the real and imaginary parts of the numbers in <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/ceiling/#examples","title":"Examples","text":"<pre><code>      \u2308\u00af2.3  0.1  100  3.3\n\u00af2 1 100 4\n\n      \u23081.2j2.5 1.2j\u00af2.5\n1J3 1J\u00af2\n</code></pre> <p>For further explanation, see \"Floor\" on page 1.</p> <p><code>\u2395CT</code> is an implied argument of Ceiling.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/direction/","title":"Direction","text":"Direction (Signum) R\u2190\u00d7Y <p><code>Y</code> may be any numeric array.</p> <p>Where an element of <code>Y</code> is real, the corresponding element of <code>R</code> is an integer whose value indicates whether the value is negative (<code>\u00af1</code>), zero (<code>0</code>) or positive (<code>1</code>).</p> <p>Where an element of <code>Y</code> is complex, the corresponding element of <code>R</code> is a number with the same phase but with magnitude (absolute value) 1. It is equivalent to <code>Y\u00f7|Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/direction/#examples","title":"Examples","text":"<pre><code>      \u00d7\u00af15.3 0 101\n\u00af1 0 1\n\n      \u00d73j4 4j5\n0.6J0.8 0.6246950476J0.7808688094\n\n      {\u2375\u00f7|\u2375}3j4 4j5\n0.6J0.8 0.6246950476J0.7808688094\n\n      |\u00d73j4 4j5\n1 1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/exponential/","title":"Exponential","text":"Exponential R\u2190*Y <p><code>Y</code> must be numeric. <code>R</code> is numeric and is the <code>Y</code>th power of e, the base of natural logarithms.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/exponential/#example","title":"Example","text":"<pre><code>      *1 0\n2.718281828 1\n\n      *0j1 1j2\n0.5403023059J0.8414709848 \u00af1.131204384J2.471726672\n\n      1+*\u25cb0j1 \u235d Euler Identity\n0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/factorial/","title":"Factorial","text":"Factorial R\u2190!Y <p><code>Y</code> must be numeric excluding negative integers.  <code>R</code> is numeric.  <code>R</code> is the product of the first <code>Y</code> integers for positive integer values of <code>Y</code>. In general, <code>!Y</code> is gamma <code>Y+1</code>.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/factorial/#examples","title":"Examples","text":"<pre><code>      !1 2 3 4 5\n1 2 6 24 120\n\n      !\u00af1.5 0 1.5 3.3\n\u00af3.544907702 1 1.329340388 8.85534336\n\n      !0j1 1j2\n0.4980156681J\u00af0.1549498283 0.1122942423J0.3236128855\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/floor/","title":"Floor","text":"Floor R\u2190\u230aY <p><code>Y</code> must be numeric.</p> <p>For real numbers, <code>R</code> is the largest integer value less than or equal to <code>Y</code> within the comparison tolerance <code>\u2395CT</code>.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/floor/#examples","title":"Examples","text":"<pre><code>      \u230a\u00af2.3 0.1 100 3.3\n\u00af3 0 100 3\n\n      \u230a0.5 + 0.4 0.5 0.6\n0 1 1\n</code></pre> <p>For complex numbers, <code>R</code> depends on the relationship between the real and imaginary parts of the numbers in <code>Y</code>.</p> <pre><code>      \u230a1j3.2 3.3j2.5 \u00af3.3j\u00af2.5\n1J3 3J2 \u00af3J\u00af3\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/floor/#complex-floor","title":"Complex Floor","text":"<p>The following (deliberately) simple function illustrates one way to express the rules for evaluating complex Floor.</p> <pre><code>     \u2207 fl\u2190CpxFloor cpxs;a;b\n[1]   \u235d Complex floor of scalar complex number (a+ib)\n[2]    a b\u21909 11\u25cbcpxs\n[3]    :If 1&gt;(a-\u230aa)+b-\u230ab\n[4]        fl\u2190(\u230aa)+0J1\u00d7\u230ab\n[5]    :Else\n[6]        :If (a-\u230aa)&lt;b-\u230ab\n[7]            fl\u2190(\u230aa)+0J1\u00d71+\u230ab\n[8]        :Else\n[9]            fl\u2190(1+\u230aa)+0J1\u00d7\u230ab\n[10]       :EndIf\n[11]   :EndIf\n     \u2207\n\n      CpxFloor\u00a81j3.2 3.3j2.5 \u00af3.3j\u00af2.5\n1J3 3J2 \u00af3J\u00af3\n</code></pre> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of Floor.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/magnitude/","title":"Magnitude","text":"Magnitude R\u2190|Y <p><code>Y</code> may be any numeric array. <code>R</code> is numeric composed of the absolute (unsigned) values of <code>Y</code>.</p> <p>Note that the magnitude of a complex number (a+ib) is defined to be a2+b2</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/magnitude/#examples","title":"Examples","text":"<pre><code>      |2 \u00af3.4 0 \u00af2.7\n2 3.4 0 2.7\n\n      |3j4\n5\n</code></pre> <p><code>\u2395IO</code> is an implicit argument of magnitude.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/natural-logarithm/","title":"Natural logarithm","text":"Natural Logarithm R\u2190\u235fY <p><code>Y</code> must be a numeric array. <code>R</code> is numeric.  <code>R</code> is the natural (or Napierian) logarithm of <code>Y</code> whose base is the mathematical constant e=2.71828....</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/natural-logarithm/#example","title":"Example","text":"<pre><code>      \u235f1 2\n0 0.6931471806\n\n      \u235f2 2\u23740j1 1j2 2j3 3j4\n0.000000000J1.570796327  0.8047189562J1.107148718\n1.282474679J0.9827937232 1.6094379120J0.927295218\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/negative/","title":"Negative","text":"Negative R\u2190-Y <p><code>Y</code> may be any numeric array. <code>R</code> is numeric and is the negative value of <code>Y</code>. For complex numbers both the real and imaginary parts are negated.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/negative/#example","title":"Example","text":"<pre><code>      -4 2 0 \u00af3 \u00af5\n\u00af4 \u00af2 0 3 5\n\n      -1j2 \u00af2J3 4J\u00af5\n\u00af1J\u00af2 2J\u00af3 \u00af4J5\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/not/","title":"Not","text":"Not R\u2190~Y <p><code>Y</code> must be a Boolean array.  <code>R</code> is Boolean.  The value of <code>R</code> is 0 if <code>Y</code> is 1, and <code>R</code> is 1 if <code>Y</code> is 0.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/not/#example","title":"Example","text":"<pre><code>      ~0 1\n1 0\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/pi-times/","title":"Pi times","text":"Pi Times R\u2190\u25cbY <p><code>Y</code> may be any numeric array. <code>R</code> is numeric. The value of <code>R</code> is the product of the mathematical constant \u03c0=3.14159... (Pi), and <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/pi-times/#example","title":"Example","text":"<pre><code>      \u25cb0.5 1 2\n1.570796327 3.141592654 6.283185307\n\n      \u25cb0J1\n0J3.141592654\n\n      *\u25cb0J1 \u235d Euler\n\u00af1\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/reciprocal/","title":"Reciprocal","text":"Reciprocal R\u2190\u00f7Y <p><code>Y</code> must be a numeric array.  <code>R</code> is numeric.  <code>R</code> is the reciprocal of <code>Y</code>; that is <code>1\u00f7Y</code>.  If <code>\u2395DIV=0</code>, <code>\u00f70</code> results in a <code>DOMAIN ERROR</code>.  If <code>\u2395DIV=1</code>, <code>\u00f70</code> returns 0.</p> <p><code>\u2395DIV</code> is an implicit argument of Reciprocal.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/reciprocal/#examples","title":"Examples","text":"<pre><code>      \u00f74 2 5\n0.25 0.5 0.2\n\n      \u00f70j1 0j\u00af1 2j2 4j4\n0J\u00af1 0J1 0.25J\u00af0.25 0.125J\u00af0.125\n\n      \u2395DIV\u21901 \n      \u00f70 0.5\n0 2\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/roll/","title":"Roll","text":"Roll R\u2190?Y <p><code>Y</code> may be any non-negative integer array. <code>R</code> has the same shape as <code>Y</code> at each depth.</p> <p>For each positive element of <code>Y</code> the corresponding element of <code>R</code> is an integer, pseudo-randomly selected from the integers <code>\u2373Y</code> with each integer in this population having an equal chance of being selected.</p> <p>For each zero element of <code>Y</code>, the corresponding element of <code>R</code> is a pseudo-random floating-point value in the range 0 - 1, but excluding 0 and 1, i.e. <code>(0&lt;R[I]&lt;1)</code>.</p> <p><code>\u2395IO</code> and <code>\u2395RL</code> are implicit arguments of Roll. A side effect of Roll is to change the value of <code>\u2395RL</code>.</p> <p>Note that different random number generators are available; see <code>\u2395RL</code> for more information.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/roll/#examples","title":"Examples","text":"<pre><code>\n      ?9 9 9\n2 7 5\n      ?3\u23740\n0.3205466592 0.3772891947 0.5456603511\n\n</code></pre>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/type/","title":"Type","text":"Type (\u2395ML&lt;1) <p>Migration level must be such that <code>\u2395ML&lt;1</code> (otherwise <code>\u220a</code> means Enlist. See \"Enlist\" on page 1).</p> <p><code>Y</code> may be any array.  <code>R</code> is an array with the same shape and structure as <code>Y</code> in which a numeric value is replaced by 0 and a character value is replaced by <code>' '</code>.</p>"},{"location":"language-reference-guide/primitive-functions/scalar-monadic-functions/type/#examples","title":"Examples","text":"<pre><code>      \u220a(2 3\u2374\u23736)(1 4\u2374'TEXT')\n 0 0 0\n 0 0 0\n\n      ' '=\u220a'X'\n1\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operator-syntax/","title":"Operator Syntax","text":"<p>Operators take one or two operands.  An operator with one operand is monadic.  The operand of a monadic operator is to the left of the operator.  An operator with two operands is dyadic.  Both operands are required for a dyadic operator.</p> <p>Operators have long scope to the left.  That is, the left operand is the longest function or array expression to its left (see  OperatorsProgrammer's Guide: \"Operators\").  A dyadic operator has short scope on the right.  Right scope may be extended by the use of parentheses.</p> <p>An operand may be an array, a primitive function, a system function, a defined function or a derived function.  An array may be the result of an array expression.</p> <p>An operator with its operand(s) forms a derived function.  The derived function may be monadic or dyadic and it may or may not return an explicit result.</p>"},{"location":"language-reference-guide/primitive-operators/operator-syntax/#examples","title":"Examples","text":"<pre><code>      +/\u23735\n15\n      (*\u22182)\u23733\n1 4 9\n\n      PLUS \u2190 + \u22c4 TIMES \u2190 \u00d7\n      1 PLUS.TIMES 2\n2\n\n      \u2395NL 2\nA\nX\n      \u2395EX\u00a8\u2193\u2395NL 2\n      \u2395NL 2\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operator-syntax/#monadic-operators","title":"Monadic Operators","text":"<p>Like primitive functions, monadic operators can be:</p> <ul> <li>named</li> <li>enclosed within parentheses</li> <li>displayed in the session</li> </ul>"},{"location":"language-reference-guide/primitive-operators/operator-syntax/#examples_1","title":"Examples","text":"<pre><code>      \u2395 \u2190 each \u2190 (\u00a8)      \u235d name and display\n\u00a8\n      shape\u2190\u2374\n      shape each (1 2) (3 4 5)\n 2  3 \n\n      slash\u2190/\n      +slash \u237310\n55\n      swap\u2190\u2368\n      3 -swap 4\n1\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operator-syntax/#right-operand-currying","title":"Right Operand Currying","text":"<p>A dyadic operator may be bound or curried with its right operand to form a monadic operator:</p>"},{"location":"language-reference-guide/primitive-operators/operator-syntax/#examples_2","title":"Examples","text":"<pre><code>      \u2395 \u2190 inv \u2190 \u2363\u00af1  \u235d produces monadic inverse operator\n\u2363 \u00af1\n      +\\inv 1 2 3    \u235d scan-inverse\n1 1 1\n      lim \u2190 \u2363\u2261       \u235d power-limit\n\n      1 +\u2218\u00f7lim 1     \u235d Phi\n1.61803\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operator-syntax/#function-composition","title":"Function Composition","text":"<p>Function composition refers to the \"gluing\" together of two functions using a dyadic operator such that the functions are applied to the argument(s) as normal, but in a particular pattern specific to the operator that is being used. The term function composition comes from traditional mathematics where it is used for a function h(x)=f(g(x)) when written as  h(x)=(f\u2218g)(x) APL generalises this idea to dyadic functions, allowing various patterns of application in addition to the simple application of one monadic function to the result of another monadic function. The three main patterns, represented by Atop, Beside, and Over can be visualised as follows:</p> <p>When any of these are applied monadically, the dotted branch falls away, and they are all equivalent to each other and to h(x)=(f\u2218g)(x) of traditional mathematics.</p>"},{"location":"language-reference-guide/primitive-operators/operators-summarised/","title":"Operators Summarised","text":"<p>Table 1 and Table 1 below summarise the Monadic and Dyadic primitive operators whose detailed descriptions  follow in alphabetical order in this section.</p> <p>Some operators may include an axis specification (indicated <code>[]</code>in the tables). Note that in these case <code>\u2395IO</code> is an implicit argument of the derived function.</p> <p>Monadic Primitive Operators</p> Name Producing Monadic derived function Producing Dyadic derived function Assignment (Modified) <code>Xf\u2190Y</code> Assignment (Indexed Modified) <code>X[I]f\u2190Y</code> Assignment (Selective Modified) <code>(EXP X)f\u2190Y</code> Commute <code>f\u2368Y</code> <code>Xf\u2368Y</code> Each <code>f\u00a8Y</code> <code>Xf\u00a8Y</code> I-Beam <code>A\u2336Y</code> <code>X(A\u2336)Y</code> Key <code>f\u2338Y</code> <code>Xf\u2338Y</code> Reduction <code>f/Y  [ ]</code> <code>Xf/Y [ ]</code> Reduction First <code>f\u233fY  [ ]</code> <code>Xf\u233fY [ ]</code> Scan <code>f\\Y  [ ]</code> `` Scan First <code>f\u2340Y  [ ]</code> `` Spawn <code>f&amp;Y</code> <code>Xf&amp;Y</code> <p>Dyadic Primitive Operators</p> Name Producing Monadic derived function Producing Dyadic derived function At <code>f@gY</code> <code>Xf@gY</code> Atop <code>f\u2364gY</code> <code>Xf\u2364gY</code> Axis <code>f[B]Y</code> <code>Xf[B]Y</code> Beside <code>f\u2218gY</code> <code>Xf\u2218gY</code> Bind <code>A\u2218gY</code> `` <code>(f\u2218B)Y</code> `` Constant <code>(A\u2368)Y</code> <code>X(A\u2368)Y</code> Inner Product `` <code>Xf.gY</code> Outer Product `` <code>X\u2218.gY</code> Over <code>f\u2365gY</code> <code>Xf\u2365gY</code> Power <code>f\u2363gY</code> <code>Xf\u2363gY</code> Rank <code>f\u2364kY</code> <code>Xf\u2364kY</code> Stencil <code>f\u233agY</code> `` Variant <code>f\u2360gY</code> <code>Xf\u2360gY</code>"},{"location":"language-reference-guide/primitive-operators/primitive-operators-table/","title":"Primitive Operators","text":"Glyph Glyph Name Operator Syntax <code>[]\u2190</code> Assignment Indexed Modified <code>{R}\u2190X[I]f\u2190Y</code> <code>\u2190</code> Left Arrow Assignment Modified <code>{R}\u2190Xf\u2190Y</code> <code>\u2190</code> Left Arrow Assignment Selective Modified <code>{R}\u2190(EXP X)f\u2190Y</code> <code>@</code> At At <code>R\u2190{X}(f@g)Y</code> <code>\u2364</code> Jot Diaeresis Atop <code>{R}\u2190{X}f\u2364gY</code> <code>[]</code> Axis with Dyadic Operand <code>R\u2190Xf[B]Y</code> <code>[]</code> Axis with Monadic Operand <code>R\u2190f[B]Y</code> <code>\u2218</code> Jot Beside <code>{R}\u2190{X}f\u2218gY</code> <code>\u2218</code> Jot Bind <code>{R}\u2190A\u2218fY {R}\u2190(f\u2218B)Y</code> <code>\u2368</code> Tilde Diaeresis Commute <code>{R}\u2190{X}f\u2368Y</code> <code>\u2368</code> Tilde Diaeresis Constant <code>R\u2190{X}(A\u2368)Y</code> <code>\u00a8</code> Diaeresis Each with Dyadic Operand <code>{R}\u2190Xf\u00a8Y</code> <code>\u00a8</code> Diaeresis Each with Monadic Operand <code>{R}\u2190f\u00a8Y</code> <code>\u2336</code> IBeam I-Beam <code>R\u2190{X}(A\u2336)Y</code> <code>.</code> Dot Inner Product <code>R\u2190Xf.gY</code> <code>\u2338</code> Quad Equal Key <code>R\u2190{X}f\u2338Y</code> <code>\u2218.</code> Outer Product <code>{R}\u2190X\u2218.gY</code> <code>\u2365</code> Circle Dieresis Over <code>{R}\u2190{X}f\u2365gY</code> <code>\u2363</code> Star Diaeresis Power Operator <code>{R}\u2190{X}(f\u2363g)Y</code> <code>\u2364</code> Jot Diaeresis Rank <code>R\u2190{X}(f\u2364B)Y</code> <code>\u233f</code> Slash Bar Reduce First N Wise <code>R\u2190Xf\u233f[K]Y</code> <code>\u233f</code> Slash Bar Reduce First <code>R\u2190f\u233fY</code> <code>/</code> Slash Reduce N Wise <code>R\u2190Xf/[K]Y</code> <code>/</code> Slash Reduce <code>R\u2190f/[K]Y</code> <code>\u2340</code> Slope Bar Scan First <code>R\u2190f\u2340Y</code> <code>\\</code> Slope Scan <code>R\u2190f\\[K]Y</code> <code>&amp;</code> Ampersand Spawn <code>{R}\u2190{X}f&amp;Y</code> <code>\u233a</code> Quad Diamond Stencil <code>R\u2190(f\u233ag)Y</code> <code>\u2360</code> Variant Variant <code>{R}\u2190{X}(f\u2360B)Y</code>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/assignment-indexed-modified/","title":"Assignment (Indexed Modified)","text":"Assignment (Indexed Modified) {R}\u2190X[I]f\u2190Y <p><code>f</code> may be any dyadic function which returns an explicit result.  <code>Y</code> may be any array whose items are appropriate to function <code>f</code>.  <code>X</code> must be the name of an existing array.  <code>I</code> must be a valid index specification.  The items of the indexed portion of <code>X</code> must be appropriate to function <code>f</code>.</p> <p><code>Y</code> is either an array of the same shape as the indices specified by <code>I</code> or a scalar that is notionally extended to be the same shape as those indices.</p> <p>The operator loops through the indices specified by <code>I</code> in ravel order. For each successive index <code>i</code> in the set specified by <code>I</code>,     it calculates the result of <code>X[i]fY[i]</code> and assigns it back to <code>X[i]</code>.</p> <p><code>R</code> is the \"pass-through\" value, that is, the value of <code>Y</code>.  If the result of the derived function is not assigned or used, there is no explicit result.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/assignment-indexed-modified/#examples","title":"Examples","text":"<pre><code>      A\n1 2 3 4 5\n\n      +A[2 4]+\u21901\n1\n\n      A\n1 3 3 5 5\n\n      A[3]\u00f7\u21902\n\n      A\n1 3 1.5 5 5\n</code></pre> <p>As the operator performs a loop, if an index in <code>I</code> is repeated, function <code>f</code> will be applied that number of times and successively to the same item of <code>X</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/assignment-indexed-modified/#example","title":"Example","text":"<pre><code>      B\u21903 5\u23740\n      B[1 1 3;1 3 3 5]+\u21901\n      B\n2 0 4 0 2\n0 0 0 0 0\n1 0 2 0 1\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/assignment-modified/","title":"Assignment (Modified)","text":"Assignment (Modified) {R}\u2190Xf\u2190Y <p><code>f</code> may be any dyadic function which returns an explicit result.  <code>Y</code> may be any array  appropriate to function <code>f</code>.  <code>X</code> must be the name of an existing array appropriate to function <code>f</code>.</p> <p><code>R</code> is the \u201cpass-through\u201d value, that is, the value of <code>Y</code>.  If the result of the derived function is not assigned or used, there is no explicit result.</p> <p>The effect of the derived function is to reset the value of the array named by <code>X</code> to the result of <code>XfY</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/assignment-modified/#examples","title":"Examples","text":"<pre><code>      A\n1 2 3 4 5\n\n      A+\u219010\n\n      A\n11 12 13 14 15\n\n      \u2395\u2190A\u00d7\u21902\n2\n      A\n22 24 26 28 30\n\n      vec\u2190\u00af4+9?9 \u22c4 vec\n3 5 1 \u00af1 \u00af2 4 0 \u00af3 2\n      vec/\u2368\u2190vec&gt;0 \u22c4vec\n3 5 1 4 2\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/assignment-selective-modified/","title":"Assignment (Selective Modified)","text":"Assignment (Selective Modified) {R}\u2190(EXP X)f\u2190Y <p><code>f</code> may be any dyadic function which returns an explicit result.  <code>Y</code> may be any array whose items are appropriate to function <code>f</code>.  <code>X</code> must be the name of an existing array.  <code>EXP</code> is an expression that selects elements of <code>X</code>. (See \"Assignment (Selective)\" on page 1 for a list of allowed selection functions.)  The selected elements of <code>X</code> must be appropriate to function <code>f</code>.</p> <p><code>Y</code> is either an array of the same shape as the selected elements of <code>X</code> or a scalar that is notionally extended to be the same shape as the selection.</p> <p>The operator loops through the selected elements of <code>X</code> in ravel order. For each selected element <code>X[i]</code>,     it calculates the result of <code>X[i]fY[i]</code> and assigns it back to the same element <code>X[i]</code>.</p> <p><code>R</code> is the \"pass-through\" value, that is, the value of <code>Y</code>.  If the result of the derived function is not assigned or used, there is no explicit result.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/assignment-selective-modified/#example","title":"Example","text":"<pre><code>      A\n12 36 23 78 30\n\n      ((A&gt;30)/A) \u00d7\u2190 100\n      A\n12 3600 23 7800 30\n</code></pre> <p>As the operator performs a loop, if an element of <code>X</code> is selected more than once,  function <code>f</code> will be applied the corresponding number of times and successively to the same element of <code>X</code>.</p> <pre><code>      a\u21903\u23740\n      (5\u2374a)+\u21901\n      a\n2 2 1\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/at/","title":"At","text":"At R\u2190{X}(f@g)Y <p>This operator substitutes selected items in <code>Y</code> with new values or applies a function to modify selected items in <code>Y</code>.</p> <p>The right operand <code>g</code>  identifies which items of array <code>Y</code> are to be substituted or modified. It is either:</p> <ul> <li>an array that specifies a set of indices in <code>Y</code>. If <code>g</code> is a simple scalar or vector, it selects major cells in <code>Y</code>. If nested, it specifies indices for Choose or Reach indexing.</li> <li>or a function that when applied to <code>Y</code> returns a Boolean array of the same shape as <code>Y</code> (a mask) in which a 1 indicates that the corresponding item of <code>Y</code> is to be substituted or modified. Note that the ravelof the mask selects from the ravel of the right argument's index array.</li> </ul> <p>The left operand <code>f</code> is either:</p> <ul> <li>an array that contains values to replace those items in <code>Y</code> identified by <code>g</code></li> <li>or a function to be applied to those items, the result of which is used to replace them. If this function is dyadic, its left argument is the array <code>X</code>. Note that the function is applied to the sub-array of <code>Y</code> selected by <code>g</code>as a whole and not to each item separately.</li> </ul> <p>The result <code>R</code> is the same as <code>Y</code> but with the items specified by <code>g</code> substituted or modified by <code>f</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/at/#examples-array-array","title":"Examples (array @ array)","text":"<p>Replace the 2nd and 4th items of <code>\u23735</code>:</p> <pre><code>      (10 20@2 4)\u23735   \u235d Note that the expression does not require parentheses because without them, the array `2 4` binds anyway to the `@` operator rather than to the `\u2373` function.\n1 10 3 20 5\n\n      10 20@2 4\u23735\n1 10 3 20 5\n\n</code></pre> <p>Replace the 2nd and 4th items  of nested vector with <code>\u236c</code>:</p> <pre><code>      (\u2282\u236c)@2 4 \u2373\u00a8\u23735\n\u250c\u2500\u252c\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021\u2502\u25021 2 3\u2502\u25021 2 3 4 5\u2502\n\u2514\u2500\u2534\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>Replace the 2nd and 4th rows (major cells) of a matrix:</p> <pre><code>      (2 3\u237410 20)(@2 4)4 3\u2374\u237312\n 1  2  3\n10 20 10\n 7  8  9\n20 10 20\n\n</code></pre> <p>Replace first and last elements with 0 using Choose Indexing:</p> <pre><code>      (0@(1 1)(4 3))4 3\u2374\u237312\n 0  2 3\n 4  5 6\n 7  8 9\n10 11 0\n\n</code></pre> <p>Replace nested items using Reach Indexing:</p> <pre><code>       G\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\n\u2502\u2502ABC\u25021\u2502\u2502\u2502DEF\u25022\u2502\u2502\u2502GHI\u25023\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\n\u2502\u2502JKL\u25024\u2502\u2502\u2502MNO\u25025\u2502\u2502\u2502PQR\u25026\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       G[((1 2)1)((2 3)2)]\n\u250c\u2500\u2500\u2500\u252c\u2500\u2510\n\u2502DEF\u25026\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2518\n       ('' '*' @((1 2)1)((2 3)2)) G\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\u250c\u252c\u2500\u2510   \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\n\u2502\u2502ABC\u25021\u2502\u2502\u2502\u25022\u2502   \u2502\u2502GHI\u25023\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\u2514\u2534\u2500\u2518   \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502\n\u2502\u2502JKL\u25024\u2502\u2502\u2502MNO\u25025\u2502\u2502\u2502PQR\u2502*\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/at/#examples-function-array","title":"Examples (function @ array)","text":"<p>Replace the 2nd and 4th items of <code>\u23735</code> with their reciprocals:</p> <pre><code>      \u00f7@2 4 \u23735\n1 0.5 3 0.25 5\n\n</code></pre> <p>Replace the 2nd and 4th items of <code>\u23735</code> with their reversal:</p> <pre><code>      \u233d@2 4 \u23735\n1 4 3 2 5\n\n</code></pre> <p>Multiply the 2nd and 4th items of <code>\u23735</code> by 10:</p> <pre><code>      10\u00d7@2 4\u23735\n1 20 3 40 5\n\n</code></pre> <p>Replace the 2nd and 4th items by their totals:</p> <pre><code>       +/\u00a8@2 4 \u2373\u00a8\u23735\n\u250c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021\u25023\u25021 2 3\u250210\u25021 2 3 4 5\u2502\n\u2514\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>Replace the 2nd and 4th rows (major cells) of a matrix with their accumulatives:</p> <pre><code>      (+\\@2 4)4 3\u2374\u237312\n 1  2  3\n 4  9 15\n 7  8  9\n10 21 33\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/at/#examples-array-function","title":"Examples (array @ function)","text":"<p>Replace odd elements with 0:</p> <pre><code>      0@(2\u2218|)\u23735\n0 2 0 4 0\n\n</code></pre> <p>Replace multiples of 3 (note              that masked items are substituted in ravel order):</p> <pre><code>      'abcde'@{0=3|\u2375} 4 4\u2374\u237316\n 1  2  a  4\n 5  b  7  8\n c 10 11  d\n13 14  e 16\n\n      'abcde'@(0=3|\u22a2) 4 4\u2374\u237316 \u235d or using a train\n 1  2  a  4\n 5  b  7  8\n c 10 11  d\n13 14  e 16\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/at/#examples-function-function","title":"Examples (function @ function)","text":"<p>Replace odd elements with their reciprocals:</p> <pre><code>      \u00f7@(2\u2218|)\u23735\n1 2 0.3333333333 4 0.2\n\n</code></pre> <p>Replace odd items of <code>\u23735</code> with themselves reversed:</p> <pre><code>      \u233d@(2\u2218|)\u23735\n5 2 3 4 1\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/atop/","title":"Atop","text":"Atop {R}\u2190{X}f\u2364gY <p>Classic Edition:  the symbol <code>\u2364</code> is not available in Classic Edition, and the Atop operator is instead represented by <code>\u2395U2364</code>.</p> <p><code>f</code> can be any monadic function.  <code>Y</code> can be any array that is suitable as the right argument to function <code>g</code> with the result of <code>g</code> being appropriate to function <code>f</code>.</p> <p>If <code>X</code> is omitted, <code>g</code> must be a monadic function. If <code>X</code> is specified, <code>g</code> must be a dyadic function and <code>X</code> can be any array that is suitable as the left argument to function <code>g</code>.</p> <p>The derived function is equivalent to <code>fgY</code> or <code>fXgY</code> and need not return a result.</p> <p>The Atop operator allows functions to be glued together to build up more complex functions.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/atop/#examples","title":"Examples:","text":"<pre><code>\n      -\u2364\u00f7 4      \u235d (  f\u2364g y) \u2261  f   g y\n\u00af0.25\n      12 -\u2364\u00f7 4   \u235d (x f\u2364g y) \u2261 (f x g y)\n\u00af3\n      3 1 4 1 5 ~\u2364\u220a 1 2 3\n0 0 1 0 1\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/axis-with-dyadic-operand/","title":"Axis (with Dyadic Operand)","text":"Axis (with Dyadic Operand) R\u2190Xf[B]Y <p><code>f</code> must be a dyadic primitive scalar function, or a dyadic primitive mixed function taken from Table 1 below. <code>B</code> must be a numeric scalar or vector. <code>X</code> and <code>Y</code> may be any arrays whose items are appropriate to function <code>f</code>. Axis does not follow the normal syntax of an operator.</p> <p>Primitive dyadic mixed functions with optional axis.</p> Function Name Range of B <code>/ or \u233f</code> Replicate <code>B\u220a\u2373\u2374\u2374Y</code> <code>\\ or \u2340</code> Expand <code>B\u220a\u2373\u2374\u2374Y</code> <code>\u2282</code> Partitioned Enclose <code>B\u220a\u2373\u2374\u2374Y</code> <code>\u233d or \u2296</code> Rotate <code>B\u220a\u2373\u2374\u2374Y</code> <code>, or \u236a</code> Catenate <code>B\u220a\u2373\u2374\u2374Y</code> <code>, or \u236a</code> Laminate <code>(0\u22601|B)^(B&gt;\u2395IO-1)^(B&lt;\u2395IO+(\u2374\u2374X)\u2308\u2374\u2374Y)</code> <code>\u2191</code> Take one or more axes of <code>Y</code> <code>\u2193</code> Drop one or more axes of <code>Y</code> <code>\u2337</code> Index one or more axes of <code>Y</code> <p>In most cases, <code>B</code> must be an integer value identifying the axis of <code>X</code> and <code>Y</code> along which function <code>f</code> is to be applied.</p> <p>Exceptionally, <code>B</code> must be a fractional value for the Laminate function (<code>,</code>) whose upper and lower integer bounds identify a pair of axes or an extreme axis of <code>X</code> and <code>Y</code>. For Take (<code>\u2191</code>) and Drop (<code>\u2193</code>), <code>B</code> can be a vector of two or more axes.</p> <p><code>\u2395IO</code> is an implicit argument of the derived function which determines the meaning of <code>B</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/axis-with-dyadic-operand/#examples","title":"Examples","text":"<pre><code>      1 4 5 =[1] 3 2\u2374\u23736\n1 0\n0 1\n1 0\n\n      2 \u00af2 1/[2]2 3\u2374'ABCDEF'\nAA  C\nDD  F\n\n      'ABC',[1.1]'='\nA=\nB=\nC=\n\n      'ABC',[0.1]'='\nABC\n===\n\n      \u2395IO\u2190O\n\n      'ABC',[\u00af0.5]'='\nABC\n===\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/axis-with-dyadic-operand/#axis-with-scalar-dyadic-functions","title":"Axis with Scalar Dyadic Functions","text":"<p>The axis operator <code>[X]</code> can take a scalar dyadic function as operand. This has the effect of \"stretching\" a lower rank array to fit a higher rank one. The arguments must be conformable along the specified axis (or axes) with elements of the lower rank array being replicated along the other axes.</p> <p>For example, if <code>H</code> is the higher rank array, <code>L</code> the lower rank one, <code>X</code> is an axis specification, and <code>f</code> a scalar dyadic function, then the expressions <code>Hf[X]L</code> and <code>Lf[X]H</code> are conformable if <code>(\u2374L)\u2190\u2192(\u2374H)[X]</code>. Each element of L is replicated along the remaining <code>(\u2374H)~X</code> axes of <code>H</code>.</p> <p>In the special case where both arguments have the same rank, the right one will play the role of the higher rank array. If <code>R</code> is the right argument, <code>L</code> the left argument, <code>X</code> is an axis specification and <code>f</code> a scalar dyadic function, then the expression <code>Lf[X]R</code> is conformable if <code>(\u2374L)\u2190\u2192(\u2374R)[X]</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/axis-with-dyadic-operand/#examples_1","title":"Examples","text":"<pre><code>      mat\n10 20 30\n40 50 60\n\n      mat+[1]1 2       \u235d add along first axis\n11 21 31\n42 52 62\n\n      mat+[2]1 2 3     \u235d add along last axis\n11 22 33\n41 52 63\n\n      cube\n 100  200  300\n 400  500  600\n\n 700  800  900\n1000 1100 1200\n\n      cube+[1]1 2 \n 101  201  301\n 401  501  601\n\n 702  802  902\n1002 1102 1202\n\n      cube+[3]1 2 3\n 101  202  303\n 401  502  603\n\n 701  802  903\n1001 1102 1203\n\n      cube+[2 3]mat\n 110  220  330\n 440  550  660\n\n 710  820  930\n1040 1150 1260\n\n\n</code></pre> <pre><code>      cube+[1 3]mat\n 110  220  330\n 410  520  630\n\n 740  850  960\n1040 1150 1260\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/axis-with-monadic-operand/","title":"Axis (with Monadic Operand)","text":"Axis (with Monadic Operand) R\u2190f[B]Y <p><code>f</code> must be a monadic primitive mixed function taken from those shown in Table 1 below, or a function derived from the operators Reduction (<code>/</code>) or Scan (<code>\\</code>). <code>B</code> must be a numeric scalar or vector. <code>Y</code> may be any array whose items are appropriate to function <code>f</code>. Axis does not follow the normal syntax of an operator.</p> <p>Primitive monadic mixed functions with optional axis.</p> Function Name Range of B <code>\u233d or \u2296</code> Reverse <code>B\u220a\u2373\u2374\u2374Y</code> <code>\u2191</code> Mix <code>(0\u22601|B)^(B&gt;\u2395IO-1)^(B&lt;\u2395IO+\u2374\u2374Y)</code> <code>\u2193</code> Split <code>B\u220a\u2373\u2374\u2374Y</code> <code>,</code> Ravel fraction, or zero or more axes of <code>Y</code> <code>\u2282</code> Enclose <code>(B\u2261\u23730)\u2228(^/B\u220a\u2373\u2374\u2374Y)</code> <p>In most cases, <code>B</code> must be an integer which identifies a specific axis of <code>Y</code>. However, when  <code>f</code> is the Mix function (<code>\u2191</code>),   <code>B</code> is a fractional value whose lower and upper integer bounds select an adjacent pair of axes of <code>Y</code> or an extreme axis of <code>Y</code>.</p> <p>For Ravel (<code>,</code>) and Enclose (<code>\u2282</code>), <code>B</code> can be a vector of two or more axes.</p> <p><code>\u2395IO</code> is an implicit argument of the derived function which determines the meaning of <code>B</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/axis-with-monadic-operand/#examples","title":"Examples","text":"<pre><code>      \u233d[1]2 3\u2374\u23736\n4 5 6\n1 2 3\n\n      \u2191[.1]'ONE' 'TWO'\nOT\nNW\nEO\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/beside/","title":"Beside","text":"Beside {R}\u2190{X}f\u2218gY <p><code>g</code> can be any monadic function which returns a result.  <code>Y</code> can be any array appropriate to function <code>g</code> with <code>gY</code> being suitable as the right argument to function <code>f</code>.</p> <p>If <code>X</code> is omitted, <code>f</code> must be a monadic function. If <code>X</code> is specified, <code>f</code> must be a dyadic function and <code>X</code> can be any array that is suitable as the left argument to function <code>f</code>.</p> <p>The derived function is equivalent to <code>fgY</code> or <code>XfgY</code> and need not return a result.</p> <p>The Beside operator allows functions to be glued together to build up more complex functions.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/beside/#examples","title":"Examples","text":"<pre><code>      RANK \u2190 \u2374\u2218\u2374\n      RANK \u00a8 'JOANNE' (2 3\u2374\u23736)\n 1  2\n</code></pre> <pre><code>      +/\u2218\u2373\u00a82 4 6\n3 10 21\n\n\n      \u2395VR'SUM'\n     \u2207 R\u2190SUM X\n[1]    R\u2190+/X\n     \u2207\n\n      SUM\u2218\u2373\u00a82 4 6\n3 10 21\n</code></pre> <pre><code>      +\u2218\u00f7/40\u23741       \u235d Golden Ratio! (Bob Smith)\n1.618033989\n\n      0,\u2218\u2373\u00a8\u23735\n0 1  0 1 2  0 1 2 3  0 1 2 3 4  0 1 2 3 4 5\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/bind/","title":"Bind","text":"Bind {R}\u2190A\u2218fY{R}\u2190(f\u2218B)Y <p>The Bind operator binds an array <code>A</code> or <code>B</code> to a dyadic function <code>f</code> either as its left or its right argument respectively. The former may be described as left argument currying and the latter as right argument currying.</p> <p><code>A</code>, <code>B</code> and <code>Y</code> may be any arrays whose items are appropriate to function <code>f</code>. In the case where <code>B</code> is bound as the right argument of function <code>f</code>, the parentheses are required in order to distinguish between the operand <code>B</code> and the argument <code>Y</code>.</p> <p>The derived function is equivalent to <code>AfY</code> or <code>YfB</code> and need not return a result.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/bind/#examples","title":"Examples","text":"<pre><code>      2 2\u2218\u2374 \u00a8 'AB'\n AA  BB\n AA  BB\n\n      SINE \u2190 1\u2218\u25cb\n\n      SINE 10 20 30\n\u00af0.5440211109 0.9129452507 \u00af0.9880316241\n</code></pre> <pre><code>      (*\u22180.5)4 16 25\n2 4 5\n\n      SQRT \u2190 *\u2218.5\n\n      SQRT 4 16 25\n2 4 5\n</code></pre> <p>The following example uses both forms of Bind to list functions in the workspace:</p> <pre><code>      \u2395NL 3\nADD\nPLUS\n\n      \u2395\u2218\u2190\u2218\u2395VR\u00a8\u2193\u2395NL 3\n     \u2207 ADD X\n[1]    \u2192LAB\u2374\u23680\u2260\u2395NC'SUM' \u22c4 SUM\u21900\n[2]   LAB:SUM\u2190SUM++/X\n     \u2207\n     \u2207 R\u2190A PLUS B\n[1]    R\u2190A+B\n     \u2207\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/commute/","title":"Commute","text":"Commute {R}\u2190{X}f\u2368Y <p><code>f</code> may be any dyadic function.  <code>X</code> and <code>Y</code> may be any arrays whose items are appropriate to function <code>f</code>.</p> <p>The derived function is equivalent to <code>YfX</code>.  The derived function need not return a result.</p> <p>If left argument <code>X</code> is omitted, the right argument <code>Y</code> is duplicated in its place, i.e.</p> <pre><code>      f\u2368Y \u2190\u2192 Y f\u2368Y\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/commute/#examples","title":"Examples","text":"<pre><code>      N\n3 2 5 4 6 1 3\n\n      N/\u23682|N\n3 5 1 3\n\n      \u2374\u23683\n3 3 3\n\n      mean\u2190+/\u2218(\u00f7\u2218\u2374\u2368) \u235d mean of a vector\n      mean \u237310\n5.5\n</code></pre> <p>The following statements are equivalent:</p> <pre><code>      F/\u2368\u2190I\n      F\u2190F/\u2368I\n      F\u2190I/F\n</code></pre> <p>Commute often eliminates the need for parentheses</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/constant/","title":"Constant","text":"Constant R\u2190{X}(A\u2368)Y <p><code>A</code>,  <code>X</code> and <code>Y</code> are arrays. The Constant operator returns array <code>A</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/constant/#examples","title":"Examples:","text":"<pre><code>\n      'mu'\u2368 'any' \u2395NULL   \u235d Always returns its operand\nmu\n      1E100 ('mu'\u2368) 1j1\nmu\n      \u00af1\u2368\u00a8 \u23732 3\n\u00af1 \u00af1 \u00af1\n\u00af1 \u00af1 \u00af1\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/each-with-dyadic-operand/","title":"Each (with Dyadic Operand)","text":"Each (with Dyadic Operand) {R}\u2190Xf\u00a8Y <p><code>f</code> may be any dyadic function.  <code>X</code> and <code>Y</code> may be any arrays whose corresponding items (after scalar extension) are appropriate to function <code>f</code> when applied separately.</p> <p>The derived function is applied separately to each pair of corresponding elements of <code>X</code> and <code>Y</code>.  If <code>X</code> or <code>Y</code> is a scalar or single-element array, it will be extended to conform with the other argument.  The derived function need not produce an explicit result.  If a result is returned, <code>R</code> has the same shape as <code>Y</code> (after possible scalar extension) whose elements are the items produced by the application of the derived function to the corresponding items of <code>X</code> and <code>Y</code>.</p> <p>If <code>X</code> or <code>Y</code> is empty, the operand function is applied once between the prototypes of <code>X</code> and <code>Y</code> to determine the prototype of <code>R</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/each-with-dyadic-operand/#examples","title":"Examples","text":"<pre><code>      +G\u2190(1 (2 3))(4 (5 6))(8 9)10\n   1  2 3   4  5 6   8 9  10\n      1\u233d\u00a8G\n  2 3  1   5 6  4  9 8  10\n\n      1\u233d\u00a8\u00a8G\n 1  3 2   4  6 5   8 9  10\n\n      1\u233d\u00a8\u00a8\u00a8G\n 1  2 3   4  5 6   8 9  10\n\n      1 2 3 4\u2191\u00a8G\n 1  4  5 6   8 9 0  10 0 0 0\n\n      'ABC',\u00a8'XYZ'\n AX  BY  CZ\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/each-with-monadic-operand/","title":"Each (with Monadic Operand)","text":"Each (with Monadic Operand) {R}\u2190f\u00a8Y <p><code>f</code> may be any monadic function.  <code>Y</code> may be any array, each of whose items are separately appropriate to function <code>f</code>.</p> <p>The derived function applies function <code>f</code> separately to each item of <code>Y</code>.  The derived function need not return a result.  If a result is returned, <code>R</code> has the same shape as <code>Y</code>, and its elements are the items produced by the application of function <code>f</code> to the corresponding items of <code>Y</code>.</p> <p>If <code>Y</code> is empty, the prototype of <code>R</code> is determined by applying the operand function once to the prototype of <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/each-with-monadic-operand/#examples","title":"Examples","text":"<pre><code>      G\u2190('TOM' (\u23733))('DICK' (\u23734))('HARRY' (\u23735))\n      \u2374G\n3\n      \u2374\u00a8G\n 2  2  2\n\n      \u2374\u00a8\u00a8G\n  3  3    4  4    5  5\n\n      +\u2395FX\u00a8('FOO1' 'A\u21901')('FOO2' 'A\u21902')\n FOO1 FOO2\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/i-beam-short/","title":"I-Beam","text":"I-Beam R\u2190{X}(A\u2336)Y <p>I-Beam is a monadic operator that provides a range of system related services.</p> <p>WARNING: Although documentation is provided for I-Beam functions, any service provided using I-Beam should be considered as \"experimental\" and subject to change \u2013 without notice - from one release to the next. Any use of I-Beams in applications should therefore be carefully isolated in cover-functions that can be adjusted if necessary.</p> <p><code>A</code> is an integer that specifies the type of operation to be performed. <code>Y</code> is an array that supplies further information about what is to be done.</p> <p><code>X</code> may or may not be required depending on <code>A</code>.</p> <p><code>R</code> is the result of the derived function.</p> <p>For further information, see I-Beam: on page 1.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/inner-product/","title":"Inner Product","text":"Inner Product R\u2190Xf.gY <p><code>f</code> and <code>g</code> are dyadic functions. The last axis of <code>X</code> must have the same length as the first axis of <code>Y</code>, or one of <code>X</code> and <code>Y</code> is single (<code>^/1=\u2374X</code> or <code>^/1=\u2374Y</code>).</p> <p>The result of the derived function has shape <code>(\u00af1\u2193\u2374X),1\u2193\u2374Y</code>; each item is <code>f/x g\u00a8y</code> where <code>x</code> and <code>y</code> are vectors taken from all the combinations of vectors along the last axis of <code>X</code> and the first axis of <code>Y</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/inner-product/#notes","title":"Notes:","text":"<ul> <li><code>g</code> must return a result.</li> <li><code>f</code> must return a result with the possible exception of the case when <code>1=\u2374x g\u00a8y</code>.</li> <li>The expression <code>f/x g\u00a8y</code> applies even when <code>R</code> or <code>x g\u00a8y</code> or <code>X</code> or <code>Y</code> is empty. When <code>X</code> or <code>Y</code> is empty, the vector <code>x</code> is <code>X</code> reshaped to the appropriate length (<code>y</code> is <code>Y</code> reshaped to appropriate length).</li> <li><code>x</code> is just <code>X</code> itself if <code>X</code> is a scalar. Likewise <code>y</code> and <code>Y</code>.</li> </ul>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/inner-product/#examples","title":"Examples","text":"<pre><code>      1 2 3+.\u00d710 12 14\n76\n      +/1 2 3\u00d710 12 14\n76\n\n      NAMES\nHENRY\nWILLIAM\nJAMES\nSEBASTIAN\n\n      NAMES^.='WILLIAM  '\n0 1 0 0\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/key/","title":"Key","text":"Key R\u2190{X}f\u2338Y <p>Classic Edition:   the symbol <code>\u2338</code> is not available in Classic Edition, and the Key operator is instead represented by <code>\u2395U2338</code>.</p> <p><code>f</code> may be any dyadic function that returns a result.</p> <p>If <code>X</code> is specified, it is an array whose major cells specify keys for corresponding major cells of <code>Y</code>.  The Key operator <code>\u2338</code> applies the function <code>f</code> to each unique key in <code>X</code> and the major cells of <code>Y</code> having that key.</p> <p>If <code>X</code> is omitted, <code>Y</code> is an array whose major cells represent keys. In this case, the Key operator applies the function <code>f</code> to each unique key in  <code>Y</code> and the  elements of <code>\u2373\u2262Y</code> having that key.  <code>f\u2338Y</code> is the same as <code>Y f\u2338\u2373\u2262Y</code>.</p> <p>The elements of <code>R</code> appear in the order in which they first appear in <code>Y</code>.</p> <p>Key is similar to the GROUP BY clause in SQL.</p> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of the Key operator.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/key/#example","title":"Example","text":"<p>In this example, both arrays are vectors so their major cells are their elements. The function <code>{\u237a':'\u2375}</code> is applied between the unique elements in <code>suits</code> (<code>'Spades' 'Hearts' 'Clubs'</code>) and the elements in <code>cards</code> grouped according to their corresponding elements in <code>suits</code>, i.e. (<code>'2' 'Ace'</code>), (<code>'Queen' 'Jack'</code>) and (<code>,'4'</code>).</p> <pre><code>      cards\u2190'2' 'Queen' 'Ace' '4' 'Jack'\n      suits\u2190'Spades' 'Hearts' 'Spades' 'Clubs' 'Hearts'\n\n      suits,[1.5]cards\n Spades  2     \n Hearts  Queen \n Spades  Ace   \n Clubs   4     \n Hearts  Jack\n\n       suits {\u237a':'\u2375}\u2338 cards\n  Spades  : 2 Ace         \n  Hearts  :  Queen  Jack  \n  Clubs   : 4\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/key/#monadic-examples","title":"Monadic Examples","text":"<pre><code>\n      {\u237a \u2375} \u2338 suits \u235d indices of unique major cells\n  Spades   1 3 \n  Hearts   2 5 \n  Clubs    4\n\n      {\u237a,\u2262\u2375} \u2338 suits \u235d count of unique major cells\n Spades  2\n Hearts  2\n Clubs   1\n\n</code></pre> <pre><code>       letters\u2190'zabayza'\n       {\u237a(\u2262\u2375)}\u2338letters\nz 2\na 3\nb 1\ny 1\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/key/#further-examples","title":"Further Examples","text":"<p><code>x</code> is a vector of stock codes, <code>y</code> is a corresponding matrix of values.</p> <pre><code>      \u2374x\n10\n      \u2374y\n10 2\n     x,y\n IBM   13 75\n AAPL  45 53\n GOOG  21  4\n GOOG  67 67\n AAPL  93 38\n MSFT  51 83\n IBM    3  5\n AAPL  52 67\n AAPL   0 38\n IBM    6 41\n\n</code></pre> <p>If we apply the function <code>{\u237a \u2375}</code> to <code>x</code> and <code>y</code> using the <code>\u2338</code> operator, we can see how the rows (its major cells) of <code>y</code> are grouped according to the corresponding elements (its major cells) of <code>x</code>.</p> <pre><code>      x{\u237a \u2375}\u2338y\n IBM   13 75 \n        3  5 \n        6 41 \n AAPL  45 53 \n       93 38 \n       52 67 \n        0 38 \n GOOG  21  4 \n       67 67 \n MSFT  51 83       \n</code></pre> <p>More usefully, we can apply the function <code>{\u237a(+\u233f\u2375)}</code>, which delivers the stock codes and the corresponding totals in <code>y</code>:</p> <pre><code>      x{\u237a(+\u233f\u2375)}\u2338y\n  IBM    22 121  \n  AAPL   190 196 \n  GOOG   88 71   \n  MSFT   51 83   \n\n</code></pre> <p>There is no need for the function to use its left argument. So to obtain just the totals in <code>y</code> grouped by the stock codes in <code>x</code>:</p> <pre><code>       x{+\u233f\u2375}\u2338y\n 22 121\n190 196\n 88  71\n 51  83\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/key/#defined-function-example","title":"Defined Function Example","text":"<p>This example appends the data for a stock into a component file named by the symbol.</p> <pre><code>     \u2207 r\u2190stock foo data;fid;file\n[1]    file\u2190\u2283stock\n[2]    :Trap 0\n[3]        fid\u2190file \u2395FTIE 0\n[4]        file \u2395FERASE fid\n[5]    :EndTrap\n[6]    fid\u2190file \u2395FCREATE 0\n[7]    r\u2190data \u2395FAPPEND fid\n[8]    \u2395FUNTIE fid\n     \u2207\n</code></pre> <pre><code>     x foo\u2338y\n1 1 1 1\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/key/#example_1","title":"Example","text":"<pre><code>\n      {\u237a \u2375} \u2338 suits \u235d indices of unique major cells\n  Spades   1 3 \n  Hearts   2 5 \n  Clubs    4\n\n      {\u237a,\u2262\u2375} \u2338 suits \u235d count of unique major cells\n Spades  2\n Hearts  2\n Clubs   1\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/key/#another-example","title":"Another Example","text":"<p>Given a list of names and scores., the problem is to sum the scores for each unique name. A solution is presented first without using the Key operator, and then with the Key operator.</p> <pre><code>      names \u235d 12, some repeat\n Pete  Jay  Bob  Pete  Pete  Jay  Jim  Pete  Pete  Jim\n Pete  Pete \n\n      (\u222anames)\u2218.\u2261names\n1 0 0 1 1 0 0 1 1 0 1 1\n0 1 0 0 0 1 0 0 0 0 0 0\n0 0 1 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 1 0 0 1 0 0\n\n      scores\n66 75 71 100 22 10 67 77 55 42 1 78\n\n      b\u2190\u2193(\u222anames)\u2218.\u2261names\n      ]disp b/\u00a8\u2282\u237312\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u25021 4 5 8 9 11 12\u25022 6\u25023\u25027 10\u2502\n\u2514~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2534~\u2500\u2192\u2534\u2192\u2534~\u2500\u2500\u2192\u2518\n\n      +/\u00a8b/\u00a8\u2282scores\n399 85 71 109\n\n      ]disp {\u2282\u2375}\u2338 names\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u25021 4 5 8 9 11 12\u25022 6\u25023\u25027 10\u2502\n\u2514~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2534~\u2500\u2192\u2534\u2192\u2534~\u2500\u2500\u2192\u2518\n\n      names {+/\u2375}\u2338 scores\n399 85 71 109\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/outer-product/","title":"Outer Product","text":"Outer Product {R}\u2190X\u2218.gY <p><code>g</code> may be any dyadic function.  The left operand of the operator is the symbol <code>\u2218</code>.  <code>X</code> and <code>Y</code> may be any arrays whose elements are appropriate to the function <code>g</code>.</p> <p>Function <code>g</code> is applied to all combinations of the elements of <code>X</code> and <code>Y</code>.  If function <code>g</code> returns a result, the shape of <code>R</code> is <code>(\u2374X),\u2374Y</code>.  Each element of <code>R</code> is the item returned by function <code>g</code> when applied to the particular combination of elements of <code>X</code> and <code>Y</code>.</p> <p>If <code>X</code> or <code>Y</code> is empty, the result <code>R</code> is a conformable empty array, and the operand function is applied once between the first items of <code>X</code> and <code>Y</code> to determine the prototype of <code>R</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/outer-product/#examples","title":"Examples","text":"<pre><code>      1 2 3\u2218.\u00d710 20 30 40\n10 20 30  40\n20 40 60  80\n30 60 90 120\n\n      1 2 3\u2218.\u2374'AB'\n A    B\n AA   BB\n AAA  BBB\n\n      1 2\u2218.,1 2 3\n 1 1  1 2  1 3\n 2 1  2 2  2 3\n\n      (\u23733)\u2218.=\u23733\n1 0 0\n0 1 0\n0 0 1\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/over/","title":"Over","text":"Over {R}\u2190{X}f\u2365gY <p>Classic Edition:  the symbol <code>\u2365</code> is not available in Classic Edition, and the Over operator is instead represented by <code>\u2395U2365</code>.</p> <p><code>g</code> can be any monadic function which returns a result.  <code>Y</code> can be any array that is suitable as the argument to function <code>g</code> with <code>gY</code> being suitable as the right argument to function <code>f</code>.</p> <p>If <code>X</code> is omitted, <code>f</code> must be a monadic function. If <code>X</code> is specified, <code>f</code> must be a dyadic function and <code>X</code> can be any array that is suitable as argument to function <code>g</code> with <code>gX</code> being suitable as the left argument to function <code>f</code>.</p> <p>The derived function is equivalent to <code>fgY</code> or <code>(gX)f(gY)</code> and need not return a result.</p> <p>The Over operator allows functions to be glued together to build up more complex functions.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/over/#examples","title":"Examples","text":"<pre><code>      2 3 ,\u2365\u2282 'text'   \u235d ,\u2365\u2282  \u2190\u2192  {\u237a\u2375}\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u25022 3\u2502text\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n\n     scores\u219082 90 76\n     weights\u219020 35 45\n     (weights\u00d7scores)\u00f7\u2365(+/)weights \u235d Weighted average\n82.1\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/power-operator/","title":"Power Operator","text":"Power Operator {R}\u2190{X}(f\u2363g)Y <p>If right operand <code>g</code> is a numeric integer scalar, power applies its left operand function <code>f</code> cumulatively <code>g</code> times to its argument. In particular, <code>g</code> may be Boolean 0 or 1 for conditional function application.</p> <p>If right operand <code>g</code> is a scalar-returning dyadic function, then left operand function <code>f</code> is applied repeatedly until <code>((f Y) g Y)</code> or until a strong interrupt occurs. Notice that power calls its dyadic right operand <code>g</code> with the next <code>(f Y)</code> and current <code>(Y)</code> values of the iteration as left and right arguments. In particular, if <code>g</code> is <code>=</code> or <code>\u2261</code>, the result is sometimes termed a fixpoint of <code>f</code>.</p> <p>If a left argument <code>X</code> is present, it is bound as left argument to left operand function <code>f</code>:</p> <pre><code>      X (f \u2363 g) Y \u2192 (X\u2218f \u2363 g) Y\n</code></pre> <p>A negative right operand <code>g</code> applies the inverse of the operand function <code>f</code>, <code>(|g)</code>times. In this case, <code>f</code> may be a primitive function or an expression of primitive functions combined with primitive operators:</p> <code>\u2218</code> compose <code>\u00a8</code> each <code>\u2218.</code> outer product <code>\u2368</code> commute <code>\\</code> scan <code>[]</code> axis <code>\u2363</code> power <p>If the function does not have an inverse, a negative argument <code>g</code> generates <code>DOMAIN ERROR</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/power-operator/#examples","title":"Examples","text":"<pre><code>\n    (,\u2218\u2282\u2218,\u2363(1=\u2261,vec))vec    \u235d ravel-enclose if simple.\n\n    a b c\u21901 0 1{(\u2282\u2363\u237a)\u2375}\u00a8abc \u235d enclose first and last.\n\n    cap\u2190{(\u237a\u237a\u2363\u237a)\u2375}           \u235d conditional application.\n\n    a b c\u21901 0 1\u2282cap\u00a8abc     \u235d enclose first and last.\n</code></pre> <pre><code>\n\n    succ\u21901\u2218+                \u235d successor function.\n\n    (succ\u23634)10              \u235d fourth successor of 10. \n14\n    (succ\u2363\u00af3)10             \u235d third predecessor of 10.\n7\n    1+\u2218\u00f7\u2363=1                 \u235d fixpoint: golden mean.\n1.618033989\n\n    f\u2190(32\u2218+)\u2218(\u00d7\u22181.8)        \u235d Fahrenheit from Celsius.\n    f 0 100\n32 212\n\n    c\u2190f\u2363\u00af1                  \u235d c is Inverse of f.\n    c 32 212                \u235d Celsius from Fahrenheit.\n0 100\n\n    invs\u2190{(\u237a\u237a\u2363\u00af1)\u2375}         \u235d inverse operator.\n\n    +\\invs 1 3 6 10         \u235d scan inverse.\n1 2 3 4\n\n    2\u2218\u22a5invs 9               \u235d decode inverse.\n1 0 0 1\n\n    dual\u2190{\u2375\u2375\u2363\u00af1 \u237a\u237a \u2375\u2375 \u2375}    \u235d dual operator.\n\n    mean\u2190{(+/\u2375)\u00f7\u2374\u2375}         \u235d mean function.\n\n    mean dual\u235f 1 2 3 4 5    \u235d geometric mean.\n2.605171085\n\n    +/dual\u00f7 1 2 3 4 5       \u235d parallel resistance.\n0.4379562044\n\n    mean dual(\u00d7\u2368)1 2 3 4 5  \u235d root-mean-square.\n3.31662479\n\n    \u2349dual\u2191 'hello' 'world'  \u235d vector transpose.\n hw  eo  lr  ll  od\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/power-operator/#warning","title":"Warning","text":"<p>Some expressions, such as the following, will cause an infinite internal loop and APL will appear to hang. In most cases this can be resolved by issuing a hard INTERRUPT.</p> <pre><code>      !\u2363-1\n      !\u2363-2\n</code></pre> <p>One can ensure that weak interrupts and <code>\u2395TKILL</code> can interrupt by packaging the <code>\u2363</code> within the dop      <code>{\u237a\u2190\u22a2 \u22c4 \u237a (\u237a\u237a{\u237a\u2190\u22a2 \u22c4 \u237a \u237a\u237a \u2375}\u2363\u2375\u2375) \u2375}</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/power-operator/#example","title":"Example","text":"<pre><code>      PowOp\u2190{\u237a\u2190\u22a2 \u22c4 \u237a (\u237a\u237a{\u237a\u2190\u22a2 \u22c4 \u237a \u237a\u237a \u2375}\u2363\u2375\u2375) \u2375}\n      tnum\u2190!PowOp-&amp;1 \u235d using naked \u2363 will freeze APL\n\n      \u2395tkill tnum\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/rank/","title":"Rank","text":"Rank R\u2190{X}(f\u2364B)Y <p>Classic Edition:  the symbol <code>\u2364</code> is not available in Classic Edition, and the Rank operator is instead represented by <code>\u2395U2364</code>.</p> <p>The Rank operator <code>\u2364</code> applies monadic function <code>f</code> successively to sub-arrays of <code>Y</code>, or dyadic function <code>f</code> between sub-arrays of <code>X</code> and <code>Y</code>. Sub-arrays are selected by right operand <code>B</code>.</p> <p><code>B</code> is a numeric scalar or vector of up to three items, specifying the ranks of the cells to which <code>f</code> should be applied. The most general form is a three item vector <code>p q r</code>, where:</p> <ul> <li><code>p</code> specifies the rank of the argument cells when <code>f</code> is applied monadically</li> <li><code>q</code> specifies the rank of the left argument cells when <code>f</code> is applied dyadically</li> <li><code>r</code> specifies the rank of the right argument cells when <code>f</code> is applied dyadically</li> </ul> <p>If <code>B</code> is a two item vector <code>q r</code>, it is implicitly extended to <code>r q r</code>. If  <code>B</code> has a single item <code>r</code>, it is implicitly extended to <code>r r r</code>.</p> <p>If an item <code>k</code> of <code>B</code> is zero or positive it selects k-cells of the corresponding argument. If it is negative, it selects (r+k)-cells where <code>r</code> is the rank of the corresponding argument. A value of <code>\u00af1</code> selects major cells.  For further information, see Cells and Subarrays\"Cells and Sub-arrays\" on page 1.</p> <p>If <code>X</code> is omitted, <code>f</code> may be any monadic function that returns a result. <code>Y</code> may be any array. The Rank operator <code>\u2364</code> applies function <code>f</code> successively to the sub-arrays in <code>Y</code> specified by <code>p</code> (i.e. the first item of <code>B</code>, as specified or implicitly extended).</p> <p>If <code>X</code> is specified, it may be any array and <code>f</code> may be any dyadic function that returns a result. <code>Y</code> may be any array. In this case, the Rank operator applies function <code>f</code> successively between the sub-arrays in <code>X</code> specified by <code>q</code> and the sub-arrays in <code>Y</code> specified by <code>r</code>.</p> <p>The sub-arrays of <code>R</code> are the results of the individual applications of <code>f</code>. If these results differ in rank or shape, they are extended to a common rank and shape in the manner of Mix. See Mix on page 1.</p> <p>Notice that it is necessary to prevent the right operand <code>k</code> binding to the right argument. This can be done using parentheses e.g. <code>(f\u23641)Y</code>. The same can be achieved using  <code>\u22a2</code> e.g. <code>f\u23641\u22a2Y</code> because <code>\u2364</code> binds tighter to its right operand than <code>\u22a2</code> does to its left argument, and <code>\u22a2</code> therefore resolves to Identity.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/rank/#monadic-examples","title":"Monadic Examples","text":"<p>Using enclose (<code>\u2282</code>) as the left operand elucidates the workings of the rank operator.</p> <pre><code>      Y\n36 99 20  5\n63 50 26 10\n64 90 68 98\n\n66 72 27 74\n44  1 46 62\n48  9 81 22\n      \u2374Y\n2 3 4\n</code></pre> <pre><code>      \u2282\u23642 \u22a2Y\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250236 99 20  5\u250266 72 27 74\u2502\n\u250263 50 26 10\u250244  1 46 62\u2502\n\u250264 90 68 98\u250248  9 81 22\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>      \u2282\u23641 \u22a2Y\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250236 99 20 5 \u250263 50 26 10\u250264 90 68 98\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u250266 72 27 74\u250244 1 46 62 \u250248 9 81 22 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The function <code>{(\u2282\u234b\u2375)\u2337\u2375}</code> sorts a vector.</p> <pre><code>      {(\u2282\u234b\u2375)\u2337\u2375} 3 1 4 1 5 9 2 6 5\n1 1 2 3 4 5 5 6 9\n</code></pre> <p>The rank operator can be used to apply the function to sub-arrays; in this case to sort the 1-cells (rows) of a 3-dimensional array.</p> <pre><code>      Y\n36 99 20  5\n63 50 26 10\n64 90 68 98\n\n66 72 27 74\n44  1 46 62\n48  9 81 22\n</code></pre> <pre><code>      ({(\u2282\u234b\u2375)\u2337\u2375}\u23641)Y\n 5 20 36 99\n10 26 50 63\n64 68 90 98\n\n27 66 72 74\n 1 44 46 62\n 9 22 48 81\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/rank/#dyadic-examples","title":"Dyadic Examples","text":"<pre><code>\n      10 20 30 (+\u23640 1)3 4\u2374\u237312\n10 11 12 13\n24 25 26 27\n38 39 40 41\n</code></pre> <p>Using the function <code>{\u237a \u2375}</code>  as the left operand demonstrates how the dyadic case of the rank operator works.</p> <pre><code>\n      10 20 30 ({\u237a \u2375}\u23640 1)3 4\u2374\u237312\n\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250210\u25020 1 2 3  \u2502\n\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u250220\u25024 5 6 7  \u2502\n\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u250230\u25028 9 10 11\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>Note that a right operand of <code>\u00af1</code> applies the function between the major cells (in this case elements) of the left argument, and the major cells (in this case rows) of the right argument.</p> <pre><code>\n      10 20 30 ({\u237a \u2375}\u2364\u00af1)3 4\u2374\u237312\n\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250210\u25020 1 2 3  \u2502\n\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u250220\u25024 5 6 7  \u2502\n\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u250230\u25028 9 10 11\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/reduce-first-n-wise/","title":"Reduce First N-Wise","text":"Reduce First N-Wise R\u2190Xf\u233f[K]Y <p>The form <code>R\u2190Xf\u233fY</code> implies N-Wise reduction along the first axis of <code>Y</code>. See Reduce N-Wise above.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/reduce-first/","title":"Reduce First","text":"Reduce First R\u2190f\u233fY <p>The form <code>R\u2190f\u233fY</code> implies reduction along the first axis of <code>Y</code>. See \"Reduce\" above.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/reduce-n-wise/","title":"Reduce N-Wise","text":"Reduce N-Wise R\u2190Xf/[K]Y <p><code>f</code> must be a dyadic function. <code>X</code> must be a simple scalar or one-item integer array. <code>Y</code> may be any array whose sub-arrays along the <code>K</code>th axis are appropriate to function <code>f</code>.</p> <p>The axis specification is optional. If present, <code>K</code> must identify an axis of <code>Y</code>. If absent, the last axis of <code>Y</code> is implied. The form <code>R\u2190Xf\u233fY</code> implies the first axis of <code>Y</code>.</p> <p><code>R</code> is an array formed by applying function <code>f</code> between items of sub-vectors of length <code>X</code> taken from vectors along the <code>K</code>th (or implied) axis of <code>Y</code>.</p> <p><code>X</code> can be thought of as the width of a \"window\" which moves along vectors drawn from the <code>K</code>th axis of <code>Y</code>.</p> <p>If <code>X</code> is zero, the result is a <code>(\u2374Y)+(-\u2374\u2374Y)\u21911</code> array of identity elements for the function <code>f</code>. See \"Identity Elements\" on page 1.</p> <p>If <code>X</code> is negative, each sub-vector is reversed before being reduced.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/reduce-n-wise/#examples","title":"Examples","text":"<pre><code>      \u23734\n1 2 3 4\n\n      3+/\u23734\u235d (1+2+3) (2+3+4)\n6 9\n      2+/\u23734\u235d (1+2) (2+3) (3+4)\n3 5 7\n      1+/\u23734\u235d (1) (2) (3) (4)\n1 2 3 4\n\n      0+/\u23734\u235d Identity element for +\n0 0 0 0 0\n      0\u00d7/\u23734\u235d Identity element for \u00d7\n1 1 1 1 1\n\n      2,/\u23734\u235d (1,2) (2,3) (3,4)\n 1 2  2 3  3 4 \n      \u00af2,/\u23734\u235d (2,1) (3,2) (4,3)\n 2 1  3 2  4 3 \n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/reduce/","title":"Reduce","text":"Reduce R\u2190f/[K]Y <p><code>f</code> must be a dyadic function.  <code>Y</code> may be any array whose items in the sub-arrays along the <code>K</code>th axis are appropriate to function <code>f</code>.</p> <p>The axis specification is optional.  If present, <code>K</code> must identify an axis of <code>Y</code>.  If absent, the last axis of <code>Y</code> is implied.  The form <code>R\u2190f\u233fY</code> implies the first axis of <code>Y</code>.</p> <p><code>R</code> is an array formed by applying function <code>f</code> between items of the vectors along the <code>K</code>th (or implied) axis of <code>Y</code>. For a typical vector <code>Y</code>, the result <code>R</code> is:</p> <pre><code>       R  \u2190\u2192 \u2282(1\u2283Y)f(2\u2283Y)f......f(n\u2283Y)\n</code></pre> <p>The shape <code>S</code> of <code>R</code> is the shape of <code>Y</code> excluding the <code>K</code>th axis, i.e.</p> <pre><code>       S  \u2190\u2192  \u2374R  \u2190\u2192  (K\u2260\u2373\u2374\u2374Y)/\u2374Y\n</code></pre> <p>If <code>Y</code> is a scalar then for any function <code>f</code>, <code>R</code> is <code>Y</code>.</p> <p>If the length of the <code>K</code>th axis of <code>Y</code> is 1, or if the length of any other axis of <code>Y</code> is 0, then <code>f</code> is not applied and <code>R</code> is <code>S\u2374Y</code>.</p> <p>Otherwise, if the length of the <code>K</code>th axis is 0 then the result depends on <code>f</code> and on <code>\u2283Y</code> (the prototypical item of <code>Y</code>) as follows:</p> <p>If <code>f</code> is one of the functions listed in Table 1 then <code>R</code> is <code>S\u2374\u2282I</code>, where <code>I</code> is formed from <code>\u2283Y</code> by replacing each depth-zero item of <code>\u2283Y</code> with the identity element from the table.</p> <p>Otherwise if <code>f</code> is Catenate, <code>R</code> is <code>S\u2374\u22820/\u2283Y</code>. If <code>f</code> is Catenate First, <code>R</code> is <code>S\u2374\u22820\u233f\u2283Y</code>. If <code>f</code> is Catenate along the Jth axis, <code>R</code> is <code>S\u2374\u22820/[J]\u2283Y</code>. See Catenate/Laminate on page 1.</p> <p>Otherwise, <code>DOMAIN ERROR</code> is reported.</p> <p>Identity Elements</p> Function Identity Add <code>+</code> <code>0</code> Subtract <code>-</code> <code>0</code> Multiply <code>\u00d7</code> <code>1</code> Divide <code>\u00f7</code> <code>1</code> Residue <code>|</code> <code>0</code> Minimum <code>\u230a</code> <code>M M represents the largest representable value: typically this is 1.7E308, unless \u2395FR is 1287, when the value is 1E6145.</code> Maximum <code>\u2308</code> <code>-M</code> Power <code>*</code> <code>1</code> Binomial <code>!</code> <code>1</code> And <code>\u2227</code> <code>1</code> Or <code>\u2228</code> <code>0</code> Less <code>&lt;</code> <code>0</code> Less or Equal <code>\u2264</code> <code>1</code> Equal <code>=</code> <code>1</code> Greater <code>&gt;</code> <code>0</code> Greater or Equal <code>\u2265</code> <code>1</code> Not Equal <code>\u2260</code> <code>0</code> Encode <code>\u22a4</code> <code>0</code> Union <code>\u222a</code> <code>\u236c</code> Replicate <code>/\u233f</code> <code>1</code> Expand <code>\\\u2340</code> <code>1</code> Rotate <code>\u233d\u2296</code> <code>0</code>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/reduce/#examples","title":"Examples","text":"<pre><code>      \u2228/0 0 1 0 0 1 0\n1\n      MAT\n1 2 3\n4 5 6\n\n      +/MAT\n6 15\n\n\n</code></pre> <pre><code>      +\u233fMAT\n5 7 9\n\n      +/[1]MAT\n5 7 9\n\n      +/(1 2 3)(4 5 6)(7 8 9)\n 12 15 18\n\n      ,/'ONE' 'NESS'\n ONENESS\n\n      +/\u23730\n0\n</code></pre> <pre><code>      (\u2282\u236c)\u2261,/\u236c \n1\n      (\u2282'')\u2261,/0\u2374'Hello' 'World' \n1\n      (\u22820 3 4\u23740)\u2261\u236a/0\u2374\u22822 3 4\u23740\n1\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/scan-first/","title":"Scan First","text":"Scan First R\u2190f\u2340Y <p>The form <code>R\u2190f\u2340Y</code> implies scan along the first axis of <code>Y</code>.  See \"Scan\" above.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/scan/","title":"Scan","text":"Scan R\u2190f\\[K]Y <p><code>f</code> may be any dyadic function that returns a result.  <code>Y</code> may be any array whose items in the sub-arrays along the <code>K</code>th axis are appropriate to the function <code>f</code>.</p> <p>The axis specification is optional.  If present, <code>K</code> must identify an axis of <code>Y</code>.  If absent, the last axis of <code>Y</code> is implied.  The form <code>R\u2190f\u2340Y</code> implies the first axis of <code>Y</code>.</p> <p><code>R</code> is an array formed by successive reductions along the <code>K</code>th axis of <code>Y</code>.  If <code>V</code> is a typical vector taken from the <code>K</code>th axis of <code>Y</code>, then the <code>I</code>th element of the result is determined as <code>f/I\u2191V</code>.</p> <p>The shape of <code>R</code> is the same as the shape of <code>Y</code>.  If <code>Y</code> is an empty array, then <code>R</code> is the same empty array.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/scan/#examples","title":"Examples","text":"<pre><code>      \u2228\\0 0 1 0 0 1 0\n0 0 1 1 1 1 1\n\n      ^\\1 1 1 0 1 1 1\n1 1 1 0 0 0 0\n\n      +\\1 2 3 4 5\n1 3 6 10 15\n\n      +\\(1 2 3)(4 5 6)(7 8 9)\n 1 2 3  5 7 9  12 15 18\n</code></pre> <pre><code>\n      M\n1 2 3\n4 5 6\n\n      +\\M\n1 3  6\n4 9 15\n\n      +\u2340M\n1 2 3\n5 7 9\n\n      +\\[1]M\n1 2 3\n5 7 9\n\n      ,\\'ABC'\nA AB  ABC\n\n      T\u2190'ONE(TWO) BOOK(S)'\n\n      \u2260\\T\u220a'()'\n0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0\n\n      ((T\u220a'()')\u2371\u2260\\T\u220a'()')/T\nONE BOOK\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/spawn/","title":"Spawn","text":"Spawn {R}\u2190{X}f&amp;Y <p><code>&amp;</code> is a monadic operator with an ambivalent derived function. <code>&amp;</code> spawns a new thread in which <code>f</code> is applied to its argument <code>Y</code> (monadic case) or between its arguments <code>X</code> and <code>Y</code> (dyadic case). The shy result of this application is the number of the newly created thread.</p> <p>When function f terminates, its result (if any), the thread result, is returned. If the thread number is the subject of an active <code>\u2395TSYNC</code>, the thread result appears as the result of <code>\u2395TSYNC</code>. If no <code>\u2395TSYNC</code> is in effect, the thread result is displayed in the session in the normal fashion.</p> <p>Note that <code>&amp;</code> can be used in conjunction with the each operator <code>\u00a8</code> to launch many threads in parallel.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/spawn/#examples","title":"Examples","text":"<pre><code>      \u00f7&amp;4         \u235d Reciprocal in background\n0.25\n\n      \u2395\u2190\u00f7&amp;4       \u235d Show thread number\n1\n0.25\n\n      FOO&amp;88      \u235d Spawn monadic function.\n\n      2 FOO&amp;3     \u235d dyadic\n\n      {NIL}&amp;0     \u235d niladic\n\n      \u234e&amp;'NIL'     \u235d ..\n\n      X.GOO&amp;99    \u235d thread in remote space.\n\n      \u234e&amp;'\u2395dl 2'   \u235d Execute async expression.\n\n      'NS'\u234e&amp;'FOO' \u235d .. remote .. .. .. \n\n      PRT&amp;\u00a8\u2193\u2395nl 9 \u235d PRT spaces in parallel.\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/stencil/","title":"Stencil","text":"Stencil R\u2190(f\u233ag)Y <p>Classic Edition:  the symbol <code>\u233a</code> is not available in Classic Edition, and the Stencil operator is instead represented by <code>\u2395U233A</code>.</p> <p>Stencil is used in image processing, artificial neural networks, computational fluid dynamics, cellular automata, and many other fields of application. The computation is sometimes referred to as tessellation, moving window, or stencil codeSee https://en.wikipedia.org/wiki/Stencil_code. This operator applies the left operand function <code>f</code> to a series of (possibly overlapping) rectangles in the array <code>Y</code>.</p> <p>In general, the right operand <code>g</code> is a 2- row matrix of positive non-zero integers with up to <code>\u2374\u2374Y</code> columns. The first row contains the rectangle sizes, the second row the movements i.e. how much to move the rectangle in each step. If <code>g</code> is a scalar or vector it specifies the rectangle size and the movement defaults to 1.</p> <p>The predominant case uses a rectangle size which is odd and a movement of 1.</p> <p>Rectangles are centredon successive elements of <code>Y</code> and (unless the rectangle size is 1), padded with fill elements.</p> <p>The first rectangle is centred on the first element of <code>Y</code> preceded by the appropriate number of fill elements. Subsequent rectangles are centred on subsequent elements of <code>Y</code> according to the size of the movement, and padded before or after as appropriate. When the movement is 1, each element of <code>Y</code> in its turn is the middle of a rectangle.</p> <p><code>f</code> is invoked dyadically with a vector left argument indicating for each axis the number of fill elements and on what side; positive values mean that the padding precedes the array values, negative values mean that the padding follows the array values.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/stencil/#example","title":"Example","text":"<pre><code>      {\u2282\u237a \u2375}\u233a3 3\u22a23 3\u2374\u237312\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502\u25021 1\u25020 0 0\u2502 \u2502\u25021 0\u25020 0 0\u2502 \u2502\u25021 \u00af1\u25020 0 0\u2502 \u2502\n\u2502\u2502   \u25020 1 2\u2502 \u2502\u2502   \u25021 2 3\u2502 \u2502\u2502    \u25022 3 0\u2502 \u2502\n\u2502\u2502   \u25020 4 5\u2502 \u2502\u2502   \u25024 5 6\u2502 \u2502\u2502    \u25025 6 0\u2502 \u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502\u25020 1\u25020 1 2\u2502 \u2502\u25020 0\u25021 2 3\u2502 \u2502\u25020 \u00af1\u25022 3 0\u2502 \u2502\n\u2502\u2502   \u25020 4 5\u2502 \u2502\u2502   \u25024 5 6\u2502 \u2502\u2502    \u25025 6 0\u2502 \u2502\n\u2502\u2502   \u25020 7 8\u2502 \u2502\u2502   \u25027 8 9\u2502 \u2502\u2502    \u25028 9 0\u2502 \u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502\u00af1 1\u25020 4 5\u2502\u2502\u2502\u00af1 0\u25024 5 6\u2502\u2502\u2502\u00af1 \u00af1\u25025 6 0\u2502\u2502\n\u2502\u2502    \u25020 7 8\u2502\u2502\u2502    \u25027 8 9\u2502\u2502\u2502     \u25028 9 0\u2502\u2502\n\u2502\u2502    \u25020 0 0\u2502\u2502\u2502    \u25020 0 0\u2502\u2502\u2502     \u25020 0 0\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      {+/,\u2375}\u233a3 3\u22a23 3\u2374\u237312\n12 21 16\n27 45 33\n24 39 28\n\n</code></pre> <p>In the first expression above, the left operand function <code>{\u2282\u237a \u2375}</code> simply displays its left and right arguments to illustrate the mechanics of the operation. The right operand <code>(3 3)</code> specifies that each rectangle contains 3 rows and 3 columns, and the movement is 1.</p> <p>In order for the first element of <code>Y</code> (1) to be centred, the first rectangle is padded with a row above and a column to the left, as indicated by the left argument <code>(1 1)</code> to the function.</p> <p>Another way to think about the way Stencil operates is that it portions the array into sections or neighbourhoods in which elements can be analysed with respect to their immediate neighbours. Stencil  has uses in image processing applications.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/stencil/#examples","title":"Examples","text":"<pre><code>      {\u2282\u237a \u2375}\u233a(3 3,[.5]2)\u22a23 3\u2374\u237312\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502\u25021 1\u25020 0 0\u2502 \u2502\u25021 \u00af1\u25020 0 0\u2502 \u2502\n\u2502\u2502   \u25020 1 2\u2502 \u2502\u2502    \u25022 3 0\u2502 \u2502\n\u2502\u2502   \u25020 4 5\u2502 \u2502\u2502    \u25025 6 0\u2502 \u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502\u00af1 1\u25020 4 5\u2502\u2502\u2502\u00af1 \u00af1\u25025 6 0\u2502\u2502\n\u2502\u2502    \u25020 7 8\u2502\u2502\u2502     \u25028 9 0\u2502\u2502\n\u2502\u2502    \u25020 0 0\u2502\u2502\u2502     \u25020 0 0\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       {\u2282\u237a \u2375}\u233a(3 3,[.5]3)\u22a23 3\u2374\u237312\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u25021 1\u25020 0 0\u2502\u2502\n\u2502\u2502   \u25020 1 2\u2502\u2502\n\u2502\u2502   \u25020 4 5\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u22a2 A\u21905 5\u23740 0 1 0 0, 0 1 2 1 0, 1 2 3 2 1, 0 1 2 1 0\n0 0 1 0 0\n0 1 2 1 0\n1 2 3 2 1\n0 1 2 1 0\n0 0 1 0 0\n\n</code></pre> <pre><code>      \u22a2 y\u21901=?10 10\u23744\n0 0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 0\n0 0 1 0 0 1 0 0 0 0\n1 0 0 0 1 1 0 0 0 1\n1 1 0 0 0 0 0 0 0 0\n0 0 0 0 1 0 0 0 0 0\n1 0 1 0 0 1 1 0 0 1\n0 0 0 0 0 0 1 1 0 0\n0 0 0 0 0 0 0 0 0 0\n1 0 0 0 1 1 0 1 1 0\n\n</code></pre> <pre><code>      {+/,A\u00d7\u2375}\u233a(\u2374A) \u22a2y\n0 0 1 0 0 1 0 1 2 3\n1 1 2 1 2 3 1 0 1 3\n4 4 3 4 6 6 3 1 1 3\n6 6 5 4 7 7 4 2 2 3\n8 6 5 3 5 6 2 0 1 3\n6 5 4 3 5 6 5 2 1 3\n5 5 4 4 6 7 8 7 4 3\n3 2 2 1 4 7 8 7 5 3\n3 1 1 1 3 5 6 6 4 2\n3 2 2 3 5 6 7 7 5 3\n\n</code></pre> <p>You can see that the result identifies where there are clusters in <code>y</code>.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/stencil/#examples-odd-rectangle-movement-not-1","title":"Examples (odd rectangle, movement not 1)","text":"<p>If the movement is greater than one, corresponding portions are skipped as shown below.</p> <pre><code>      {\u2282\u2375}\u233a(\u236a3 2) \u23738\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020 1 2\u25022 3 4\u25024 5 6\u25026 7 8\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n      {(\u00af2\u2191\u2355\u237a),' f ',\u2355\u2375}\u233a(\u236a3 2) \u23738\n 1 f 0 1 2\n 0 f 2 3 4\n 0 f 4 5 6\n 0 f 6 7 8\n\u235d      \u2191 middle\n\n</code></pre> <pre><code>      {\u2282\u2375}\u233a(\u236a5 2) \u23739\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020 0 1 2 3\u25021 2 3 4 5\u25023 4 5 6 7\u25025 6 7 8 9\u25027 8 9 0 0\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      {(\u00af2\u2191\u2355\u237a),' f ',\u2355\u2375}\u233a(\u236a5 2) \u23739\n 2 f 0 0 1 2 3\n 0 f 1 2 3 4 5\n 0 f 3 4 5 6 7\n 0 f 5 6 7 8 9\n\u00af2 f 7 8 9 0 0\n\u235d        \u2191 middle\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/stencil/#even-rectangle-size","title":"Even Rectangle Size","text":"<p>For even rectangle sizes, the \"middle\" consists of two elements which are moved according to the movement parameter (equal to 1 in these examples).</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/stencil/#examples_1","title":"Examples","text":"<pre><code>      \u2395\u2190s\u2190{\u2282\u2375}\u233a 2 \u23738\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25021 2\u25022 3\u25023 4\u25024 5\u25025 6\u25026 7\u25027 8\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>      {(\u00af2\u2191\u2355\u237a),' f ',\u2355\u2375}\u233a 2\u23738\n 0 f 1 2\n 0 f 2 3\n 0 f 3 4\n 0 f 4 5\n 0 f 5 6\n 0 f 6 7\n 0 f 7 8\n\u235d    \u2191 \u2191 middle\n</code></pre> <pre><code>      \u2395\u2190s\u2190{\u2282\u2375}\u233a 4\u23738\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020 1 2 3\u25021 2 3 4\u25022 3 4 5\u25023 4 5 6\u25024 5 6 7\u25025 6 7 8\u25026 7 8 0\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2374s\n7\n      {(\u00af2\u2191\u2355\u237a),' f ',\u2355\u2375}\u233a 4\u23738\n 1 f 0 1 2 3\n 0 f 1 2 3 4\n 0 f 2 3 4 5\n 0 f 3 4 5 6\n 0 f 4 5 6 7\n 0 f 5 6 7 8\n\u00af1 f 6 7 8 0\n\u235d      \u2191 \u2191 middle\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/stencil/#examples-even-rectangle-movement-not-1","title":"Examples (even rectangle, movement not 1)","text":"<pre><code>      {\u2282\u2375}\u233a(\u236a4 2) \u23738\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020 1 2 3\u25022 3 4 5\u25024 5 6 7\u25026 7 8 0\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      {(\u00af2\u2191\u2355\u237a),' f ',\u2355\u2375}\u233a(\u236a4 2) \u23738\n 1 f 0 1 2 3\n 0 f 2 3 4 5\n 0 f 4 5 6 7\n\u00af1 f 6 7 8 0\n\u235d      \u2191 \u2191 middle\n\n</code></pre> <pre><code>      {\u2282\u2375}\u233a(\u236a6 2) \u23738\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020 0 1 2 3 4\u25021 2 3 4 5 6\u25023 4 5 6 7 8\u25025 6 7 8 0 0\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      {(\u2355\u237a),' f ',\u2355\u2375}\u233a(\u236a6 2) \u23738\n2 f 0 0 1 2 3 4 \n0 f 1 2 3 4 5 6 \n0 f 3 4 5 6 7 8 \n\u00af2 f 5 6 7 8 0 0\n\u235d        \u2191 \u2191 middle\n\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/variant/","title":"Variant","text":"Variant {R}\u2190{X}(f\u2360B)Y <p>Classic Edition:  the symbol <code>\u2360</code> is not available in Classic Edition, and the Variant operator is instead represented by <code>\u2395U2360</code>. Note too that <code>\u2360</code> and <code>\u2395OPT</code> are synonymous though only the latter is available in the Classic Edition.</p> <p>The Variant operator <code>\u2360</code> specifies the value of an option to be used by its left operand function <code>f</code>. An option is a named property of a function whose value in some way affects the operation of that function.</p> <p>For example, the Search and Replace operators include options named <code>IC</code> and <code>Mode</code> which respectively determine whether or not case is ignored and in what manner the input document is processed.</p> <p>One of the set of options may be designated as the Principal option whose value may be set using a short-cut form of syntax as described below. For example, the Principal option for the Search and Replace operators is <code>IC</code>.</p> <p>For the operand function with right argument <code>Y</code> and optional left argument <code>X</code>, the right operand <code>B</code> specifies the values of one or more options that are applicable to that function. If <code>B</code> is empty, function <code>f</code> is called with default options. Otherwise, <code>B</code> may be a scalar, a 2-element vector, or a vector of 2-element vectors which specifies values for one or more options as follows:</p> <ul> <li>If <code>B</code> is a 2-element vector and the first element is a character vector, it specifies an option name in the first element and the option value (which may be any suitable array) in the second element.</li> <li>If <code>B</code> is a vector of 2-element vectors, each item of B is interpreted as above.</li> <li>If <code>B</code> is a scalar (a rank-0 array of any depth), it specifies the value of the Principal option,</li> </ul> <p>Option names and their values must be appropriate for the left operand function, otherwise <code>DOMAIN ERROR</code> (error code 11) will be reported.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/variant/#example","title":"Example","text":"<pre><code>\n       tn\u2190'Dick'(\u2395FCREATE\u2360'Z' 1)0\n</code></pre> <p>The following illustrations and examples apply to functions derived from the Search and Replace operators.</p>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/variant/#examples-of-operand-b","title":"Examples of operand B","text":"<p>The following expression sets the IC option to <code>1</code>, the Mode option to <code>'D'</code> and the EOL option to <code>'LF'</code>.</p> <pre><code>      \u2360('Mode' 'D')('IC' 1)('EOL' 'LF')\n</code></pre> <p>The following expression sets just the EOL option to 'CR'.</p> <pre><code>      \u2360'EOL' 'CR'\n</code></pre> <p>The following expression sets just the Principal option (which for the Search and Replace operators is IC) to 1.</p> <pre><code>      \u2360 1\n</code></pre> <p>The order in which options are specified is typically irrelevant but if the same option is specified more than once, the rightmost one dominates. The following expression sets the option IC to 1:</p> <pre><code>      \u2360('IC' 0) ('IC' 1)\n</code></pre> <p>The Variant operator generates a derived function <code>f\u2360B</code> and may be assigned to a name. The derived function is effectively function <code>f</code> bound with the option values specified by <code>B</code>.</p> <p>The derived function may itself be used as a left operand to Variant to produce a second derived function whose options are further modified by the second application of the operator. The following sets the same options as the first example above:</p> <pre><code>      \u2360'Mode' 'D'\u2360'IC' 1\u2360'EOL' 'LF'\n</code></pre> <p>When the same option is specified more than once in this way, the outermost (rightmost) one dominates. The following expression also sets the option <code>IC</code> to 1:</p> <pre><code>      \u2360'IC' 0\u2360'IC' 1\n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/variant/#further-examples","title":"Further Examples","text":""},{"location":"language-reference-guide/primitive-operators/operators-a-z/variant/#redundancy","title":"Redundancy","text":"<p>A function that has been modified by Variant may be used in a context where the option or options that have been modified are not relevant. This is illustarted by the follwoing example.</p> <p><code>JSON</code> is a character matrix that specifies 2 objects <code>a</code> and <code>b</code>.</p> <pre><code>      JSON\n{                    \n\"a\": \"The answer is\",\n\"b\" : 42             \n}      \u2374JSON\n4 21\n\n</code></pre> <p>It can be imported to a matrix <code>mat</code> ...</p> <pre><code>\n      \u22a2mat\u2190(\u2395JSON\u2360('Format' 'M'))JSON\n\u250c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510\n\u25020\u2502 \u2502             \u25021\u2502\n\u251c\u2500\u253c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502a\u2502The answer is\u25024\u2502\n\u251c\u2500\u253c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502b\u250242           \u25023\u2502\n\u2514\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\n\n</code></pre> <p>This result may be exported</p> <pre><code>      1(\u2395JSON\u2360('Format' 'M')) mat\n{\"a\":\"The answer is\",\"b\":42}\n</code></pre> <p>The ('Compact' 0) variant option delivers a more readable result:</p> <pre><code>\n      1(\u2395JSON\u2360('Format' 'M')('Compact' 0)) mat\n{                      \n  \"a\": \"The answer is\",\n  \"b\": 42              \n}\n</code></pre> <p>A modified version of <code>\u2395JSON</code> ...</p> <pre><code>\n      myJSON\u2190(\u2395JSON\u2360('Format' 'M')('Compact' 0))\n      myJSON\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u2395JSON\u2502\u2360\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502     \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510\u2502\u2502\n\u2502     \u2502 \u2502\u2502\u2502Format\u2502M\u2502\u2502\u2502Compact\u25020\u2502\u2502\u2502\n\u2502     \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\u2502\u2502\n\u2502     \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>... may be used both to import and export, despite the fact that the Compact option applies only to JSON export. In the context of JSON import it is redundant and ignored.</p> <pre><code>       \u22a2mat\u2190 myJSON JSON\n\u250c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510\n\u25020\u2502 \u2502             \u25021\u2502\n\u251c\u2500\u253c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502a\u2502The answer is\u25024\u2502\n\u251c\u2500\u253c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502b\u250242           \u25023\u2502\n\u2514\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\n      1 myJSON mat\n{                      \n  \"a\": \"The answer is\",\n  \"b\": 42              \n}                      \n</code></pre>"},{"location":"language-reference-guide/primitive-operators/operators-a-z/variant/#variant-and-net","title":"Variant and .NET","text":"<p>The Variant operator may also be used in conjunction with .NET classes; it can used to cast an array into a specific .NET data type, and to specify which constructor should be used when creating a new instance of a .NET class which has overloaded constructors. For further information, see Advanced TechniquesAdvanced Techniques on page 1.</p>"},{"location":"language-reference-guide/symbols/brackets/","title":"Brackets","text":"Brackets ()[]{}"},{"location":"language-reference-guide/symbols/brackets/#round-parentheses","title":"Round Parentheses","text":"<p>Round brackets or parentheses are used in APL expressions to control the order of execution.  They are also used in function/operator headers to indicate Namelists.  A right parenthesis is also used to introduce a System Command.</p>"},{"location":"language-reference-guide/symbols/brackets/#square-brackets","title":"Square Brackets","text":"<p>Square brackets have three distinct meanings in Dyalog APL. They are used to select sub-arrays from an n-dimensional array and to indicate an axis along which a function (operand) is to apply. See Bracket Indexing and Bracket Axis Operator. A right bracket is also used to introduce a User Command.</p>"},{"location":"language-reference-guide/symbols/brackets/#curly-brackets","title":"Curly Brackets","text":"<p>Curly brackets have three distinct meanings in Dyalog APL. They are used to indicate shy results and optional left arguments in defined functions. They are also used to enclose the definition of a dfn and a dop. See Model Syntax and Dfns &amp; Dops.</p>"},{"location":"language-reference-guide/symbols/language-elements/","title":"Language Elements","text":"<p>Primitive Functions</p> <p>| <code>+</code> | <code>-</code> | <code>\u00d7</code> | <code>\u00f7</code> | <code>|</code> | <code>\u2308</code> | <code>\u230a</code> | <code>*</code> | <code>\u235f</code> | <code>|</code> | | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | | <code>\u25cb</code> | <code>!</code> | <code>?</code> | <code>~</code> | <code>\u2227</code> | <code>\u2228</code> | <code>\u2372</code> | <code>\u2371</code> | <code>|</code> | <code>| | `&lt;` | `\u2264` | `=` | `&gt;` | `\u2265` | `\u2260` | `\u2261` | `\u2262` |</code> | <code>|</code> | | <code>\u2374</code> | <code>,</code> | <code>\u236a</code> | <code>\u233d</code> | <code>\u2296</code> | <code>\u2349</code> | <code>\u2191</code> | <code>\u2193</code> | <code>|</code> | <code>| | `\u2282` | `\u2286` | `\u2283` | `\u220a` | `\u2377` | `/` | `\u233f` | `\\` | `\u2340` |</code> | <code>| | `\u2229` | `\u222a` | `\u2373` | `\u2378` | `\u2337` | `\u234b` | `\u2352` | `\u234e` | `\u2355` | `\u22a5` | `\u22a4` | | `\u22a3` | `\u22a2` | `\u2339` | `\u236c` | `\u2192` | `\u2190` |</code> | <code>|</code> | <code>|</code> |</p> <p>Primitive Operators</p> <code>\u00a8</code> <code>\u2368</code> <code>\u2218</code> <code>.</code> <code>\u2218.</code> <code>/</code> <code>\u233f</code> <code>\\</code> <code>\u2340</code> <code>\u2363</code> <code>&amp;</code> <code>\u2336</code> <code>\u2360</code> <code>\u2338</code> <code>\u233a</code> <code>\u2364</code> <code>\u2365</code> <code>@</code> <p>Other Language Elements</p> Brackets Special Syntax Variables Namespaces Defined Fns &amp; Ops Dynamic Fns &amp;  Ops MultiThreading Object Oriented  Programming Control Structures Triggers System Functions System Commands Error Messages"},{"location":"language-reference-guide/symbols/special-symbols/","title":"Special Symbols","text":"Hash is a namespace identifier. # Root Alpha identifies left arguments of dfns/dops. <code>\u237a</code>  Left Argument Omega identifies right arguments of dfns/dops. <code>\u2375</code> Right Argument Del is used for self-reference in dfns/dops (as well  as for the traditional APL Line Editor). <code>\u2207</code> Function Self Quotation marks are used to surround character strings. <code>'</code> APL Quote Diamond character is used to separate APL statements on one line. <code>\u22c4</code> Statement Separator Lamp symbol is used to identify following comments. <code>\u235d</code> Comment Symbol Colon is used to indicate end of line label or start of control word. It is also used in dfns and dops to separate the test from the expression in a Guard and Error Guard (two colons). : End of Label Boolean: Expression Semicolon is used to separate index selection arrays in simple  indexing, and to separate local names in the header of dfns/dops. ; Index Separator High Minus or Overbar is used to indicate that a number is negative. <code>\u00af</code> Negative"},{"location":"language-reference-guide/system-commands/introduction/","title":"Introduction","text":"<p>System commands are not executable APL expressions.  They provide services or information associated with the workspace and the external environment.</p>"},{"location":"language-reference-guide/system-commands/introduction/#command-presentation","title":"Command Presentation","text":"<p>System commands may be entered from immediate execution mode or in response to the prompt <code>\u2395</code>: within evaluated input.  All system commands begin with the symbol <code>)</code>, known as a right parenthesis.  All system commands may be entered in upper or lower case.</p> <p>Each command is described in alphabetical order in this chapter.</p> <p>System Commands</p> Command Description <code>)CLASSES</code> List classes <code>)CLEAR</code> Clear the workspace <code>)CMD Y</code> Execute a Windows Command <code>)CONTINUE</code> Save a Continue workspace and terminate APL <code>)COPY {Y}</code> Copy objects from another workspace <code>)CS {Y}</code> Change current namespace <code>)DROP {Y}</code> Drop named workspace <code>)ED Y</code> Edit object(s) <code>)ERASE Y</code> Erase object(s) <code>)EVENTS</code> List events of GUI namespace or object <code>)FNS {Y}</code> List user defined Functions <code>)HOLDS</code> Display Held tokens <code>)LIB {Y}</code> List workspaces in a directory <code>)LOAD {Y}</code> Load a workspace <code>)METHODS</code> List methods in GUI namespace or object <code>)NS {Y}</code> Create a global Namespace <code>)OBJECTS {Y}</code> List global namespaces <code>)OBS {Y}</code> List global namespaces (alternative form) <code>)OFF</code> Terminate the APL session <code>)OPS {Y}</code> List user defined Operators <code>)PCOPY {Y}</code> Perform Protected Copy of objects <code>)PROPS</code> List properties of GUI namespace or object <code>)RESET</code> Reset the state indicator <code>)SAVE {Y}</code> Save the workspace <code>)SH {Y}</code> Execute a (UNIX) Shell command <code>)SI</code> State Indicator <code>)SIC</code> Clear State Indicator <code>)SINL</code> State Indicator with local Name Lists <code>)TID {Y}</code> Switch current Thread Identity <code>)VARS {Y}</code> List user defined global Variables <code>) WSID {Y}</code> Workspace Identification <code>)XLOAD Y</code> Load a workspace; do not execute <code>\u2395LX</code> <code>{ }</code> indicates that the parameter(s) denoted by <code>Y</code> are optional."},{"location":"language-reference-guide/system-commands/introduction/#system-commands-a-z","title":"System Commands (A-Z)","text":"<p>The remainder of this chapter describes the system commands one-by-one in alphabetical order.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/classes/","title":"List Classes","text":"List Classes )CLASSES <p>This command lists the names of APL Classes in the active workspace.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/classes/#example","title":"Example:","text":"<pre><code>      )CLEAR\nclear ws\n      )ED \u25cbMyClass\n\n:Class MyClass\n    \u2207 Make Name\n      :Implements Constructor\n      \u2395DF Name\n    \u2207\n:EndClass \u235d MyClass\n\n      )CLASSES\nMyClass\n      )COPY OO YourClass\n.\\OO saved Sun Jan 29 18:32:03 2006\n      )CLASSES\nMyClass YourClass\n      \u2395NC 'MyClass' 'YourClass'\n9.4 9.4\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/clear/","title":"Clear Workspace","text":"Clear Workspace )CLEAR <p>This command clears the active workspace and gives the report \"<code>clear ws\"</code>.  The active workspace is lost.  The name of a clear workspace is <code>CLEAR WS</code>.  System variables are initialised with their default values as described in \"System Variables\" on page 1.</p> <p>In GUI implementations of Dyalog APL, <code>)CLEAR</code> expunges all GUI objects, discards any unprocessed events in the event queue and resets the properties of the <code>Root</code> object  <code>'.'</code>  to their default values.</p> <p>Apart from .NET objects, the contents of the session namespace <code>\u2395SE</code> are not affected. .NET objects in <code>\u2395SE</code> are disconnected from .NET because <code>)CLEAR</code> closes the current .NET AppDomain.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/cmd/","title":"Windows Command Processor","text":"Windows Command Processor )CMD cmd <p>This command allows Windows Command Processor or UNIX shell commands to be given from APL.  <code>)CMD</code> is a synonym of <code>)SH</code>.  Either command may be given in either environment (Windows or UNIX) with exactly the same effect.  <code>)CMD</code> is probably more natural for the Windows user.  This section describes the behaviour of <code>)CMD</code> and <code>)SH</code> under Windows.  See \"Execute (UNIX) Command: \" on page 1 for a discussion of the behaviour of these commands under UNIX.</p> <p>Note that under Windows, you may not execute <code>)CMD</code> without a command.  If you wish to, you can easily open a new Command Prompt window outside APL.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/cmd/#example","title":"Example","text":"<pre><code>     )cmd dir\n Volume in drive C is OS\n Volume Serial Number is B438-9B76\n\n Directory of C:\\Users\\Pete\\Documents\\Dyalog APL-64 17.0 Unicode Files\n\n23/06/2018  15:59    &lt;DIR&gt;          .\n23/06/2018  15:59    &lt;DIR&gt;          ..\n23/06/2018  14:53           181,488 default.dlf\n13/06/2018  20:13         1,262,296 def_uk.dse\n14/06/2018  14:36           108,976 UserCommand20.cache\n               3 File(s)      1,552,760 bytes\n               2 Dir(s)  101,371,437,056 bytes free\n\n</code></pre> <p>If cmd issues prompts and expects user input, it is ESSENTIAL to explicitly redirect input and output to the console.  If this is done, APL detects the presence of a \"<code>&gt;</code>\" in the command line and runs the command processor in a visible window and does not direct output to the pipe.  If you fail to do this your system will appear to hang because there is no mechanism for you to receive or respond to the prompt.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/cmd/#example_1","title":"Example","text":"<pre><code>      )CMD DATE &lt;CON &gt;CON\n</code></pre> <p>(Command Prompt window appears) Current date is Wed 19-07-1995Enter new date (dd-mm-yy): 20-07-95</p> <p>(Command Prompt window disappears)</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/cmd/#implementation-notes","title":"Implementation Notes","text":"<p>The argument of )<code>CMD</code> is simply passed to the appropriate command processor for execution and its output is received using an unnamed pipe.</p> <p>By default, <code>)CMD</code> will execute the string <code>('cmd.exe /c',Y)</code> where <code>Y</code> is the argument given to <code>)CMD</code>.  However, the implementation permits the use of alternative command processors as follows:</p> <p>Before execution, the argument is prefixed and postfixed with strings defined by the APL parameters CMD_PREFIX and CMD_POSTFIX. The former specifies the name of your command processor and any parameters that it requires. The latter specifies a string which may be required. If CMD_PREFIX is not defined, it defaults to the name defined by the environment variable COMSPEC followed by \"\\c\".  If COMSPEC is not defined, it defaults to COMMAND.COM or CMD.EXE as appropriate. If CMD_POSTFIX is not defined, it defaults to an empty vector.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/continue/","title":"Save Continuation","text":"Save Continuation )CONTINUE <p>This command saves the active workspace in the current working directory and ends the Dyalog APL session. The name of the workspace file is CONTINUE in upper-case with the extension defined by the WSEXT parameter. See Configuration Parameters.</p> <p>Note that the values of all system variables (including <code>\u2395SM</code>) and GUI objects are also saved in <code>CONTINUE</code>.</p> <p>When a <code>CONTINUE</code> workspace is loaded, the latent expression (if any) is NOT executed.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/copy/","title":"Copy Workspace","text":"Copy Workspace )COPY {ws {nms}} <p>This command brings all or selected global objects <code>nms</code> from a stored workspace (or session file) with the given name.  A stored workspace is one which has previously been saved with the system command <code>)SAVE</code> or the system function <code>\u2395SAVE</code>.</p> <p>If the list of names is excluded, all defined objects (including namespaces) are copied.</p> <p>If the workspace name identifies a valid, readable workspace, the system reports the workspace name, \"<code>saved</code>\" and the date and time when the workspace was last saved.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/copy/#examples","title":"Examples","text":"<pre><code>      )COPY WS/UTILITY\nWS/UTILITY saved Mon Nov  1 13:11:19 1992\n\n      )COPY TEMP \u2395LX FOO X A.B.C\n./TEMP saved Mon Nov  1 14:20:47 1992\nnot found X\n</code></pre> <p>Copied objects are defined at the global level in the active workspace.  Existing global objects in the active workspace with the same name as a copied object are replaced.  If the copied object replaces either a function in the state indicator, or an object that is an operand of an operator in the state indicator, or a function whose left argument is being executed, the original object remains defined until its execution is completed or it is no longer referenced by an operator in the state indicator.  If the workspace name is not valid or does not exist or if access to the workspace is not authorised, the system reports <code>ws not found</code>.</p> <p>You may copy an object from a namespace by specifying its full pathname.  The object will be copied to the current namespace in the active workspace, losing its original parent and gaining a new one in the process.  You may only copy a GUI object into a namespace that is a suitable parent for that object.  For example, you could only copy a Group object from a saved workspace if the current namespace in the active workspace is itself a Form, SubForm or Group.</p> <p>If the workspace name identifies a file that is not a workspace, the system reports <code>bad ws</code>.</p> <p>If the source workspace is too large to be loaded, the system reports <code>ws too large</code>.</p> <p>When copying data between Classic and Unicode Editions, <code>)COPY</code> will fail with <code>TRANSLATION ERROR</code> if any object in the source workspace fails conversion between Unicode and <code>\u2395AV</code> indices, whether or not that object is specified by <code>nms</code>. See \"Atomic Vector - Unicode: \" on page 1 for further details.</p> <p>If \"<code>ws</code>\" is omitted, the file open dialog box is displayed and all objects copied from the selected workspace.</p> <p>If the list of names is included, the names of system variables may also be included and copied into the active workspace.  The global referents will be copied.</p> <p>If an object is not found in the stored workspace, the system reports <code>not found</code> followed by the name of the object.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/copy/#dependent-objects","title":"Dependent Objects","text":"<p>If the list of names includes the name of:</p> <ul> <li>an Instance of a Class but not the Class itself</li> <li>a Class but not a Class upon which it depends</li> <li>an array or a namespace that contains a ref to another namespace, but not the namespace to which it refers</li> </ul> <p>the dependent object(s) will also be copied but will be unnamed and hidden. In such as case, the system will issue a warning message.</p> <p>For example, if a saved workspace named CFWS contains a Class named <code>#.CompFile</code> and an Instance (of <code>CompFile</code>) named <code>icf</code>,</p> <pre><code>      )COPY CFWS icf\n.\\CFWS saved Fri Mar 03 10:21:36 2006\ncopied object created an unnamed copy of class #.CompFile\n</code></pre> <p>The existence of a hidden copy can be confusing, especially if it is a hidden copy of an object which had a name which is in use in the current workspace. In the above example, if there is a class called <code>CompFile</code> in the workspace into which <code>icf</code> is copied, the copied instance may appear to be an instance of the visible<code>CompFile</code>, but it will actually be an instance of the hidden <code>CompFile</code> - which may have very different (or perhaps worse: very slightly different) characteristics to the named version.</p> <p>If you copy a Class without copying its Base Class, the Class can be used (it will use the invisible copy of the Base Class), but if you edit the Class, you will either be unable to save it because the editor cannot find the Base Class, or - if there is a visible Class of that name in the workspace - it will be used as the Base Class.</p> <p>In the latter case, the invisible copy which was brought in by <code>)COPY</code> will now disappear, since there are no longer any references to it - and if these two Base Classes were different, the behaviour of the derived Class will change (and any changes made to the invisible Base Class since it was copied will be lost).</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/copy/#referenced-objects","title":"Referenced Objects","text":"<p>If you copy a Class or a namespace that is referenced by a Class as its Base Class or via a <code>:Include</code> statement, the referring Class will continue to refer to the original definition of the copied name which will be retained for that purpose. The Class can be made to refer to the copied definition of that name by refixing it.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/copy/#example","title":"Example","text":"<p>The current workspace has a class named <code>pete</code> whose Base class is called <code>base</code>.</p> <pre><code>:Class pete: base\n:EndClass\n\n:Class base\n    \u2207 r\u2190foo n\n      :Access Public\n      r\u2190'Original'n\n    \u2207\n:EndClass\n\n</code></pre> <p>A second workspace named copy.dws contains a different version of the <code>base</code> class:</p> <pre><code>:Class base\n    \u2207 r\u2190foo n\n      :Access Public\n      r\u2190'Copied'n\n    \u2207\n:EndClass\n\n      )copy copy.dws base\ncopy.dws saved Thu Nov 22 16:24:27 2018\n      inst\u2190\u2395NEW pete\n      inst.foo 1\nOriginal  1\n\n      \u2395FIX \u2395SRC pete\n      inst\u2190\u2395NEW pete\n      inst.foo 1\nCopied  1\n\n\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/copy/#copying-objects-from-session-files","title":"Copying Objects from Session Files","text":"<p>You may also copy objects from session (.dse) files, although with certain restrictions.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/copy/#example_1","title":"Example:","text":"<pre><code>        )copy C:\\Users\\Pete\\Desktop\\pete.dse \u2395SE.UCMD\nC:\\Users\\Pete\\Desktop\\pete.dse saved Wed Oct 14 ...\n\n</code></pre> <ul> <li>You can copy a function or variable from any namespace under a saved <code>\u2395SE</code>, no matter what your current namespace is.</li> <li>You can copy any namespace without GUI from a saved <code>\u2395SE</code>, no matter what you current namespace is.</li> <li>You can copy any namespace with GUI from a saved <code>\u2395SE</code> as long as your current namespace is the same as the parent namespace of the namespace you are trying to copy</li> </ul>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/copy/#examples_1","title":"Examples:","text":"<p>In the following example, the not copied cases occur because the current namespace is not an appropriate parent for the object in question.</p> <pre><code>      )CS #\n#\n      )copy C:\\Users\\...\\pete.dse \u2395SE.Dyalog.Callbacks\nC:\\Users\\...\\pete.dse saved Wed Oct 14 15:31:14 2015\n\n</code></pre> <pre><code>       )copy C:\\Users\\...\\pete.dse \u2395SE.cbbot\nC:\\Users\\...\\pete.dse saved Wed Oct 14 15:31:14 2015\nnot copied cbbot\n\n</code></pre> <pre><code>       )CS \u2395SE\n\u2395SE\n      )copy C:\\Users\\...\\pete.dse \u2395SE.cbbot\nC:\\Users\\...\\pete.dse saved Wed Oct 14 15:31:14 2015\n\n      )copy C:\\Users\\...\\pete.dse \u2395SE.cbbot.bandsb1\nC:\\Users\\...\\pete.dse saved Wed Oct 14 15:31:14 2015\nnot copied bandsb1\n\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/cs/","title":"Change Space","text":"Change Space )CS {nm} <p><code>)CS</code> changes the current space to the global namespace <code>nm</code>.</p> <p>If no <code>nm</code> is given, the system changes to the top level (Root) namespace. If <code>nm</code> is not the name of a global namespace, the system reports the error message <code>Namespace does not exist</code>.</p> <p><code>name</code> may be either a simple name or a compound name separated by '<code>.</code>', including one of the special names <code>'#'</code> (Root) or <code>'##'</code> (Parent).</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/cs/#examples","title":"Examples","text":"<pre><code>      )CS\n#\n      )CS X\n#.X\n      )CS Y.Z\n#.X.Y.Z\n      )CS ##\n#.X.Y\n      )CS #.UTIL\n#.UTIL\n\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/drop/","title":"Drop Workspace","text":"Drop Workspace )DROP {ws} <p>This command removes the specified workspace from disk storage.</p> <p>If <code>ws</code> is omitted, a file open dialog box is displayed to elicit the workspace name.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/drop/#example","title":"Example","text":"<pre><code>      )DROP WS/TEMP\nThu Sep 17 10:32:18 1998\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/ed/","title":"Edit Object","text":"Edit Object )ED nms <p><code>)ED</code> invokes the Dyalog APL editor and opens an Edit window for each of the objects specified in <code>nms</code>.</p> <p>If a name includes the slash character  (\"\\\" or \"/\") it is taken to be the name of a file. See Editing Scripts and Text Files on page 1Editing Scripts and Text Files.</p> <p>If a name is followed by a line number specified in square brackets, the Editor positions the cursor in the corresponding line. There must not be a space between the last character of the name and the \"[\".</p> <p>If a name specifies a new symbol it is taken to be a function or operator.  However, if a name is localised in a suspended function or operator but is otherwise undefined, it is assumed to be a vector of character vectors.</p> <p>The type of a new object may be specified explicitly by preceding its name with an appropriate symbol as follows:</p> <code>\u2207</code> function or operator <code>\u2192</code> simple character vector <code>\u220a</code> vector of character vectors <code>-</code> character matrix <code>\u235f</code> Namespace script <code>\u25cb</code> Class script <code>\u2218</code> Interface <p>The first object named becomes the top window on the stack.  See the Dyalog for Microsoft Windows UI Guide or the Dyalog for UNIX UI Guide for details.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/ed/#examples","title":"Examples","text":"<pre><code>\n      )ED MYFUNCTION\n\n      )ED MYFUNCTION[1000] YOURFUNCTION[3]\n\n      )ED \u2207FOO -MAT \u220aVECVEC\n\n</code></pre> <p>Objects specified in <code>nms</code> that cannot be edited are silently ignored. Objects qualified with a namespace path  (e.g.<code>a.b.c.foo</code>) are silently ignored if the namespace does not exist.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/erase/","title":"Erase Object","text":"Erase Object )ERASE nms <p>This command erases named global defined objects (functions, operators, variables, namespaces and GUI objects) from the active workspace or current namespace.</p> <p>If a named object is a function or operator in the state indicator, or the object is an operand of an operator in the state indicator, or the object is a function whose left argument is being executed, the object remains defined until its execution is completed or it is no longer referenced by an operator in the state indicator.  However, the name is available immediately for other uses.</p> <p>If a named object is a GUI object, the object and all its children are deleted and removed from the screen.</p> <p>If an object is not erased for any reason, the system reports  <code>not found</code>  followed by the name of the object.</p> <p>Erasing objects such as external functions may have other implications: see \"Expunge Object: \" on page 1 for details.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/erase/#example","title":"Example","text":"<pre><code>      )ERASE FOO A \u2395IO\nnot found \u2395IO\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/events/","title":"List Events","text":"List Events )EVENTS <p>The <code>)EVENTS</code> system command lists the Events that may be generated by the object associated with the current space.</p> <p>For example:</p> <pre><code>      \u2395CS 'BB' \u2395WC 'BrowseBox' \n\n      )EVENTS\nClose   Create  FileBoxCancel   FileBoxOK\n</code></pre> <p><code>)EVENTS</code> produces no output when executed in a pure (non-GUI) namespace, for example:</p> <pre><code>      \u2395CS 'X' \u2395NS ''\n      )EVENTS\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/fns/","title":"List Global Defined Functions","text":"List Global Defined Functions )FNS {nm} <p>This command displays the names of global defined functions in the active workspace or current namespace.  Names are displayed in <code>\u2395AV</code> collation order.  If a name is included after the command, only those names starting at or after the given name in collation order are displayed.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/fns/#examples","title":"Examples","text":"<pre><code>      )FNS\nASK DISPLAY GET PUT ZILCH\n      )FNS G\nGET PUT ZILCH\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/holds/","title":"Display Held Tokens","text":"Display Held Tokens )HOLDS <p>System command <code>)HOLDS</code> displays a list of tokens which have been acquired or requested by the <code>:Hold</code> control structure.</p> <p>Each line of the display is of the form:</p> <pre><code>token:  acq  req  req ...\n</code></pre> <p>Where <code>acq</code> is the number of the thread that has acquired the token, and <code>req</code> is the number of a thread which is requesting it. For a token to appear in the display, a thread (and only one thread) must have acquired it, whereas any number of threads can be requesting it.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/holds/#example","title":"Example","text":"<p>Thread <code>300</code>\u2019s attempt to acquire token <code>'blue'</code> results in a deadlock:</p> <pre><code>300:DEADLOCK\nSema4[1] :Hold 'blue'\n        ^\n\n      )HOLDS\nblue:   100\ngreen:  200     100\nred:    300     200     100\n\n</code></pre> <ul> <li><code>Blue</code> has been acquired by thread <code>100</code>.</li> <li><code>Green</code> has been acquired by <code>200</code> and requested by <code>100</code>.</li> <li><code>Red</code> has been acquired by <code>300</code> and requested by <code>200</code> and <code>100</code>.</li> </ul> <p>The following cycle of dependencies has caused the deadlock:</p> <pre><code>Thread 300 attempts to acquire blue,      300 \u2192 blue\nwhich is owned by 100,                     \u2191      \u2193\nwhich is waiting for red,                 red \u2190  100\nwhich is owned by 300.\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/lib/","title":"List Workspace Library","text":"List Workspace Library )LIB {dir} <p>This command lists the names of Dyalog APL workspaces contained in the given directory.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/lib/#example","title":"Example","text":"<pre><code>      )LIB WS\nMYWORK TEMP\n</code></pre> <p>If a directory is not given, the workspaces on the user's APL workspace path (WSPATH) are listed.  In this case, the listing is divided into sections identifying the directories concerned.  The current directory is identified as \"<code>.</code>\".</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/lib/#example_1","title":"Example","text":"<pre><code>      )LIB\n.\n        PDTEMP  WORK   GRAPHICS\n</code></pre> <pre><code>c:\\Dyalog\\ws\n        display groups\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/load/","title":"Load Workspace","text":"Load Workspace )LOAD {ws} <p>This command causes the named stored workspace to be loaded.  The current active workspace is lost.</p> <p><code>ws</code> specifies a file name. If no file extension is given, it is implied. See WSEXT configuration parameterWSEXT on page 1.</p> <p>If <code>ws</code> is a full or relative pathname, only the specified directory is examined.  If not, the APL workspace path (WSPATH) is traversed in search of the named workspace.  A stored workspace is one which has previously been saved with the system command <code>)SAVE</code> or the system function <code>\u2395SAVE</code>.  Under Windows, if <code>ws</code> is omitted, the File Open dialog box is displayed.</p> <p>If the workspace name is not valid or does not exist or if access to the workspace is not authorised, the system reports <code>ws not found</code>.  If the workspace name identifies a file or directory that is not a workspace, the system reports  <code>wsname is not a ws</code>.  If successfully loaded, the system reports workspace name <code>saved</code>, followed by the date and time when the workspace was last saved.  If the workspace is too large to be loaded into the APL session, the system reports <code>ws too large</code>.  After loading the workspace, the current namespace is set to <code>#</code> and the latent expression (<code>\u2395LX</code>) is executed unless APL was invoked with the -x option. If the workspace was saved with a suspension, typing the expression <code>\u21921+\u2395lc</code> will resume execution and switch back into the namespace associated with the suspended function.</p> <p>If the workspace contains any GUI objects whose <code>Visible</code> property is 1, these objects will be displayed.  If the workspace contains a non-empty <code>\u2395SM</code> but does not contain an SM GUI object, the form defined by <code>\u2395SM</code> will be displayed in a window on the screen.</p> <p>Holding the Ctrl key down while entering a <code>)LOAD</code> command or selecting a workspace from the session file menu causes the incoming latent expression to be traced.</p> <p>Holding the Shift key down while selecting a workspace from the session file menu will prevent execution of the latent expression.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/load/#example","title":"Example","text":"<pre><code>\n      )load dfns\nC:\\Program Files\\Dyalog\\Dyalog APL-64 ...\n\nAn assortment of D Functions and Operators.\n\n      tree #                \u235d Workspace map.\n      \u2191\u00af10\u2191\u2193attrib \u2395nl 3 4  \u235d What's new?\n      notes find 'Word'     \u235d Apropos \"Word\".\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/methods/","title":"List Methods","text":"List Methods )METHODS <p>The <code>)METHODS</code> system command lists the Methods that apply to the object associated with the current space.</p> <p>For example:</p> <pre><code>      \u2395CS 'F' \u2395WC 'Form'\n      )METHODS\nAnimate ChooseFont   Detach  GetFocus    GetTextSize Wait\n</code></pre> <p><code>)METHODS</code> produces no output when executed in a pure (non-GUI) namespace, for example:</p> <pre><code>      \u2395CS 'X' \u2395NS ''\n      )METHODS\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/ns/","title":"Create Namespace","text":"Create Namespace )NS {nm} <p><code>)NS</code> creates a global namespace and displays its full name, <code>nm</code>.</p> <p><code>nm</code> may be either a simple name or a compound name separated by <code>'.'</code>, including one of the special names <code>'#'</code> (Root) or <code>'##'</code> (Parent).</p> <p>If <code>name</code> does not start with the special Root space identifier <code>'#'</code>, the new namespace is created relative to the current one.</p> <p>If <code>name</code> is already in use for a workspace object other than a namespace, the command fails and displays the error message <code>Name already exists</code>.</p> <p>If <code>name</code> is an existing namespace, no change occurs.</p> <p><code>)NS</code> with no <code>nm</code> specification displays the current namespace.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/ns/#examples","title":"Examples","text":"<pre><code>      )NS\n#\n\n      )NS W.X\n#.W.X\n\n      )CS W.X\n#.W.X\n\n      )NS Y.Z\n#.W.X.Y.Z\n\n      )NS\n#.W.X\n\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/objects/","title":"List Global Namespaces","text":"List Global Namespaces )OBJECTS {nm} <p>This command displays the names of global namespaces in the active workspace.  Names are displayed in the <code>\u2395AV</code> collating order.  If a name is included after the command, only those names starting at or after the given name in collating order are displayed.  Namespaces are objects created using <code>\u2395NS</code>, <code>)NS</code> or <code>\u2395WC</code> and have name class 9.</p> <p>Note:  <code>)OBS</code> can be used as an alternative to <code>)OBJECTS</code></p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/objects/#examples","title":"Examples","text":"<pre><code>      )OBJECTS\nFORM1   UTIL    WSDOC   XREF\n\n      )OBS W\nWSDOC   XREF\n\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/obs/","title":"List Global Namespaces","text":"List Global Namespaces )OBS {nm} <p>This command is the same as the<code>)OBJECTS</code> command. See \"List Global Namespaces: \" on page 1</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/off/","title":"Sign Off APL","text":"Sign Off APL )OFF <p>This command terminates the APL session, returning to the Operating System command processor or shell.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/ops/","title":"List Global Defined Operators","text":"List Global Defined Operators )OPS {nm} <p>This command displays the names of global defined operators in the active workspace or current namespace.  Names are displayed in <code>\u2395AV</code> collation order.  If a name is included after the command, only those names starting at or after the given name in collation order are displayed.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/ops/#examples","title":"Examples","text":"<pre><code>      )OPS\nAND DOIF DUAL ELSE POWER\n\n      )OPS E\nELSE POWER\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/pcopy/","title":"Protected Copy","text":"Protected Copy )PCOPY {ws {nms}} <p>This command brings all or selected global objects from a stored workspace with the given name provided that there is no existing global usage of the name in the active workspace.  A stored workspace is one which has previously been saved with the system command <code>)SAVE</code> or the system function <code>\u2395SAVE</code>.</p> <p><code>)PCOPY</code> does not copy <code>\u2395SM</code>.  This restriction may be removed in a later release.</p> <p>If the workspace name is not valid or does not exist or if access to the workspace is not authorised, the system reports \"<code>ws not found</code>\".  If the workspace name identifies a file that is not a workspace, or is a workspace with an invalid version number (one that is greater than the version of the current APL) the system reports \"<code>bad ws</code>\".</p> <p>If the workspace name is the name of a valid, readable workspace, the system reports the workspace name, \"<code>saved</code>\", and the date and time that the workspace was last saved.</p> <p>If the list of names is excluded, all global defined objects (functions and variables) are copied.  If an object is not found in the stored workspace, the system reports \"<code>not found</code>\" followed by the name of the object. If an object cannot be copied into the active workspace because there is an existing referent, the system reports \"<code>not copied</code>\" followed by the name of the object.</p> <p>For further information, see \"Copy Workspace: \" on page 1.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/pcopy/#examples","title":"Examples","text":"<pre><code>      )PCOPY WS/UTILITY\nWS/UTILITY saved Mon Nov  1 13:11:19 1993\nnot copied COPIED IF\nnot copied COPIED JOIN\n\n      )PCOPY TEMP FOO X\n./TEMP saved Mon Nov  1 14:20:47 1993\nnot found X\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/pcopy/#warning","title":"Warning","text":"<p>If a workspace full condition occurs during the execution of <code>)PCOPY</code> the state of the active workspace is unpredictable.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/props/","title":"List Properties","text":"List Properties )PROPS <p>The <code>)PROPS</code> system command lists the Properties of the object associated with the current space.</p> <p>For example:</p> <pre><code>      \u2395CS 'BB' \u2395WC 'BrowseBox' \n\n      )PROPS\nBrowseFor       Caption ChildList       Data    Event\nEventList       HasEdit KeepOnClose     MethodList\nPropList        StartIn Target  Translate       Type\n</code></pre> <p><code>)PROPS</code> produces no output when executed in a pure (non GUI) namespace, for example:</p> <pre><code>      \u2395CS 'X' \u2395NS ''\n      )PROPS\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/reset/","title":"Reset State Indicator","text":"Reset State Indicator )RESET {n} <p>This command cancels all suspensions recorded in the state indicator and discards any unprocessed events in the event queue.</p> <p>The optional parameter <code>n</code> specifies that only the top <code>n</code> suspensions are to be cleared.</p> <p><code>)RESET</code> also performs an internal re-organisation of the workspace and process memory. See \"Workspace Available: \" on page 1  for details.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/reset/#example","title":"Example","text":"<pre><code>      )SI\n#.FOO[1]*\n\u234e\n#.FOO[1]*\n\n      )RESET\n\n      )SI\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/save/","title":"Save Workspace","text":"Save Workspace )SAVE {-force} {ws} <p>This command compacts (see \"Workspace Available: \" on page 1 for details) and saves the active workspace.</p> <p>If specified, <code>ws</code> is a full or relative path name to the file in which the workspace will be written. If <code>ws</code> is omitted, it defaults to <code>\u2395WSID</code>. Unless the path specified by <code>ws</code> or <code>\u2395WSID</code> is a full pathname, it is taken to be relative to the current working directory which may be obtained by the expression: <code>\u22831 \u2395NPARTS ''</code>.</p> <p>If  <code>ws</code> specifies a file name other than that implied by  <code>\u2395WSID</code>, the specified file must not already exist unless the force parameter is specified.. If <code>ws</code> is omitted or resolves to the same file as  <code>\u2395WSID</code>, an existing stored workspace with the same name will be replaced.</p> <p>If an extension is not specified, an extension is added according to the WSEXT parameter. See Configuration Parameters.</p> <p>A workspace may not be saved if any threads (other than the root thread 0) are running or if there are any Edit or Trace windows open. Otherwise, the workspace is saved with its state of execution intact, however certain operations may be performed before it is saved. For further information, see Set Workspace Save Options on page 1.</p> <p><code>)SAVE</code> may fail with one of the following error messages:</p> <code>unacceptable char</code> The given workspace name was ill-formed <code>not saved this ws is WSID</code> An attempt was made to change the name of the workspace for the save, and the renamed workspace already existed. This error can be overridden by specifying -force . <code>not saved this ws is CLEAR WS</code> The active workspace was <code>CLEAR WS</code> and no attempt was made to change the name. <code>Can't save - file could not be created.</code> The workspace name supplied did not represent a valid file name for the current Operating System. <code>cannot create</code> The user does not have access to create the file OR the workspace name conflicts with an existing non-workspace file. <code>cannot save with windows open</code> A workspace may not be saved if trace or edit windows are open. <p>After a successful save, the system reports the workspace name, followed by the word  \"<code>saved</code>\" and the current time and date; and if <code>ws</code> specified a new name, <code>\u2395WSID</code> is assigned that name.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/save/#example","title":"Example","text":"<pre><code>      )SAVE MYWORK\n./MYWORK saved Thu Sep 17 10:32:20 1998\n</code></pre> <p>Note that any time prior to executing <code>)SAVE</code>, the active workspace may be renamed by the system command <code>)WSID</code> or by assigning a name to the system variable <code>\u2395WSID</code>.</p> <p>A stored workspace may subsequently be loaded with the system command <code>)LOAD</code> or the system function <code>\u2395LOAD</code>, and objects may be copied from a stored workspace with the system commands <code>)COPY</code> or <code>)PCOPY</code> or the system function <code>\u2395CY</code>.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/sh/","title":"Execute (UNIX) Command","text":"Execute (UNIX) Command )SH {cmd} <p>This command allows WINDOWS or UNIX shell commands to be given from APL.  <code>)SH</code> is a synonym of <code>)CMD</code>. Either command may be given in either environment (Windows or UNIX) with exactly the same effect.  <code>)SH</code> is probably more natural for the UNIX user. This section describes the behaviour of <code>)SH</code> and <code>)CMD</code> under UNIX. See \"Windows Command Processor: \" on page 1 for a discussion of their behaviour under Windows.</p> <p><code>)SH</code> allows UNIX shell commands to be given from APL. The argument must be entered in the appropriate case (usually lower-case).  The result of the command, if any, is displayed.</p> <p><code>)SH</code> causes Dyalog APL to invoke the system() library call. The shell which is used to run the command is therefore the shell which system() is defined to call. For example, under AIX this would be /usr/bin/sh.</p> <p>When the shell is closed, control returns to APL. See Dyalog for UNIX UI Guide for further information.</p> <p>The parameters CMD_PREFIX and CMD_POSTFIX may be used to execute a different shell under the shell associated with system().</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/sh/#example","title":"Example","text":"<pre><code>\n      )sh ps -u andys | grep -v ps\n   UID      PID    TTY  TIME CMD\n  6179  9437326  pts/0  0:00 ksh\n  6179 10223736  pts/0  0:00 dyalog\n  6179 10354810  pts/0  0:00 sh\n  6179 10879188  pts/0  0:00 ksh\n  6179 11665660      -  0:00 sshd\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/si/","title":"State Indicator","text":"State Indicator )SI {n} {-tid=tn} <p>This command displays the contents of the state indicator in the active workspace.  The state indicator identifies those operations which are suspended or pendent for each suspension.</p> <p>The optional parameter <code>n</code> specifies that only the first <code>n</code> or last <code>\u00afn</code> lines of the output should be displayed.</p> <p>The optional parameter <code>-tid=tn</code> specifies that the state indicator is to be displayed only for thread number <code>tn</code>.</p> <p>The list consists of a line for each suspended or pendent operation beginning with the most recently suspended function or operator.  Each line may be:</p> <ul> <li>The name of a defined function or operator, followed by the line number at which the operation is halted, and followed by the <code>*</code> symbol if the operation is suspended. The name of the function or operator is its full pathname relative to the root namespace <code>#</code>. For example, <code>#.UTIL.PRINT</code>. In addition, the display of a function or operator which has dynamically changed space away from its origin is prefixed with its current space. For example, <code>[\u2395SE] TRAV</code>.</li> <li>A primitive operator symbol.</li> <li>The Execute function symbol (<code>\u234e</code>).</li> <li>The Evaluated Input symbol (<code>\u2395</code>).</li> <li>The System Function <code>\u2395DQ</code> or <code>\u2395SR</code> (occurs when executing a callback function).</li> </ul>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/si/#examples","title":"Examples","text":"<pre><code>      )SI\n#.PLUS[2]*\n.\n#.MATDIV[4]\n#.FOO[1]*\n\u234e\n</code></pre> <p>This example indicates that at some point function <code>FOO</code> was executed and suspended on line 1. Subsequently, function <code>MATDIV</code> was invoked, with a function derived from the Inner Product or Outer Product operator (<code>.</code>) having defined function <code>PLUS</code> as an operand.</p> <p>In the following, function <code>foo</code> in namespace <code>x</code> has called <code>goo</code> in namespace <code>y</code>. Function<code>goo</code> has then changed space (<code>\u2395CS</code>) to namespace <code>z</code> where it has been suspended:</p> <pre><code>      )SI\n[z] y.goo[2]*\nx.foo[1]\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/si/#threads","title":"Threads","text":"<p>In a multi-threading application, where parent threads spawn child threads, the state indicator assumes the structure of a branching tree. Branches of the tree are represented by indenting lines belonging to child threads. For example:</p> <pre><code>      )SI\n\u00b7   #.Calc[1]\n&amp;5\n\u00b7   \u00b7   #.DivSub[1]\n\u00b7   &amp;7\n\u00b7   \u00b7   #.DivSub[1]\n\u00b7   &amp;6\n\u00b7   #.Div[2]*\n&amp;4\n#.Sub[3]\n#.Main[4]\n</code></pre> <p>Here, <code>Main</code> has called <code>Sub</code>, which has spawned threads <code>4</code> and <code>5</code> with functions: <code>Div</code> and <code>Calc</code>. Function <code>Div</code>, after spawning <code>DivSub</code> in each of threads <code>6</code> and <code>7</code>, has been suspended at line [2].</p> <p>The state indicator for a particular thread <code>tn</code> may be displayed by specifying the parameter <code>-tid=tn</code>.</p> <pre><code>       \u2395\u2190foo&amp;\u00a810 10 10 10\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25029 10 11 12\u2502\n\u2514~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       )si\n\u00b7   #.foo[1]\n&amp;9\n\u00b7   #.foo[1]\n&amp;10\n\u00b7   #.foo[1]\n&amp;11\n\u00b7   #.foo[1]\n&amp;12\n      )si -tid=11\n#.foo[1]\n\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/sic/","title":"Clear State Indicator","text":"Clear State Indicator )SIC <p>This command is a synonym for )RESET. See \"Reset State Indicator: \" on page 1</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/sinl/","title":"State Indicator & Name List","text":"State Indicator &amp; Name List )SINL <p>This command displays the contents of the state indicator together with local names. The display is the same as for <code>)SI</code> (see above) except that a list of local names is appended to each defined function or operator line.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/sinl/#example","title":"Example","text":"<pre><code>      )SINL\n#.PLUS[2]*        B       A       R       DYADIC  END\n.\n#.MATDIV[4]       R       END     I       J       \u2395TRAP\n#.FOO[1]* R\n\u234e\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/tid/","title":"Thread Identity","text":"Thread Identity )TID {tid} <p><code>)TID</code> associates the Session window with the specified thread so that expressions that you subsequently execute in the Session are executed in the context of that thread.</p> <p>If you attempt to <code>)TID</code> to a thread that is paused or running, that thread will, if possible, be interrupted by a strong interrupt. If the thread is in a state which it would be inappropriate to interrupt (for example, if the thread is executing an external function), the system reports:</p> <pre><code>      Can't switch, this thread is n\n</code></pre> <p>If no thread number is given, <code>)TID</code> reports the number of the current thread.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/tid/#examples","title":"Examples","text":"<pre><code>      \u235d State indicator\n      )si\n\u00b7   #.print[1]\n&amp;3\n\u00b7   \u00b7   #.sub_calc[2]*\n\u00b7   &amp;2\n\u00b7   #.calc[1]\n&amp;1\n\n      \u235d Current thread\n      )tid\nis 2\n\n      \u235d Switch suspension to thread 3\n      )tid 3\nwas 2\n\n      \u235d State indicator\n      )si\n\u00b7   #.print[1]*\n&amp;3\n\u00b7   \u00b7   #.sub_calc[2]\n\u00b7   &amp;2\n\u00b7   calc[1]\n&amp;1\n\n      \u235d Attempt to switch to pendent thread 1\n      )tid 1\nCan't switch, this thread is 3\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/vars/","title":"List Global Defined Variables","text":"List Global Defined Variables )VARS {nm} <p>This command displays the names of global defined variables in the active workspace or current namespace.  Names are displayed in <code>\u2395AV</code> collation order.  If a name is included after the command, only those names starting at or after the given name in collation order are displayed.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/vars/#examples","title":"Examples","text":"<pre><code>      )VARS\nA  B  F  TEMP VAR\n\n      )VARS F\nF TEMP VAR\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/wsid/","title":"Workspace Identification","text":"Workspace Identification )WSID {ws} <p>This command displays or sets the name of the active workspace.</p> <p>If a workspace name is not specified, <code>)WSID</code> reports the name of the current active workspace.  The name reported is the full path name, including directory references.</p> <p>If a workspace name is given, the current active workspace is renamed accordingly.  The previous name of the active workspace (excluding directory references) is reported.</p>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/wsid/#examples","title":"Examples","text":"<pre><code>      )LOAD WS/TEMP\nWS/TEMP saved Thu Sep 17 10:32:19 1998\n\n      )WSID\nis WS/TEMP\n\n      )WSID WS/KEEP\nwas WS/TEMP\n\n      )WSID\nWS/KEEP\n</code></pre>"},{"location":"language-reference-guide/system-commands/system-commands-a-z/xload/","title":"Load without Latent Expression","text":"Load without Latent Expression )XLOAD {ws} <p>This command causes the named stored workspace to be loaded.  The current active workspace is lost.</p> <p><code>)XLOAD</code> is identical in effect to <code>)LOAD</code> except that <code>)XLOAD</code> does not cause the expression defined by the latent expression <code>\u2395LX</code> in the saved workspace to be executed.</p>"},{"location":"language-reference-guide/system-functions/introduction/","title":"Introduction","text":"<p>Note that Dyalog may extend any of these facilities by, for example, adding extra elements, rows or columns to a result, so code should take this possibility into account.</p>"},{"location":"language-reference-guide/system-functions/system-variables/","title":"System Variables","text":"<p>System variables retain information used by the system in some way. Many system variables affect the behaviour of primitive functions and operators to which they act asimplicit arguments(see page 1).For further information, see System Settings on page 1.</p> <p>System variables may be localised by inclusion in the header line of a defined function or in the argument list of the system function <code>\u2395SHADOW</code>. When a system variable is localised, it retains its previous value until it is assigned a new one. This feature is known as \"pass-through localisation\".  The exception to this rule is <code>\u2395TRAP</code>.</p> <p>A system variable can never be undefined. Default values are assigned to all system variables in a clear workspace.</p> Name Description Scope <code>\u2395AVU</code> Atomic Vector \u2013 Unicode Namespace <code>\u2395CT</code> Comparison Tolerance Namespace <code>\u2395DCT</code> Decimal Comp Tolerance Namespace <code>\u2395DIV</code> Division Method Namespace <code>\u2395FR</code> Floating-Point Representation Namespace <code>\u2395IO</code> Index Origin Namespace <code>\u2395LX</code> Latent Expression Workspace <code>\u2395ML</code> Migration Level Namespace <code>\u2395PATH</code> Search Path Session <code>\u2395PP</code> Print Precision Namespace <code>\u2395PW</code> Print Width Session <code>\u2395RL</code> Random Link Namespace <code>\u2395RTL</code> Response Time Limit Namespace <code>\u2395SM</code> Screen Map Workspace <code>\u2395TNAME</code> Thread Name Workspace <code>\u2395TRAP</code> Event Trap Workspace <code>\u2395USING</code> Microsoft .NET Search Path Namespace <code>\u2395WSID</code> Workspace ID Workspace <code>\u2395WX</code> Window Expose Namespace <p>In other words,  <code>\u2395PATH</code> and <code>\u2395PW</code> relate to the session.  <code>\u2395LX</code>, <code>\u2395SM</code>, <code>\u2395TRAP</code> and <code>\u2395WSID</code> relate to the active workspace.  All the other system variables relate to the current namespace.</p> Session Workspace Namespace <code>\u2395PATH</code> <code>\u2395LX</code> <code>\u2395AVU</code> <code>\u2395PW</code> <code>\u2395SM</code> <code>\u2395CT</code> `` <code>\u2395TRAP</code> <code>\u2395DCT</code> `` <code>\u2395WSID</code> <code>\u2395DIV</code> <code>|</code> <code>\u2395FR</code> <code>|</code> <code>\u2395IO</code> <code>|</code> <code>\u2395ML</code> <code>|</code> <code>\u2395PP</code> <code>|</code> <code>\u2395RL</code> <code>|</code> <code>\u2395RTL</code> <code>|</code> <code>\u2395USING</code> <code>|</code> <code>\u2395WX</code> <p>Note that the value assigned to a system variable must be appropriate; otherwise an error will be reported immediately.</p>"},{"location":"language-reference-guide/system-functions/system-variables/#example","title":"Example","text":"<pre><code>      \u2395IO\u21903\nDOMAIN ERROR\n      \u2395IO\u21903\n      ^\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-and-variables-colwise/","title":"System Functions and Variables (A-Z)","text":"<code>\u2395A</code> <code>\u2395CT</code> <code>\u2395EXPORT</code> <code>\u2395FRDAC</code> <code>\u2395LOAD</code> <code>\u2395NINFO</code> <code>\u2395NTIE</code> <code>\u2395S</code> <code>\u2395SVQ</code> <code>\u2395TS</code> <code>\u2395AI</code> <code>\u2395CY</code> <code>\u2395FAPPEND</code> <code>\u2395FRDCI</code> <code>\u2395LOCK</code> <code>\u2395NL</code> <code>\u2395NULL</code> <code>\u2395SAVE</code> <code>\u2395SVR</code> <code>\u2395TSYNC</code> <code>\u2395AN</code> <code>\u2395D</code> <code>\u2395FAVAIL</code> <code>\u2395FREAD</code> <code>\u2395LX</code> <code>\u2395NLOCK</code> <code>\u2395NUNTIE</code> <code>\u2395SD</code> <code>\u2395SVS</code> <code>\u2395UCS</code> <code>\u2395ARBIN</code> <code>\u2395DCT</code> <code>\u2395FCHK</code> <code>\u2395FRENAME</code> <code>\u2395MAP</code> <code>\u2395NMOVE</code> <code>\u2395NXLATE</code> <code>\u2395SE</code> <code>\u2395TALLOC</code> <code>\u2395USING</code> <code>\u2395ARBOUT</code> <code>\u2395DF</code> <code>\u2395FCOPY</code> <code>\u2395FREPLACE</code> <code>\u2395MKDIR</code> <code>\u2395NNAMES</code> <code>\u2395OFF</code> <code>\u2395SH</code> <code>\u2395TC</code> <code>\u2395VFI</code> <code>\u2395AT</code> <code>\u2395DIV</code> <code>\u2395FCREATE</code> <code>\u2395FRESIZE</code> <code>\u2395ML</code> <code>\u2395NNUMS</code> <code>\u2395OPT</code> <code>\u2395SHADOW</code> <code>\u2395TCNUMS</code> <code>\u2395VR</code> <code>\u2395ATX</code> <code>\u2395DL</code> <code>\u2395FDROP</code> <code>\u2395FSIZE</code> <code>\u2395MONITOR</code> <code>\u2395NPARTS</code> <code>\u2395OR</code> <code>\u2395SI</code> <code>\u2395TGET</code> <code>\u2395WA</code> <code>\u2395AV</code> <code>\u2395DM</code> <code>\u2395FERASE</code> <code>\u2395FSTAC</code> <code>\u2395NA</code> <code>\u2395NPUT</code> <code>\u2395PATH</code> <code>\u2395SIGNAL</code> <code>\u2395THIS</code> <code>\u2395WC</code> <code>\u2395AVU</code> <code>\u2395DMX</code> <code>\u2395FHIST</code> <code>\u2395FSTIE</code> <code>\u2395NAPPEND</code> <code>\u2395NQ</code> <code>\u2395PFKEY</code> <code>\u2395SIZE</code> <code>\u2395TID</code> <code>\u2395WG</code> <code>\u2395BASE</code> <code>\u2395DQ</code> <code>\u2395FHOLD</code> <code>\u2395FTIE</code> <code>\u2395NC</code> <code>\u2395NR</code> <code>\u2395PP</code> <code>\u2395SM</code> <code>\u2395TKILL</code> <code>\u2395WN</code> <code>\u2395C</code> <code>\u2395DR</code> <code>\u2395FIX</code> <code>\u2395FUNTIE</code> <code>\u2395NCOPY</code> <code>\u2395NREAD</code> <code>\u2395PROFILE</code> <code>\u2395SR</code> <code>\u2395TNAME</code> <code>\u2395WS</code> <code>\u2395CLASS</code> <code>\u2395DT</code> <code>\u2395FLIB</code> <code>\u2395FX</code> <code>\u2395NCREATE</code> <code>\u2395NRENAME</code> <code>\u2395PW</code> <code>\u2395SRC</code> <code>\u2395TNUMS</code> <code>\u2395WSID</code> <code>\u2395CLEAR</code> <code>\u2395ED</code> <code>\u2395FMT</code> <code>\u2395INSTANCES</code> <code>\u2395NDELETE</code> <code>\u2395NREPLACE</code> <code>\u2395R</code> <code>\u2395STACK</code> <code>\u2395TPOOL</code> <code>\u2395WX</code> <code>\u2395CMD</code> <code>\u2395EM</code> <code>\u2395FNAMES</code> <code>\u2395IO</code> <code>\u2395NERASE</code> <code>\u2395NRESIZE</code> <code>\u2395REFS</code> <code>\u2395STATE</code> <code>\u2395TPUT</code> <code>\u2395XML</code> <code>\u2395CR</code> <code>\u2395EN</code> <code>\u2395FNUMS</code> <code>\u2395JSON</code> <code>\u2395NEW</code> <code>\u2395NS</code> <code>\u2395RL</code> <code>\u2395STOP</code> <code>\u2395TRACE</code> <code>\u2395XSI</code> <code>\u2395CS</code> <code>\u2395EX</code> <code>\u2395FPROPS</code> <code>\u2395KL</code> <code>\u2395NEXISTS</code> <code>\u2395NSI</code> <code>\u2395RSI</code> <code>\u2395SVC</code> <code>\u2395TRAP</code> <code>\u2395XT</code> <code>\u2395CSV</code> <code>\u2395EXCEPTION</code> <code>\u2395FR</code> <code>\u2395LC</code> <code>\u2395NGET</code> <code>\u2395NSIZE</code> <code>\u2395RTL</code> <code>\u2395SVO</code> <code>\u2395TREQ</code> <code>\u2395\u00c1</code> <p>Row-wise</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/a/","title":"Alphabetic Characters","text":"Alphabetic Characters R\u2190\u2395A <p>This is a simple character vector, composed of the letters of the alphabet.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/a/#example","title":"Example","text":"<pre><code>      \u2395A\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ai/","title":"Account Information","text":"Account Information R\u2190\u2395AI <p>This is a simple integer vector, whose four elements are:</p> <code>\u2395AI[1]</code> user identification. Under Windows, this is the aplnid (network ID from configuration dialog box). Under UNIX and Linux this is the effective UID of the account whereas <code>\u2395AN</code> returns the real name. <code>\u2395AI[2]</code> compute time for the APL session in milliseconds. <code>\u2395AI[3]</code> connect time for the APL session in milliseconds. <code>\u2395AI[4]</code> keying time for the APL session in milliseconds. <p>Elements beyond 4 are not defined but reserved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ai/#example","title":"Example","text":"<pre><code>\n     \u2395AI\n52 7396 2924216 2814831\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/an/","title":"Account Name","text":"Account Name R\u2190\u2395AN <p>This is a simple character vector containing the user (login) name. Under UNIX and Linux this is the real user name, whereas <code>\u2395AI</code> returns the effective user id.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/an/#example","title":"Example","text":"<pre><code>      \u2395AN\nPete\n\n      \u2374\u2395AN\n4\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/arbin/","title":"Arbitrary Input","text":"Arbitrary Input R\u2190X \u2395ARBIN Y <p>This transmits a stream of 8-bit codes in <code>Y</code> to an output device specified by <code>X</code> prior to reading from an input device specified by <code>X</code>.</p> <p><code>Y</code> may be a scalar or a simple vector of integer numbers in the range 0-255.</p> <p><code>X</code> may take several forms:</p> terminate (input output) \u2395ARBIN codes terminate input \u2395ARBIN codes"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/arbin/#terminate","title":"terminate","text":"<p>This is a numeric scalar or vector that specifies how the read operation should be terminated.</p> <ul> <li>If it is a numeric scalar, it defines the number of bytes to be read.</li> <li>If it is a numeric vector, it defines a set of terminating bytes.</li> <li>If it is the null vector, the read terminates on Newline (10).</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/arbin/#input","title":"input","text":"<p>This is a simple numeric scalar that specifies the input device.</p> <ul> <li>If it is positive or zero, it represents a file descriptor that must have been associated by the command that started Dyalog APL.</li> <li>If it is negative, it represents the tie number of a file opened by <code>\u2395NTIE</code> or <code>\u2395NCREATE</code>.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/arbin/#output","title":"output","text":"<p>If specified, this is a simple numeric integer that identifies the output device.</p> <ul> <li>If it is positive or zero, it represents a file descriptor that must have been associated by the command that started Dyalog APL.</li> <li>If it is negative, it represents the tie number of a file opened by <code>\u2395NTIE</code> or <code>\u2395NCREATE</code>.</li> </ul> <p>The result <code>R</code> is a simple numeric vector.  Each item of <code>R</code> is the numeric representation of an 8-bit code in the range 0 to 255 received from the input device.  The meaning of the code is dependent on the characteristics of the input device.  If a set of delimiters was defined by <code>terminate</code>, the last code returned will belong to that set.</p> <p><code>\u2395RTL</code> (Response Time Limit) is an implicit argument of <code>\u2395ARBIN</code>.  This allows a time limit to be imposed on input.  If the time limit is reached, <code>\u2395ARBIN</code> returns with the codes read up to that point. This does not apply under Windows.</p> <p>The operation will fail with a <code>DOMAIN ERROR</code> if  <code>Y</code> contains anything other than numbers in the range 0-255, or  if the current process does not have permission to read from or write to the specified device(s).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/arbin/#examples-unix","title":"Examples (UNIX)","text":"<pre><code>      )sh mkfifo ./fifo\n\n</code></pre> <pre><code>\n      in\u2190'./fifo'\u2395NTIE 0\n      out\u2190'./fifo'\u2395NTIE 0\n\n</code></pre> <pre><code>\n      (10 (in out))\u2395ARBIN \u2395UCS \u2395D\n48 49 50 51 52 53 54 55 56 57\n\n</code></pre> <pre><code>\n      (\u236c (in out))\u2395ARBIN 10\n10\n\n</code></pre> <pre><code>\u235d cope with parity on line ending 10\n      ((10+0 128) (in out))\u2395ARBIN 10\n10\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/arbout/","title":"Arbitrary Output","text":"Arbitrary Output {R}\u2190X \u2395ARBOUT Y <p><code>Y</code> may be a scalar or a simple vector of integer numbers in the range 0-255.</p> <p><code>X</code> is a simple numeric integer that specifies the output device.</p> <ul> <li>(Non-Windows platforms only) If <code>X</code> is positive or zero, it represents a file descriptor that must have been associated by the command that started Dyalog APL.</li> <li>If <code>X</code> is negative, it represents the tie number of a file opened by <code>\u2395NTIE</code> or <code>\u2395NCREATE</code>.</li> </ul> <p>If <code>Y</code> is an empty vector, no codes are sent to the output device.</p> <p>The shy result <code>R</code> is <code>\u236c</code>.</p> <p>The operation will fail with a <code>DOMAIN ERROR</code> if  <code>Y</code> contains anything other than numbers in the range 0-255 or tie numbers associated with currently open native files, or  if the current process does not have permission to write to the specified device.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/arbout/#examples","title":"Examples","text":"<p>Write ASCII digits <code>'123'</code> to  stream 9:</p> <pre><code>      9 \u2395ARBOUT 49 50 51\n</code></pre> <p>Write ASCII characters <code>'ABC'</code> to <code>MYFILE</code>:</p> <pre><code>     'MYFILE' \u2395NCREATE \u00af1\n      \u00af1 \u2395ARBOUT 65 66 67\n\n</code></pre> <p>Append the string <code>'\u039a\u03ac\u03bb\u03bf \u03a0\u03ac\u03c3\u03c7\u03b1'</code> to the same file, and close it:</p> <pre><code>      \u00af1 \u2395ARBOUT 'UTF-8' \u2395UCS'\u039a\u03ac\u03bb\u03bf \u03a0\u03ac\u03c3\u03c7\u03b1' \n      \u2395NUNTIE \u00af1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/at/","title":"Attributes","text":"Attributes R\u2190{X} \u2395AT Y <p><code>Y</code> can be a simple character scalar, vector or matrix, or a vector of character vectors representing the names of 0 or more defined functions or operators. Used dyadically, this function closely emulates the APL2 implementation. Used monadically, it returns information that is more appropriate for Dyalog APL.</p> <p><code>Y</code> specifies one or more names. If <code>Y</code> specifies a single name as a character scalar, a character vector, or as a scalar enclosed character vector, the result <code>R</code> is a vector. If <code>Y</code> specifies one or more names as a character matrix or as a vector of character vectors <code>R</code> is a matrix with one row per name in <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/at/#monadic-use","title":"Monadic Use","text":"<p>If <code>X</code> is omitted, <code>R</code> is a 4-element vector or a 4 column matrix with the same number of rows as names in <code>Y</code> containing the following attribute information:</p> <p><code>R[1]</code> or <code>R[;1]</code>: Each item is a 3-element integer vector representing the function header syntax:</p> 1 Function result 0 if the function has no result 1 if the function has an explicit result <code>\u00af1</code> if the function has a shy result 2 Function valence 0 if the object is a niladic function or not a function 1 if the object is a monadic function 2 if the object is a dyadic function <code>\u00af2</code> if the object is an ambivalent                 function 3 Operator valence 0 if the object is not an operator 1 if the object is a monadic operator 2 if the object is a dyadic operator <p>The following values correspond to the syntax shown alongside:</p> <pre><code>\n        0  0  0     \u2207 FOO\n        1  0  0     \u2207 Z\u2190FOO\n       \u00af1  0  0     \u2207 {Z}\u2190FOO\n        0 \u00af2  0     \u2207 {A} FOO B\n       \u00af1  1  2     \u2207 {Z}\u2190(F OP G)B\n</code></pre> <p><code>R[2]</code> or <code>R[;2]</code>: Each item is the (<code>\u2395TS</code> form) timestamp of the time the function was last fixed.</p> <p><code>R[3]</code> or <code>R[;3]</code>: Each item is an integer reporting the current <code>\u2395LOCK</code> state of the function:</p> <code>0</code> Not locked <code>1</code> Cannot display function <code>2</code> Cannot suspend function <code>3</code> Cannot display or suspend <p><code>R[4]</code> or <code>R[;4]</code>: Each item is a character vector - the network ID of the user who last fixed (edited) the function.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/at/#example","title":"Example","text":"<pre><code>\n    \u2207 {z}\u2190{l}(fn myop)r\n[1]   ...\n\n    \u2207 z\u2190foo\n[1]   ...\n\n    \u2207 z\u2190{larg}util rarg\n[1]   ...\n\n      \u2395LOCK'foo'\n\n      util2\u2190util\n</code></pre> <pre><code>\n      ]display \u2395AT 'myop' 'foo' 'util' 'util2'\n.\u2192--------------------------------------------.\n\u2193 .\u2192------. .\u2192-----------------.     .\u2192---.   |\n| |\u00af1 \u00af2 1| |1996 8 2 2 13 56 0|   0 |john|   |\n| '~------' '~-----------------'     '----'   |\n| .\u2192----.   .\u2192------------.          .\u2296.      |\n| |1 0 0|   |0 0 0 0 0 0 0|        3 | |      |\n| '~----'   '~------------'          '-'      |\n| .\u2192-----.  .\u2192------------------.    .\u2192---.   |\n| |1 \u00af2 0|  |1996 3 1 14 12 10 0|  0 |pete|   |\n| '~-----'  '~------------------'    '----'   |\n| .\u2192-----.  .\u2192-------------------.   .\u2192-----. |\n| |1 \u00af2 0|  |1998 8 26 16 16 42 0| 0 |graeme| |\n| '~-----'  '~-------------------'   '------' |\n'\u220a--------------------------------------------'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/at/#dyadic-use","title":"Dyadic Use","text":"<p>The dyadic form of <code>\u2395AT</code> emulates APL2. It returns the same rank and shape result containing information that matches the APL2 implementation as closely as possible.</p> <p>The number of elements or columns in <code>R</code> and their meaning depends upon the value of <code>X</code> which may be 1, 2, 3 or 4.</p> <p>If <code>X</code> is 1, <code>R</code> specifies valences and contains 3 elements (or columns) whose meaning is as follows:</p> 1 Explicit result 1 if the object has an explicit result or is a variable 0 otherwise 2 Function valence 0 if the object is a niladic function or not a function 1 if the object is a monadic function 2 if the object is an ambivalent function 3 Operator valence 0 if the object is not an operator 1 if the object is a monadic operator 2 if the object is a dyadic operator <p>If <code>X</code> is 2, <code>R</code> specifies fix times (the time the object was last updated) for functions and operators named in <code>Y</code>. The time is reported as 7 integer elements (or columns) whose meaning is as follows. The fix time reported for names in <code>Y</code> which are not defined functions or operators is 0.</p> 1 Year 2 Month 3 Day 4 Hour 5 Minute 6 Second 7 Milliseconds (this is always reported as 0) <p>If <code>X</code> is 3, <code>R</code> specifies execution properties and contains 4 elements (or columns) whose meaning is as follows:</p> 1 Displayable 0 if the object is displayable 1 if the object is not displayable 2 Suspendable 0 if execution will suspend in the object 1 if execution will not suspend in the object 3 Weak Interrupt behaviour 0 if the object responds to interrupt 1 if the object ignores interrupt 4 (always 0) <p>If <code>X</code> is 4, <code>R</code> specifies object size and contains 2 elements (or columns) which both report the <code>\u2395SIZE</code> of the object.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/av/","title":"Atomic Vector","text":"Atomic Vector R\u2190\u2395AV <p><code>\u2395AV</code> is a deprecated feature and is replaced by <code>\u2395UCS</code>.</p> <p>This is a simple character vector of all 256 characters in the Classic Dyalog APL character.</p> <p>In the Classic Edition the contents of <code>\u2395AV</code> are defined by the Output Translate Table.</p> <p>In the Unicode Edition, the contents of <code>\u2395AV</code> are defined by the system variable <code>\u2395AVU</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/av/#examples","title":"Examples","text":"<pre><code>      \u2395AV[48+\u237310]\n0123456789\n\n      5 52\u237412\u2193\u2395av%'\u237a\u2375_abcdefghijklmnopqrstuvwxyz\u00af.\u236c0123456789\u22a2\u00a5$\u00a3\u00a2\n\u2206ABCDEFGHIJKLMNOPQRSTUVWXYZ\u00fd\u00b7\u007f\u2359\u00c1\u00c2\u00c3\u00c7\u00c8\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d2\u00d3\u00d4\u00d5\u00d9\u00da\u00db\n\u00dd\u00fe\u00e3\u00ec\u00f0\u00f2\u00f5{\u20ac}\u22a3\u2337\u00a8\u00c0\u00c4\u00c5\u00c6\u2368\u00c9\u00d1\u00d6\u00d8\u00dc\u00df\u00e0\u00e1\u00e2\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ed\u00ee\u00ef\u00f1[/\u233f\\\u2340&lt;\u2264=\u2265&gt;\u2260\u2228\u2227\n-+\u00f7\u00d7?\u220a\u2374~\u2191\u2193\u2373\u25cb*\u2308\u230a\u2207\u2218(\u2282\u2283\u2229\u222a\u22a5\u22a4|;,\u2371\u2372\u2352\u234b\u2349\u233d\u2296\u235f\u2339!\u2355\u234e\u236b\u236a\u2261\u2262\u00f3\u00f4\u00f6\u00f8\"#&amp;\u00b4\n\u2518\u2510\u250c\u2514\u253c\u2500\u251c\u2524\u2534\u252c\u2502@\u00f9\u00fa\u00fb^\u00fc`\u2223\u00b6:\u2377\u00bf\u00a1\u22c4\u2190\u2192\u235d)] \u00a7\u2395\u235e\u2363%'\u237a\u2375_abcdefghijk\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/avu/","title":"Atomic Vector - Unicode","text":"Atomic Vector - Unicode \u2395AVU <p><code>\u2395AVU</code> specifies the contents of the atomic vector, <code>\u2395AV</code>, and is used to translate data between Unicode and non-Unicode character formats when required, for example when:</p> <ul> <li>Unicode Edition loads or copies a Classic Edition workspace or a workspace saved by a Version prior to Version 12.0.</li> <li>Unicode Edition reads character data from a non-Unicode component file, or receives data type 82 from a TCP socket.</li> <li>Unicode Edition writes data to a non-Unicode component file</li> <li>Unicode Edition reads or writes data from or to a Native File using conversion code 82.</li> <li>Classic Edition loads or copies a Unicode Edition workspace</li> <li>Classic Edition reads character data from a Unicode component file, or receives data type 80, 160, or 320 from a TCP socket.</li> <li>Classic Edition writes data to a Unicode component file.</li> </ul> <p><code>\u2395AVU</code> is an integer vector with 256 elements, containing the Unicode code points which define the characters in <code>\u2395AV</code>. <code>\u2395AVU</code> has Namespace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/avu/#note","title":"Note","text":"<p>In Versions of Dyalog prior to Version 12.0 and in the Classic Edition, a character is stored internally as an index into the atomic vector, <code>\u2395AV</code>. When a character is displayed or printed, the index in <code>\u2395AV</code> is translated to a number in the range 0-255 which represents the index of the character in an Extended ASCII font. This mapping is done by the Output Translate Table which is user-configurable. Note that although ASCII fonts typically all contain the same symbols in the range 0-127, there are a number of different Extended ASCII font layouts, including proprietary APL fonts, which provide different symbols in positions 128-255. The actual symbol that appears on the screen or on the printed page is therefore a function of the Output Translate Table and the font in use. Classic Edition provides two different fonts (and thus two different <code>\u2395AV</code> layouts) for use with the Development Environment, named Dyalog Std (with APL underscores) and Dyalog Alt (without APL underscores).</p> <p>The default value of <code>\u2395``AVU</code> corresponds to the use of the Dyalog Alt Output Translate Table and font in the Classic Edition or in earlier versions of Dyalog APL.</p> <pre><code>      2 13\u2374\u2395AVU[97+\u237326]\n193 194 195 199 200 202 203 204 205 206 207 208 210\n211 212 213 217 218 219 221 254 227 236 240 242 245\n      \u2395UCS 2 13\u2374\u2395AVU[97+\u237326]\n\u00c1\u00c2\u00c3\u00c7\u00c8\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d2\n\u00d3\u00d4\u00d5\u00d9\u00da\u00db\u00dd\u00fe\u00e3\u00ec\u00f0\u00f2\u00f5\n</code></pre> <p><code>\u2395AVU</code> can be localised, in order to make it straightforward to write access functions which receive or read data from systems with varying atomic vectors. If you have been using Dyalog Alt for most things but have some older code which uses underscores, you can bring this code together in the same workspace and have it all look \"as it should\" by using the Alt and Std definitions for <code>\u2395AVU</code> as you copy each part of the code into the same Unicode Edition workspace.</p> <pre><code>      )COPY avu.dws Std.\u2395AVU\nC:\\Program Files\\Dyalog\\Dyalog APL 12.0 Unicode\\ws\\avu saved Thu Dec 06 11:24:32 2007\n\n      2 13\u2374\u2395AVU[97+\u237326]\n9398 9399 9400 9401 9402 9403 9404 9405 9406 9407 9408 9409 9410\n9411 9412 9413 9414 9415 9416 9417 9418 9419 9420 9421 9422 9423\n       \u2395UCS 2 13\u2374\u2395AVU[97+\u237326]\n\u24b6\u24b7\u24b8\u24b9\u24ba\u24bb\u24bc\u24bd\u24be\u24bf\u24c0\u24c1\u24c2\n\u24c3\u24c4\u24c5\u24c6\u24c7\u24c8\u24c9\u24ca\u24cb\u24cc\u24cd\u24ce\u24cf\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/avu/#rules-for-conversion-on-import","title":"Rules for Conversion on Import","text":"<p>When the Unicode Edition imports APL objects from a non-Unicode source, function comments and character data of type 82 are converted to Unicode. When the Classic Edition imports APL objects from a Unicode source, this translation is performed in reverse.</p> <p>If the objects are imported from a Version 12.0 (or later) workspace (i.e. from a workspace that contains its own value of <code>\u2395AVU</code>) the value of <code>#.\u2395AVU</code> (the value of <code>\u2395AVU</code> in the root) in the source workspace is used. Otherwise, such as when APL objects are imported from a pre-Version 12 workspace, from a component file, or from a TCP socket, the local value of <code>\u2395AVU</code> in the target workspace is used.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/avu/#rules-for-conversion-on-export","title":"Rules for Conversion on Export","text":"<p>When the Unicode Edition exports APL objects to a non-Unicode destination, such as a non-Unicode Component File or non-Unicode TCPSocket Object, function comments (in <code>\u2395OR</code>s) and character data of type 82 are converted to <code>\u2395AV</code> indices using the local value of <code>\u2395AVU</code>.</p> <p>When the Classic Edition exports APL objects to a Unicode destination, such as a Unicode Component File or Unicode TCPSocket Object, function comments (in <code>\u2395OR</code>s) and character data of type 82 are converted to Unicode using the local value of <code>\u2395AVU</code>.</p> <p>In all cases, if a character to be translated is not defined in <code>\u2395AVU</code>, a <code>TRANSLATION ERROR</code> (event number 92) will be signalled.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/base/","title":"Base Class","text":"Base Class R\u2190\u2395BASE.Y <p><code>\u2395BASE</code> is used to access the base class implementation of the name specified by <code>Y</code>.</p> <p><code>Y</code> must be the name of a Public member (Method, Field or Property) that is provided by the Base Class of the current Class or Instance.</p> <p><code>\u2395BASE</code> is typically used to call a method in the Base Class which has been superseded by a Method in the current Class.</p> <p>Note that <code>\u2395BASE.Y</code> is special syntax and any direct reference to <code>\u2395BASE</code> on its own or in any other context, is meaningless and causes <code>SYNTAX ERROR</code>.</p> <p>In the following example, Class <code>DomesticParrot</code> derives from Class <code>Parrot</code> and supersedes its <code>Speak</code> method. <code>DomesticParrot.Speak</code> calls the <code>Speak</code> method in its Base Class <code>Parrot</code>, via <code>\u2395BASE</code>.</p> <pre><code>:Class Parrot: Bird\n    \u2207 R\u2190Speak\n      :Access Public\n      R\u2190'Squark!'\n    \u2207\n:EndClass \u235d Parrot\n\n:Class DomesticParrot: Parrot\n    \u2207 R\u2190Speak\n      :Access Public\n      R\u2190\u2395BASE.Speak,' Who''s a pretty boy, then!'\n    \u2207\n:EndClass \u235d DomesticParrot\n\n      Maccaw\u2190\u2395NEW Parrot\n      Maccaw.Speak\nSquark!\n\n      Polly\u2190\u2395NEW DomesticParrot\n      Polly.Speak\nSquark! Who's a pretty boy, then!\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/character-input-output/","title":"Character Input/Output","text":"Character Input/Output \u235e <p><code>\u235e</code> is a variable which communicates between the user's terminal and APL.  Its behaviour depends on whether it is being assigned or referenced.</p> <p>When <code>\u235e</code> is assigned with a vector or a scalar, the array is displayed without the normal ending new-line character.  Successive assignments of vectors or scalars to <code>\u235e</code> without any intervening input or output cause the arrays to be displayed on the same output line.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/character-input-output/#example","title":"Example","text":"<pre><code>      \u235e\u2190'2+2' \u22c4 \u235e\u2190'=' \u22c4 \u235e\u21904\n2+2=4\n</code></pre> <p>Output through <code>\u235e</code> is independent of the print width in <code>\u2395PW</code>.  The way in which lines exceeding the print width of the terminal are treated is dependent on the characteristics of the terminal.  Numeric output is formatted in the same manner as direct output (see  Display of ArraysProgrammer's Guide: \"Display of Arrays\").</p> <p>When <code>\u235e</code> is assigned with a higher-rank array, the output is displayed in the same manner as for direct output except that the print width <code>\u2395PW</code> is ignored.</p> <p>When <code>\u235e</code> is referenced, terminal input is expected without any specific prompt, and the response is returned as a character vector.</p> <p>If the <code>\u235e</code> request was preceded by one or more assignments to <code>\u235e</code> without any intervening input or output, the last (or only) line of the output characters are returned as part of the response.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/character-input-output/#example_1","title":"Example","text":"<pre><code>      mat\u2190\u2191\u233d\u235e\u235e\u235e\u235e\u235e\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/character-input-output/#examples","title":"Examples","text":"<pre><code>      \u235e\u2190'OPTION : ' \u22c4 R\u2190\u235e\nOPTION : INPUT\n\n      R\nOPTION : INPUT\n\n      \u2374R\n14\n</code></pre> <p>The output of simple arrays of rank greater than 1 through <code>\u235e</code> includes a new-line character at the end of each line.  Input through <code>\u235e</code> includes the preceding output through <code>\u235e</code> since the last new-line character.</p> <p>A soft interrupt causes an <code>INPUT INTERRUPT</code> error if entered while <code>\u235e</code> is awaiting input, and execution is then suspended (unless the interrupt is trapped):</p> <pre><code>      R\u2190\u235e\n</code></pre> <p>(Interrupt)</p> <pre><code>INPUT INTERRUPT\n</code></pre> <p>A time limit is imposed on input through <code>\u235e</code> if <code>\u2395RTL</code> is set to a non-zero value:</p> <pre><code>      \u2395RTL\u21905 \u22c4 \u235e\u2190'PASSWORD ? ' \u22c4 R\u2190\u235e\nPASSWORD ?\nTIMEOUT\n      \u2395RTL\u21905 \u22c4 \u235e\u2190'PASSWORD : ' \u22c4 R\u2190\u235e\n                                   ^\n</code></pre> <p>The <code>TIMEOUT</code> interrupt is a trappable event.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/class/","title":"Class","text":"Class R\u2190{X}\u2395CLASS Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/class/#monadic-case","title":"Monadic Case","text":"<p>Monadic <code>\u2395CLASS</code> returns a list of references to Classes and Interfaces that specifies the class hierarchy for the Class or Instance specified by <code>Y</code>.</p> <p><code>Y</code> must be a reference to a Class or to an Instance of a Class.</p> <p><code>R</code> is a vector of vectors whose items represent nodes in the Class hierarchy of <code>Y</code>. Each item of <code>R</code> is a vector whose first item is a Class reference and whose subsequent items (if any) are references to the Interfaces supported by that Class.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/class/#example-1","title":"Example 1","text":"<p>This example illustrates a simple inheritance tree or Class hierarchy. There are 3 Classes, namely:</p> <pre><code>Animal\n    Bird (derived from Animal)\n        Parrot (derived from Bird)\n\n:Class Animal\n...\n:EndClass \u235d Animal\n\n:Class Bird: Animal\n...\n:EndClass \u235d Bird\n\n:Class Parrot: Bird\n...\n:EndClass \u235d Parrot\n\n</code></pre> <pre><code>       \u2395CLASS Eeyore\u2190\u2395NEW Animal\n  #.Animal  \n       \u2395CLASS Robin\u2190\u2395NEW Bird\n  #.Bird    #.Animal  \n       \u2395CLASS Polly\u2190\u2395NEW Parrot\n  #.Parrot    #.Bird    #.Animal\n\n      \u2395CLASS\u00a8 Parrot Animal\n   #.Parrot    #.Bird    #.Animal      #.Animal\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/class/#example-2","title":"Example 2","text":"<p>The Penguin Class example  illustrates the use of Interfaces.</p> <p>In this case, the <code>Penguin</code> Class derives from <code>Animal</code> (as above) but additionally supports the <code>BirdBehaviour</code> and <code>FishBehaviour</code> Interfaces, thereby inheriting members from both.</p> <pre><code>      Pingo\u2190\u2395NEW Penguin\n      \u2395CLASS Pingo\n  #.Penguin  #.FishBehaviour  #.BirdBehaviour    #.Animal\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/class/#dyadic-case","title":"Dyadic Case","text":"<p>If <code>X</code> is specified, <code>Y</code> must be a reference to an Instance of a Class and <code>X</code> is a reference to an Interface that is supported by Instance <code>Y</code> or to a Class upon which Instance <code>Y</code> is based.</p> <p>In this case, <code>R</code> is a reference to the implementation of Interface <code>X</code> by Instance <code>Y</code>, or to the implementation of (Base) Class <code>X</code> by Instance <code>Y</code>, and is used as a castin order to access members of <code>Y</code> that correspond to members of Interface of (Base) Class <code>X</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/class/#example-1_1","title":"Example 1:","text":"<p>Once again, the Penguin Class example  is used to illustrate the use of Interfaces.</p> <pre><code>      Pingo\u2190\u2395NEW Penguin\n      \u2395CLASS Pingo\n  #.Penguin  #.FishBehaviour  #.BirdBehaviour    #.Animal\n\n      (FishBehaviour \u2395CLASS Pingo).Swim\nI can dive and swim like a fish\n      (BirdBehaviour \u2395CLASS Pingo).Fly\nAlthough I am a bird, I cannot fly\n      (BirdBehaviour \u2395CLASS Pingo).Lay\nI lay one egg every year          \n      (BirdBehaviour \u2395CLASS Pingo).Sing\nCroak, Croak!           \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/class/#example-2_1","title":"Example 2:","text":"<p>This example illustrates the use of dyadic <code>\u2395CLASS</code> to cast an Instance to a lower Class and thereby access a member in the lower Class that has been superseded by another Class higher in the tree.</p> <pre><code>      Polly\u2190\u2395NEW DomesticParrot\n      Polly.Speak\nSquark! Who's a pretty boy, then!\n\n</code></pre> <p>Note that the <code>Speak</code> method invoked above is the <code>Speak</code> method defined by Class <code>DomesticParrot</code>, which supersedes the <code>Speak</code> methods of sub-classes <code>Parrot</code> and <code>Bird</code>.</p> <p>You may use a cast to access the (superseded) <code>Speak</code> method in the sub-classes <code>Parrot</code> and <code>Bird</code>.</p> <pre><code>      (Parrot \u2395CLASS Polly).Speak\nSquark!\n      (Bird \u2395CLASS Polly).Speak\nTweet, tweet!\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/clear/","title":"Clear Workspace","text":"Clear Workspace \u2395CLEAR <p>A clear workspace is activated, having the name <code>CLEAR WS</code>.  The active workspace is lost.  All system variables assume their default values.  The maximum size of workspace is available.</p> <p>Apart from .NET objects, the contents of the session namespace <code>\u2395SE</code> are not affected. .NET objects in <code>\u2395SE</code> are disconnected from .NET because <code>\u2395CLEAR</code> closes the current .NET AppDomain.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/clear/#example","title":"Example","text":"<pre><code>\n      \u2395CLEAR\n      \u2395WSID\nCLEAR WS\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cr/","title":"Canonical Representation","text":"Canonical Representation R\u2190\u2395CR Y <p><code>Y</code> must be a simple character scalar or vector which represents the name of a defined function or operator.</p> <p>If <code>Y</code> is a name of a defined function or operator, <code>R</code> is a simple character matrix.  The first row of <code>R</code> is the function or operator header.  Subsequent rows are lines of the function or operator.  <code>R</code> contains no unnecessary blanks, except for leading indentation of control structures, trailing blanks that pad each row, and the blanks in comments.  If <code>Y</code> is the name of a variable, a locked function or operator, an external function, or is undefined, <code>R</code> is an empty matrix whose shape is <code>0 0</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cr/#example","title":"Example","text":"<pre><code>      \u2207R\u2190MEAN X    \u235d Arithmetic mean\n[1]  R\u2190(+/X)\u00f7\u2374X\n[2]  \u2207\n      +F\u2190\u2395CR'MEAN'\nR\u2190MEAN X    \u235d Arithmetic mean\nR\u2190(+/X)\u00f7\u2374X\n\n      \u2374F\n2 30\n</code></pre> <p>The definition of <code>\u2395CR</code> has been extended to names assigned to functions by specification (<code>\u2190</code>), and to local names of functions used as operands to defined operators.</p> <p>If <code>Y</code> is a name assigned to a primitive function, <code>R</code> is a one-element vector containing the corresponding function symbol.  If <code>Y</code> is a name assigned to a system function, <code>R</code> is a one element nested array containing the name of the system function.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cr/#examples","title":"Examples","text":"<pre><code>      PLUS\u2190+\n      +F\u2190\u2395CR'PLUS'\n+\n      \u2374F\n1\n      C\u2190\u2395CR\n      C'C'\n \u2395CR\n      \u2374C'C'\n1\n</code></pre> <pre><code>\n      \u2207R\u2190CONDITION (FN1 ELSE FN2) X\n[1]   \u2192CONDITION/L1\n[2]   R\u2190FN2 X \u22c4 \u21920\n[3]  L1:R\u2190FN1 X\n[4]   \u2207\n\n      2 \u2395STOP 'ELSE'\n      (X\u22650) \u230a ELSE \u2308 X\u2190\u00af2.5\n\nELSE[2]\n       X\n\u00af2.5\n       \u2395CR'FN2'\n\u2308\n       \u2192\u2395LC\n\u00af2\n</code></pre> <p>If <code>Y</code> is a name assigned to a derived function, <code>R</code> is a vector whose elements represent the arrays, functions, and operators from which <code>Y</code> was constructed.  Constituent functions are represented by their own <code>\u2395CR</code>s, so in this respect the definition of <code>\u2395CR</code> is recursive.  Primitive operators are treated like primitive functions, and are represented by their corresponding symbols.  Arrays are represented by themselves.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cr/#example_1","title":"Example","text":"<pre><code>      BOX\u21902 2\u2218\u2374\n      +F\u2190\u2395CR'BOX'\n 2 2 \u2218\u2374\n      \u2374F\n3\n      ]display F\n.\u2192----------.\n| .\u2192--.     |\n| |2 2| \u2218 \u2374 |\n| '~--' - - |\n'\u220a----------'\n</code></pre> <p>If <code>Y</code> is a name assigned to a defined function, <code>R</code> is the <code>\u2395CR</code> of the defined function.  In particular, the name that appears in the function header is the name of the original defined function, not the assigned name <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cr/#example_2","title":"Example","text":"<pre><code>      AVERAGE\u2190MEAN\n      \u2395CR'AVERAGE'\nR\u2190MEAN X    \u235d Arithmetic mean\nR\u2190(+/X)\u00f7\u2374X\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cs/","title":"Change Space","text":"Change Space {R}\u2190{X}\u2395CS Y <p><code>Y</code> must be namespace reference (ref) or a simple character scalar or vector identifying the name of a namespace.</p> <p>If specified, <code>X</code> is a simple character scalar, vector, matrix or a nested vector of character vectors identifying zero or more workspace objects to be exported into the namespace <code>Y</code>.</p> <p>The identifiers in <code>X</code> and <code>Y</code> may be simple names or compound names separated by <code>'.'</code> and including the names of the special namespaces <code>'\u2395SE'</code>, <code>'#'</code>, and <code>'##'</code>.</p> <p>The result <code>R</code> is the full name (starting <code>#.</code>) of the space in which the function or operator was executing prior to the <code>\u2395CS</code>.</p> <p><code>\u2395CS</code> changes the space in which the current function or operator is running to the namespace <code>Y</code> and returns the original space, in which the function was previously running, as a shy result.  After the <code>\u2395CS</code>, references to global names (with the exception of those specified in <code>X</code>) are taken to be references to global names in <code>Y</code>.  References to local names (i.e. those local to the current function or operator) are, with the exception of those with name class 9, unaffected. Local names with name class  9 are however no longer visible.</p> <p>When the function or operator terminates, the calling function resumes execution in its original space.</p> <p>The names listed in <code>X</code> are temporarily exported to the namespace <code>Y</code>.  If objects with the same name exist in <code>Y</code>, these objects are effectivelyshadowed and are inaccessible. Note that Dyadic <code>\u2395CS</code> may be used only if there is a traditional function in the state indicator (stack). Otherwise there would be no way to retract the export. In this case (for example in a clear workspace) <code>DOMAIN ERROR</code> is reported.</p> <p>Note that calling <code>\u2395CS</code> with an empty argument <code>Y</code> obtains the namespace in which a function is currently executing.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cs/#example","title":"Example","text":"<p>This simple example illustrates how <code>\u2395CS</code> may be used to avoid typing long pathnames when building a tree of GUI objects.  Note that the objects <code>NEW</code> and <code>OPEN</code> are created as children of the <code>FILE</code> menu as a result of using <code>\u2395CS</code> to change into the <code>F.MB.FILE</code> namespace.</p> <pre><code>     \u2207 MAKE_FORM;F;OLD\n[1]    'F'\u2395WC'Form'\n[2]    'F.MB'\u2395WC'MenuBar'\n[3]    'F.MB.FILE'\u2395WC'Menu' '&amp;File'\n[4]\n[5]    OLD\u2190\u2395CS'F.MB.FILE'\n[6]    'NEW'\u2395WC'MenuItem' '&amp;New'\n[7]    'OPEN'\u2395WC'MenuItem' '&amp;Open'\n[8]    \u2395CS OLD\n[9]\n[10]   'F.MB.EDIT'\u2395WC'Menu' '&amp;Edit'\n[11]\n[12]   OLD\u2190\u2395CS'F.MB.EDIT'\n[13]   'UNDO'\u2395WC'MenuItem' '&amp;Undo'\n[14]   'REDO'\u2395WC'MenuItem' '&amp;Redo'\n[15]   \u2395CS OLD\n[16]   ...\n     \u2207\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cs/#example_1","title":"Example","text":"<p>Suppose a form <code>F1</code> contains buttons <code>B1</code> and <code>B2</code>. Each button maintains a count of the number of times it has been pressed, and the form maintains a count of the total number of button presses. The single callback function <code>PRESS</code> and its subfunction <code>FMT</code> can reside in the form itself</p> <pre><code>      )CS F1\n#.F1\n      \u235d Note that both instances reference\n      \u235d the same callback function\n      'B1'\u2395WS'Event' 'Select' 'PRESS'\n      'B2'\u2395WS'Event' 'Select' 'PRESS'\n\n      \u235d Initialise total and instance counts.\n      TOTAL \u2190 B1.COUNT \u2190 B2.COUNT \u2190 0\n</code></pre> <pre><code>\n\n    \u2207 PRESS MSG\n[1]   'FMT' 'TOTAL'\u2395CS\u2283MSG \u235d     Switch to instance space\n[2]   (TOTAL COUNT)+\u21901   \u235d    Incr total &amp; instance count\n[3]   \u2395WS'Caption'(COUNT FMT TOTAL)\u235d Set instance caption\n    \u2207\n</code></pre> <pre><code>\n\n    \u2207 CAPT\u2190INST FMT TOTL      \u235d Format button caption.\n[1]   CAPT\u2190(\u2355INST),'/',\u2355TOTL  \u235d E.g. 40/100.\n    \u2207\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cs/#example_2","title":"Example","text":"<p>This example uses <code>\u2395CS</code> to explore a namespace tree and display the structure.  Note that it must export its own name (tree) each time it changes space, because the name tree is global.</p> <pre><code>      \u2207 tabs tree space;subs     \u235d Display namespace tree\n[1]    tabs,space\n[2]    'tree'\u2395CS space\n[3]    \u2192(\u2374subs\u2190\u2193\u2395NL 9)\u21930\n[4]    (tabs,'.   ')\u2218tree\u00a8subs\n     \u2207 \n\n      )ns x.y\n#.x.y\n      )ns z\n#.z\n      ''tree '#'\n#\n.   x\n.   .   y\n.   z\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cs/#note","title":"Note","text":"<p><code>\u2395CS</code> is not permitted in a dfn or dop. If used therein it will cause a <code>NONCE ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/","title":"Comma Separated Values","text":"Comma Separated Values {R}\u2190{X} \u2395CSV Y <p>This function imports and exports Comma Separated Value (CSV) data.</p> <p>Monadic <code>\u2395CSV</code> imports data from a CSV file or converts data from CSV format to an internal format. Dyadic <code>\u2395CSV</code> exports data to a CSV file or converts data from internal format to a CSV format.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#internal-format","title":"Internal Format","text":"<p>Arrays that result from importing CSV data or arrays that are suitable for exporting as CSV data are represented by 3 possible structures:</p> <ul> <li>A table (a matrix whose elements are character vectors or scalars, or numbers).</li> <li>A vector, each of whose items contain field (column) values. Character field values are character matrices; numeric field values are numeric vectors.</li> <li>A vector, each of whose items contain field (column) values. Character field values are vectors of character vectors; numeric field values are numeric vectors.</li> </ul> <p>Note that when importing CSV data, all fields are assumed to be character fields unless otherwise specified (see Column Types below). A field that contains only \"numbers\" will not be converted to numeric data unless specified as being numeric.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#metacharacters","title":"MetaCharacters","text":"<p>Some characters in a CSV file are metacharacters which define the structure of the data; for example, the field separator character between fields. Characters which are not metacharacters are literal characters. The  variant options QuoteChar, EscapeChar and DoubleQuote make it possible to interpret metacharacters as literal characters and thus permit fields to contain field separator characters, leading and trailing spaces, and line-endings.</p> <p>Fixed-width fields do not require these options and they are ignored if fixed-width fields are being processed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#monadic-csv","title":"Monadic \u2395CSV","text":"<p><code>R\u2190\u2395CSV Y</code></p> <p><code>Y</code> is an array that specifies just the source of the CSV data (see below) or a 1,2,3 or 4-element vector containing:</p> <code>[1]</code> Source of CSV Data <code>[2]</code> Description of the CSV data <code>[3]</code> Column Types <code>[4]</code> Header Row Indicator <p>Source may be one of:</p> <ul> <li>a character vector or scalar containing a file name</li> <li>a native tie number</li> <li>a character vector or scalar containing CSV data with embedded newline characters. To avoid this source being interpreted as a file name, <code>Y[2]</code> must be specified as <code>'S'</code>. </li> <li>a vector of character vectors and/or scalars containing CSV data with implicit newlines after each character vector or scalar</li> </ul> <p>Description</p> <p>If <code>Y[1]</code>  is a file name or tie number Description may be one of:</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#-a-character-vector-specifying-the-file-encoding-such-as-utf-8-see-file-encodings-on-page-1","title":"- a character vector specifying the file encoding such as <code>'UTF-8'</code> (see File Encodings on page 1).","text":"<p>If omitted or empty, the file encoding is deduced (see below).</p> <p>If <code>Y[1]</code> is a character array containing CSV data Description is a character scalar <code>'S'</code> (simple) or <code>'N'</code> (nested). The default is <code>'N'</code></p> <p>Column Types</p> <p>This is a scalar numeric code or vector of numeric codes that specifies the field types from the list below. If Column Types is zilde or omitted, the default is 1 (all fields are character).</p> <code>0</code> The field is ignored. <code>1</code> The field contains character data. <code>2</code> The field is to be interpreted as being numeric. Empty cells and cells which cannot be converted to numeric values are not tolerated and cause an error to be signalled. <code>3</code> The field is to be interpreted as being numeric but invalid numeric values are tolerated. Empty fields and fields which cannot be converted to numeric values are replaced with the  Fill variant option (default 0). <code>4</code> The field is to be interpreted numeric data but invalid numeric data is tolerated. Empty fields and fields which cannot be converted to numeric values are returned instead as character data; this type is disallowed when variant option Invert is set to 1. <code>5</code> The field is to be interpreted as being numeric but empty fields are tolerated and are replaced with the Fill variant option (default 0). Non-empty cells which cannot be converted to numeric values are not tolerated and cause an error to be signalled. <p>Note that if Column Types is specified by a scalar 4, all numeric data in all fields will be converted to numbers.</p> <p>Header Row Indicator</p> <p>This is a Boolean value (default 0) to specify whether or not the first record in a CSV file is  a list of column labels. If  Header Row Indicator is 1, the first record (the header row) is treated differently from other records. It is assumed to contain character data (labels) regardless of <code>Y[3]</code> and is returned separately in the result.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#variant-options","title":"Variant options","text":"<p>Monadic <code>\u2395CSV</code> may be applied using the  Variant operator with the following options. The Principal option is Invert.</p> Name Meaning Default Invert 0, 1 or 2 (see below) <code>0</code> Separator The field separator, any single character. If Widths  is other than <code>\u236c</code> , Separator is ignored. <code>','</code> Widths A vector of numeric values describing the width (in  characters) of the corresponding columns in the CSV source, or <code>\u236c</code> for variable width delimited fields <code>\u236c</code> Decimal The decimal mark in numeric fields - one of <code>'.'</code> or <code>','</code> <code>'.'</code> Thousands The thousands separator in numeric fields, which may be  specified as an empty character vector (meaning no separator is defined) or a  character scalar <code>''</code> Trim A Boolean specifying whether undelimited/unescaped  whitespace is trimmed at the beginning and end of fields <code>1</code> Ragged A Boolean specifying whether records with varying numbers  of fields are allowed; see notes below <code>0</code> Fill The numeric value substituted for invalid numeric data in  columns of type 3 <code>0</code> Records The maximum number of records to process or 0 for no limit. This applies only to a file specified by a tie number. <code>0</code> QuoteChar The field quote character (delimiter), which may be specified as an empty character vector (meaning none is defined) or a character scalar <code>\"</code> EscapeChar The escape character, which may be specified as an empty character vector (meaning none is defined) or a character scalar <code>''</code> DoubleQuote A Boolean which indicates whether (1) or not (0) a quote character within a quoted field is represented by two consecutive quote characters <code>1</code> <p>The Separator, QuoteChar and EscapeChar characters, when defined, must be different.</p> <p>Other options defined for export are also accepted but ignored.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#invert-option","title":"Invert Option","text":"<p>This option specifies how the CSV data should be returned as follows:</p> 0 A table (a matrix whose elements are character vectors or scalars or numbers). <code>1</code> A vector, each of whose items contain field (column) values. Character field values are character matrices; numeric field values are numeric vectors. <code>2</code> A vector, each of whose items contain field (column) values. Character field values are vectors of character vectors; numeric field values are numeric vectors."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#quotechar-escapechar-and-doublequote-options","title":"QuoteChar, EscapeChar and DoubleQuote Options","text":"<p>If EscapeChar is set then any character may be prefixed by the escape character. The escape character is typically defined as <code>'\\'</code>. The escape character immediately followed by the character <code>c</code> is the literal character <code>c</code> even if <code>c</code> alone would have been a metacharacter.</p> <p>If QuoteChar is set then fields may be delimited by the specified quote character. Within quoted fields all characters except the quote character, and the escape character if defined, are literal characters.</p> <p>If DoubleQuote is set to 1 then two consecutive quote characters within a quoted field are interpreted as the single literal quote character.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#result","title":"Result","text":"<p>The result <code>R</code> contains the imported data.</p> <p>If <code>Y[4]</code> does not specify that the data contains a header then <code>R</code> contains the entire data in the form specified by the Invert variant option.</p> <p>If <code>Y[4]</code> does specify that the data contains a header then <code>R</code> is a 2-element vector where:</p> <ul> <li><code>R[1]</code> is the imported data excluding the header.</li> <li><code>R[2]</code> is a vector of character vectors containing the header record.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#examples","title":"Examples","text":"<pre><code>      \u2283\u2395NGET CSVFile\u2190'c:\\Dyalog16.0\\sales.csv'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Product,Sales                                   \u2502\n\u2502             Widgets,1912                       \u2502\n\u2502                         Gimlets,205            \u2502\n\u2502                                    Dingbats,189\u2502\n\u2502                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u2395CSV CSVFile\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502Product\u2502  \u2502Sales\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2192\u2500\u2500\u2500\u2510  \u2502\n\u2502 \u2502Widgets\u2502  \u25021912\u2502  \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2192\u2500\u2500\u2510   \u2502\n\u2502 \u2502Gimlets\u2502  \u2502205\u2502   \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2518   \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510   \u2502\n\u2502 \u2502Dingbats\u2502 \u2502189\u2502   \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518   \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u2395CSV CSVFile'' \u236c 1 \u235d Header row\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2193 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2192\u2500\u2500\u2500\u2510 \u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\n\u2502 \u2502 \u2502Widgets\u2502  \u25021912\u2502 \u2502 \u2502 \u2502Product\u2502 \u2502Sales\u2502 \u2502 \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2192\u2500\u2500\u2510  \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2502 \u2502Gimlets\u2502  \u2502205\u2502  \u2502                       \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2518  \u2502                       \u2502\n\u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510  \u2502                       \u2502\n\u2502 \u2502 \u2502Dingbats\u2502 \u2502189\u2502  \u2502                       \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518  \u2502                       \u2502\n\u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                       \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u2395CSV CSVFile''(1 2)1 \u235d Fields are Char, Num\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2193 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\n\u2502 \u2502 \u2502Widgets\u2502  1912 \u2502 \u2502 \u2502Product\u2502 \u2502Sales\u2502 \u2502 \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2502 \u2502Gimlets\u2502  205  \u2502                       \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502                       \u2502\n\u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502                       \u2502\n\u2502 \u2502 \u2502Dingbats\u2502 189  \u2502                       \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502                       \u2502\n\u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                       \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      (\u2395CSV\u2360'Invert' 1)CSVFile'' (1 2) 1    \u235d Invert 1\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\n\u2502 \u2502 \u2193Widgets \u2502 \u25021912 205 189\u2502 \u2502 \u2502 \u2502Product\u2502 \u2502Sales\u2502 \u2502 \u2502\n\u2502 \u2502 \u2502Gimlets \u2502 \u2514~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502 \u2502 \u2502Dingbats\u2502                \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502                       \u2502\n\u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                       \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>      \u2283(\u2395CSV\u2360'Invert' 2)CSVFile'' (1 2) 1    \u235d Invert 2\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u25021912 205 189\u2502 \u2502\n\u2502 \u2502 \u2502Widgets\u2502 \u2502Gimlets\u2502 \u2502Dingbats\u2502 \u2502 \u2514~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                \u2502\n\u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#notes","title":"Notes","text":"<ul> <li>When <code>Y</code> specifies just the source of the CSV data, it does not need to be enclosed or ravelled to create a 1-element vector.</li> <li><code>Y[2]</code>, the description of the source, distinguishes an otherwise ambiguous character vector source (which could contain either CSV data or a file name). The other source forms are unambiguous but the description, when given, must still match the given source type.</li> <li>Tab-separated fields may be imported by specifying <code>'Separator' (\u2395UCS 9)</code>.</li> <li>Fields containing embedded new lines are supported (they must, of course, appear in quotes or be prefixed by the escape character). On import, line endings are always converted to a single line feed character.</li> <li>If Ragged is not set then all records must have the same number of fields (character delimited format) or same number of characters (fixed width field format).</li> <li>If Ragged is set:</li> <li>The expected number of columns must be specified using the Widths variant option and/or the column types in <code>Y[3]</code>.</li> <li>In character delimited format, all processed records are implicitly extended or truncated as required so that they contain the expected number of fields; implicitly added fields will be empty.</li> <li>In fixed width format, all processed records are implicitly extended with spaces or truncated as required so that they contain as many characters as are specified in the Widths option declaration.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#file-handling","title":"File handling","text":"<p>Data may be read from a named file or a tied native file. A tied native file may be read in sections by repeatedly invoking <code>\u2395CSV</code> for a specified maximum number of records (specified by the Records variant) until no more data is read.</p> <p>In all cases the files must contain text using one of the supported encodings. See File Encodings on page 1. The method used to determine the file encoding is as follows:</p> <ul> <li>If a Byte Order Mark (BOM) is encountered at the start of the file, it is used regardless of <code>Y[2]</code> (if specified). Note, however, that the BOM can only be encountered if the file is read from the start - specifically, if a native file is read in sections, any BOM present will only be encountered when the first section is read.</li> <li>Otherwise, the file will be read and decoded according to the file encoding in <code>Y[2]</code> if specified.</li> <li>Otherwise:    Native files will be decoded as if <code>'UTF-8'</code> had been specified.    Files specified by name will be examined and the likely file encoding will be deduced using the same heuristics performed by <code>\u2395NGET</code>.</li> <li>Native files will be decoded as if <code>'UTF-8'</code> had been specified.</li> <li>Files specified by name will be examined and the likely file encoding will be deduced using the same heuristics performed by <code>\u2395NGET</code>.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#note-also","title":"Note also:","text":"<ul> <li>Native files are read from the current file position. On successful completion, the file position will be at the first unprocessed character (end of file if the Records variant option is not specified). If an error is signalled the file position is undefined.</li> <li>The result does not report the file encoding or line ending type as it does with <code>\u2395NGET</code>. If this information is required then it must be obtained by other means.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#dyadic-csv","title":"Dyadic \u2395CSV","text":"<p><code>{R}\u2190X \u2395CSV Y</code></p> <p>The left argument <code>X</code> is either:</p> <ul> <li>a matrix or a vector of vectors/matrices  containing the data to be converted to CSV format.</li> <li>or a 2-element vector containing a matrix or vector of vectors/matrices containing the data to be converted to CSV format, and a vector of character vectors containing the header record.</li> </ul> <p><code>Y</code> is a 1 or 2-element vector containing:</p> <code>[1]</code> Destination of CSV Data (see below) <code>[2]</code> Description of the CSV data (see below) <p>Destination - may be one of:</p> <ul> <li>a character vector or scalar containing a file name</li> <li>a native tie number</li> <li>an empty character vector, indicating that the CSV data is to be returned in the result <code>R</code></li> </ul> <p>Description</p> <p>If <code>Y[1]</code>  is a file name or tie number, Description may be:</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#-a-character-vector-specifying-the-file-encoding-such-as-utf-8-see-file-encodings-on-page-1_1","title":"- a character vector specifying the file encoding such as <code>'UTF-8'</code> (see File Encodings on page 1).","text":"<p>If <code>Y[1]</code> is empty, Description may be a character scalar <code>'S'</code> (simple) or <code>'N'</code> (nested). If omitted, the default is <code>'S'</code></p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#variant-options_1","title":"Variant options","text":"<p>Dyadic <code>\u2395CSV</code> may be applied using the  Variant operator with the following options.</p> Name Meaning Default IfExists a character vector <code>'Error'</code> or <code>'Replace'</code> which specifies, when creating a named file  which already exists, whether to overwrite it ( <code>'Replace'</code> ) or signal an error ( <code>'Error'</code> ) <code>'Error'</code> Separator the field separator, any single character. If Widths is other than <code>\u236c</code> , Separator is ignored. <code>','</code> Widths a vector of numeric values describing the width (in  characters) of the corresponding columns in the CSV source, or <code>\u236c</code> for variable width delimited fields <code>\u236c</code> Decimal the decimal mark in numeric fields - one of <code>'.'</code> or <code>','</code> <code>'.'</code> Thousands the thousands separator in numeric fields, which may be  specified as an empty character vector (meaning no separator is defined) or a  character scalar <code>''</code> Trim a Boolean specifying whether whitespace is trimmed at the  beginning and end of character fields <code>1</code> LineEnding the line ending sequence - see Line separators: on page 1 (13 10) on Windows; 10 on other platforms QuoteChar The field quote character (delimiter), which may be specified as an empty character vector (meaning none is defined) or a character scalar <code>\"</code> EscapeChar The escape character, which may be specified as an empty character vector (meaning none is defined) or a character scalar <code>''</code> DoubleQuote A Boolean which indicates whether (1) or not (0) a quote character within a quoted field is represented by two consecutive quote characters <code>1</code> <p>The Separator, QuoteChar and EscapeChar characters, when defined, must be different. Other options defined for import are also accepted but ignored.</p> <p>The Overwrite variant option (Boolean) from Version 16.0 remains supported but is deprecated in favour of IfExists.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#quotechar-escapechar-and-doublequote-options_1","title":"QuoteChar, EscapeChar and DoubleQuote options","text":"<ul> <li>The CSV text will be generated such that it can be read back according to the corresponding rules for import.</li> <li>If these options do not permit this (for example, a field contains the quote character and neither DoubleQuote or EscapeChar are set) an error is signalled.</li> <li>Quoting and Escaping is used as conservatively as possible.</li> <li>If both QuoteChar and EscapeChar are set, quoting is favoured.</li> </ul> <p>If <code>Y</code> specifies that the CSV data is written to a file then <code>R</code> is the number of bytes (not characters) written, and is shy.</p> <p>Otherwise, <code>R</code> is the CSV data in the format specified in Y, and is not shy.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#examples_1","title":"Examples","text":"<pre><code>       CSVFile\u2190'c:\\Dyalog16.0\\sales.csv'\n       \u2395\u2190DATA HDR\u2190\u2395CSV CSVFile''(1 2)1\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2193 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\n\u2502 \u2502 \u2502Widgets\u2502  1912 \u2502 \u2502 \u2502Product\u2502 \u2502Sales\u2502 \u2502 \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2502 \u2502Gimlets\u2502  205  \u2502                       \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502                       \u2502\n\u2502 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502                       \u2502\n\u2502 \u2502 \u2502Dingbats\u2502 189  \u2502                       \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502                       \u2502\n\u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                       \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>     DATA\u236a\u2190'Gizmos' 23\n      DATA HDR \u2395CSV''\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Product,Sales\u2502\n\u2502             \u2502\n\u2502Widgets,1912 \u2502\n\u2502             \u2502\n\u2502Gimlets,205  \u2502\n\u2502             \u2502\n\u2502Dingbats,189 \u2502\n\u2502             \u2502\n\u2502Gizmos,23    \u2502\n\u2502             \u2502\n\u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>       CSVFile1\u2190'c:\\Dyalog16.0\\sales1.csv'\n       \u2395\u2190DATA HDR \u2395CSV CSVFile1\n\n67\n       DATA\u236a\u2190'Gimbals' 123\n       \u2395\u2190DATA HDR \u2395CSV CSVFile1\nFILE NAME ERROR: Unable to create file (\"The file exists.\")\n       \u2395\u2190DATA HDR \u2395CSV CSVFile1\n      \u2227\n       \u2395\u2190DATA HDR(\u2395CSV\u2360'IfExists' 'Replace')CSVFile1\n\n80 \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/csv/#notes_1","title":"Notes","text":"<ul> <li>When <code>Y</code> contains only the destination of the CSV data (i.e. omits the description in its second element) it does not have to be enclosed to form a single element vector.</li> <li>Native files are written from the current file position. On successful completion, the file position will be at the end of the written data. If an error is signalled the amount of data written is undefined.</li> <li>If the file encoding specifies that a BOM is required and output is to a native file, it will only be written if the file position is initially at 0 - that is, the start of the file is being written.</li> <li>When fixed width fields are written, character data shorter than the specified width is padded with spaces to the right and character data longer than the specified width signals an error. Numeric data is converted to character data as far as possible so that it fits into the specified width. If this is not possible, an error is signalled.</li> <li>Tab-separated fields may be exported by specifying <code>'Separator' (\u2395UCS 9)</code>.</li> <li>Fields containing a single embedded new line are supported.  On export, line feed characters are mapped back to the defined line ending sequence.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ct/","title":"Comparison Tolerance","text":"Comparison Tolerance \u2395CT <p>The value of <code>\u2395CT</code> determines the precision with which two numbers are judged to be equal.  Two numbers, <code>X</code> and <code>Y</code>, are judged to be equal if <code>(|X-Y)\u2264\u2395CT\u00d7(|X)\u2308|Y</code>where <code>\u2264</code> is applied without tolerance.</p> <p>Thus <code>\u2395CT</code> is not used as an absolute value in comparisons, but rather specifies a relative value that is dependent on the magnitude of the number with the greater magnitude. It then follows that <code>\u2395CT</code> has no effect when either of the numbers is zero.</p> <p><code>\u2395CT</code> may be assigned any value in the range from <code>0</code> to  <code>2*\u00af32</code>  (about <code>2.3E\u00af10</code>). A value of <code>0</code> ensures exact comparison.  The value in a clear workspace is <code>1E\u00af14</code>. <code>\u2395CT</code> has Namespace scope.</p> <p>If <code>\u2395FR</code> is 1287, the system uses <code>\u2395DCT</code>. See Decimal Comparison Tolerance  on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ct/#examples","title":"Examples","text":"<pre><code>      \u2395CT\u21901E\u00af10\n      1.00000000001 1.0000001 = 1\n1 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cy/","title":"Copy Workspace","text":"Copy Workspace {R}\u2190{X}\u2395CY Y <p><code>Y</code> must be a simple character scalar or vector identifying a saved workspace (or Session file).  <code>X</code> is optional.  If present, it must be a simple character scalar, vector or matrix or a vector of character vectors that specifies one or more APL names.</p> <p>Each name in <code>X</code> is taken to be the name of an active object in the workspace identified by <code>Y</code>.  If <code>X</code> is omitted, the names of all defined active objects in that workspace are implied (defined functions and operators, variables, labels and namespaces).</p> <p>Each object named in <code>X</code> (or implied) is copied from the workspace identified by <code>Y</code> to become the active object referenced by that name in the active workspace if the object can be copied.  A copied label is re-defined to be a variable of numeric type.  If the name of the copied object has an active referent in the active workspace, the name is disassociated from its value and the copied object becomes the active referent to that name.  In particular, a function in the state indicator which is disassociated may be executed whilst it remains in the state indicator, but it ceases to exist for other purposes, such as editing.</p> <p>The shy result <code>R</code> is <code>0\u2374\u2282''</code>.</p> <p>You may copy an object from a namespace by specifying its full pathname.  The object will be copied to the current namespace in the active workspace, losing its original parent and gaining a new one in the process.  You may only copy a GUI object into a namespace that is a suitable parent for that object.  For example, you could only copy a Group object from a saved workspace if the current namespace in the active workspace is itself a Form, SubForm or Group.</p> <p>See \"Copy Workspace: \" on page 1 for further information and, in particular, the manner in which dependent and referenced objects are copied, and copying objects from Session (.dse) files.</p> <p>A <code>DOMAIN ERROR</code> is reported in any of the following cases:</p> <ul> <li><code>Y</code> is ill-formed, or is not the name of a workspace with access authorised for the active user account.</li> <li>Any name in <code>X</code> is ill-formed.</li> <li>An object named in <code>X</code> does not exist as an active object in workspace named in <code>Y</code>.</li> </ul> <p>An object being copied has the same name as an active label.</p> <p>When copying data between Classic and Unicode Editions, <code>\u2395</code>CY will fail and a <code>TRANSLATION ERROR</code> will be reported if any object in workspace <code>Y</code> fails conversion between Unicode and <code>\u2395AV</code> indices, whether or not that object is specified by <code>X</code>. See \"Note\" on page 1 for further details.</p> <p>A <code>WS FULL</code> is reported if the active workspace becomes full during the copying process.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cy/#example","title":"Example","text":"<pre><code>      \u2395VR'FOO'\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n      'FOO' \u2395CY 'BACKUP'\n      \u2395VR'FOO'\n     \u2207 R\u2190FOO X\n[1]    R\u219010\u00d7X\n     \u2207\n</code></pre> <p>System variables are copied if explicitly included in the left argument, but not if the left argument is omitted.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cy/#example_1","title":"Example","text":"<pre><code>      \u2395LX\n\n      ('\u2395LX' 'X')\u2395CY'WS/CRASH'\n      \u2395LX\n\u2192RESTART\n</code></pre> <p>A copied object may have the same name as an object being executed.  If so, the name is disassociated from the existing object, but the existing object remains defined in the workspace until its execution is completed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/cy/#example_2","title":"Example","text":"<pre><code>      )SI\n#.FOO[1]*\n\n      \u2395VR'FOO'\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n\n      'FOO'\u2395CY'WS/MYWORK'\n\n      FOO\n1 2 3\n      )SI\n#.FOO[1]*\n      \u2192\u2395LC\n10\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/d/","title":"Digits","text":"Digits R\u2190\u2395D <p>This is a simple character vector of the digits from 0 to 9.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/d/#example","title":"Example","text":"<pre><code>      \u2395D\n0123456789\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/data-representation-dyadic/","title":"Data Representation (Dyadic)","text":"Data Representation (Dyadic) R\u2190X \u2395DR Y <p>Dyadic <code>\u2395DR</code> converts the data type of its argument <code>Y</code> according to the type specification <code>X</code>. See \"Data Representation (Monadic)\" above for a list of data types but note that 1287 is not a permitted value in <code>X</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/data-representation-dyadic/#case-1","title":"Case 1:","text":"<p><code>X</code> is a single integer value. The bits in the right argument are interpreted as elements of an array of type <code>X</code>. The shape of the resulting new array will typically be changed along the last axis. For example, a character array interpreted as Boolean will have 8 times as many elements along the last axis.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/data-representation-dyadic/#case-2","title":"Case 2:","text":"<p><code>X</code> is a 2-element integer value. <code>Y</code> is any array.</p> <p><code>X[1]</code> is either 0 or a data type. If <code>X[1]</code> is 0, <code>Y</code> is converted to data type <code>X[2]</code>. If <code>X[1]</code> is non-zero, the bits in <code>Y</code> are first interpreted as being of type <code>X[1]</code> before being converted to type <code>X[2]</code>. If <code>Y</code> is a scalar it is ravelled. Conversion of <code>Y</code> from one internal data type to another is performed so as to preserve its values without loss of precision.</p> <p>The result <code>R</code> is a two element nested array comprised of:</p> <ol> <li>The converted elements or a fill element (0 or blank) where the conversion failed</li> <li>A Boolean array of the same shape indicating which elements were successfully converted.</li> </ol>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/data-representation-dyadic/#examples","title":"Examples","text":"<pre><code>      bits\u2190 0 1 0 0 1 0 0 0 , 0 1 0 0 1 0 1 1\n      80 \u2395DR bits\nHK\n      83 \u2395DR bits\n72 75\n      163 \u2395DR bits\n19272\n\n      0 645 \u2395DR 72 75\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u250272 75\u25021 1\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n      163 645 \u2395DR 72 75\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510\n\u250219272\u25021\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/data-representation-dyadic/#case-3-classic-edition-only","title":"Case 3: Classic Edition Only","text":"<p><code>X</code> is a 3-element integer value and <code>X[2 3]</code> is <code>163 82</code>. The bits in the right argument are interpreted as elements of an array of type <code>X[1]</code>. The system then converts them to the character representation of the corresponding 16 bit integers. This case is provided primarily for compatibility with APL*PLUS. For new applications, the use of the [conv] field with <code>\u2395NAPPEND</code> and <code>\u2395NREPLACE</code> is recommended.</p> <p>Conversion to and from character (data type 82) uses the translate vector given by <code>\u2395NXLATE 0</code>. By default this is the mapping defined by the current output translate table (usually WIN.DOT).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/data-representation-dyadic/#notes","title":"Notes:","text":"<ul> <li>The internal representation of data may be modified during workspace compaction. For example, numeric arrays and (in the Unicode Edition) character arrays will, if possible, be squeezed to occupy the least possible amount of memory. However, the internal representation of the result <code>R</code> is guaranteed to remain unmodified until it is re-assigned (or partially re-assigned) with the result of any function.</li> <li>The precise operation of dyadic <code>\u2395DR</code> depends upon the byte-ordering scheme of the computer system.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/data-representation-monadic/","title":"Data Representation (Monadic)","text":"Data Representation (Monadic) R\u2190\u2395DR Y <p>Monadic <code>\u2395DR</code> returns the type of its argument <code>Y</code>.  The result <code>R</code> is an integer scalar containing one of the following values. Note that the internal representation and data types for character data differ between the Unicode and Classic Editions.</p> <p>Unicode Edition</p> Value Data Type 11 1 bit Boolean 80 8 bits character 83 8 bits signed integer 160 16 bits character 163 16 bits signed integer 320 32 bits character 323 32 bits signed  integer 326 Pointer (32-bit or 64-bit as appropriate) 645 64 bits Floating 1287 128 bits Decimal 1289 128 bits Complex <p>Classic Edition</p> Value Data Type 11 1 bit Boolean 82 8 bits character 83 8 bits signed integer 163 16 bits signed integer 323 32 bits signed integer 326 Pointer  (32-bit or 64-bit as appropriate) 645 64 bits Floating 1287 128 bits Decimal 1289 128 bits Complex"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dct/","title":"Decimal Comparison Tolerance","text":"Decimal Comparison Tolerance \u2395DCT <p>The value of <code>\u2395DCT</code> determines the precision with which two numbers are judged to be equal when the value of <code>\u2395FR</code> is 1287. If <code>\u2395FR</code> is 645, the system uses <code>\u2395CT</code>.</p> <p><code>\u2395DCT</code> may be assigned any value in the range from <code>0</code> to <code>2*\u00af32</code> (about <code>2.3283064365386962890625E\u00af10</code>). A value of <code>0</code> ensures exact comparison. The value in a clear workspace is <code>1E\u00af28</code>. <code>\u2395DCT</code> has Namespace scope.</p> <p>For further information, see \"Comparison Tolerance: \" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dct/#examples","title":"Examples","text":"<pre><code>      \u2395DCT\u21901E\u00af10\n      1.00000000001 1.0000001 = 1\n1 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/df/","title":"Display Form","text":"Display Form {R}\u2190\u2395DF Y <p><code>\u2395DF</code> sets the Display Formof a namespace, a GUI object, a Class, or an Instance of a Class.</p> <p><code>Y</code> must be <code>\u2395NULL</code> or a simple character array that specifies the display form of a namespace. If defined, this array will be returned by the format functions and <code>\u2395FMT</code> instead of the default for the object in question. This also applies to the string that is displayed when the name is referenced but not assigned (the default display). If <code>Y</code> is  <code>\u2395NULL</code>, <code>\u2395DF</code> resets the Display Form to the default.</p> <p>The result <code>R</code> is the previous value of the Display Form which initially is <code>\u2395NULL</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/df/#example","title":"Example","text":"<pre><code>\n      'F'\u2395WC'Form'\n      \u2355F\n#.F\n      \u2374\u2355F\n3\n      \u2395FMT F\n#.F\n      \u2374\u2395FMT F\n1 3\n      F \u235d default display uses \u2355\n#.F\n\n      F.\u2395DF 'Pete''s Form'\n      \u2355F\nPete's Form\n      \u2374\u2355F\n11\n      \u2395FMT F\nPete's Form\n      \u2374\u2395FMT F\n1 11\n</code></pre> <p>Notice that <code>\u2395DF</code> will accept any character array, but <code>\u2395FMT</code> always returns a matrix.</p> <pre><code>\n      F.\u2395DF 2 2 5\u2374\u2395A\n      F\nABCDE\nFGHIJ\n\nKLMNO\nPQRST\n      \u2374\u2355F\n2 2 5\n\n</code></pre> <pre><code>\n      \u2374\u2395\u2190\u2395FMT F\nABCDE\nFGHIJ\n\nKLMNO\nPQRST\n5 5\n</code></pre> <p>Note that <code>\u2395DF</code> defines the Display Form statically, rather than dynamically.</p> <pre><code>\n      'F'\u2395WC'Form' 'This is the Caption'\n      F\n#.F\n\n      F.(\u2395DF Caption)\u235d set display form to current caption\n      F\nThis is the Caption\n\n      F.Caption\u2190'New Caption' \u235d changing caption does not\n                              \u235d change the display form\n      F\nThis is the Caption\n</code></pre> <p>You may use the Constructor function to assign the Display Form to an Instance of a Class. For example:</p> <pre><code>\n:Class MyClass\n    \u2207 Make arg\n      :Access Public\n      :Implements Constructor\n      \u2395DF arg\n    \u2207\n:EndClass \u235d MyClass\n\n      PD\u2190\u2395NEW MyClass 'Pete'\n      PD\nPete\n</code></pre> <p>It is possible to set the Display Form for the Root and for <code>\u2395SE</code></p> <pre><code>\n      )CLEAR\nclear ws\n      #\n#\n      \u2395DF \u2395WSID\n      #\nCLEAR WS\n\n      \u2395SE\n\u2395SE\n      \u2395SE.\u2395DF 'Session'\n      \u2395SE\nSession\n</code></pre> <p>Note that <code>\u2395DF</code> applies directly to the object in question and is not automatically applied in a hierarchical fashion.</p> <pre><code>\n      'X'\u2395NS ''\n      X\n#.X\n\n      'Y'X.\u2395NS ''\n      X.Y\n#.X.Y\n      X.\u2395DF 'This is X'\n      X\nThis is X\n\n      X.Y\n#.X.Y\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/div/","title":"Division Method","text":"Division Method \u2395DIV <p>The value of <code>\u2395DIV</code> determines how division by zero is to be treated.  If <code>\u2395DIV=0</code>, division by 0 produces a <code>DOMAIN ERROR</code> except that the special case of <code>0\u00f70</code> returns 1.</p> <p>If <code>\u2395DIV=1</code>, division by 0 returns 0.</p> <p><code>\u2395DIV</code> may be assigned the value 0 or 1.  The value in a clear workspace is 0.</p> <p><code>\u2395DIV</code> is an implicit argument of the monadic function Reciprocal (<code>\u00f7</code>) and the dyadic function Divide (<code>\u00f7</code>). <code>\u2395DIV</code> has Namespace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/div/#examples","title":"Examples","text":"<pre><code>      \u2395DIV\u21900\n\n      1 0 2 \u00f7 2 0 1\n0.5 1 2\n\n      \u00f70 1\nDOMAIN ERROR\n      \u00f70 1\n      ^\n\n      \u2395DIV\u21901\n\n      \u00f70 2\n0 0.5\n\n      1 0 2 \u00f7 0 0 4\n0 0 0.5\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dl/","title":"Delay","text":"Delay {R}\u2190\u2395DL Y <p><code>Y</code> must be a simple non-negative single numeric value (of any rank).  A pause of approximately <code>Y</code> seconds is caused.</p> <p>The shy result <code>R</code> is a scalar numeric value indicating the length of the pause in seconds.</p> <p>The pause may be interrupted by a weak or strong interrupt.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dm/","title":"Diagnostic Message","text":"Diagnostic Message R\u2190\u2395DM <p>This niladic function returns the last reported APL error as a three-element vector, giving error message, line in error and position of caret pointer.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dm/#example","title":"Example","text":"<pre><code>\n      2\u00f70\nDOMAIN ERROR\n      2\u00f70\n     ^\n\n      \u2395DM\n DOMAIN ERROR        2\u00f70       ^\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dmx/","title":"Extended Diagnostic Message","text":"Extended Diagnostic Message R\u2190\u2395DMX <p><code>\u2395DMX</code> is a system object that provides information about the last reported APL error. <code>\u2395DMX</code> has thread scope, i.e. its value differs according to the thread from which it is referenced. In a multi-threaded application therefore, each thread has its own value of <code>\u2395DMX</code>.</p> <p><code>\u2395DMX</code> contains the following Properties (name class 2.6). Note that this list is likely to change. Your code should not assume that this list will remain unchanged. You should also not assume that the display form of <code>\u2395DMX</code> will remain unchanged.</p> <code>Category</code> character vector The category of the error <code>DM</code> nested vector Diagnostic message. This is the same as <code>\u2395DM</code> , but thread safe <code>EM</code> character vector Event message; this is the same as <code>\u2395EM \u2395EN</code> <code>EN</code> integer Error number. This is the same as <code>\u2395EN</code> , but thread safe <code>ENX</code> integer Sub-error number <code>HelpURL</code> character vector URL of a web page that will provide help for this error. APL identifies and has a handler for URLs starting with http: , https: , mailto: and www. This list may be extended in future <code>InternalLocation</code> nested vector Identifies the line of interpreter source code (file name and line number) which raised the error. This information may be useful to Dyalog support when investigating an issue <code>Message</code> character vector Further information about the error <code>OSError</code> see below If applicable, identifies the error generated by the Operating System or by a child process <code>Vendor</code> character vector For system generated errors, <code>Vendor</code> will always contain the character vector <code>'Dyalog'</code> . This value can be set using <code>\u2395SIGNAL</code> <p>OSError is a 3-element vector whose items are as follows:</p> <code>1</code> integer This indicates how an error from the operating system or a child process was retrieved. 0 = by the C-library errno() function 1 = by the Windows GetLastError() function 2 = as the exit status of a child process <code>2</code> integer Error code. The error number returned by the operating system using errno() or GetLastError() as above <code>3</code> character vector The description of the error returned by the operating system"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dmx/#example","title":"Example","text":"<pre><code>      1\u00f70\nDOMAIN ERROR\n      1\u00f70\n     \u2227\n      \u2395DMX\n EM       DOMAIN ERROR                              \n Message  Divide by zero                            \n\n      \u2395DMX.InternalLocation\n arith_su.c  554\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dmx/#isolation-of-handled-errors","title":"Isolation of Handled Errors","text":"<p><code>\u2395DMX</code> cannot be explicitly localised in the header of a function. However, for all trapped errors, the interpreter creates an environment which effectively makes the current instance of <code>\u2395DMX</code> local to, and available only for the duration of, the trap-handling code.</p> <p>With the exception of <code>\u2395TRAP</code> with Cutback,  <code>\u2395DMX</code> is implicitly localised within:</p> <ul> <li>Any function which explicitly localises <code>\u2395TRAP</code></li> <li>The <code>:Case[List]</code> or <code>:Else</code> clause of a <code>:Trap</code> control structure.</li> <li>The right hand side of a D-function Error-Guard.</li> </ul> <p>and is implicitly un-localised when:</p> <ul> <li>A function which has explicitly localised <code>\u2395TRAP</code> terminates (even if the trap definition has been inherited from a function further up the stack).</li> <li>The <code>:EndTrap</code> of the current <code>:Trap</code> control structure is reached.</li> <li>A D-function Error-Guard exists.</li> </ul> <p>During this time, if an error occurs then the localised <code>\u2395DMX</code> is updated to reflect the values generated by the error.</p> <p>The same is true for <code>\u2395TRAP</code> with Cutback, with the exception that  if the cutback trap event is triggered, the updated values for <code>\u2395DMX</code> are preserved until the function that set the cutback trap terminates.</p> <p>The benefit of the localisation strategy is that code which uses error trapping as a standard operating procedure (such as a file utility which traps <code>FILE NAME ERROR</code> and creates missing files when required) will not pollute the environment with irrelevant error information.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dmx/#example_1","title":"Example","text":"<pre><code>     \u2207 tie\u2190NewFile name\n[1]    :Trap 22\n[2]        tie\u2190name \u2395FCREATE 0\n[3]    :Else\n[4]        \u2395DMX\n[5]        tie\u2190name \u2395FTIE 0\n[6]        name \u2395FERASE tie\n[7]        tie\u2190name \u2395FCREATE 0\n[8]    :EndTrap\n[9]    \u2395FUNTIE tie\n     \u2207\n\n</code></pre> <p><code>\u2395DMX</code> is cleared by  <code>)RESET</code>:</p> <pre><code>\n      )reset\n      \u2374\u2395FMT \u2395DMX\n0 0\n\n</code></pre> <p>The first time we run <code>NewFile 'pete'</code>, the file doesn't exist and  the <code>\u2395FCREATE</code> in <code>NewFile[2]</code>succeeds.</p> <pre><code>  NewFile 'pete'\n</code></pre> <p>1</p> <p>If we run the function again, the <code>\u2395FCREATE</code> in <code>NewFile[2]</code>generates an error which triggers the <code>:Else</code> clause of the :<code>Trap</code>.  On entry to the <code>:Else</code> clause, the values in <code>\u2395DMX</code> reflect the error generated by <code>\u2395FCREATE</code>. The file is then tied, erased and  recreated.  EM       FILE NAME ERROR                                       Message  File exists</p> <p>After exiting the <code>:Trap</code> control structure, the shadowed value of <code>\u2395DMX</code> is discarded, revealing the original value that it shadowed.</p> <pre><code>  \u2374\u2395FMT \u2395DMX\n</code></pre> <p>0 0</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dmx/#example_2","title":"Example","text":"<p>The <code>EraseFile</code> function also uses a <code>:Trap</code> in order to ignore the situation when the file doesn't exist.      \u2207 EraseFile name;tie [1]    :Trap 22 [2]        tie\u2190name \u2395FTIE 0 [3]        name \u2395FERASE tie [4]    :Else [5]        \u2395DMX [6]    :EndTrap      \u2207</p> <p>The first time we run the function, it succeeds in tieing and then erasing the file.</p> <pre><code>  EraseFile 'pete'\n</code></pre> <p>The second time, the <code>\u2395FTIE</code> fails. On entry to the <code>:Else</code> clause, the values in <code>\u2395DMX</code> reflect this error.</p> <pre><code>  EraseFile 'pete'\n</code></pre> <p>EM       FILE NAME ERROR                                        Message  Unable to open file                                    OSError  1 2  The system cannot find the file specified.        </p> <p>Once again, the local value of <code>\u2395DMX</code> is discarded on exit from the <code>:Trap</code>, revealing the shadowed value as before.</p> <pre><code>  \u2374\u2395FMT \u2395DMX\n</code></pre> <p>0 0</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dmx/#example_3","title":"Example","text":"<p>In this example only the error number (<code>EN</code>) property of <code>\u2395DMX</code> is displayed in order to simplify the output:</p> <pre><code>\n     \u2207 foo n;\u2395TRAP\n[1]    'Start foo'\u2395DMX.EN\n[2]    \u2395TRAP\u2190(2 'E' '\u2192err')(11 'C' '\u2192err')\n[3]    goo n\n[4]   err:'End foo:'\u2395DMX.EN\n     \u2207\n\n     \u2207 goo n;\u2395TRAP\n[1]    \u2395TRAP\u21905 'E' '\u2192err'\n[2]    \u234en\u2283'\u00f70' '1 2+1 2 3' '\u2218'\n[3]   err:'goo:'\u2395DMX.EN\n     \u2207\n\n</code></pre> <p>In the first case a <code>DOMAIN ERROR</code> (11) is generated on <code>goo[2]</code>. This error is not included in the definition of <code>\u2395TRAP</code> in <code>goo</code>, but rather  the Cutback <code>\u2395TRAP</code> definition in <code>foo</code>. The error causes the stack to be cut back to <code>foo</code>, and then execution branches to <code>foo[4]</code>.  Thus <code>\u2395DMX.EN</code> in <code>foo</code> retains the value set when the error occurred in <code>goo</code>.</p> <pre><code>      foo 1\n Start foo  0\n End foo:  11\n\n</code></pre> <p>In the second case a <code>LENGTH ERROR</code> (5) is raised on <code>goo[2]</code>.   This error is included in the definition of <code>\u2395TRAP</code> in <code>goo</code> so the value <code>\u2395DMX.EN</code> while in <code>goo</code> is 5, but when <code>goo</code> terminates and <code>foo</code> resumes execution the value of <code>\u2395DMX.EN</code> localised in <code>goo</code> is lost.</p> <pre><code>      foo 2\n Start foo  0\n goo:  5\n End foo:  0\n\n</code></pre> <p>In the third case a <code>SYNTAX ERROR</code> (2) is raised on <code>goo[2]</code>. Since the <code>\u2395TRAP</code> statement is handled within <code>goo</code> (although the applicable <code>\u2395TRAP</code> is defined in <code>foo</code>), the value <code>\u2395DMX.EN</code> while in <code>goo</code> is 2, but when <code>goo</code> terminates and <code>foo</code> resumes execution the value of <code>\u2395DMX.EN</code> localised in <code>goo</code> is lost.</p> <pre><code>      foo 3\n Start foo  0\n goo:  2\n End foo:  0\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dq/","title":"Dequeue Events","text":"Dequeue Events {R}\u2190\u2395DQ Y <p><code>\u2395DQ</code> awaits and processes events.  <code>Y</code> specifies the GUI objects(s) for which events are to be processed.  Objects are identified by their names, as character scalars/vectors, or by namespace references. These may be objects of type Root, Form, Locator, FileBox, MsgBox, PropertySheet, TCPSocket, Timer, Clipboard and pop-up Menu. Sub-objects (children) of those named in <code>Y</code> are also included.  However, any objects which exist, but are not named in <code>Y</code>, are effectively disabled (do not respond to the user).</p> <p>If <code>Y</code> is <code>#</code>, <code>'#'</code>, or <code>'.'</code>, all objects currently owned and subsequently created by the current thread are included in the <code>\u2395DQ</code>. Note that because the Root object is owned by thread 0, events on Root are reported only to thread 0.</p> <p>If <code>Y</code> is empty it specifies the object associated with the current namespace and is only valid if the current space is one of the objects listed above.</p> <p>Otherwise, <code>Y</code> contains the name(s) of or reference(s) to the objects for which events are to be processed.  Effectively, this is the list of objects with which the user may interact.  A <code>DOMAIN ERROR</code> is reported if an element of <code>Y</code> refers to anything other than an existing \"top-level\" object.</p> <p>Associated with every object is a set of events.  For every event there is defined an \"action\" which specifies how that event is to be processed by <code>\u2395DQ</code>.  The \"action\" may be a number with the value <code>0</code>, <code>1</code> or <code>\u00af1</code>,  a character vector containing the name of a \"callback function\", or a character vector containing the name of a callback function coupled with an arbitrary array.  Actions can be defined in a number of ways, but the following examples will illustrate the different cases.</p> <pre><code>      OBJ \u2395WS 'Event' 'Select' 0\n\n      OBJ \u2395WS 'Event' 'Select' 1\n\n      OBJ \u2395WS 'Event' 'Select' 'FOO'\n\n      OBJ \u2395WS 'Event' 'Select' 'FOO' 10\n\n      OBJ \u2395WS 'Event' 'Select' 'FOO&amp;'\n</code></pre> <p>These are treated as follows:</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dq/#action-0-the-default","title":"Action = 0 (the default)","text":"<p><code>\u2395DQ</code> performs \"standard\" processing appropriate to the object and type of event.  For example, the standard processing for a KeyPress event in an Edit object is to action the key press, i.e. to echo the character on the screen.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dq/#action-1","title":"Action = \u00af1","text":"<p>This disables the event.  The \"standard\" processing appropriate to the object and type of event is not performed, or in some cases is reversed.  For example, if the \"action code\" for a KeyPress event (22) is set to <code>\u00af1</code>,  <code>\u2395DQ</code> simply ignores all keystrokes for the object in question.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dq/#action-1_1","title":"Action = 1","text":"<p><code>\u2395DQ</code> terminates and returns information pertaining to the event (the event message) in <code>R</code> as a nested vector whose first two elements are the name of the object (that generated the event) and the event code.  <code>R</code> may contain additional elements depending upon the type of event that occurred.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dq/#action-fn-larg","title":"Action = fn {larg}","text":"<p><code>fn</code> is a character vector containing the name of a callback function.  This function is automatically invoked by <code>\u2395DQ</code> whenever the event occurs, and prior to the standard processing for the event.  The callback is supplied the event message (see above) as its right argument, and, if specified, the array <code>larg</code> as its left argument.  If the callback function fails to return a result, or returns the scalar value 1,  <code>\u2395DQ</code> then performs the standard processing appropriate to the object and type of event.  If the callback function returns a scalar 0, the standard processing is not performed or in some cases is reversed.</p> <p>If the callback function returns its event message with some of the parameters changed, these changes are incorporated into the standard processing.  An example would be the processing of a keystroke message where the callback function substitutes upper case for lower case characters. The exact nature of this processing is described in the reference section on each event type.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dq/#action-expr","title":"Action = \u234eexpr","text":"<p>If <code>Action</code> is set to a character vector whose first element is the execute symbol (<code>\u234e</code>) the remaining string will be executed automatically whenever the event occurs.  The default processing for the event is performed first and may not be changed or inhibited in any way.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dq/#action-fn-larg_1","title":"Action = fn&amp; {larg}","text":"<p><code>fn</code> is a character vector containing the name of a callback function.  The function is executed in a new thread. The default processing for the event is performed first and may not be changed or inhibited in any way.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/dq/#the-result-of-dq","title":"The Result of \u2395DQ","text":"<p><code>\u2395DQ</code> terminates, returning the shy result <code>R</code>, in one of four instances.</p> <p>Firstly, <code>\u2395DQ</code> terminates when an event occurs whose \"action code\" is 1.  In this case, its result is a nested vector containing the event message associated with the event.  The structure of an event message varies according to the event type (see Object Reference).  However, an event message has at least two elements of which the first is a ref to the object or a character vector containing the name of the object, and the second is a character vector or numeric code which identifies the event type.</p> <p><code>\u2395DQ</code> also terminates if all of the objects named in <code>Y</code> have been deleted.  In this case, the result is an empty character vector.  Objects are deleted either using <code>\u2395EX</code>, or on exit from a defined function or operator if the names are localised in the header, or on closing a form using the system menu.</p> <p>Thirdly, <code>\u2395DQ</code> terminates if the object named in its right argument is a special modal object, such as a <code>MsgBox</code>, <code>FileBox</code> or <code>Locator</code>, and the user has finished interacting with the object (e.g. by pressing an \"OK\" button).  The return value of <code>\u2395DQ</code> in this case depends on the action code of the event.</p> <p>Finally, <code>\u2395DQ</code> terminates with a <code>VALUE ERROR</code> if it attempts to execute a callback function that is undefined.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ed/","title":"Edit Object","text":"Edit Object {R}\u2190{X}\u2395ED Y <p><code>\u2395ED</code> invokes the Editor.  <code>Y</code> is a simple character vector, a simple character matrix, or a vector of character vectors, containing the name(s) of objects to be edited.  The optional left argument <code>X</code> is  a character scalar or character vector which specifies the type(s) of the corresponding (new) object(s) named in <code>Y</code>, where:</p> <code>\u2207</code> function/operator <code>\u2192</code> simple character vector <code>\u220a</code> vector of character vectors <code>-</code> character matrix <code>\u235f</code> Namespace script <code>\u25cb</code> Class script <code>\u2218</code> Interface <p>If an object named in <code>Y</code> already exists, the type specification in <code>X</code> is ignored for that name.</p> <p>If <code>\u2395ED</code> is called from the Session, it opens Edit windows for the object(s) named in <code>Y</code> and returns a null result.  The cursor is positioned in the first of the Edit windows opened by <code>\u2395ED</code>, but may be moved to the Session or to any other window which is currently open.  The effect is almost identical to using <code>)ED</code>.</p> <p>If <code>\u2395ED</code> is called from a defined function or operator, its behaviour is different. On asynchronous terminals, the Edit windows are automatically displayed in \"full-screen\" mode (ZOOMED). In all implementations, the user is restricted to those windows named in <code>Y</code>. The user may not skip to the Session even though the Session may be visible.</p> <p><code>\u2395ED</code> terminates and returns a result ONLY when the user explicitly closes all the windows for the named objects. In this case the result contains the names of any objects which have been newly (re)fixed in the workspace as a result of the <code>\u2395ED</code>, and has the same structure as <code>Y</code>.</p> <p>Objects named in <code>Y</code> that cannot be edited are silently ignored. Objects qualified with a namespace path are (e.g.<code>a.b.c.foo</code>) are silently ignored if the namespace does not exist.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ed/#variants-of-edit-object","title":"Variants of Edit Object","text":"<p>The behaviour of <code>\u2395ED</code> may be modified using the variant operator <code>\u2360</code> with the following options:</p> <ul> <li><code>'ReadOnly'</code> - 0 or 1</li> <li><code>'EditName'</code> - <code>'Default'</code>, <code>'Allow'</code> or <code>'Disallow'</code>.</li> </ul> <p>If <code>ReadOnly</code> is set to 1, the edit window and all edit windows opened from it will be read-only. Note that setting <code>ReadOnly</code> to 0 will have no effect if the edit window is inherently read-only due to the nature of its content.</p> <p>The <code>'EditName'</code> option determines whether or not the user may open another edit window by clicking a name, and its values are interpreted as follows:</p> EditName <code>\u2395ED</code> called from session <code>\u2395ED</code> called from function <code>'Default'</code> Allow Disallow <code>'Allow'</code> Allow Allow <code>'Disallow'</code> Disallow Disallow <p>There is no Principal Option.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ed/#examples","title":"Examples","text":"<p>In the first example, <code>\u2395ED</code> will display the contents of <code>A</code> as an editable character array which the user may change. The user can double-click on Hello to open an edit window on an object named <code>Hello</code> (which will be a new function if <code>Hello</code> is currently undefined). Furthermore, the user can enter any arbitrary name and double-click to edit it. This may be undesirable in an application.</p> <pre><code>      A\u21903 11\u2374'Hello World'\n</code></pre> <p>In the second example, the Edit window will display the contents of <code>A</code> as a ReadOnly Character array. The user can still open a new edit by double-clicking Hello or World but nothing else.</p> <pre><code>      (\u2395ED \u2360 'ReadOnly' 1) 'A'\n</code></pre> <p>In the final example, the Edit window will display the contents of <code>A</code> as a ReadOnly Character array and the user cannot open a new edit window.</p> <pre><code>      (\u2395ED \u2360('ReadOnly' 1)('EditName' 'Disallow'))'A'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/em/","title":"Event Message","text":"Event Message R\u2190\u2395EM Y <p><code>Y</code> must be a simple non-negative integer scalar or vector of event codes.  If <code>Y</code> is a scalar, <code>R</code> is a simple character vector containing the associated event message.  If <code>Y</code> is a vector, <code>R</code> is a vector of character vectors containing the corresponding event messages.</p> <p>If <code>Y</code> refers to an undefined error code \"<code>n</code>\", the event message returned is \"<code>ERROR NUMBER n</code>\".</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/em/#example","title":"Example","text":"<pre><code>      \u2395EM 11\nDOMAIN ERROR\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/en/","title":"Event Number","text":"Event Number R\u2190\u2395EN <p>This simple integer scalar reports the identification number for the most recent event which occurred, caused by an APL action or by an interrupt or by the <code>\u2395SIGNAL</code> system function.  Its value in a clear workspace is <code>0</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/en/#example","title":"Example","text":"<pre><code>\n      \u00f70\nDOMAIN ERROR: Divide by zero\n      \u00f70\n     \u2227\n      \u2395EN\n11\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/evaluated-input-output/","title":"Evaluated Input/Output","text":"Evaluated Input/Output \u2395 <p><code>\u2395</code> is a variable which communicates between the user's terminal and APL.  Its behaviour depends on whether it is being assigned or referenced.</p> <p>When <code>\u2395</code> is assigned an array, the array is displayed at the terminal in exactly the same form as is direct output (see  Display of ArraysProgrammer's Guide: \"Display of Arrays\").</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/evaluated-input-output/#example","title":"Example","text":"<pre><code>      \u2395\u21902+\u23735\n3 4 5 6 7\n\n      \u2395\u21902 4\u2374'WINEMART'\nWINE\nMART\n</code></pre> <p>When <code>\u2395</code> is referenced, a prompt (<code>\u2395:</code>) is displayed at the terminal, and input is requested.  The response is evaluated and an array is returned if the result is valid.  If an error occurs in the evaluation, the error is reported as normal (unless trapped by a <code>\u2395TRAP</code> definition) and the prompt (<code>\u2395:</code>) is again displayed for input.  An EOF interrupt reports <code>INPUT INTERRUPT</code> and the prompt (<code>\u2395:</code>) is again displayed for input.  A soft interrupt is ignored and a hard interrupt reports <code>INTERRUPT</code> and the prompt (<code>\u2395:</code>) is redisplayed for input.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/evaluated-input-output/#examples","title":"Examples","text":"<pre><code>      10\u00d7\u2395+2\n\u2395:\n      \u23733\n30 40 50\n\n      2+\u2395\n\u2395:\n      X\nVALUE ERROR\n      X\n     ^\n\u2395:\n      2+\u23733\n5 6 7\n</code></pre> <p>A system command may be entered.  The system command is effected and the prompt is displayed again (unless the system command changes the environment):</p> <pre><code>      \u23743,\u2395\n\u2395:\n      )WSID\nWS/MYWORK\n\u2395:\n      )SI\n\u2395\n\u2395:\n      )CLEAR\nCLEAR WS\n</code></pre> <p>If the response to a <code>\u2395:</code> prompt is an abort statement (<code>\u2192</code>), the execution will be aborted:</p> <pre><code>      1 2 3 = \u2395\n\u2395:\n      \u2192\n</code></pre> <p>A trap definition on interrupt events set for the system variable <code>\u2395TRAP</code> in the range 1000-1008 has no effect whilst awaiting input in response to a <code>\u2395:</code> prompt.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/evaluated-input-output/#example_1","title":"Example","text":"<pre><code>      \u2395TRAP\u2190(11 'C' '''ERROR''')(1000 'C' '''STOP''')\n\n      2+\u2395\n\u2395:\n      (Interrupt Signal)\nINTERRUPT\n\u2395:\n      'C'+2\nERROR\n</code></pre> <p>A time limit set in system variable <code>\u2395RTL</code> has no effect whilst awaiting input in response to a <code>\u2395:</code> prompt.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ex/","title":"Expunge Object","text":"Expunge Object {R}\u2190\u2395EX Y <p><code>Y</code> must be a simple character scalar, vector or matrix, or a vector of character vectors containing a list of names. <code>R</code> is a simple Boolean vector with one element per name in <code>Y</code>.</p> <p>Each name in <code>Y</code> is disassociated from its value if the active referent for the name is a defined function, operator, variable or namespace.</p> <p>The value of an element of <code>R</code> is 1 if the corresponding name in <code>Y</code> is now available for use.  This does not necessarily mean that the existing value was erased for that name.  A value of  0 is returned for an ill-formed name or for a distinguished name in <code>Y</code>.  The result is suppressed if not used or assigned.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ex/#examples","title":"Examples","text":"<pre><code>      \u2395EX'VAR'\n      +\u2395EX'FOO' '\u2395IO' 'X' '123'\n1 0 1 0\n</code></pre> <p>If a named object is being executed the existing value will continue to be used until its execution is completed.  However, the name becomes available immediately for other use.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ex/#examples_1","title":"Examples","text":"<pre><code>      )SI\n#.FOO[1]*\n\n      \u2395VR'FOO'\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n      +\u2395EX'FOO'\n1\n      )SI\n#.FOO[1]*\n\n     \u2207FOO[\u2395]\ndefn error\n\n      FOO\u21901 2 3\n      \u2192\u2395LC\n10\n      FOO\n1 2 3\n</code></pre> <p>If a named object is an external variable, the external array is disassociated from the name:</p> <pre><code>      \u2395XT'F'\nFILES/COSTS\n      \u2395EX'F' \u22c4 \u2395XT'F'\n</code></pre> <p>If the named object is a GUI object, the object and all its children are deleted and removed from the screen. The expression <code>\u2395EX'.'</code> deletes all GUI objects owned by the current thread in the Root namespace but not those in sub-namespaces. In addition, if this expression is executed by thread 0, it resets all the properties of  <code>'.'</code> to their default values. Furthermore, any unprocessed events in the event queue are discarded.</p> <p>If the named object is a shared variable, the variable is retracted.</p> <p>If the named object is the last remaining external function of an auxiliary process, the AP is terminated.</p> <p>If the named object is the last reference into a dynamic link library, the DLL is freed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/exception/","title":"Exception","text":"Exception R\u2190\u2395EXCEPTION <p>This is a system object that identifies the most recent Exception thrown by a Microsoft .NET object.</p> <p><code>\u2395EXCEPTION</code> derives from the Microsoft .NET class System.Exception. Among its properties are the following, all of which are strings:</p> <code>Source</code> The name of the .NET namespace in which the exception was generated <code>StackTrace</code> The calling stack <code>Message</code> The error message <pre><code>      \u2395USING\u2190'System'\n      DT\u2190\u2395NEW DateTime (100000 0 0)\nEXCEPTION: Year, Month, and Day parameters describe an un-representable DateTime.\n      DT\u2190\u2395NEW DateTime(100000 0 0)\n     \u2227\n      \u2395EN\n90\n</code></pre> <pre><code>      \u2395EXCEPTION.Message\nYear, Month, and Day parameters describe an un-representable DateTime.\n\n      \u2395EXCEPTION.Source\nmscorlib\n\n      \u2395EXCEPTION.StackTrace\n   at System.DateTime.DateToTicks(Int32 year,\n                                  Int32 month, Int32 day)\n\n   at System.DateTime..ctor(Int32 year,\n                            Int32 month, Int32 day)\n</code></pre> <p>Similarly to GUI objects, <code>\u2395EXCEPTION</code> is not preserved across a save/load cycle if the workspace is loaded in a different interpreter.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-unix-command/","title":"Execute (UNIX) Command","text":"Execute (UNIX) Command {R}\u2190\u2395SH Y <p><code>\u2395SH</code> executes a UNIX shell or a Windows Command Processor.  <code>\u2395SH</code> is a synonym of <code>\u2395CMD</code>.  Either function may be used in either environment (UNIX or Windows) with exactly the same effect.  <code>\u2395SH</code> is probably more natural for the UNIX user.  This section describes the behaviour of <code>\u2395SH</code> and <code>\u2395CMD</code> under UNIX.  See \"Execute Windows Command: \" on page 1 for a discussion of the behaviour of these system functions under Windows.</p> <p><code>Y</code> must be a simple character scalar or vector representing a UNIX shell command.  <code>R</code> is a nested vector of character vectors.</p> <p><code>Y</code> may be any acceptable UNIX command. If the command does not produce any output, <code>R</code> is <code>0\u2374\u2282''</code> but the result is suppressed if not explicitly used or assigned.  If the command has a non-zero exit code, then APL will signal a <code>DOMAIN ERROR</code>.  If the command returns a result and has a zero exit code, then each element of <code>R</code> will be a line from the standard output (stdout) of the command.  Output from standard error (stderr) is not captured unless redirected to stdout.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-unix-command/#examples","title":"Examples","text":"<pre><code>      \u2395SH'ls'\nFILES WS temp\n\n      \u2395SH 'rm WS/TEST'\n\n      \u2395SH 'grep bin /etc/passwd ; exit 0'\nbin:!:2:2::/bin:\n\n      \u2395SH 'apl MYWS &lt;inputfile &gt;out1 2&gt;out2 &amp;'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-windows-command/","title":"Execute Windows Command","text":"Execute Windows Command {R}\u2190\u2395CMD Y <p><code>\u2395CMD</code> executes the Windows Command Processor or UNIX shell or starts another Windows application program.  <code>\u2395CMD</code> is a synonym of <code>\u2395SH</code>.  Either system function may be used in either environment (Windows or UNIX) with exactly the same effect.  <code>\u2395CMD</code> is probably more natural for the Windows user.  This section describes the behaviour of <code>\u2395CMD</code> and <code>\u2395SH</code> under Windows. See \"Execute (UNIX) Command: \" on page 1 for a discussion of the behaviour of these system functions under UNIX.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-windows-command/#executing-the-windows-command-processor","title":"Executing the Windows Command Processor","text":"<p>If <code>Y</code> is a simple character vector, <code>\u2395CMD</code> invokes the Windows Command Processor (normally <code>cmd.exe</code>) and passes the command specified by character vector <code>Y</code> to it for execution. The term command means here an instruction recognised by the Command Processor, or the pathname of a program (with optional parameters) to be executed by it. In either case, APL waits for the command to finish and then returns the result <code>R</code>,  a vector of character vectors containing its result. Each element in <code>R</code> corresponds to a line of output produced by the command.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-windows-command/#example","title":"Example","text":"<pre><code>      Z\u2190\u2395CMD'dir'\n      \u2374Z\n12\n      \u2191Z\n Volume in drive C is OS\n Volume Serial Number is B438-9B76\n\n Directory of C:\\Users\\Pete\\Documents\\Dyalog APL-64 17.0 Unicode Files\n\n23/06/2018  15:59    &lt;DIR&gt;          .\n23/06/2018  15:59    &lt;DIR&gt;          ..\n23/06/2018  14:53           181,488 default.dlf\n13/06/2018  20:13         1,262,296 def_uk.dse\n14/06/2018  14:36           108,976 UserCommand20.cache\n               3 File(s)      1,552,760 bytes\n               2 Dir(s)  101,371,097,088 bytes free\n\n</code></pre> <p>If the command specified in <code>Y</code> already contains the redirection symbol (<code>&gt;</code>) the capture of output through a pipe is avoided and the result <code>R</code> is empty.  If the command specified by <code>Y</code> issues prompts and expects user input, it is ESSENTIAL to explicitly redirect input and output to the console.</p> <p>If this is done, APL detects the presence of a \"<code>&gt;</code>\" in the command line, runs the command processor in a visible window, and does not direct output to the pipe.  If you fail to do this your system will appear to hang because there is no mechanism for you to receive or respond to the prompt.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-windows-command/#example_1","title":"Example","text":"<pre><code>      \u2395CMD 'DATE &lt;CON &gt;CON'\n</code></pre> <p>(Command Prompt window appears)</p> <p>Current date is Wed 19-07-1995</p> <p>Enter new date (dd-mm-yy): 20-07-95</p> <p>(COMMAND PROMPT window disappears)</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-windows-command/#spaces-in-pathnames","title":"Spaces in pathnames","text":"<p>If <code>Y</code> specifies a program (with or without parameters) and the pathname to the program  contains spaces, you must enclose the string in double-quotes.</p> <p>For example, to start a version of Excel to which the pathname is:    C:\\Program Files\\Microsoft Office\\OFFICE11\\excel.exe</p> <p>the argument to <code>\u2395CMD</code> should be: \u2395CMD '\"c:\\program files\\microsoft office\\office11\\excel.exe\"'</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-windows-command/#double-quote-restriction","title":"Double-Quote Restriction","text":"<p>The Windows Command Processor does not permit more than one set of double-quotes in a command string.</p> <p>The following statements are all valid: \u2395CMD 'c:\\windows\\system32\\notepad.exe c:\\myfile.txt' \u2395CMD 'c:\\windows\\system32\\notepad.exe \"c:\\myfile.txt\"' \u2395CMD '\"c:\\windows\\system32\\notepad.exe\" c:\\myfile.txt'</p> <p>Whereas the next statement, which contains two sets of double-quotes, will fail: \u2395CMD '\"c:\\windows\\system32\\notepad.exe\" \"c:\\myfile.txt\"'</p> <p>Such a statement can however be executed using the second form of <code>\u2395CMD</code>(where the argument is a 2-element vector of character vectors) which does not use the Windows Command Processor and is not subject to this restriction. However, the call to <code>\u2395CMD</code> will return immediately, and no output from the command will be returned. \u2395CMD'\"c:\\windows\\system32\\notepad.exe\" \"c:\\myfile.txt\"' ''</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-windows-command/#implementation-notes","title":"Implementation Notes","text":"<p>The right argument of <code>\u2395CMD</code> is simply passed to the appropriate command processor for execution and its output is received using an unnamed pipe.</p> <p>By default, <code>\u2395CMD</code> will execute the string <code>('cmd.exe /c',Y)</code>; where <code>Y</code> is the argument given to <code>\u2395CMD</code>.  However, the implementation permits the use of alternative command processors as follows:</p> <p>Before execution, the argument is prefixed and postfixed with strings defined by the APL parameters CMD_PREFIX and CMD_POSTFIX.  The former specifies the name of your command processor and any parameters that it requires.  The latter specifies a string which may be required.  If CMD_PREFIX is not defined, it defaults to the name defined by the environment variable COMSPEC followed by  \"/c\".  If COMSPEC is not defined, it defaults to cmd.exe.  If CMD_POSTFIX is not defined, it defaults to an empty vector.</p> <p><code>\u2395CMD</code> treats certain characters as having special meaning as follows:</p> <code>#</code> marks the start of a trailing comment, <code>;</code> divides the command into sub-commands, <code>&gt;</code> if found within the last sub-command, causes <code>\u2395CMD</code> to use a visible window. <p>If you simply wish to open a Command Prompt window, you may execute the command as a Windows Program (see below).  For example:</p> <pre><code>      \u2395CMD 'cmd.exe' ''\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-windows-command/#starting-a-windows-program","title":"Starting a Windows Program","text":"<p>If <code>Y</code> is a 2-element vector of character vectors, <code>\u2395CMD</code> starts the executable program named by <code>Y[1]</code> with the initial window parameter specified by <code>Y[2]</code>.  The shy result is an integer scalar containing the window handle allocated by the window manager. Note that in this case APL does not wait for the program specified by <code>Y</code> to finish, but returns immediately. The shy result <code>R</code> is the process identifier (PID).</p> <p><code>Y[1]</code> must specify the name or complete pathname of an executable program.  If the name alone is specified, Windows will search the following directories:</p> <ol> <li>the current directory,</li> <li>the Windows directory,</li> <li>the Windows system directory,</li> <li>the directories specified by the PATH variable,</li> <li>the list of directories mapped in a network.</li> </ol> <p>Note that <code>Y[1]</code> may contain the complete command line, including any suitable parameters for starting the program.  If Windows fails to find the executable program, <code>\u2395CMD</code> will fail and report <code>FILE ERROR 2</code>.</p> <p><code>Y[2]</code> specifies the window parameter and may be one of the following.  If not, a <code>DOMAIN ERROR</code> is reported.</p> <code>'Normal' ''</code> Application is started in a normal window, which is given the input focus <code>'Unfocused'</code> Application is started in a normal window, which is NOT given the input focus <code>'Hidden'</code> Application is run in an invisible window <code>'Minimized' 'Minimised'</code> Application is started as an icon which is NOT given the input focus <code>'Maximized' 'Maximised'</code> Application is started maximized (full screen) and is given the input focus <p>There is no way to terminate an application started by <code>\u2395CMD</code> from APL; it will run until it completes or is terminated by an external mechanism. Furthermore, if the window parameter is HIDDEN, the user is unaware of the application (unless it makes itself visible) and has no means to close it.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-windows-command/#examples","title":"Examples","text":"<pre><code>      Path\u2190'c:\\Program Files\\Microsoft Office\\Office\\'\n      \u2395\u2190\u2395CMD (Path,'excel.exe') ''\n33\n      \u2395CMD (Path,'winword /mMyMacro') 'Minimized'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/execute-windows-command/#executing-programs","title":"Executing Programs","text":"<p>Either form of <code>\u2395CMD</code> may be used to execute a program. The difference is that when the program is executed via the Command Processor, APL waits for it to complete and returns any result that the program would have displayed in the Command Window had it been executed from a Command Window. In the second case, APL starts the program (in parallel).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/export/","title":"Export Object","text":"Export Object {R}\u2190{X}\u2395EXPORT Y <p><code>\u2395EXPORT</code> is used to set or query the export type of a defined function (or operator) referenced by the <code>\u2395PATH</code> mechanism.</p> <p><code>Y</code> is a character matrix or vector-of-vectors representing the names of functions and operators whose export type is to be set or queried.</p> <p><code>X</code> is an integer scalar or vector (one per name in the namelist) indicating the export type.  <code>X</code> can currently be one of the values:</p> <ul> <li>0 - not exported.</li> <li>1 - exported (default).</li> </ul> <p>A scalar or 1-element-vector type is replicated to conform with a multi-name list.</p> <p>The result <code>R</code> is a vector that reports the export type of the functions and operators named in <code>Y</code>.  When used dyadically to set export type, the result is shy.</p> <p>When the path mechanism locates a referenced function (or operator) in the list of namespaces in the <code>\u2395PATH</code> system variable, it examines the function's export type:</p> 0 This instance of the function is ignored and the search is resumed at the next namespace in the <code>\u2395PATH</code> list.  Type-0 is typically used for functions residing in a utility namespace which are not themselves utilities, for example the private sub-function of a utility function. 1 This instance of the function is executed in the namespace in which it was found and the search terminated.  The effect is exactly as if the function had been referenced by its full path name. <p>Warning: The left domain of <code>\u2395EXPORT</code> may be extended in future to include extra types 2, 3,... (for example, to change the behaviour of the function).  This means that, while <code>\u2395EXPORT</code> returns a Boolean result in the first version, this may not be the case in the future.  If you need a Boolean result, use <code>0\u2260</code> or an equivalent.</p> <pre><code>   (0\u2260\u2395EXPORT \u2395nl 3 4)\u233f\u2395nl 3 4  \u235d list of exported\n                                \u235d functions and ops.\n</code></pre> <p><code>\u2395EXPORT</code> does not support derived functions and will not be extended to support them; nor will it be extended to support other types of functions that may be developed in the future. <code>\u2395EXPORT</code> may therefore be considered an archaic feature.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fappend/","title":"File Append Component","text":"File Append Component {R}\u2190X \u2395FAPPEND Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fappend/#access-code-8","title":"Access code 8","text":"<p><code>Y</code> must be a simple integer scalar or a 1 or 2 element vector containing the file tie number followed by an optional passnumber.  If the passnumber is omitted it is assumed to be zero. Subject to a few restrictions, <code>X</code> may be any array.</p> <p>The shy result <code>R</code> is the number of the component to which <code>X</code> is written, and is 1 greater than the previously highest component number in the file, or 1 if the file is new.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fappend/#examples","title":"Examples","text":"<pre><code>      (1000?1000) \u2395FAPPEND 1\n\n      \u2395\u2190(2 3\u2374\u23736) 'Geoff' (\u2395OR'FOO') \u2395FAPPEND 1\n12\n\n      \u2395\u2190A B C \u2395FAPPEND\u00a81\n13 14 15\n\nDump\u2190{\n    tie\u2190\u237a \u2395FCREATE 0              \u235d create file.\n    (\u2395FUNTIE tie){}\u2375 \u2395FAPPEND tie \u235d append and untie.\n}\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/favail/","title":"File System Available","text":"File System Available R\u2190\u2395FAVAIL <p><code>\u2395FAVAIL</code> returns the Boolean scalar value 1. This function is provided only for compatibility with other implementations of APL.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fchk/","title":"File Check and Repair","text":"File Check and Repair R\u2190{X} \u2395FCHK Y <p><code>\u2395FCHK</code> validates and repairs component files, and validates files associated with external variables, following an abnormal termination of the APL process or operating system.</p> <p><code>Y</code> must be a simple character scalar or vector which specifies the name of the file to be exclusively checked or repaired. For component files, the file must be named in accordance with the operating system's conventions, and may be a relative or absolute pathname. The file must exist and must not be tied.</p> <p>For files associated with external variables, any filename extension must be specified even if <code>\u2395XT</code> would not require it. The file must exist and must not currently be associated with an external variable.</p> <p>Options for <code>\u2395FCHK</code> are specified using the Variant operator <code>\u2360</code> or by the optional left argument <code>X</code>. The former is recommended but the older mechanism using the left argument is still supported.</p> <p>In either case, the default behaviour is as follows:</p> <ol> <li>If the file appears to have been cleanly untied previously, return <code>\u236c</code>, i.e. report that the file is good.</li> <li>Otherwise, validate the file and return the appropriate result. If the file is corrupt, no attempt is made to repair it.</li> </ol> <p>The result <code>R</code> is a vector of the numbers of missing or damaged components. <code>R</code> may include non-positive numbers of \"pseudo components\" that indicate damage to parts of the file other than in specific components:</p> <code>0</code> ACCESS MATRIX. <code>\u00af1</code> Free-block tree. <code>\u00af2</code> Component index tree. <p>Other negative numbers represent damage to the file metadata; this set may be extended in the future.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fchk/#specifying-options-using-variant","title":"Specifying options using Variant","text":"<p>Using Variant, the options are as follows:</p> <ul> <li>Task</li> <li>Repair</li> <li>Force</li> </ul> <p>Rebuild causes the file indices to be discarded and rebuilt. Repair only takes place on files which have been checked and found to be damaged. It involves a rebuild, but that only takes place if it is needed. Note that Repair and Force only apply if Task is <code>'Scan'</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fchk/#task","title":"Task","text":"Scan causes the file to be checked and optionally repaired (see <code>'Repair'</code> below) <code>Rebuild</code> causes the file to be unconditionally rebuilt"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fchk/#repair-principle-option","title":"Repair (principle option)","text":"0 do not repair <code>1</code> causes the file to be repaired if damage is found"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fchk/#force","title":"Force","text":"0 do not validate the file if it appears to have been properly closed <code>1</code> validate the file even if it appears to have been properly closed <p>Default values are highlighted thus in the above tables.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fchk/#examples","title":"Examples","text":"<p>To check a file and attempt to fix it if damage is found:</p> <pre><code>      (\u2395FCHK \u2360 1)'suspect.dcf'\n</code></pre> <p>To forcibly check a file and attempt to fix it if damage is found:</p> <pre><code>      (\u2395FCHK \u2360 ('Repair' 1)('Force'1))'suspect.dcf'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fchk/#specifying-options-using-a-left-argument","title":"Specifying options using a left argument","text":"<p>Using the optional left-argument, <code>X</code> must be a vector of zero or more character vectors from among <code>'force'</code>, <code>'repair'</code> and <code>'rebuild'</code>, which determine the detailed operation of the function. Note that these options are case-insensitive.</p> <ul> <li>If <code>X</code> contains <code>'force'</code>, <code>\u2395FCHK</code> will validate the file even if it appears to have been cleanly untied.</li> <li>If <code>X</code> contains <code>'repair'</code>, <code>\u2395FCHK</code> will repair the file, following validation, if it appears to be damaged. This option may be used in conjunction with <code>'force'</code>.</li> <li>If <code>X</code> contains <code>'rebuild'</code>, <code>\u2395FCHK</code> will repair the file unconditionally.</li> <li>If <code>X</code> contains <code>'force'</code>, <code>\u2395FCHK</code> will validate the file even if it appears to have been cleanly untied.</li> <li>If <code>X</code> contains <code>'repair'</code>, <code>\u2395FCHK</code> will repair the file, following validation, if it appears to be damaged. This option may be used in conjunction with <code>'force'</code>.</li> <li>If <code>X</code> contains <code>'rebuild'</code>, <code>\u2395FCHK</code> will repair the file unconditionally.</li> </ul> <p>Following a check of the file, a non-null result indicates that the file is damaged.</p> <p>Following a repair of the file, the result indicates those components that could not be recovered. Un-recovered components will give a <code>FILE COMPONENT DAMAGED</code> error if read but may be replaced without error.</p> <p>Repair can recover only check-summed components from the file, i.e. only those components that were written with the checksum option enabled (see \"File Properties: \" on page 1).</p> <p>Following an operating system crash, repair may result in one or more individual components being rolled back to a previous version or not recovered at all, unless Journaling levels 2 or 3 were also set when these components were written.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fcopy/","title":"File Copy","text":"File Copy R\u2190X \u2395FCOPY Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fcopy/#access-code-4609","title":"Access Code: 4609","text":"<p><code>Y</code> must be a simple integer scalar or 1 or 2-element vector containing the file tie number and optional passnumber. The file need not be tied exclusively.</p> <p><code>X</code> is a character vector containing the name of a new file to be copied to.</p> <p><code>\u2395FCOPY</code> creates a copy of the tied file specified by <code>Y</code>, named <code>X</code>.</p> <p>The new file <code>X</code> will have the same  component level information, including the user number and update time as the original. The operating system file creation, modification and access times will be set to the time at which the copy occurred.</p> <p>Unless otherwise specified (see File Properties below) the new file <code>X</code> will have the same file properties as the original, except that it will be a large-span file regardless of the span of the original.</p> <p>The result <code>R</code> is the file tie number associated with the new file <code>X</code>.</p> <p>Note that the Access Code is 4609, which is the sum of the Access Codes for <code>\u2395FREAD</code> (1), <code>\u2395FRDCI</code> (512) and <code>\u2395FRDAC</code> (4096).</p> <p>Note also that although the file need not be tied exclusively, the <code>\u2395FCOPY</code> function will not yield the file to other APL processes while it is running, and it may take some considerable time to run in the case of a large component file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fcopy/#example","title":"Example","text":"<pre><code>      told\u2190'oldfile32'\u2395FTIE 0\n      'S' \u2395FPROPS told\n32\n      tnew\u2190'newfile64' \u2395FCOPY told\n\n      'S' \u2395FPROPS tnew\n64\n</code></pre> <p>If <code>X</code> specifies the name of an existing file, the operation fails with a <code>FILE NAME ERROR</code>.</p> <p>Note: This operation is atomic. If an error occurs during the copy operation (such as disk full) or if a strong interrupt is issued, the copy will be aborted and the new file <code>X</code> will not be created.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fcopy/#file-properties","title":"File Properties","text":"<p><code>\u2395FCOPY</code> allows you to specify properties for the new file via the variant operator <code>\u2360</code> used with the following options:</p> <ul> <li><code>'J'</code> - journaling level; a numeric value.</li> <li><code>'C'</code> - checksum level; 0 or 1.</li> <li><code>'Z'</code> - compression; 0 or 1.</li> <li><code>'U'</code> - Unicode; 0 or 1</li> <li><code>'S'</code> - File Size (span); 64</li> </ul> <p>The Principal Option is  as follows:</p> <ul> <li>0 - sets <code>('J' 0) ('C' 0)</code></li> <li>1 - sets <code>('J' 1) ('C' 1)</code></li> <li>2 - sets <code>('J' 2) ('C' 1)</code></li> <li>3 - sets <code>('J' 3) ('C' 1)</code></li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fcopy/#examples","title":"Examples","text":"<pre><code>      newfid\u2190'newfile' (\u2395FCOPY \u23603) 1\n\n      'SEUJCZ' \u2395FPROPS newfid\n64 0 1 3 1 0\n\n</code></pre> <p>Alternatively:</p> <pre><code>      JFCOPY\u2190\u2395FCOPY \u2360 3\n</code></pre> <p>will name a variant of <code>\u2395FCREATE</code> which will create component file with level 3 journaling, and checksum enabled. Then:</p> <pre><code>      newfid\u2190'newfile' JFCOPY 1\n\n</code></pre> <p>Note: Setting <code>('U' 0)</code> (no Unicode support) is discouraged as it may cause the copy to fail with a <code>TRANSLATION ERROR</code>. Similarly using a Classic interpreter to <code>\u2395FCOPY</code> files may result in <code>TRANSLATION ERROR</code>s.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fcreate/","title":"File Create","text":"File Create {R}\u2190X \u2395FCREATE Y <p><code>Y</code> must be a simple integer scalar or a 1 or 2 element vector. The first element is the file tie number. The second element, if specified, must be 64This element sets the span of the file which in earlier Versions of Dyalog APL could be 32 or 64. Small-span (32-bit) component files may no longer be created and this element is retained only for backwards compatibility of code..</p> <p>The file tie number must not be the tie number associated with another tied file.</p> <p><code>X</code> must be either:</p> <ol> <li>a simple character scalar or vector which specifies the name of the file to be created. </li> <li>a vector of length 1 or 2 whose items are:- a simple character scalar or vector as above.</li> <li>an integer scalar specifying the file size limit in bytes.</li> </ol> <p>The newly created file is tied for exclusive use.</p> <p>The shy result of <code>\u2395FCREATE</code> is the tie number of the new file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fcreate/#automatic-tie-number-allocation","title":"Automatic Tie Number Allocation","text":"<p>A tie number of 0 as argument to a create or tie operation, allocates, and returns as an explicit result, the first (closest to zero) available tie number. This allows you to simplify code. For example:</p> <p>from:</p> <pre><code>\n      tie\u21901+\u2308/0,\u2395FNUM     \u235d With next available number,\n      file \u2395FCREATE tie   \u235d ... create file.\n\n</code></pre> <p>to:</p> <pre><code>\n      tie\u2190file \u2395FCREATE 0 \u235d Create with first available..\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fcreate/#examples","title":"Examples","text":"<pre><code>\n      '..\\BUDGET\\SALES'    \u2395FCREATE 2    \u235d Windows\n      '../budget/SALES.85' \u2395FCREATE 2    \u235d UNIX\n\n      'COSTS' 200000 \u2395FCREATE 4         \u235d max size 200000\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fcreate/#file-properties","title":"File Properties","text":"<p><code>\u2395FCREATE</code> allows you to specify properties for the newly created file via the variant operator <code>\u2360</code> used with the following options:</p> <ul> <li><code>'J'</code> - journaling level; a numeric value</li> <li><code>'C'</code> - checksum level; 0 or 1</li> <li><code>'Z'</code> - compression; 0 or 1</li> <li><code>'U'</code> - Unicode; 0 or 1</li> <li><code>'S'</code> - File Size (span); 64</li> </ul> <p>The Principal Option is  as follows:</p> <ul> <li>0 - sets <code>('J' 0) ('C' 0)</code></li> <li>1 - sets <code>('J' 1) ('C' 1)</code></li> <li>2 - sets <code>('J' 2) ('C' 1)</code></li> <li>3 - sets <code>('J' 3) ('C' 1)</code></li> </ul> <p>See also: File Properties  on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fcreate/#examples_1","title":"Examples","text":"<pre><code>      'newfile' (\u2395FCREATE\u23603) 0\n1\n      'SEUJCZ' \u2395FPROPS 1\n64 0 1 3 1 0\n\n</code></pre> <p>Alternatively:</p> <pre><code>      JFCREATE\u2190\u2395FCREATE \u2360 3\n</code></pre> <p>will name a variant of <code>\u2395FCREATE</code> which will create component file with level 3 journaling, and checksum enabled. Then:</p> <pre><code>      'newfile'JFCREATE 0\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fdrop/","title":"File Drop Component","text":"File Drop Component {R}\u2190\u2395FDROP Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fdrop/#access-code-32","title":"Access code 32","text":"<p><code>Y</code> must be a simple integer vector of length 2 or 3 whose elements are:</p> <code>[1]</code> a file tie number <code>[2]</code> a number specifying the position and number of components to be dropped.  A positive value indicates that components are to be removed from the beginning of the file; a negative value indicates that components are to be removed from the end of the file <code>[3]</code> an optional passnumber which if omitted is assumed to be zero <p>The shy result of a <code>\u2395FDROP</code> is a vector of the numbers of the dropped components. This is analogous to <code>\u2395FAPPEND</code> in that the result is potentially useful for updating some sort of dictionary:</p> <pre><code>      cnos,\u2190vec \u2395FAPPEND\u00a8tie \u235d Append index to dictionary\n\n      cnos~\u2190\u2395FDROP tie,-\u2374vec \u235d Remove index from dict.\n</code></pre> <p>Note that the result vector, though potentially large, is generated only on request.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fdrop/#examples","title":"Examples","text":"<pre><code>      \u2395FSIZE 1\n1 21 5436 4294967295\n\n      \u2395FDROP 1 3 \u22c4 \u2395FSIZE 1\n4 21 5436 4294967295\n\n      \u2395FDROP 1 \u00af2 \u22c4 \u2395FSIZE 1\n4 19 5436 4294967295\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ferase/","title":"File Erase","text":"File Erase {R}\u2190X \u2395FERASE Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ferase/#access-code-4","title":"Access code 4","text":"<p><code>Y</code> must be a simple integer scalar or 1 or 2 element vector containing the file tie number followed by an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  <code>X</code> must be a character scalar or vector containing the name of the file associated with the tie number <code>Y</code>.  This name must be identical with the name used to tie the file (except that the directory delimiters <code>/</code> and <code>\\</code> are treated as being the same) and the file must be exclusively tied.  The file named in <code>X</code> is erased and untied.</p> <p>The shy result of <code>\u2395FERASE</code> is the tie number of the erased file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ferase/#examples","title":"Examples","text":"<pre><code>\n      'SALES'\u2395FERASE 'SALES' \u2395FTIE 0\n\n      './temp' \u2395FCREATE 1\n      'temp' \u2395FERASE 1\nFILE NAME ERROR\n      'temp'\u2395FERASE 1\n\n      \u2395\u2190'.\\temp'\u2395FERASE 1 \u235d Works with / or \\\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fhist/","title":"File History","text":"File History R\u2190\u2395FHIST Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fhist/#access-code-16384","title":"Access code 16384","text":"<p><code>Y</code> must be a simple integer vector of length 1 or 2 containing the file tie number and an optional passnumber. If the passnumber is omitted it is assumed to be zero.</p> <p>The result is a numeric matrix with shape (5 2) whose rows represent the most recent occurrence of the following events.</p> <ol> <li>File creation (see note)</li> <li>Undefined, currently <code>(0 0)</code></li> <li>Last update of the access matrix</li> <li>Undefined, currently <code>(0 0)</code></li> <li>Last update performed by <code>\u2395FAPPEND</code>, <code>\u2395FCREATE</code>, <code>\u2395FDROP</code> or <code>\u2395FREPLACE</code></li> </ol> <p>For each event, the first column contain the user number and the second a timestamp. Like the timestamp reported by <code>\u2395FRDCI</code> this is measured in 60ths of a second since 1st January 1970 (UTC).</p> <p>Note: <code>\u2395FHIST</code> collects information only if journaling and/or checksum is in operation. If neither is in use, the collection of data for <code>\u2395FHIST</code> is disabled and its result is entirely 0. If a file has both journaling and checksum disabled, and then either is  enabled, the collection of data for <code>\u2395FHIST</code> is enabled too. In this case, the information in row 1 of <code>\u2395FHIST</code> relates to the most recent enabling <code>\u2395FPROPS</code> operation rather than the original <code>\u2395FCREATE</code>.</p> <p>In the examples that follow, the <code>FHist</code> function is used below to format the result of <code>\u2395FHIST</code>.</p> <pre><code>\n     \u2207 r\u2190FHist tn;cols;rows;fhist;fmt;ToTS;I2D\n[1]    rows\u2190'Created' 'Undefined' 'Last \u2395FSTAC'\n[2]    rows,\u2190'Undefined' 'Last Updated'\n[3]    cols\u2190'User' 'TimeStamp'\n[4]    fmt\u2190'ZI4,2(\u2282-\u2283,ZI2),\u2282 \u2283,ZI2,2(\u2282:\u2283,ZI2)'\n[5]    I2D\u2190{+2 \u2395NQ'.' 'IDNToDate'\u2375}\n[6]    ToTS\u2190{d t\u21901 1 0 0 0\u2282\u2349\u230a0 24 60 60 60\u22a4\u2375\n[7]        \u2193fmt \u2395FMT(0 \u00af1\u2193\u2191I2D\u00a825568+,d),0 \u00af1\u2193t}\n[8]    fhist\u2190\u2395FHIST tn\n[9]    fhist[;2]\u2190ToTS fhist[;2]\n[10]   fhist[;1]\u2190\u2355\u00a8fhist[;1]\n[11]   r\u2190((\u2282''),rows),cols\u236afhist\n     \u2207 \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fhist/#examples","title":"Examples","text":"<pre><code>     'c:\\temp'\u2395FCREATE 1 \u22c4 FHist 1\n               User  TimeStamp            \n Created       0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last \u2395FSTAC   0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last Updated  0     2012-01-14 12:29:53\n\n      (\u237310)\u2395FAPPEND 1  \u22c4 FHist 1\n               User  TimeStamp            \n Created       0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last \u2395FSTAC   0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last Updated  0     2012-01-14 12:29:55 \n\n      \u2395FUNTIE 1\n\n      'c:\\temp'\u2395FCREATE 1 \u22c4 FHist 1\n               User  TimeStamp            \n Created       0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last \u2395FSTAC   0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last Updated  0     2012-01-14 12:29:55  \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fhold/","title":"File Hold","text":"File Hold {R}\u2190{X} \u2395FHOLD Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fhold/#access-code-2048","title":"Access code 2048","text":"<p>This function holds component file(s) and/or external variable(s). It is used  to synchronise access to resources shared between multiple cooperating Dyalog processes. It is not intended to synchronise access between Dyalog threads; for this purpose you should use  <code>:Hold</code>.</p> <p>For a  multi-threaded and multi-process application, a single <code>\u2395FHOLD</code> is used to synchronise inter-process access, while <code>:Hold</code> is used in multiple threads to synchronise access between  threads in the same process. See also Hold Statement on page 1Hold Statement.</p> <p>If applied to component files, then <code>Y</code> is an integer scalar, vector, or one-row matrix of file tie numbers, or a two-row matrix whose first row contains file tie numbers and whose second row contains passnumbers.</p> <p>If applied to external variables, then <code>Y</code> is a simple scalar character, a character vector, a non-simple scalar character vector, or a vector of character vectors that specifies one or more names of external variable(s) (NOT the file names associated with those variables). Note that when <code>Y</code> is simple, each character in <code>Y</code> is interpreted as a  variable name. If applied to component files and external variables, <code>Y</code> is a vector whose elements are either integer scalars representing tie numbers, or character scalars or vectors containing names of external variables.</p> <p>The effect is as follows:</p> <ol> <li>All of the user's preceding holds (if any) are released, whether referenced in <code>Y</code> or not.</li> <li>Execution is suspended until the designated files are free of holds by any other task.</li> <li>When all the designated files are free, execution proceeds.  Until the hold is released, other tasks using <code>\u2395FHOLD</code> on any of the designated files will wait.</li> </ol> <p>The optional left argument <code>X</code> is a non-negative integer that specifies a time-out in milliseconds. If step 2 (see above) does not complete before the time-out value specified by <code>X</code>, <code>\u2395FHOLD</code> times out and signals a <code>TIMEOUT</code> error (1006) after releasing any holds that have succeeded.</p> <p>A time-out value of 0 indicates that the <code>\u2395FHOLD</code> should time out at once without waiting if it cannot immediately acquire all holds. If <code>X</code> is <code>\u00af1</code>, <code>\u2395FHOLD</code> behaves as the monadic case, and does not time out.</p> <p>If <code>Y</code> is empty, all of the user's preceding holds (if any) are released, and execution continues.</p> <p>A hold is released by any of the following:</p> <ul> <li>Another <code>\u2395FHOLD</code></li> <li>Untying or retying all the designated files.  If some but not all are untied or retied, they become free for another task but the hold persists for those that remain tied.</li> <li>Termination of APL.</li> <li>Any untrapped error or interrupt.</li> <li>A return to immediate execution mode.</li> </ul> <p>Note that a hold is not released by a request for input through <code>\u2395</code> or <code>\u235e</code>.</p> <p><code>\u2395FHOLD</code> is generally useful only when called from a defined function, as holds set in immediate execution (desk calculator) mode are released immediately.</p> <p>If <code>Y</code> is a matrix, the shy result <code>R</code> is <code>Y[1;]</code>. Otherwise, the  shy result <code>R</code> is <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fhold/#examples","title":"Examples:","text":"<pre><code>      \u2395FHOLD 1\n\n      \u2395FHOLD \u236c\n\n      \u2395FHOLD \u2282'XTVAR'\n\n      \u2395FHOLD 1 2,[0.5]0 16385\n\n      \u2395FHOLD 1 'XTVAR'\n\n      3000 \u2395FHOLD 1\nTIMEOUT\n      3000 \u2395FHOLD 1\n           \u2227\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/","title":"Fix Script","text":"Fix Script {R}\u2190{X}\u2395FIX Y <p><code>\u2395FIX</code> establishes Namespaces, Classes, Interfaces and functions from the script specified by <code>Y</code> in the workspace.</p> <p>In this section, the term namespace covers scripted Namespaces, Classes and Interfaces.</p> <p><code>Y</code> may be a simple character vector, or  a vector of character vectors or character scalars. The value of <code>X</code> determines what <code>Y</code> may contain.</p> <p>If <code>Y</code> is a simple character vector, it must start with file://, followed by the name of a file which must exist. The contents of the file must follow the same rules that apply to <code>Y</code> when <code>Y</code> is a vector of character vectors or scalars. The file name can be relative or absolute; when considering cross-platform portability, using \"/\" as the directory delimiter is recommended, although \"\\\" is also valid under Windows.</p> <p>If specified, <code>X</code> must be a numeric scalar. It may currently take the value <code>0</code>, <code>1</code> or <code>2</code>. If not specified, the value is assumed to be <code>1</code>.</p> <p>If <code>X</code> is <code>0</code>, <code>Y</code> must specify a single valid namespace which may or may not be named, or a file containing such a definition. If so, the shy result <code>R</code> contains a reference to the namespace. Even if the namespace is named, it is not established per se, although it will exist for as long as at least one reference to it exists.</p> <p>If <code>X</code> is <code>1</code>, <code>Y</code> must specify a single valid namespace which may or may not be named, or a file containing such a definition.  If so, the shy result <code>R</code> contains a reference to the namespace. If <code>Y</code> contains the definition of a named namespace, the namespace is established in the workspace.</p> <p>If <code>X</code> is <code>2</code>, <code>Y</code> is either a character vector containing the name of a script file, or a vector of character vectors that represents a script.</p> <p><code>Y</code> may specify a series of named namespaces or function definitions,   or a combination of functions and namespaces.</p> <ul> <li>If the script contains more than one item,  tradfn definitions must be delimited by <code>\u2207</code>symbols.</li> <li>Derived and assigned functions may be specified only within namespaces.</li> </ul> <p>In this case,  the shy result <code>R</code> is a vector of character vectors, containing the names of all of the objects that have been established in the workspace; the order of the names in <code>R</code> is not defined. Currently <code>2 \u2395FIX</code> is not certain to be an atomic operation, although this might change in future versions.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#example-1","title":"Example 1","text":"<p>In the first example, the Class specified by <code>Y</code> is named (<code>MyClass</code>) but the result of <code>\u2395FIX</code> is discarded. The end-result is that <code>MyClass</code> is established in the workspace as a Class.</p> <pre><code>      \u2395\u2190\u2395FIX ':Class MyClass' ':EndClass'\n#.MyClass\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#example-2","title":"Example 2","text":"<p>In the second example, the Class specified by <code>Y</code> is named (<code>MyClass</code>) and the result of <code>\u2395FIX</code> is assigned to a different name (<code>MYREF</code>). The end-result is that a Class named <code>MyClass</code> is established in the workspace, and <code>MYREF</code> is a reference to it.</p> <pre><code>      MYREF\u2190\u2395FIX ':Class MyClass' ':EndClass'\n      )CLASSES\nMyClass MYREF\n      \u2395NC'MyClass' 'MYREF'\n9.4 9.4\n      MYREF\n#.MyClass\n      MYREF\u2261MyClass\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#example-3","title":"Example 3","text":"<p>In the third example, the left-argument of <code>0</code> causes the named Class <code>MyClass</code> to be visible only via the reference to it (<code>MYREF</code>). It is there, but hidden.</p> <pre><code>      MYREF\u21900 \u2395FIX ':Class MyClass' ':EndClass'\n      )CLASSES\nMYREF\n      MYREF\n#.MyClass\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#example-4","title":"Example 4","text":"<p>The fourth example illustrates the use of un-named Classes.</p> <pre><code>      src\u2190':Class' '\u2207Make n'\n      src,\u2190'Access Public' 'Implements Constructor'\n      src,\u2190'\u2395DF n' '\u2207' ':EndClass'\n      MYREF\u2190\u2395FIX src\n      )CLASSES\nMYREF\n      MYINST\u2190\u2395NEW MYREF'Pete'\n      MYINST\nPete\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#example-5","title":"Example 5","text":"<p>In the final example, the left argument of <code>2</code> allows a script containing multiple objects to be fixed:</p> <pre><code>\n      src\u2190':Namespace andys' '\u2207foo' '2' '\u2207'\n      src,\u2190':EndNamespace' 'dfn\u2190{\u237a \u2375}' '\u2207r\u2190tfn'\n      src,\u2190'r\u219033' '\u2207' ':Class c1' '\u2207goo' '1'\n      src,\u2190'\u2207' ':EndClass'\n      \u2262\u2395\u21902\u2395fix src\n c1  tfn  dfn  andys \n4\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#restriction","title":"Restriction","text":"<p><code>\u2395FIX</code> is unable to fix a namespace from <code>Y</code> when <code>Y</code> specifies a multi-line dfn which is preceded by a <code>\u22c4</code> (diamond separator).       \u2395FIX':Namespace iaK' 'a\u21901 \u22c4 adfn\u2190{' '\u2375' ' }' ':EndNamespace' DOMAIN ERROR: There were errors processing the script       \u2395FIX':Namespace iaK' 'a\u21901 \u22c4 adfn\u2190{' '\u2375' ' }' ':EndNamespace'       \u2227</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#variant-options","title":"Variant Options","text":"<p><code>\u2395FIX</code> may be applied using the  Variant operator with the options Quiet, FixWithErrors,  AllowLateBinding and InjectReferences. These options apply only to namespaces and classes specified by the script. There is no principal option.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#quiet-option","title":"Quiet Option","text":"0 If the script contains errors, these are displayed in the Status Window. <code>1</code> If the script contains errors, the errors are not shown  in the Status Window."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#fixwitherrors-option","title":"FixWithErrors Option","text":"0 If the script contains errors, <code>\u2395FIX</code> fails with <code>DOMAIN ERROR</code> . <code>1</code> <code>\u2395FIX</code> fixes all the namespaces and classes in the script regardless of any errors they may contain. <code>2</code> If the script contains errors, <code>\u2395FIX</code> displays a message box prompting the user to choose whether or not to fix all the offending namespaces and classes in the script."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#allowlatebinding-option","title":"AllowLateBinding Option","text":"0 <code>\u2395FIX</code> will only fix a Class whose Base class (if specified) is defined in the script or is present in the workspace. <code>1</code> <code>\u2395FIX</code> will fixes a Class whose Base class is neither defined in the script nor present in the workspace."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fix/#injectreferences-option","title":"InjectReferences Option","text":"<code>'All'</code> In order to implement lexical scope, <code>\u2395FIX</code> will insert internal references into all objects in the script. 'InClasses' In order to implement lexical scope, <code>\u2395FIX</code> will insert internal references ONLY into Classes and sub-classes in the script, but not into namespaces. <code>'None'</code> No internal references are inserted and lexical scope does not apply. <p>See Lexical Scope in Scripts on page 1.</p> <p>The following examples illustrate how different values of the InjectReferences option affect the scope of objects in scripts. The examples are based on the following family tree:</p> <p>Two scripts are defined to map this tree onto a structure of Classes and Namespaces. In this scheme, female family members are represented by Classes and male family members by Namespaces.</p> <p>So the scripted tree for <code>Pete</code> has a parent Namespace:</p> <pre><code>:Namespace Pete\n    :Namespace Andy\n        :Class Aisha\n        :Access Public\n        :endclass\n    :EndNamespace\n\n    :Class Katherine\n    :Access Public\n        :Namespace Woody\n        :EndNamespace\n        :Namespace George\n        :EndNamespace\n    :EndClass\n:EndNamespace\n</code></pre> <p>While the scripted tree for <code>Jill</code> has a parent Class:</p> <pre><code>:Class Jill\n:Access Public\n    :Namespace Andy\n        :Class Aisha\n        :Access Public\n        :endclass\n    :EndNamespace\n\n    :Class Katherine\n    :Access Public\n        :Namespace Woody\n        :EndNamespace\n        :Namespace George\n        :EndNamespace\n    :EndClass\n:EndClass\n</code></pre> <p>Using the <code>Pete</code> Namespace, after executing the expression:</p> <pre><code>      2(\u2395FIX\u2360'InjectReferences' 'All')\u2395SRC Pete\n</code></pre> <ul> <li>Code in <code>Pete</code> may refer to <code>Aisha</code>    , <code>Andy</code>     , <code>George</code>   , <code>Katherine</code>, and <code>Woody</code></li> <li>Code in <code>Andy</code> may refer to <code>Aisha</code>    and <code>Katherine</code></li> <li>... and so forth.</li> </ul> <p>But after executing:</p> <pre><code>      2(\u2395FIX\u2360'InjectReferences' 'InClasses')\u2395SRC Pete\n</code></pre> <ul> <li>Code in <code>Pete</code> may refer only to <code>Andy</code> and  <code>Katherine</code></li> <li>Code in <code>Andy</code> may refer only to <code>Aisha</code> </li> <li>... and so forth.</li> </ul> <p>The following tables show which objects in Namespace <code>Pete</code> can see (i.e. refer to) which other objects representing members of the family, in each case; <code>All</code>, <code>InClasses</code> and <code>None</code>.</p> 'All' Pete Andy Aisha Katherine Woody George Pete \u2714 \u2714 \u2714 \u2714 \u2714 Andy \u2714 \u2714 Aisha \u2714 \u2714 \u2714 Katherine \u2714 \u2714 \u2714 \u2714 \u2714 Woody \u2714 George \u2714 'InClasses' Pete Andy Aisha Katherine Woody George Pete \u2714 \u2714 Andy \u2714 Aisha \u2714 \u2714 \u2714 Katherine \u2714 \u2714 \u2714 \u2714 \u2714 Woody George 'None' Pete Andy Aisha Katherine Woody George Pete \u2714 \u2714 Andy \u2714 Aisha Katherine Woody George <p>Whilst the next set of tables show the same for Class <code>Jill</code>.</p> 'All' Jill Andy Aisha Katherine Woody George Jill \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 Andy \u2714 \u2714 Aisha \u2714 \u2714 \u2714 Katherine \u2714 \u2714 \u2714 \u2714 \u2714 Woody \u2714 George \u2714 'InClasses' Jill Andy Aisha Katherine Woody George Jill \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 Andy \u2714 Aisha \u2714 \u2714 \u2714 Katherine \u2714 \u2714 \u2714 \u2714 \u2714 Woody George 'None' Jill Andy Aisha Katherine Woody George Jill Andy \u2714 Aisha Katherine Woody George"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/flib/","title":"Component File Library","text":"Component File Library R\u2190\u2395FLIB Y <p><code>Y</code> must be a simple character scalar or vector which specifies the name of the directory whose APL component files are to be listed.  If <code>Y</code> is empty, the current working directory is assumed.</p> <p>The result <code>R</code> is a character matrix containing the names of the component files in the directory with one row per file.  The number of columns is given by the longest file name.  Each file name is prefixed by <code>Y</code> followed by a directory delimiter character.  The ordering of the rows is not defined.</p> <p>If there are no APL component files accessible to the user in the directory in question, the result is an empty character matrix with 0 rows and 0 columns.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/flib/#examples","title":"Examples","text":"<pre><code>\n      \u2395FLIB ''\nSALESFILE\nCOSTS\n\n      \u2395FLIB '.'\n./SALESFILE\n./COSTS\n\n      \u2395FLIB '../budget'\n../budget/SALES.85\n../budget/COSTS.85\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fnames/","title":"File Names","text":"File Names R\u2190\u2395FNAMES <p>The result is a character matrix containing the names of all tied files, with one file name per row.  The number of columns is that required by the longest file name.</p> <p>A file name is returned precisely as it was specified when the file was tied, except that the directory delimiter <code>\\</code> is replaced by <code>/</code>.  If no files are tied, the result is a character matrix with 0 rows and 0 columns.  The rows of the result are in the order in which the files were tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fnames/#examples","title":"Examples","text":"<pre><code>      '/usr/pete/SALESFILE' \u2395FSTIE 16\n\n      '..\\budget\\COSTFILE' \u2395FSTIE 2\n\n      'PROFIT' \u2395FCREATE 5\n\n       \u2395FNAMES\n/usr/pete/SALESFILE\n../budget/COSTFILE\nPROFIT\n\n      \u2374\u2395FNAMES\n3 19\n      \u2395FNUMS,\u2395FNAMES\n16 /usr/pete/SALESFILE\n 2 ../budget/COSTFILE\n 5 PROFIT\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fnums/","title":"File Numbers","text":"File Numbers R\u2190\u2395FNUMS <p>The result is an integer vector of the file tie number of all tied files.  If no files are tied, the result is empty.  The elements of the result are in the order in which the files were tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fnums/#examples","title":"Examples","text":"<pre><code>\n      '/home/pete/SALESFILE' \u2395FSTIE 16\n\n      '../budget/COSTFILE' \u2395FSTIE 2\n\n      'PROFIT' \u2395FCREATE 5\n\n      \u2395FNUMS\n16 2 5\n\n      \u2395FNUMS,\u2395FNAMES\n16 /home/pete/SALESFILE\n 2 ../budget/COSTFILE\n 5 PROFIT\n\n      \u2395FUNTIE \u2395FNUMS\n      \u2374\u2395FNUMS\n0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-dyadic/","title":"Format (Dyadic)","text":"Format (Dyadic) R\u2190X \u2395FMT Y <p><code>Y</code> must be a simple array of rank not exceeding two, or a non-simple scalar or vector whose items are simple arrays of rank not exceeding two.  The simple arrays in <code>Y</code> must be homogeneous, either character or numeric. All numeric values in <code>Y</code> must be simple; if <code>Y</code> contains any complex numbers, dyadic <code>\u2395FMT</code> will generate a <code>DOMAIN ERROR</code>. <code>X</code> must be a simple character vector.  <code>R</code> is a simple character matrix.</p> <p><code>X</code> is a format specification that defines how columns of the simple arrays in <code>Y</code> are to appear.  A simple scalar in <code>Y</code> is treated as a one-element matrix.  A simple vector in <code>Y</code> is treated as a one-column matrix.  Each column of the simple arrays in <code>Y</code> is formatted in left-to-right order according to the format specification in <code>X</code> taken in left-to-right order and used cyclically if necessary.</p> <p><code>R</code> has the same number of rows as the longest column (or implied column) in <code>Y</code>, and the number of columns is determined from the format specification.</p> <p>The format specification consists of a series of control phrases, with adjacent phrases separated by a single comma, selected from the following:</p> <code>rAw</code> Alphanumeric format <code>rEw.s</code> Scaled format <code>rqFw.d</code> Decimal format <code>rqG\u235epattern\u235e</code> Pattern <code>rqIw</code> Integer format <code>Tn</code> Absolute tabulation <code>Xn</code> Relative tabulation <code>\u235et\u235e</code> Text insertion <p>(Alternative surrounding pairs for Pattern or Text insertion are   <code>&lt; &gt;, \u2282 \u2283, \u2395 \u2395</code>  or<code>\u00a8 \u00a8</code>.)</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-dyadic/#where","title":"where:","text":"r is an optional repetition factor indicating that the format phrase is to be applied to r columns of <code>Y</code> q is an optional usage of qualifiers or affixtures from those described below. w is an integer value specifying the total field width per column of <code>Y</code> , including any affixtures. s is an integer value specifying the number of significant digits in Scaled format; <code>s</code> must be less than <code>w-1</code> d is an integer value specifying the number of places of decimal in Decimal format; <code>d</code> must be less than <code>w</code> . n is an integer value specifying a tab position relative to the notional left margin (for <code>T</code> -format) or relative to the last formatted position (for <code>X</code> -format) at which to begin the next format. t is any arbitrary text excluding the surrounding character pair.  Double quotes imply a single quote in the result. pattern see following section G format"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-dyadic/#qualifiers-q-are-as-follows","title":"Qualifiers q are as follows:","text":"B leaves the field blank if the result would otherwise be zero. C inserts commas between triads of digits starting from the rightmost digit of the integer part of the result. Km scales numeric values by <code>1Em</code> where m is an integer; negation may be indicated by <code>\u00af</code> or - preceding the number. L left justifies the result in the field width. Ov\u235et\u235e replaces specific numeric value <code>v</code> with the text <code>t</code> . S\u235ep\u235e substitutes standard characters.  p is a string of pairs of symbols enclosed between any of the Text Insertion delimiters.  The first of each pair is the standard symbol and the second is the symbol to be substituted.  Standard symbols are: <code>*</code> overflow fill character <code>.</code> decimal point <code>,</code> triad separator for <code>C</code> qualifier <code>0</code> fill character for <code>Z</code> qualifier <code>_</code> loss of precision character <code>\u00af</code> high minus symbol Z fills unused leading positions in the result with zeros (and commas if <code>C</code> is also specified). 9 digit selector"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-dyadic/#affixtures-are-as-follows","title":"Affixtures are as follows:","text":"M\u235et\u235e prefixes negative results with the text t instead of the negative sign. N\u235et\u235e post-fixes negative results with the text <code>t</code> P\u235et\u235e prefixes positive or zero results with the text <code>t</code> . Q\u235et\u235e post-fixes positive or zero results with the text <code>t</code> . R\u235et\u235e presets the field with the text <code>t</code> which is repeated as necessary to fill the field.  The text will be replaced in parts of the field filled by the result, including the effects of other qualifiers and affixtures except the <code>B</code> qualifier <p>The surrounding affixture delimiters may be replaced by the alternative pairs described for Text Insertion.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-dyadic/#examples","title":"Examples","text":"<p>A vector is treated as a column:</p> <pre><code>      'I5' \u2395FMT 10 20 30\n   10\n   20\n   30\n</code></pre> <p>The format specification is used cyclically to format the columns of the right argument:</p> <pre><code>      'I3,F5.2' \u2395FMT 2 4\u2374\u23738\n  1 2.00  3 4.00\n  5 6.00  7 8.00\n</code></pre> <p>The columns of the separate arrays in the items of a non-simple right argument are formatted in order.  Rows in a formatted column beyond the length of the column are left blank:</p> <pre><code>      '2I4,F7.1' \u2395FMT (\u23734)(2 2\u2374 0.1\u00d7\u23734)\n   1   0    0.2\n   1   0    0.4\n   3\n   4\n</code></pre> <p>Characters are right justified within the specified field width, unless the <code>L</code> qualifier is specified:</p> <pre><code>      'A2' \u2395FMT 1 6\u2374'SPACED'\n S P A C E D\n</code></pre> <p>If the result is too wide to fit within the specified width, the field is filled with asterisks:</p> <pre><code>      'F5.2' \u2395FMT 0.1\u00d75 1000 \u00af100\n  0.50\n*****\n*****\n</code></pre> <p>Relative tabulation (<code>X</code>-format) identifies the starting position for the next format phrase relative to the finishing position for the previous format, or the notional left margin if none.  Negative values are permitted providing that the starting position is not brought back beyond the left margin.  Blanks are inserted in the result, if necessary:</p> <pre><code>      'I2,X3,3A1' \u2395FMT (\u23733)(2 3\u2374'TOPCAT')\n 1   TOP\n 2   CAT\n 3\n</code></pre> <p>Absolute tabulation (<code>T</code>-format) specifies the starting position for the next format relative to the notional left margin.  If position 0 is specified, the next format starts at the next free position as viewed so far.  Blanks are inserted into the result as required.  Over-written columns in the result contain the most recently formatted array columns taken in left-to-right order:</p> <pre><code>      X\u2190'6I1,T5,A1,T1,3A1,T7,F5.1'\n\n      X \u2395FMT (1 6\u2374\u23736)('*')(1 3\u2374'ABC')(22.2)\nABC4*6 22.2\n</code></pre> <p>If the number of specified significant digits exceeds the internal precision, low order digits are replaced by the symbol _:</p> <pre><code>      'F20.1' \u2395FMT 1E18\u00f73\n3333333333333333__._\n</code></pre> <p>The Text Insertion format phrase inserts the given text repeatedly in all rows of the result:</p> <pre><code>      MEN\u21903 5\u2374'FRED BILL JAMES'\n      WOMEN\u21902 5\u2374'MARY JUNE '\n\n      '5A1,&lt;|&gt;' \u2395FMT MEN WOMEN\nFRED |MARY |\nBILL |JUNE |\nJAMES|     |\n</code></pre> <p>The last example also illustrates that a Text Insertion phrase is used even though the data is exhausted.</p> <p>The following example illustrates effects of the various qualifiers:</p> <pre><code>      X\u2190'F5.1,BF6.1,X1,ZF5.1,X1,LF5.1,K3CS&lt;.,,.&gt;F10.1'\n\n      X \u2395FMT \u23495 3\u2374\u00af1.5 0 25\n \u00af1.5  \u00af1.5 \u00af01.5 \u00af1.5   \u00af1.500,0\n  0.0       000.0 0.0         0,0\n 25.0  25.0 025.0 25.0   25.000,0\n</code></pre> <p>Affixtures allow text to be included within a field.  The field width is not extended by the inclusion of affixtures.  <code>N</code> and <code>Q</code> affixtures shift the result to the left by the number of characters in the text specification.  Affixtures may be used to enclose negative results in parentheses in accordance with common accounting practice:</p> <pre><code>      'M&lt;(&gt;N&lt;)&gt;Q&lt; &gt;F9.2' \u2395FMT 150.3 \u00af50.25 0 1114.9\n  150.30\n  (50.25)\n    0.00\n 1114.90\n</code></pre> <p>One or more format phrases may be surrounded by parentheses and preceded by an optional repetition factor.  The format phrases within parentheses will be re-used the given number of times before the next format phrase is used.  A Text Insertion  phrase will not be re-used if the last data format phrase is preceded by a closing parenthesis:</p> <pre><code>      'I2,2(&lt;/&gt;,ZI2)' \u2395FMT 1 3\u2374\u233d100|3\u2191\u2395TS\n20/07/89\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-dyadic/#g-format","title":"G  Format","text":"<p>Only the <code>B</code>, <code>K</code>, <code>S</code> and <code>O</code> qualifiers are valid with the <code>G</code> option</p> <p><code>\u235epattern\u235e</code> is an arbitrary string of characters, excluding the delimiter characters.  Characters '9' and '<code>Z</code>' (unless altered with the <code>S</code> qualifier) are special and are known as digit selectors.</p> <p>The result of a <code>G</code> format will have length equal to the length of the pattern.</p> <p>The data is rounded to the nearest integer (after possible scaling). Each digit of the rounded data replaces one digit selector in the result.  If there are fewer data digits than digit selectors, the data digits are padded with leading zeros.  If there are more data digits than digit selectors, the result will be filled with asterisks.</p> <p>A '9' digit selector causes a data digit to be copied to the result.</p> <p>A 'Z' digit selector causes a non-zero data digit to be copied to the result.  A zero data digit is copied if and only if digits appear on each side of it.  Otherwise a blank appears.  Similarly text between digit selectors appears only if digits appear on each side of the text.  Text appearing before the first digit selector or after the last will always appear in the result.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-dyadic/#examples_1","title":"Examples","text":"<pre><code>      'G\u228299/99/99\u2283'\u2395FMT 0 100 100 \u22a58 7 89\n08/07/89\n\n      'G\u2282ZZ/ZZ/ZZ\u2283'\u2395FMT 80789 + 0 1\n 8/07/89\n 8/07/9\n\n      'G\u2282Andy ZZ Pauline ZZ\u2283' \u2395FMT 2721.499 2699.5\nAndy 27 Pauline 21\nAndy 27\n\n      \u2374\u2395\u2190'K2G\u2282DM Z.ZZZ.ZZ9,99\u2283' \u2395FMT 1234567.89 1234.56\nDM 1.234.567,89\nDM     1.234,56\n2 15\n</code></pre> <p>An error will be reported if:</p> <ul> <li>Numeric data is matched against an <code>A</code> control phrase.</li> <li>Character data is matched against other than an <code>A</code> control phrase.</li> <li>The format specification is ill-formed.</li> <li>For an F control phrase, <code>d&gt;w-2</code></li> <li>For an E control phrase, <code>s&gt;w-2</code></li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-dyadic/#o-format-qualifier","title":"O  Format Qualifier","text":"<p>The O format qualifier replaces a specific numeric value with a text string and may be used in conjunction with the E, F, I and G format phrases.</p> <p>An O-qualifier consists of the letter \"O\" followed by the optional numeric value which is to be substituted (if omitted, the default is 0) and then the text string within pairs of symbols such as \"<code>&lt;&gt;</code>\". For example:</p> O - qualifier Description O Replaces the value 0 with the text \"nil\" O42 Replaces the value 42 with the text \"N/A\" O0.001&lt;1/1000&gt; Replaces the value 0.001 with the text \"1/1000\" <p>The replacement text is inserted into the field in place of the numeric value. The text is normally right-aligned in the field, but will be left-aligned if the L qualifier is also specified.</p> <p>It is permitted to specify more than one O-qualifier within a single phrase.</p> <p>The O-qualifier is <code>\u2395CT</code> sensitive.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-dyadic/#examples_2","title":"Examples","text":"<pre><code>      'O&lt;NIL&gt;F7.2'\u2395FMT 12.3 0 42.5\n  12.30\n    NIL\n  42.50\n\n      'O&lt;NIL&gt;LF7.2'\u2395FMT 12.3 0 42.5\n12.30 \nNIL \n42.50 \n\n      'O&lt;NIL&gt;O42&lt;N/A&gt;I6'\u2395FMT 12 0 42 13\n    12\n   NIL\n   N/A\n    13\n\n      'O99&lt;replace&gt;F20.2'\u2395fmt 99 100 101\n             replace\n              100.00\n              101.00\n</code></pre> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of <code>\u2395FMT</code> with the O format qualifier.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-monadic/","title":"Format (Monadic)","text":"Format (Monadic) R\u2190\u2395FMT Y <p><code>Y</code> may be any array.  <code>R</code> is a simple character matrix which appears the same as the default display of <code>Y</code>.  If <code>Y</code> contains control characters from <code>\u2395TC</code>, they will be resolved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/format-monadic/#examples","title":"Examples","text":"<pre><code>      A\u2190\u2395FMT '\u2229' ,\u2395TC[1],'\u2218'\n\n      \u2374A\n1 1\n      A\n\u235d\n\n      A\u2190\u2395VR 'FOO'\n\n      A\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n\n      \u2374A\n31\n      B\u2190\u2395FMT A\n\n      B\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n\n      \u2374B\n3 12\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fprops/","title":"File Properties","text":"File Properties R\u2190X \u2395FPROPS Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fprops/#access-code-1-to-read-or-8192-to-change-properties","title":"Access Code 1 (to read) or 8192 (to change properties)","text":"<p><code>\u2395FPROPS</code> reports and sets the properties of a component file.</p> <p><code>Y</code> must be a simple integer scalar or  1 or 2-element vector containing the file tie number followed by an optional passnumber. If the passnumber is omitted, it is assumed to be 0.</p> <p><code>X</code> must be a simple character scalar or vector containing one or more valid Identifiers listed in the table below, or a 2-element nested vector which specifies an Identifier and a (new) value for that property. To set new values for more than one property, <code>X</code> must be is a vector of 2-element vectors, each of which contains an Identifier and a (new) value for that property.</p> <p>If the left argument is a simple character array, the result <code>R</code> contains the current values for the properties identified by <code>X</code>. If the left argument is nested, the result <code>R</code> contains the previous values for the properties identified by <code>X</code>.</p> Identifier Property Description / Legal Values <code>S</code> File Size (read only) 32 = Small-span Component Files (&lt;4GB) 64 = Large-span Component Files <code>E</code> Endian-ness (read only) 0 = Little-endian 1 = Big-endian <code>U</code> Unicode 0 = Characters will be written as type 82 arrays 1 = Characters will be written as Unicode arrays <code>J</code> Journaling 0 = Disable Journaling 1 = Enable APL crash proof Journaling 2 = Enable System crash proof Journaling; repair needed on recovery 3 = Enable full System crash proof Journaling <code>C</code> Checksum 0 = Disable checksum 1 = Enable checksum <code>Z</code> Compression 0 = Disable compression 1 = Enable compression <p>The default properties for a newly created file are as follows:</p> <ul> <li>S = 64</li> <li>U = 1 (in Unicode Edition) or 0 (in Classic Edition)</li> <li>J = 1</li> <li>C = 1</li> <li>Z = 0</li> <li>E depends upon the computer architecture.</li> </ul> <p>Note that the defaults for C and J can be overridden by calling <code>\u2395FCREATE</code> via the Variant operator <code>\u2360</code>. For further information, see File Properties on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fprops/#journaling-levels","title":"Journaling Levels","text":"<p>Level 1 journaling (APL crash-proof) automatically protects a component file from damage in the event of abnormal termination of the APL process. The file state will be implicitly committed between updates and an incomplete update will automatically be rolled forward or back when the file is re-tied. In the event of an operating system crash the file may be more seriously damaged. If checksum was also enabled it may be repaired using <code>\u2395 FCHK</code> but some components may be restored to a previous state or not restored at all.</p> <p>Level 2 journaling (system crash-proof \u2013 repair needed on recovery) extends level 1 by ensuring that a component file is fully repairable using <code>\u2395FCHK</code> with no component loss in the event of an operating system failure. If an update was in progress when the system crashed the affected component will be rolled back to the previous state. Tying and modifying such a file without first running <code>\u2395FCHK</code> may however render it un-repairable.</p> <p>Level 3 journaling (system crash-proof) extends level 2 by protecting a component file from damage in the event of abnormal termination of the APL process and also the operating system. Rollback of an incomplete update will be automatic and no explicit repair will be needed.</p> <p>Enabling journaling on a component file will reduce performance of file updates; higher journaling levels have a greater impact.</p> <p>Journaling levels 2 and 3 cannot be set unless the checksum option is also enabled.</p> <p>The default level of journaling may be changed using the APL_FCREATE_PROPS_J parameter (see Dyalog for Microsoft Windows Installation and Configuration Guide: Configuration Parameters for more information).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fprops/#checksum-option","title":"Checksum Option","text":"<p>The checksum option is enabled by default. This  enables a damaged file to be repaired using <code>\u2395FCHK</code>. It will however  reduce the performance of file updates slightly and result in larger component files. The default may be changed using the APL_FCREATE_PROPS_C parameter (See User Guide).</p> <p>Enabling the checksum option on an existing non-empty component file will result in all previously written components without a checksum  being check-summed and converted. This operation which will take place when <code>\u2395FPROPS</code> is changed, may not therefore be instantaneous.</p> <p>Journaling and checksum settings may be changed at any time a file is exclusively tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fprops/#example","title":"Example","text":"<pre><code>\n      tn\u2190'myfile64' \u2395FCREATE 0\n      'SEUJ' \u2395FPROPS tn\n64 0 1 0\n\n</code></pre> <p>The following expression disables Unicode and switches Journaling on. The function returns the previous settings:</p> <pre><code>\n      ('U' 0)('J' 1) \u2395FPROPS tn\n1 0\n</code></pre> <p>Note that to set the value of just a single property, the following two statements are equivalent:</p> <pre><code>\n      'J' 1 \u2395FPROPS tn\n      (,\u2282'J' 1) \u2395FPROPS tn\n</code></pre> <p>Properties may be read by a task with <code>\u2395FREAD</code> permission (access code 1), and set by a task with <code>\u2395FSTAC</code> access (8192). To set the value of the Journaling property, the file must be exclusively tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fprops/#recommendation","title":"Recommendation","text":"<p>It is recommended that all component files are protected by  a minimum of Level 1 Journalling and have Checksum enabled.</p> <p>Unprotected files  should only be used:</p> <ul> <li>for temporary work files where speed is paramount and integrity a secondary issue</li> <li>or where compatibility with Versions of Dyalog prior to Version 12.0 is required</li> </ul> <p>This recommendation is given for the following reasons:</p> <ul> <li>Unprotected files are easily damaged by abnormal termination of the interpreter</li> <li>They cannot be repaired using <code>\u2395FCHK</code></li> <li>They do not support <code>\u2395FHIST</code></li> <li>They are not well supported by the Dyalog File Server (DFS)</li> <li>They do not support compression of components</li> <li>Additional features added in future may not be supported</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fprops/#compression-option","title":"Compression Option","text":"<p>Components are compressed using the LZ4 compressor which delivers a medium level of compression, but is considered to be very fast compared to other algorithms.</p> <p>Compression is intended to deliver a performance gain reading and writing large components on fast computers with slow (e.g. network) file access. Conversely, on a slow computer with fast file access compression may actually reduce read/write performance. For this reason it is optional at the component level.</p> <p>The default for the <code>'Z'</code> property is 0 which means no compression; 1 means compression. When written, components are compressed or not according to the current value of the <code>'Z'</code> property. Changing this property does not change any components already in the file.</p> <p>A component file may therefore contain a mixture of normal and compressed components. Note that only the data in file components are compressed, the file access matrix and other header information is not compressed.</p> <p>When read, compressed components are decompressed regardless of the value of the <code>'Z'</code> property.</p> <p>An exclusive tie is not needed to change the file property.</p> <p>Compression is not supported for files in which both Journalling and Checksum are disabled.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fr/","title":"Floating-Point Representation","text":"Floating-Point Representation \u2395FR <p>The value of <code>\u2395FR</code> determines the way that floating-point operations are performed.</p> <p>If <code>\u2395FR</code> is 645, all floating-point calculations are performed using IEEE 754 64-bit floating-point operations and the results of these operations are represented internally using binary64http://en.wikipedia.org/wiki/Double_precision_floating-point_format floating-point format.</p> <p>If <code>\u2395FR</code> is 1287, all floating-point calculations are performed using IEEE 754-2008 128-bit decimal floating-point operations and the results of these operations are represented internally using decimal128http://en.wikipedia.org/wiki/Decimal128_floating-point_format format.</p> <p>Note that when you change <code>\u2395FR</code>, its new value only affects subsequent floating-point operations and results. Existing floating-point values stored in the workspace remain unchanged.</p> <p>The default value of <code>\u2395FR</code> (its value in a <code>clear ws</code>) is configurable.</p> <p><code>\u2395FR</code>  has namespace scope but may be localised. If so, like most other system variables, it inherits its initial value from the global environment.</p> <p>However: Although <code>\u2395FR</code> can vary, the system is not designed to allow \"seamless\" modification during the running of an application and the dynamic alteration of is not recommended.  Strange effects may occur. For example, the type of a constant contained in a line of code (in a function or class), will depend on the value of <code>\u2395FR</code> when the function is fixed.</p> <p>Also note:</p> <pre><code>      \u2395FR\u21901287\n      x\u21901\u00f73\n\n      \u2395FR\u2190645\n      x=1\u00f73\n1\n</code></pre> <p>The decimal number has 17 more 3's. Using the tolerance which applies to binary floats (type 645), the numbers are equal. However, the \"reverse\" experiment yields 0, as tolerance is much narrower in the decimal universe:</p> <pre><code>      \u2395FR\u2190645\n      x\u21901\u00f73\n      \u2395FR\u21901287\n      x=1\u00f73\n0\n</code></pre> <p>Since <code>\u2395FR</code> can vary, it will be possible for a single workspace to contain floating-point values of both types (existing variables are not converted when <code>\u2395FR</code> is changed). For example, an array that has just been brought into the workspace from external storage may have a different type from <code>\u2395FR</code> in the current namespace. Conversion (if necessary) will only take place when a new floating-point array is generated as the result of \"a calculation\". The result of a computation returning a floating-point result will not depend on the type of the arrays involved in the expression: <code>\u2395FR</code> at the time when a computation is performed decides the result type, alone.</p> <p>Structural functions generally do NOT change the type, for example:</p> <pre><code>      \u2395FR\u21901287\n      x\u21901.1 2.2 3.3\n\n      \u2395FR\u2190645\n      \u2395DR x\n1287\n      \u2395DR 2\u2191x\n1287\n</code></pre> <p>128-bit decimal numbers not only have greater precision (roughly 34 decimal digits); they also have significantly larger range \u2013 from <code>\u00af1E6145</code> to <code>1E6145</code>. Loss of precision is accepted on conversion from 645 to 1287, but the magnitude of a number may make the conversion impossible, in which case a <code>DOMAIN ERROR</code> is issued:</p> <pre><code>      \u2395FR\u21901287\n      x\u21901E1000\n      \u2395FR\u2190645 \u22c4 x+0\nDOMAIN ERROR\n</code></pre> <p>When experimenting with <code>\u2395FR</code> it is important to note that numeric constants entered into the Session are evaluated (and assigned a data type) before the line is actually executed. This means that constants are evaluated according to the value of <code>\u2395FR</code> that pertained before the line was entered. For example:</p> <pre><code>      \u2395FR\u2190645\n      \u2395FR\n645\n\n      \u2395FR\u21901287 \u22c4 \u2395DR 0.1\n645\n      \u2395DR 0.1\n1287\n</code></pre> <p>WARNING: The use of COMPLEX numbers when <code>\u2395FR</code> is 1287 is not recommended, because:</p> <ul> <li>any 128-bit decimal array into which a complex number is inserted or appended will be forced in its entirety into complex representation, potentially losing precision.</li> <li>All comparisons are done using <code>\u2395DCT</code> when <code>\u2395FR</code> is 1287, and the default value of <code>1E\u00af28</code> is equivalent to 0 for complex numbers.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/frdac/","title":"File Read Access","text":"File Read Access R\u2190\u2395FRDAC Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/frdac/#access-code-4096","title":"Access code 4096","text":"<p><code>Y</code> must be a simple integer scalar or 1 or 2 element vector containing the file tie number followed by an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  The result is the access matrix for the designated file.</p> <p>For details see File Access Control on page 1Component Files.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/frdac/#examples","title":"Examples","text":"<pre><code>\n      \u2395FRDAC 1\n28 2105 16385\n 0 2073 16385\n31   \u00af1     0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/frdci/","title":"File Read Component Information","text":"File Read Component Information R\u2190\u2395FRDCI Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/frdci/#access-code-512","title":"Access code 512","text":"<p><code>Y</code> must be a simple integer vector of length 2 or 3 containing the file tie number, component number and an optional passnumber.  If the passnumber is omitted it is assumed to be zero.</p> <p>The result is a 3 element numeric vector containing the following information:</p> <ol> <li>the size of the component in bytes (i.e. how much disk space it occupies).</li> <li>the user number of the user who last updated the component.</li> <li>the time of the last update in 60ths of a second since 1st January 1970 (UTC).</li> </ol>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/frdci/#example","title":"Example","text":"<pre><code>      \u2395FRDCI 1 13\n2200 207 3.702094494E10\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fread/","title":"File Read Components","text":"File Read Components R\u2190\u2395FREAD Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fread/#access-code-1","title":"Access code 1","text":"<p><code>Y</code> is a  2 or 3 item  vector containing the file tie number, the component number(s), and an optional passnumber.  If the passnumber is omitted it is assumed to be zero. All elements of <code>Y</code> must be integers.</p> <p>The second item in <code>Y</code> may be scalar which specifies a single component number or a vector of component numbers. If it is a scalar, the result is the value of the array that is stored in the specified component on the tied file. If it is a vector, the result is a vector of such arrays.</p> <p>Note that any invocation of  <code>\u2395FREAD</code> is an atomic operation.  Thus if <code>compnos</code> is a vector, the statement:</p> <pre><code>      \u2395FREAD tie compnos passno\n</code></pre> <p>will return the same result as:</p> <pre><code>      {\u2395FREAD tie \u2375 passno}\u00a8compnos\n</code></pre> <p>However, the first statement will, in the case of a share-tied file,  prevent any potential intervening file access from another user (without the need for a  <code>\u2395FHOLD</code>). It will also perform slightly faster, especially when reading from a share-tied file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fread/#examples","title":"Examples","text":"<pre><code>      \u2374SALES\u2190\u2395FREAD 1 241\n3 2 12\n\nGetFile\u2190{\u2395io\u21900                \u235d Extract contents.\n    tie\u2190\u2375 \u2395fstie 0            \u235d new tie number.\n    fm to\u21902\u2191\u2395fsize tie        \u235d first and next component.\n    cnos\u2190fm+\u2373to-fm            \u235d vector of component nos.\n    cvec\u2190\u2395fread tie cnos      \u235d vector of components.\n    cvec\u22a3\u2395funtie tie        \u235d ... untie and return.\n}\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/frename/","title":"File Rename","text":"File Rename {R}\u2190X \u2395FRENAME Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/frename/#access-code-128","title":"Access code 128","text":"<p><code>Y</code> must be a simple 1 or 2 element integer vector containing a file tie number and an optional passnumber.  If the passnumber is omitted it is assumed to be zero.</p> <p><code>X</code> must be a simple character scalar or vector containing the new name of the file.  This name must be in accordance with the operating system's conventions, and may be specified with a relative or absolute pathname.</p> <p>The file being renamed must be tied exclusively.</p> <p>The shy result of <code>\u2395FRENAME</code> is the tie number of the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/frename/#examples","title":"Examples","text":"<pre><code>      'SALES' \u2395FTIE 1\n      'PROFIT' \u2395FTIE 2\n\n      \u2395FNAMES\nSALES\nPROFIT\n\n      'SALES.85' \u2395FRENAME 1\n      '../profits/PROFITS.85' \u2395FRENAME 2\n</code></pre> <pre><code>      \u2395FNAMES\nSALES.85\n../profits/PROFITS.85\n\nRename\u2190{\n    fm to\u2190\u2375\n    \u2395FUNTIE to \u2395FRENAME fm \u2395FTIE 0\n}\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/freplace/","title":"File Replace Component","text":"File Replace Component {R}\u2190X \u2395FREPLACE Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/freplace/#access-code-16","title":"Access code 16","text":"<p><code>Y</code> must be a simple 2 or 3 element integer vector containing the file tie number, the component number, and an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  The component number specified must lie within the file's component number limits.</p> <p><code>X</code> is any array (including, for example, the <code>\u2395OR</code> of a namespace), and overwrites the value of the specified component.  The component information (see \"File Read Component Information: \" on page 1) is also updated.</p> <p>The shy result of <code>\u2395FREPLACE</code> is the file index (component number of replaced record).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/freplace/#example","title":"Example","text":"<pre><code>      SALES\u2190\u2395FREAD 1 241\n\n      (SALES\u00d71.1) \u2395FREPLACE 1 241\n</code></pre> <p>Define a function to replace (index, value) pairs in a component file JMS.DCF:</p> <pre><code>Frep\u2190{\n    tie\u2190\u237a \u2395FTIE 0\n    _\u2190{\u2375 \u2395FREPLACE tie \u237a}/\u00a8\u2375\n    \u2395FUNTIE tie\n} \n\n      'jms'Frep(3 'abc')(29 'xxx')(7 'yyy')\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fresize/","title":"File Resize","text":"File Resize {R}\u2190{X}\u2395FRESIZE Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fresize/#access-code-1024","title":"Access code 1024","text":"<p><code>Y</code> must be a simple integer scalar or 1 or 2 element vector containing the file tie number followed by an optional passnumber.  If the passnumber is omitted it is assumed to be zero.</p> <p><code>X</code> is an integer that specifies the maximum permitted size of the file in bytes. The value 0 means the maximum possible size of file.</p> <p>An attempt to update a component file that would cause it to exceed its maximum size will fail with a <code>FILE FULL</code> error (21). A side effect of <code>\u2395FRESIZE</code> is to cause the file to be compacted. This process removes any gaps in the file caused by replacing a component with a shorter array. Any interrupt entered at the keyboard during the compaction is ignored. Note that if the left argument is omitted, the file is simply compacted and the maximum file size remains unchanged.</p> <p>During compaction, the file is restructured by reordering the components and by amalgamating the free areas at the end of the file. The file is then truncated and excess disk space is released back to the operating system. For a large file with many components, this process may take a significant time.</p> <p>The shy result of <code>\u2395FRESIZE</code> is the tie number of the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fresize/#example","title":"Example","text":"<pre><code>      'test'\u2395FCREATE 1 \u22c4 \u2395FSIZE 1\n1 1 120 1.844674407E19\n      (10 1000\u23741.1)\u2395FAPPEND 1 \u22c4 \u2395FSIZE 1\n1 2 80288 1.844674407E19\n\n      100000 \u2395FRESIZE 1 \u235d Limit size to 100000 bytes\n\n      (10 1000\u23741.1)\u2395FAPPEND 1\nFILE FULL\n      (10 1000\u23741.1)\u2395FAPPEND 1\n     \u2227\n\n      \u2395FRESIZE 1      \u235d Force file compaction.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fsize/","title":"File Size","text":"File Size R\u2190\u2395FSIZE Y <p><code>Y</code> must be a simple integer scalar or 1 or 2 element vector containing the file tie number followed by an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  The result is a 4 element numeric vector containing the following:</p> Element Description 1 the number of first component 2 1 + the number of the last component, (i.e. the result of the next <code>\u2395FAPPEND</code> ) 3 the current size of the file in bytes 4 the file size limit in bytes"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fsize/#example","title":"Example","text":"<pre><code>      \u2395FSIZE 1\n1 21 65271 4294967295\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fstac/","title":"File Set Access","text":"File Set Access {R}\u2190X \u2395FSTAC Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fstac/#access-code-8192","title":"Access code 8192","text":"<p><code>Y</code> must be a simple integer scalar or 1 or 2 element vector containing the file tie number followed by an optional passnumber. If the passnumber is omitted it is assumed to be zero.</p> <p><code>X</code> must be a valid access matrix, i.e. a 3-column integer matrix with any number of rows.  The function sets access control for a set of specific users (1st column) and file operations (2nd column) with specified passnumbers ( 3rd column). Note that a 0 in the 1st column specifies all users, a <code>\u00af1</code> in the 2nd column specifies all file operations, and a <code>0</code> in the 3rd column specifies that no passnumber is required. For further details, see File Access Control on page 1Component Files.</p> <p>The shy result of <code>\u2395FSTAC</code> is the tie number of the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fstac/#examples","title":"Examples","text":"<pre><code>\n      'SALES' \u2395FCREATE 1\n      (3 3\u237428 2105 16385 0 2073 16385 31 \u00af1 0) \u2395FSTAC 1\n      ((\u2395FRDAC 1)\u236a21 2105 16385) \u2395FSTAC 1\n\n       (1 3\u23740 \u00af1 0)\u2395FSTAC 2 \u235d Let everyone do anything\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fstie/","title":"File Share Tie","text":"File Share Tie {R}\u2190X \u2395FSTIE Y <p><code>Y</code> must be 0 or a simple 1 or 2 element integer vector containing an available file tie number to be associated with the file for further file operations, and an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  The tie number must not already be associated with a tied file.</p> <p><code>X</code> must be a simple character scalar or vector which specifies the name of the file to be tied.  The file must be named in accordance with the operating system's conventions, and may be specified with a relative or absolute pathname.</p> <p>The file must exist and be accessible by the user.  If it is already tied by another task, it must not be tied exclusively.</p> <p>The shy result of <code>\u2395FSTIE</code> is the tie number of the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fstie/#automatic-tie-number-allocation","title":"Automatic Tie Number Allocation","text":"<p>A tie number of 0 as argument to a create, share tie or exclusive tie operation, allocates the first (closest to zero) available tie number and returns it as an explicit result. This allows you to simplify code. For example:</p> <p>from:</p> <pre><code>      tie\u21901+\u2308/0,\u2395FNUMS  \u235d With next available number,\n      file \u2395FSTIE tie   \u235d ... share tie file.\n</code></pre> <p>to:</p> <pre><code>      tie\u2190file \u2395FSTIE 0 \u235d Tie with 1st available number.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fstie/#example","title":"Example","text":"<pre><code>      'SALES' \u2395FSTIE 1\n\n      '../budget/COSTS' \u2395FSTIE 2\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ftie/","title":"Exclusive File Tie","text":"Exclusive File Tie {R}\u2190X \u2395FTIE Y"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ftie/#access-code-2","title":"Access code 2","text":"<p><code>Y</code> must be 0 or a simple 1 or 2 element integer vector containing an available file tie number to be associated with the file for further file operations, and an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  The tie number must not already be associated with a share tied or exclusively tied file.</p> <p><code>X</code> must be a simple character scalar or vector which specifies the name of the file to be exclusively tied.  The file must be named in accordance with the operating system's conventions, and may be a relative or absolute pathname.</p> <p>The file must exist and  the user must have write access to it.  It may not already be tied by another user.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ftie/#automatic-tie-number-allocation","title":"Automatic Tie Number Allocation","text":"<p>A tie number of 0 as argument to a create, share tie or exclusive tie operation, allocates the first (closest to zero) available tie number, and returns it as an explicit result. This allows you to simplify code. For example:</p> <p>from:</p> <pre><code>      tie\u21901+\u2308/0,\u2395FNUMS \u235d With next available number,\n      file \u2395FTIE tie   \u235d ... tie file.\n</code></pre> <p>to:</p> <pre><code>      tie\u2190file \u2395FTIE 0 \u235d Tie with first available number.\n</code></pre> <p>The shy result of <code>\u2395FTIE</code> is the tie number of the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ftie/#examples","title":"Examples","text":"<pre><code>      'SALES' \u2395FTIE 1\n\n      '../budget/COSTS' \u2395FTIE  2\n\n      '../budget/expenses' \u2395FTIE 0\n3\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/funtie/","title":"File Untie","text":"File Untie {R}\u2190\u2395FUNTIE Y <p><code>Y</code> must be a simple integer scalar or vector (including Zilde).  Files whose tie numbers occur in <code>Y</code> are untied.  Other elements of <code>Y</code> have no effect.</p> <p>If <code>Y</code> is empty, no files are untied, but all the interpreter's internal file buffers are flushed and the operating system is asked to flush all file updates  to disk.  This special facility allows the programmer to add extra security (at the expense of performance) for application data files.</p> <p>The shy result of <code>\u2395FUNTIE</code> is a vector of tie numbers of the files actually untied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/funtie/#example","title":"Example","text":"<pre><code>      \u2395FUNTIE \u2395FNUMS \u235d Unties all tied files\n\n      \u2395FUNTIE \u236c      \u235d Flushes all buffers to disk\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/fx/","title":"Fix Definition","text":"Fix Definition {R}\u2190\u2395FX Y <p><code>Y</code> is the representation form of a function or operator which may be:</p> <ul> <li>its canonical representation form similar to that produced by <code>\u2395CR</code> except that redundant blanks are permitted other than within names and constants, and the first and last rows may start with a del symbol (<code>\u2207</code>).</li> <li>its nested representation form similar to that produced by <code>\u2395NR</code> except that redundant blanks are permitted other than within names and constants, and the first and last items may be del (<code>\u2207</code>) symbols.</li> <li>its object representation form produced by <code>\u2395OR</code>.</li> <li>its vector representation form similar to that produced by <code>\u2395VR</code> except that additional blanks are permitted other than within names and constants.</li> </ul> <p><code>\u2395FX</code> attempts to create (fix) a function or operator in the workspace or current namespace from the definition given by <code>Y</code>.  <code>\u2395IO</code> is an implicit argument of <code>\u2395FX</code>. Note that <code>\u2395FX</code> does not update the source of a scripted namespace, or of class or instance; the only two methods of updating the source of scripted objects is via the Editor, or by calling <code>\u2395FIX</code>.</p> <p>If the function or operator is successfully fixed, <code>R</code> is a simple character vector containing its name and the result is shy. Otherwise <code>R</code> is an integer scalar containing the (<code>\u2395IO</code> dependent) index of the row of the canonical representation form in which the first error preventing its definition is detected. In this case the result <code>R</code> is not shy.</p> <p>Functions and operators which are pendent, that is, in the state indicator without a suspension mark (<code>*</code>), retain their original definition until they complete, or are cleared from the state indicator.  All other occurrences of the function or operator assume the new definition.  The function or operator will fail to fix if it has the same name as an existing variable, or a visible label.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/instances/","title":"Instances","text":"Instances R\u2190\u2395INSTANCES Y <p><code>\u2395INSTANCES</code> returns a list all the current instances of the Class specified by <code>Y</code>.</p> <p><code>Y</code> must be a reference.</p> <p>If <code>Y</code> is a reference to a Class, <code>R</code> is a vector of references to all existing Class Instances of  <code>Y</code>. Otherwise, <code>R</code> is empty.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/instances/#examples","title":"Examples","text":"<p>This example illustrates a simple inheritance tree or Class hierarchy. There are 3 Classes, namely:</p> <pre><code>Animal\n    Bird (derived from Animal)\n        Parrot (derived from Bird)\n</code></pre> <pre><code>:Class Animal\n...\n:EndClass \u235d Animal\n\n:Class Bird: Animal\n...\n:EndClass \u235d Bird\n\n:Class Parrot: Bird\n...\n:EndClass \u235d Parrot\n</code></pre> <pre><code>      Eeyore\u2190\u2395NEW Animal\n      Robin\u2190\u2395NEW Bird\n      Polly\u2190\u2395NEW Parrot\n\n      \u2395INSTANCES Parrot\n #.[Parrot] \n      \u2395INSTANCES Bird\n #.[Bird]  #.[Parrot] \n      \u2395INSTANCES Animal\n #.[Animal]  #.[Bird]  #.[Parrot] \n\n</code></pre> <pre><code>      Eeyore.\u2395DF 'eeyore'\n      Robin.\u2395DF 'robin'\n      Polly.\u2395DF 'polly'\n\n      \u2395INSTANCES Parrot\n polly\n      \u2395INSTANCES Bird\n robin  polly \n      \u2395INSTANCES Animal\n eeyore  robin  polly \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/io/","title":"Index Origin","text":"Index Origin \u2395IO <p><code>\u2395IO</code> determines the index of the first element of a non-empty vector.</p> <p><code>\u2395IO</code> may be assigned the value 0 or 1.  The value in a clear workspace is 1. <code>\u2395IO</code> has Namespace scope.</p> <p><code>\u2395IO</code> is an implicit argument of any function derived from the Axis operator (<code>[K]</code>), of the monadic functions Fix (<code>\u2395FX</code>), Grade Down (<code>\u2352</code>), Grade Up (<code>\u234b</code>), Index Generator (<code>\u2373</code>), Roll (<code>?</code>), and of the dyadic functions Deal (<code>?</code>), Grade Down (<code>\u2352</code>), Grade Up (<code>\u234b</code>), Index (<code>\u2337</code>), Index Of (<code>\u2373</code>), Indexed Assignment, Indexing, Pick (<code>\u2283</code>) and Transpose (<code>\u2349</code>).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/io/#examples","title":"Examples","text":"<pre><code>        \u2395IO\u21901\n        \u23735\n1 2 3 4 5\n\n        \u2395IO\u21900\n        \u23735\n0 1 2 3 4\n\n        +/[0]2 3\u2374\u23736\n3 5 7\n\n        'ABC',[\u00af.5]'='\nABC\n===\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/kl/","title":"Key Label","text":"Key Label R\u2190\u2395KL Y <p><code>Y</code> is a simple character vector or a vector of character vectors containing Input Codes for Keyboard Shortcuts. In the Classic Edition, keystrokes are associated with Keyboard Shortcuts by the Input Translate Table.</p> <p><code>R</code> is a simple character vector or a vector of character vectors containing the labels associated with the codes.  If <code>Y</code> specifies codes that are not defined, the corresponding elements of <code>R</code> are the codes in <code>Y</code>.</p> <p><code>\u2395KL</code> provides the information required to build device-independent help messages into applications, particularly full-screen applications using <code>\u2395SM</code> and <code>\u2395SR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/kl/#examples","title":"Examples:","text":"<pre><code>      \u2395KL 'RC'\nRight\n\n      \u2395KL 'ER' 'EP' 'QT' 'F1' 'F13'\n  Enter  Esc  Shift+Esc  F1  Shift+F1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/lc/","title":"Line Count","text":"Line Count R\u2190\u2395LC <p>This is a simple vector of line numbers drawn from the state indicator (See  The State Indicator\"The State Indicator\" on page 1).  The most recently activated line is shown first.  If a value corresponds to a defined function in the state indicator, it represents the current line number where the function is either suspended or pendent.</p> <p>The value of <code>\u2395LC</code> changes immediately upon completion of the most recently activated line, or upon completion of execution within <code>\u234e</code> or <code>\u2395</code>.  If a <code>\u2395STOP</code> control is set, <code>\u2395LC</code> identifies the line on which the stop control is effected.  In the case where a stop control is set on line 0 of a defined function, the first entry in <code>\u2395LC</code> is 0 when the control is effected.</p> <p>The value of <code>\u2395LC</code> in a clear workspace is the null vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/lc/#examples","title":"Examples","text":"<pre><code>      )SI\n#.TASK1[5]*\n\u234e\n#.BEGIN[3]\n\n      \u2395LC\n5 3\n</code></pre> <pre><code>\n      \u2192\u2395LC\n      \u2395LC\n\n      \u2374\u2395LC\n0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/load/","title":"Load Workspace","text":"Load Workspace \u2395LOAD Y <p><code>Y</code> must be a simple character scalar or vector containing the name of a file that contains a saved workspace. . If no file extension is given it is implied. See WSEXT configuration parameterWSEXT on page 1.</p> <p>If <code>Y</code> is ill-formed or does not identify a saved workspace or the user account does not have access permission to the workspace, a <code>DOMAIN ERROR</code> is reported.</p> <p>Otherwise, the active workspace is replaced by the workspace identified in <code>Y</code>.  The active workspace is lost.  If the loaded workspace was saved by the <code>)SAVE</code> system command, the latent expression (<code>\u2395LX</code>) is immediately executed, unless APL was invoked with the -x option.  If the loaded workspace was saved by the <code>\u2395SAVE</code> system function, execution resumes from the point of exit from the <code>\u2395SAVE</code> function, with the result of the <code>\u2395SAVE</code> function being 0, running in the same namespace in which the <code>\u2395SAVE</code> was executed.</p> <p>The workspace identification and time-stamp when saved is not displayed.</p> <p>If the workspace contains any GUI objects whose <code>Visible</code> property is 1, these objects will be displayed.  If the workspace contains a non-empty <code>\u2395SM</code> but does not contain an SM GUI object, the form defined by <code>\u2395SM</code> will be displayed in a window on the screen.</p> <p>The system switches to the namespace that was the current namespace when the workspace was saved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/lock/","title":"Lock Definition","text":"Lock Definition {R}\u2190{X}\u2395LOCK Y <p><code>Y</code> must be a simple character scalar, or vector which is taken to be the name of a defined function or operator in the active workspace. <code>\u2395LOCK</code> does not apply to dfns or derived functions.</p> <p>The active referent to the name in the workspace is locked.  Stop, trace and monitor settings, established by the <code>\u2395STOP</code>, <code>\u2395TRACE</code> and <code>\u2395MONITOR</code> functions, are cancelled.</p> <p>The optional left argument <code>X</code> specifies to what extent the function code is hidden. <code>X</code> may be 1, 2 or 3 (the default) with the following meaning:</p> <ol> <li>The object may not be displayed and you may not obtain its character form using <code>\u2395CR</code>, <code>\u2395VR</code> or <code>\u2395NR</code>.</li> <li>If an error or exception occurs that would normally cause a suspension of execution within the locked function or operator, the state indicator is cut back to the statement that called it and the suspension is triggered there instead.</li> <li>Both 1 and 2 apply. You can neither display the locked object nor suspend execution within it.</li> </ol> <p>Locks are additive, so that</p> <pre><code>      1 \u2395LOCK'FOO' \u22c4 2 \u2395LOCK'FOO'     \n</code></pre> <p>is equivalent to:</p> <pre><code>      3 \u2395LOCK'FOO' \n</code></pre> <p>The shy result <code>R</code> is the lock state (1,2 or 3) of <code>Y</code>.</p> <p>A <code>DOMAIN ERROR</code> is reported if <code>Y</code> is ill-formed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/lock/#examples","title":"Examples","text":"<pre><code>      \u2395FX'r\u2190foo' 'r\u219010'\n      \u2395NR'foo'  \n  r\u2190foo r\u219010\n      \u2374\u2395NR'foo'\n2\n      \u2395LOCK'foo'\n      \u2374\u2395NR'foo'\n0\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/lx/","title":"Latent Expression","text":"Latent Expression \u2395LX <p>This may be a character vector or scalar representing an APL expression.  The expression is executed automatically when the workspace is loaded.  If APL is invoked using the  -x  flag, this execution is suppressed.</p> <p>The value of <code>\u2395LX</code> in a clear workspace is <code>''</code>. <code>\u2395LX</code> has workspace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/lx/#example","title":"Example","text":"<pre><code>      \u2395LX\u2190'''GOOD MORNING PETE'''\n\n      )SAVE GREETING\nGREETING saved Tue Sep 8 10:49:29 1998\n\n      )LOAD GREETING\n./GREETING saved Tue Sep 8 10:49:29 1998\nGOOD MORNING PETE\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/map/","title":"Map File","text":"Map File R\u2190{X}\u2395MAP Y <p><code>\u2395MAP</code> function associates a mapped file with an APL array in the workspace.</p> <p>Two types of mapped files are supported; APL and raw. An APL mapped file contains the binary representation of a Dyalog APL array, including its header. A file of this type must be created using the  utility function <code>\u2206MPUT</code> (supplied in the util workspace). When you map an APL file, the rank, shape and data type of the array is obtained from the information on the file.</p> <p>A raw mapped file is an arbitrary collection of bytes. When you map a raw file, you must specify the characteristics of the APL array to be associated with this data. In particular, the data type and its shape.</p> <p>The type of mapping is determined by the presence (raw) or absence (APL) of the left argument to <code>\u2395MAP</code>.</p> <p>The right argument <code>Y</code> specifies the name of the file to be mapped and, optionally, the access type and a start byte in the file. <code>Y</code> may be a simple character vector, or a 2 or 3-element nested vector containing:</p> <ol> <li>file name (character scalar/vector)</li> <li>access code (character scalar/vector) : one of : <code>'R'</code> or <code>'r'</code> (read-only access), <code>'W'</code> or <code>'w'</code> (read-write access). If not specified, the file is mapped  read-only.</li> <li>start byte offset (integer scalar/vector). This is only applicable for read-only access and is not supported for read-write access. It must be a multiple of the word size (4 on 32-bit systems, 8 on 64-bit systems). The default is 0.</li> </ol> <p>If you map a file with read-only access you may modify the corresponding array in the workspace, however your changes are not written back to the file.</p> <p>If <code>X</code> is specified, it defines the type and shape to be associated with raw data on file. <code>X</code> must be an integer scalar or vector. The first item of <code>X</code> specifies the data type and must be one of the following values:</p> Classic Edition 11, 82, 83, 163, 323 or 645 Unicode Edition 11, 80, 83, 160, 163, 320, 323 or 645 <p>The values are more fully explained in \"Data Representation (Monadic)\" on page 1.</p> <p>Following items determine the shape of the mapped array. A value of <code>\u00af1</code> on any (but normally the first) axis in the shape is replaced by the system to mean: read as many complete records from the file as possible. Only one axis may be specified in this way. Note that if    <code>X</code> is a singleton, the data on the file is mapped as a scalar and only the first value on the file is accessible.</p> <p>If no left argument is given, file is assumed to contain a simple APL array, complete with header information (type, rank, shape, etc.). Such mapped files may only be updated by changing the associated array using indexed/pick assignment: <code>var[a]\u2190b</code>, the new values must be of the same type as the originals.</p> <p>Note that a raw mapped file may be updated only if its file offset is 0. Note also that Windows does not support mapped files of zero length.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/map/#examples","title":"Examples","text":"<p>Map raw file as a read-only vector of doubles:</p> <pre><code>      vec\u2190645 \u00af1 \u2395MAP'c:\\myfile'\n</code></pre> <p>Map raw file as a 20-column read-write matrix of 1-byte integers:</p> <pre><code>      mat\u219083 \u00af1 20 \u2395MAP'c:\\myfile' 'W' \n</code></pre> <p>Replace some items in mapped file:</p> <pre><code>      mat[2 3;4 5]\u21902 2\u2374\u23734\n</code></pre> <p>Map bytes 100-160 in raw file as a <code>5\u00d72</code> read-only matrix of doubles:</p> <pre><code>      dat\u2190645 5 2 \u2395MAP'c:\\myfile' 'R' 80\n</code></pre> <p>Put simple 4-byte integer array on disk ready for mapping:</p> <pre><code>      (\u228383 323 \u2395DR 2 3 4\u2374\u237324)\u2206MPUT'c:\\myvar'\n</code></pre> <p>Then, map a read-write variable:</p> <pre><code>      var\u2190\u2395MAP'c:\\myvar' 'w' \n</code></pre> <p>Note that a mapped array need not be named. In the following example, a 'raw' file is mapped, summed and released, all in a single expression:</p> <pre><code>      +/163 \u00af1 \u2395MAP'c:\\shorts.dat'\n42\n</code></pre> <p>If you fail to specify the shape of the data, the data on file will be mapped as a scalar and only the first value in the file will be accessible:</p> <pre><code>      83 \u2395MAP 'myfile'   \u235d map FIRST BYTE of file.\n\u00af86\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/map/#compatibility-between-editions","title":"Compatibility between Editions","text":"<p>In the Unicode Edition <code>\u2395MAP</code> will fail with a <code>TRANSLATION ERROR</code> (event number 92) if you attempt to map an APL file which contains character data type 82.</p> <p>In order for the Unicode Edition to correctly interpret data in a raw file that was written using data type 82, the file may be mapped with data type 83 and the characters extracted by indexing into <code>\u2395AVU</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/mkdir/","title":"Make Directory","text":"Make Directory {R}\u2190{X}\u2395MKDIR Y <p>This function creates new directories.</p> <p><code>Y</code> is a character vector or scalar containing a single directory name, or a vector of character vectors containing zero or more directory names. Names must conform to the naming rules of the host Operating System.</p> <p>By default, for each file in <code>Y</code> the path must exist and the base name must not exist (see File Name Parts on page 1), otherwise an error is signalled.</p> <p>The optional left argument <code>X</code> is the numeric scalar 0, 1, 2 or 3 which amends this behaviour as shown in the following table. If omitted, it is assumed to be 0.</p> <code>0</code> Default behaviour. <code>1</code> No action is taken if a directory specified by <code>Y</code> already exists. The return value may be used to determine whether a new directory was created or not. <code>2</code> Any part of the paths specified in <code>Y</code> which does not already exist will be created in preparation of creating the corresponding directory. <code>3</code> Combination of 1 and 2. <p>If <code>Y</code> specifies a single name, the shy result <code>R</code> is a scalar 1 if a directory was created or 0 if not. If <code>Y</code> is a vector of character vectors, <code>R</code> is a vector of 1s and 0s with the same length as <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/mkdir/#examples","title":"Examples","text":"<pre><code>\n      \u2395NEXISTS '/Users/Pete/Documents/temp'\n0\n      \u2395\u2190\u2395MKDIR '/Users/Pete/Documents/temp'\n1\n      \u2395\u2190\u2395MKDIR '/Users/Pete/Documents/temp'\nFILE NAME ERROR: Directory exists\n      \u2395\u2190\u2395MKDIR'/Users/Pete/Documents/temp'\n     \u2227\n\n      \u2395\u2190\u2395MKDIR'/Users/Pete/Documents/temp/t1/t2'\nFILE NAME ERROR: Unable to create directory (\"The system cannot find the path specified.\")\n      \u2395\u2190\u2395MKDIR'/Users/Pete/Documents/temp/t1/t2'\n     \u2227\n\n      \u2395\u21902 \u2395MKDIR'/Users/Pete/Documents/temp/t1/t2'\n1\n      \u22a2\u2395MKDIR'temp1' 'temp2'\n1 1\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/mkdir/#note","title":"Note","text":"<p>When multiple names are specified they are processed in the order given. If an error occurs at any point whilst creating directories, processing will immediately stop and an error will be signalled. The operation is not atomic; some directories may be created before this happens. In the event of an error there will be no result and therefore no indication of how many directories were created before the error occurred.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ml/","title":"Migration Level","text":"Migration Level \u2395ML <p><code>\u2395ML</code> determines the degree of migration of the Dyalog APL language towards IBM's APL2.  Setting this variable to other than its default value of <code>1</code> changes the interpretation of certain symbols and language constructs. <code>\u2395ML</code> has Namespace scope.</p> <code>\u2395ML\u21900</code> `` Original Native Dyalog <code>\u2395ML\u21901</code> <code>Z\u2190\u220aR</code> Monadic <code>'\u220a'</code> is interpreted as 'enlist' rather than 'type'. <code>\u2395ML\u21902</code> <code>Z\u2190\u2191R</code> Monadic <code>'\u2191'</code> is interpreted as 'first' rather than 'mix'. `` <code>Z\u2190\u2283R</code> Monadic <code>'\u2283'</code> is interpreted as 'mix' rather than 'first'. `` <code>Z\u2190\u2261R</code> Monadic <code>'\u2261'</code> returns a positive rather than a negative value, if its argument has non-uniform depth. <code>\u2395ML\u21903</code> <code>R\u2190X\u2282[K]Y</code> Dyadic <code>'\u2282'</code> follows the APL2 (rather than the original Dyalog APL) convention. `` <code>\u2395TC</code> The order of the elements of <code>\u2395TC</code> is the same as in APL2. <p>Subsequent versions of Dyalog APL may provide further migration levels.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ml/#examples","title":"Examples","text":"<pre><code>      X\u21902(3 4)\n\n      \u2395ML\u21900\n      \u220aX\n0  0 0\n      \u2191X\n2 0\n3 4\n      \u2283X\n2\n      \u2261X\n\u00af2\n\n</code></pre> <pre><code>\n      \u2395ML\u21901\n      \u220aX\n2 3 4\n      \u2191X\n2 0\n3 4\n      \u2283X\n2\n      \u2261X\n\u00af2\n\n</code></pre> <pre><code>\n      \u2395ML\u21902\n      \u220aX\n2 3 4\n      \u2191X\n2\n      \u2283X\n2 0\n3 4\n      \u2261X\n2\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/","title":"Name Association","text":"Name Association {R}\u2190{X}\u2395NA Y <p><code>\u2395NA</code> provides access from APL to compiled functions within a library. A library is implemented  according to the Operating System as follows:</p> <ul> <li>a Dynamic Link Library(DLL) under Windows</li> <li>a Shared Library (.so or .dylib) under Linux or macOS</li> <li>a static library (.a) under AIX</li> </ul> <p>A DLL The term DLL is used herein as a generic name for one of these libraries.  is a collection of functions typically written in C (or C++) each of which may take arguments and return a result.</p> <p>Instructional examples using <code>\u2395NA</code> can be found in the supplied workspace <code>quadna</code>.</p> <p>The DLL may be part of the standard operating system software, a library purchased from a third party supplier, or one that you have written yourself.</p> <p>The right argument <code>Y</code> is a character vector that identifies the name and syntax of the function to be associated. The left argument <code>X</code> is a character vector that contains the name to be associated with the external function. If the <code>\u2395NA</code> is successful, a function (name class 3) is established in the active workspace with name <code>X</code>. If <code>X</code> is omitted, the name of the external function itself is used for the association.</p> <p>The shy result <code>R</code> is a character vector containing the name of the external function that was fixed.</p> <p>For example, math.dll might be a library of mathematical functions containing a function divide.</p> <p>In a compiled language such as C, the types of arguments and results of functions must be declared explicitly. Typically, these types will be published with the documentation that accompanies the DLL. For example, function divide might be declared:  double divide(int32_t, int32_t);</p> <p>which means that it expects two long (4-byte) integer arguments and returns a double (8-byte) floating point result. Notice the correspondence between the C declaration and the right argument of <code>\u2395NA</code>:     C:             double    divide       (int32_t,  int32_t);    APL:  'div' \u2395NA 'F8    math|divide       I4        I4 '</p> <p>So to associate the APL name <code>div</code> with this external function:</p> <pre><code>      'div' \u2395NA 'F8 math|divide I4 I4'\n</code></pre> <p>where <code>F8</code> and <code>I4</code>, specify the types of the result and arguments expected by divide. The association has the effect of establishing a new function: <code>div</code> in the workspace, which when called, passes its arguments to divide and returns the result.</p> <pre><code>      )fns\ndiv\n      div 10 4\n2.5\n</code></pre> <p>It is imperative that care be taken when coding type declarations. A DLL cannot check types of data passed from APL. A wrong type declaration will lead to erroneous results or may even cause the workspace to become corrupted and crash. During development, you may wish to prevent this happening. See: ErrorOnExternalException parameter ErrorOnExternalException on page 1.</p> <p>The full syntax for the right argument of <code>\u2395NA</code> is:</p> <pre><code>    [result] library|function [arg1] [arg2] ...\n</code></pre> <p>Note that functions associated with DLLs are never dyadic. All arguments are passed as items of a (possibly nested) vector on the right of the function.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#locating-the-dll","title":"Locating the DLL","text":"<p>The DLL may be specified using a full pathname, file extension, and function type.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#be-aware","title":"Be aware","text":"<p>A 32-bit interpreter can only load 32-bit DLLs/shared libraries; a 64-bit interpreter can only load 64-bit DLLs/shared libraries.</p> <p>If a DLL/shared library has a missing dependency, the error generated by the operating system, and therefore reported by Dyalog will suggest that the DLL/shared library that was explicitly called in the <code>\u2395NA</code> call is missing.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#pathname","title":"Pathname:","text":"<p>APL uses the LoadLibrary() system function under Windows or dlopen() under UNIX, Linux and macOS to load the DLL. If a full or relative pathname is omitted, these functions search a list of directories determined by the operating system. This list always includes the directory which contains the Dyalog program, and on all non-Windows platforms, $DYALOG/lib. For further details, see the operating system documentation about these functions.</p> <p>Alternatively, a full or relative pathname may be supplied in the usual way:</p> <pre><code>      \u2395NA'... c:\\mydir\\mydll|foo ...'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#errors","title":"Errors:","text":"<p>If the specified DLL (or a dependent DLL) fails to load it will generate:</p> <pre><code>FILE ERROR 2 No such file or directory\n</code></pre> <p>It is frequently the case that this error is a result of a missing dependency; operating systems do not return error codes which allow the interpreter to generate a more specific error.</p> <p>If the DLL loads successfully, but the specified library function is not accessible, it will generate:</p> <pre><code>VALUE ERROR\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#file-extension","title":"File Extension:","text":"<p>Under Windows, if the file extension is omitted, .dll is assumed. Note that some DLLs are in fact .exe files, and in this case the extension must be specified explicitly:</p> <pre><code>      \u2395NA'... mydll.exe|foo ...'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#libca-on-non-windows-platforms","title":"libc.a on Non-Windows Platforms","text":"<p>On non-Windows platforms many of the most useful system library functions appear in <code>libc.a</code>. The <code>quadna</code> workspace includes the function <code>NonWindows.Setup</code> which has code which will locate <code>libc.a</code> on each platform.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#data-type-coding-scheme","title":"Data Type Coding Scheme","text":"<p>The type coding scheme introduced above is of the form:</p> <p>[direction] [special] type [width] [array][[count]]</p> <p>The options are summarised in the following table and their functions detailed below.</p> Description Symbol Meaning Direction <code>&lt;</code> Pointer to array input to DLL function. <code>&gt;</code> Pointer to array output from DLL function <code>=</code> Pointer to input/output array. Special <code>0</code> Null-terminated string. <code>#</code> Byte-counted string Type <code>I</code> int <code>U</code> unsigned int <code>C</code> char <code>T</code> char Classic Edition:  - translated to/from ANSI <code>F</code> float <code>D</code> decimal <code>J</code> complex <code>P</code> uintptr-t equivalent to U4 on 32-bit versions and U8 on 64-bit versions <code>A</code> APL array <code>Z</code> APL array with header (as passed to a TCP/IP socket) Width <code>1</code> 1-byte <code>2</code> 2-byte <code>4</code> 4-byte <code>8</code> 8-byte <code>16</code> 16-byte (128-bit) Array <code>[n]</code> Array of length n elements <code>[]</code> Array, length determined at call-time Structure <code>{...}</code> Structure. Count <code>[int]</code> Rather than explicitly declaring multiple adjacent occurrences of the same the count option may be used <p>In the Classic Edition, <code>C</code> specifies untranslated character, whereas <code>T</code> specifies that the character data will be translated to/from <code>\u2395AV</code>.</p> <p>In the Unicode Edition, C and T are identical (no translation of character data is performed) except that for C the default width is 1 and for T the default width is \"wide\" (2 bytes under Windows, 4 bytes under UNIX, Linux or macOS).</p> <p>The use of T with default width is recommended to ensure portability between Editions.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#direction","title":"Direction","text":"<p>C functions accept data arguments either by value or by address. This distinction is indicated by the presence of a '' or '[]' in the argument declaration: int  num1;       // value of num1 passed. int num2;       // Address of num2 passed. int num3[];      // Address of num3 passed.</p> <p>An argument (or result) of an external function of type pointer, must be matched in the <code>\u2395NA</code> call by a declaration starting with one of the characters: <code>&lt;</code>, <code>&gt;</code>, or <code>=</code>.</p> <p>In C, when an address is passed, the corresponding value can be used as either an input or an output variable. An output variable means that the C function overwrites values at the supplied address. Because APL is a call-by-value language, and doesn't have pointer types, we accommodate this mechanism by distinguishing output variables, and having them returned explicitly as part of the result of the call.</p> <p>This means that where the C function indicates a pointer type, we must code this as starting with one of the characters: <code>&lt;</code>, <code>&gt;</code> or <code>=</code>.</p> &lt; indicates that the address of the argument will be used by C as an input variable and values at the address will not be over-written. &gt; indicates that C will use the address as an output variable. In this case, APL must allocate an output array over which C can write values. After the call, this array will be included in the nested result of the call to the external function. = indicates that C will use the address for both input and output. In this case, APL duplicates the argument array into an output buffer whose address is passed to the external function. As in the case of an output only array, the newly modified copy will be included in the nested result of the call to the external function."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#examples","title":"Examples","text":"&lt;I2 Pointer to 2-byte integer - input to external function &gt;C Pointer to character output from external function. =T Pointer to character input to and output from function. =A Pointer to APL array modified by function."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#special","title":"Special","text":"<p>In C it is common to represent character strings as null-terminated or byte counted arrays. These special data types are indicated by inserting the symbol <code>0</code> (null-terminated) or <code>#</code> (byte counted) between the direction indicator (<code>&lt;</code>, <code>&gt;</code>, <code>=</code>) and the type (<code>T</code> or <code>C)</code> specification. For example, a pointer to a null-terminated input character string is coded as <code>&lt;0T[]</code>, and an output one coded as <code>&gt;0T[]</code>.</p> <p>Note that while appending the array specifier '<code>[]</code>' is formally correct, because the presence of the special qualifier (<code>0</code> or <code>#</code>) implies an array, the '<code>[]</code>' may be omitted: <code>&lt;0T</code>, <code>&gt;0T</code>, <code>=#C</code>, etc.</p> <p>Note also that the 0 and # specifiers may be used with data of all types (excluding <code>A</code> and <code>Z</code>) and widths. For example, in the Classic Edition, <code>&lt;0U2</code> may be useful for dealing with Unicode.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#type","title":"Type","text":"<p>The data type of the argument may be one of the following characters and  may be specified in lower or upper case:</p> Code Type Description <code>I</code> Integer The value is interpreted as a 2s complement signed integer <code>U</code> Unsigned integer The value is interpreted as an unsigned integer <code>C</code> Character The value is interpreted as a character. In the Unicode Edition, the value maps directly onto a Unicode code point. In the Classic Edition, the value is interpreted as an index into <code>\u2395AV</code> . This means that <code>\u2395AV</code> positions map onto corresponding ANSI positions . For example, with <code>\u2395IO=0</code> : <code>\u2395AV[35] = 's'</code> , maps to ANSI[35] = ' <code>T</code> Translated character The value is interpreted as a character. In the Unicode Edition, the value maps directly onto a Unicode code point. In the Classic Edition, the value is translated using standard Dyalog <code>\u2395AV</code> to ANSI translation. This means that <code>\u2395AV</code> characters map onto corresponding ANSI characters . For example, with <code>\u2395IO=0</code> : <code>\u2395AV[35] = 's'</code> maps to ANSI[115] = 's' <code>UTF</code> Unicode encoded <code>&gt;0UTF8[]</code> will translate to a UTF-8 encoded string <code>&lt;0UTF16[]</code> will translate from a UTF-16LE encoded string <code>F</code> Float The value is interpreted as an IEEE 754-2008 binary64 floating point number <code>D</code> Decimal The value is interpreted as an IEEE 754-2008 decimal128 floating point number (DPD format on AIX, BID format on other platforms) <code>J</code> Complex <code>P</code> uintptr-t This is equivalent to U4 on 32-bit versions and U8 on 64-bit versions <code>\u2207</code> Function pointer This allows the passing of an APL function for the function to call <code>A</code> APL array This is the same format as is used to transmit APL arrays to an Auxiliary Processor (AP) <code>Z</code> APL array with header This is the same format as is used to transmit APL arrays over TCP/IP Sockets"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#width","title":"Width","text":"<p>The type specifier may be followed by the width of the value in bytes. For example:</p> I4 4-byte signed integer. U2 2-byte unsigned integer. F8 8-byte floating point number. F4 4-byte floating point number. D16 16-byte decimal floating-point number Type Possible values for Width Default value for Width <code>I</code> 1, 2, 4, 8 4 <code>U</code> 1, 2, 4, 8 4 <code>C</code> 1,2,4 1 <code>T</code> 1,2,4 wide character(see below) <code>UTF</code> 8,16 none <code>F</code> 4, 8 8 <code>D</code> 16 16 <code>J</code> 16 16 <code>P</code> Not applicable <code>\u2207</code> Not applicable <code>A</code> Not applicable <code>Z</code> Not applicable <p>In the Unicode Edition, the default width is the width of a wide characteraccording to the convention of the host operating system. This translates to T2 under Windows and T4 under UNIX, Linux or macOS.</p> <p>Note that 32-bit versions can support 64-bit integer arguments, but not 64-bit integer results.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#examples_1","title":"Examples","text":"I2 16-bit integer &lt;I4 Pointer to input 4-byte integer U Default width unsigned integer =F4 Pointer to input/output 4-byte floating point number."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#arrays","title":"Arrays","text":"<p>Arrays are specified by following the basic data type with <code>[n]</code> or <code>[]</code>, where <code>n</code> indicates the number of elements in the array. In the C declaration, the number of elements in an array may be specified explicitly at compile time, or determined dynamically at runtime. In the latter case, the size of the array is often passed along with the array, in a separate argument. In this case, <code>n</code>, the number of elements is omitted from the specification. Note that C deals only in scalars and rank 1 (vector) arrays. int vec[10];               // explicit vector length. unsigned size, list[];     // undetermined length. </p> <p>could be coded as:</p> I[10] vector of 10 ints. U U[] unsigned integer followed by an array of unsigned integers. <p>Confusion sometimes arises over a difference in the declaration syntax between C and <code>\u2395NA</code>. In C, an argument declaration may be given to receive a pointer to either a single scalar item, or to the first element of an array. This is because in C, the address of an array is deemed to be the address of its first element.    void foo (char *string);    char ch = 'a', ptr = \"abc\";    foo(&amp;ch);// call with address of scalar.    foo(ptr);// call with address of array.</p> <p>However, from APL's point of view, these two cases are distinct and if the function is to be called with the address of (pointer to) a scalar, it must be declared: <code>'&lt;T'</code>. Otherwise, to be called with the address of an array, it must be declared: <code>'&lt;T[]'</code>. Note that it is perfectly acceptable in such circumstances to define more than one name association to the same DLL function specifying different argument types:</p> <pre><code>      'FooScalar'\u2395NA'mydll|foo &lt;T'   \u22c4 FooScalar'a'\n      'FooVector'\u2395NA'mydll|foo &lt;T[]' \u22c4 FooVector'abc'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#structures","title":"Structures","text":"<p>Arbitrary data structures, which are akin to nested arrays, are specified using the symbols <code>{}</code>. For example, the code <code>{F8 I2}</code> indicates a structure comprised of an 8-byte floatfollowed by a 2-byte int. Furthermore, the code <code>&lt;{F8 I2}[3]</code> means an input pointer to an array of 3 such structures.</p> <p>For example, this structure might be defined in C thus: typedef struct {     double  f;     short   i; } mystruct;</p> <p>A function defined to receive a count followed by an input pointer to an array of such structures: void foo(unsigned count, mystruct *str);</p> <p>An appropriate <code>\u2395NA</code> declaration would be:</p> <pre><code>      \u2395NA'mydll.foo U &lt;{F8 I2}[]' \n</code></pre> <p>A call on the function with two arguments - a count followed by a vector of structures:</p> <pre><code>      foo 4,\u2282(1.4 3)(5.9 1)(6.5 2)(0 0)\n</code></pre> <p>Notice that for the above call, APL converts the two Boolean <code>(0 0)</code> elements to an 8-byte float and a 2-byte int, respectively.</p> <p>Note that if the C compiler would add extra space for alignment within a structure the <code>\u2395NA</code> syntax will need to code that explicitly. For example: typedef struct {     short i;     / most C compilers would add 6 bytes of alignment here /     double d; } mystruct;</p> <p>An appropriate <code>\u2395NA</code> declaration would be:</p> <pre><code>      \u2395NA'mydll.foo U &lt;{I2  {I1[6]} F8}[]'\n</code></pre> <p>A call on the function with two arguments - a count followed by a vector of structures:</p> <pre><code>      pad\u2190\u22826\u23740\n      foo 4,\u2282(3 pad 1.4)(1 pad 5.9 )(2 pad 6.5 )(0 pad 0)\n\n</code></pre> <p>A library designer tries to avoid defining structures that induce padding.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#count","title":"Count","text":"<p>If a definition includes multiple adjacent occurrences of the same item, the count syntax may be used rather than explicitly repeating the same definition.</p> <p>For example:</p> <p><code>&gt;I8[3]</code> rather than <code>&gt;I8 &gt;I8 &gt;I8</code></p> <p><code>{I8 U8 I8 P}[2]</code> rather than <code>{I8 U8 I8 P} {I8 U8 I8 P}</code></p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#using-a-function","title":"Using a Function","text":"<p>A DLL function may or may not return a result, and may take zero or more arguments. This syntax is reflected in the coding of the right argument of <code>\u2395NA</code>. However, notice that the corresponding associated APL function is a result-returning niladic (if it takes no arguments) or monadic function. It cannot be dyadic and it must always return a vector result - a null one if there is no output from the DLL function. See Result Vector section below. Examples of the various combinations are:</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#dll-function-non-result-returning","title":"DLL function Non-result-returning:","text":"<pre><code>\u2395NA    'mydll|fn1'          \u235d Niladic\n\u2395NA    'mydll|fn2 &lt;0T'      \u235d Monadic - 1-element arg\n\u2395NA    'mydll|fn3 =0T &lt;0T'  \u235d Monadic - 2-element arg\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#dll-function-result-returning","title":"DLL function Result-returning:","text":"<pre><code>\u2395NA 'I4 mydll|fn4'          \u235d Niladic\n\u2395NA 'I4 mydll|fn5 F8'       \u235d Monadic - 1-element arg\n\u2395NA 'I4 mydll|fn6 &gt;I4[] &lt;0T'\u235d Monadic - 2-element arg\n</code></pre> <p>When the external function is called, the number of elements in the argument must match the number defined in the <code>\u2395NA</code> definition. Using the examples above:</p> <pre><code>      fn1                   \u235d Niladic Function.\n      fn2, \u2282'Single String' \u235d 1-element arg\n      fn3 'This' 'That'     \u235d 2-element arg\n</code></pre> <p>Note in the second example, that you must enclose the argument string to produce a single item (nested) array in order to match the declaration. Dyalog converts the type of a numeric argument if necessary, so for example in <code>fn5</code> defined above, a Boolean value would be converted to double floating point (F8) prior to being passed to the DLL function.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#multi-threading","title":"Multi-Threading","text":"<p>Appending the '<code>&amp;</code>' character to the function name causes the external function to be run in its own system thread. For example:</p> <pre><code>      \u2395NA'... mydll|foo&amp; ...'\n</code></pre> <p>This means that other APL threads can run concurrently with the one that is calling the <code>\u2395NA</code> function.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#name-mangling","title":"Name Mangling","text":"<p>C++ and some other languages will by default mangle (or decorate) function names which are exported from a DLL file. The given external function name must exactly match the exported name, either by matching the name mangling or by ensuring the names exported from the library are not mangled.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#call-by-ordinal-number","title":"Call by Ordinal Number","text":"<p>Under Windows, a DLL may associate an ordinal number with any of its functions. This number may then be used to call the function as an alternative to calling it by name. Using <code>\u2395NA</code> to call by ordinal number uses the same syntax but with the function name replaced with its ordinal number. For example:</p> <pre><code>      \u2395NA'... mydll|57 ...'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#pointer-arguments","title":"Pointer Arguments","text":"<p>When passing pointer arguments there are three cases to consider.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#input-pointer","title":"&lt; Input pointer:","text":"<p>In this case you must supply the data array itself as argument to the function. A pointer to its first element is then passed to the DLL function.</p> <pre><code>      fn2 \u2282'hello'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#output-pointer","title":"&gt; Output pointer:","text":"<p>Here, you must supply the number of elements that the output will need in order for APL to allocate memory to accommodate the resulting array.</p> <pre><code>      fn6 10 'world'  \u235d 1st arg needs space for 10 ints.\n</code></pre> <p>Note that if you were to reserve fewer elements than the DLL function actually used, the DLL function would write beyond the end of the reserved array and may cause the interpreter to crash with a System Error (syserror 999 on Windows or SIGSEGV on UNIX, Linux or macOS).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#inputoutput","title":"=  Input/Output:","text":"<p>As with the input-only case, a pointer to the first element of the argument is passed to the DLL function. The DLL function then overwrites some or all of the elements of the array, and the new value is passed back as part of the result of the call. As with the output pointer case, if the input array were too short, so that the DLL wrote beyond the end of the array, the interpreter would almost certainly crash.</p> <pre><code>      fn3 '.....' 'hello'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#specifying-pointers-explicitly","title":"Specifying Pointers Explicitly","text":"<p><code>\u2395NA</code> syntax enables APL to pass arguments to DLL functions by value or address as appropriate. For example if a function requires an integer followed by a pointer to an integer: void fun(int valu, int *addr);</p> <p>You might declare and call it:</p> <pre><code>      \u2395NA'mydll|fun I &lt;I' \u22c4 fun 42 42\n</code></pre> <p>The interpreter passes the value of the first argument and the address of the second one.</p> <p>Two common cases occur where it is necessary to pass a pointer explicitly. The first is if the DLL function requires a null pointer, and the second is where you want to pass on a pointer which itself is a result from a DLL function.</p> <p>In both cases, the pointer argument should be coded as <code>P</code>. This causes APL to pass the pointer unchanged, by value, to the DLL function.</p> <p>In the previous example, to pass a null pointer, (or one returned from another DLL function), you must code a separate <code>\u2395NA</code> definition.</p> <pre><code>      'fun_null'\u2395NA'mydll|fun I P' \u22c4 fun_null 42 0\n</code></pre> <p>Now APL passes the value of the second argument (in this case 0 - the null pointer), rather than its address.</p> <p>Note that by using P, which is 4-byte for 32-bit processes and 8-byte for 64-bit processes, you will ensure that the code will run unchanged under both 32-bit and 64-bit versions of Dyalog APL.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#result-vector","title":"Result Vector","text":"<p>In APL, a function cannot overwrite its arguments. This means that any output from a DLL function must be returned as part of the explicit result, and this includes output via 'output' or 'input/output' pointer arguments.</p> <p>The general form of the result from calling a DLL function is a nested vector. The first item of the result is the defined explicit result of the external function, and subsequent items are implicit results from output, or input/output pointer arguments.</p> <p>The length of the result vector is therefore: 1 (if the function was declared to return an explicit result) + the number of output or input/output arguments.</p> <code>\u2395NA</code> Declaration Result Output Arguments Result Length <code>mydll|fn1</code> <code>0</code> `` <code>0</code> <code>mydll|fn2 &lt;0T</code> <code>0</code> <code>0</code> <code>0</code> <code>mydll|fn3 =0T &lt;0T</code> <code>0</code> <code>1 0</code> <code>1</code> <code>I4 mydll|fn4</code> <code>1</code> `` <code>1</code> <code>I4 mydll|fn5 F8</code> <code>1</code> <code>0</code> <code>1</code> <code>I4 mydll|fn6 &gt;I4[] &lt;0T</code> <code>1</code> <code>1 0</code> <code>2</code> <p>Note that the result vector from a function that is declared void() and has no output parameters is <code>\u236c</code> (zilde).</p> <p>As a convenience, if the result would otherwise be a 1-item vector, it is disclosed. Using the third example above:</p> <pre><code>      \u2374fn3 '.....' 'abc'\n5\n</code></pre> <p><code>fn3</code> has no explicit result; its first argument is input/output pointer; and its second argument is input pointer. Therefore as the length of the result would be 1, it has been disclosed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#64-bit-integer-results","title":"64 bit integer results","text":"<p>When a 64 bit integer result is returned it is converted into 128 bit decimal floating point, because this is the only APL data type that can fully preserve all 64 bits of the result. If you wish to perform arithmetic with this value, you must set  <code>\u2395FR</code>  to 1287 in order to preserve the same precision. If this is not done then the precision will be 53 bits which might not be enough.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#callbacks","title":"Callbacks (\u2207)","text":"<p>Currently, support for a <code>\u2395NA</code> function to call an APL function is limited to the use of the NAG (National Algorithms Group) library of functions. This library is a FORTRAN library and FORTRAN passes arguments by reference (address) rather than by value. The expression:</p> <pre><code>   \u2207f8\u2190(P P P P)\n</code></pre> <p>declares a callback function that returns a double and takes 4 pointer arguments. The result can be any of the normal results. It is not possible to return a pointer. The arguments can be from 0 to 16 P values.</p> <p>The argument when passed can be the name of an APL function or the <code>\u2395OR</code> of a function.</p> <p>The function when called can then decode the pointer arguments appropriately using a <code>\u2395NA</code> of MEMCPY().</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#ansi-unicode-versions-of-library-calls","title":"ANSI /Unicode Versions of Library Calls","text":"<p>Under Windows, most library functions that take character arguments, or return character results have two forms: one Unicode (Wide) and one ANSI. For example, a function such as MessageBox(), has two forms MessageBoxA() and MessageBoxW(). The A stands for ANSI (1-byte) characters, and the W for wide (2-byte Unicode) characters.</p> <p>It is essential that you associate the form of the library function that is appropriate for the Dyalog Edition you are using, i.e. MessageBoxA() for the Classic Edition, but MessageBoxW() for the Unicode Edition.</p> <p>Whilst this is convenient it is not complete. It is adequate for character arrays that consist of characters from UCS-2 (i.e. those that will fit in an array with a <code>\u2395DR</code> of 80 or 160). If a more complete support is required then the W form of the function would be required and explicit use of UTF16 specified.</p> <p>To simplify writing portable code for both Editions, you may specify the character <code>*</code> instead of <code>A</code> or <code>W</code> at the end of a function name. This will be replaced by <code>A</code> in the Classic Edition and <code>W</code> in the Unicode Edition.</p> <p>The default name of the associated function (if no left argument is given to <code>\u2395NA</code>), will be without the trailing letter (<code>MessageBox</code>).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#type-definitions","title":"Type Definitions","text":"<p>The C language encourages the assignment of defined names to primitive and complex data types using its #define and typedef mechanisms. Using such abstractions enables the C programmer to write code that will be portable across many operating systems and hardware platforms.</p> <p>Windows software uses many such names and Microsoft documentation will normally refer to the type of function arguments using defined names such as HANDLE or LPSTR rather than their equivalent C primitive types: int or char*.</p> <p>It is beyond the scope of this manual to list all the Microsoft definitions and their C primitive equivalents, and indeed, DLLs from sources other than Microsoft may well employ their own distinct naming conventions.</p> <p>In general, you should consult the documentation that accompanies the DLL in order to convert typedefs to primitive C types and thence to <code>\u2395NA</code> declarations. The documentation may well refer you to the 'include' files which are part of the Software Development Kit, and in which the types are defined.</p> <p>The following table of some commonly encountered Windows typedefs and their <code>\u2395NA</code> equivalents might prove useful.</p> Windows typedef <code>\u2395NA</code> equivalent HWND <code>P</code> HANDLE <code>P</code> GLOBALHANDLE <code>P</code> LOCALHANDLE <code>P</code> DWORD <code>U4</code> WORD <code>U2</code> BYTE <code>U1</code> LPSTR <code>=0T[] (note 1)</code> LPCSTR <code>&lt;0T[] (note 2)</code> WPARAM <code>U (note 3)</code> LPARAM <code>U4 (note 3)</code> LRESULT <code>I4</code> BOOL <code>I</code> UINT <code>U</code> ULONG <code>U4</code> ATOM <code>U2</code> HDC <code>P</code> HBITMAP <code>P</code> HBRUSH <code>P</code> HFONT <code>P</code> HICON <code>P</code> HMENU <code>P</code> HPALETTE <code>P</code> HMETAFILE <code>P</code> HMODULE <code>P</code> HINSTANCE <code>P</code> COLORREF <code>{U1[4]}</code> POINT <code>{I I}</code> POINTS <code>{I2 I2}</code> RECT <code>{I I I I}</code> CHAR <code>T or C</code>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#notes","title":"Notes","text":"<ol> <li>LPSTR is a pointer to a null-terminated string. The definition does not indicate whether this is input or output, so the safest coding would be <code>=0T[]</code> (providing the vector you supply for input is long enough to accommodate the result). You may be able to improve simplicity or performance if the documentation indicates that the pointer is 'input only' (&lt;<code>0T[]</code>) or 'output only' (&gt;<code>0T[]</code>). See Direction above.</li> <li>LPCSTR is a pointer to a constant null-terminated string and therefore coding <code>&lt;0T[]</code> is safe.</li> <li> <p>WPARAM is an unsigned value, LPARAM is signed. They are 32 bit values in a 32-bit APL, and 64-bit in a 64 bit APL. You should consult the documentation for the specific function that you intend to call to determine what type they represent</p> </li> <li> <p>The use of type T with default width ensures portability of code between Classic and Unicode Editions. In the Classic Edition, T (with no width specifier) implies 1-byte characters which are translated between <code>\u2395AV</code> and ASCII, while in the Unicode Edition, T (with no width specifier) implies 2-byte (Unicode) characters.</p> </li> </ol>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#the-dyalog-dll","title":"The Dyalog DLL","text":"<p>The Dyalog DLL (see  Run-Time Applications and ComponentsRun-Time Applications and Components on page 1) contains three functions: MEMCPY, STRNCPY and STRLEN.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#memcpy","title":"MEMCPY","text":"<p><code>MEMCPY</code> is an extremely versatile function used for moving arbitrary data between memory buffers.</p> <p>Its C definition is: void MEMCPY(       // copy memory       void to,     // target address       void *fm,     // source address       size_t size   // number of bytes to copy       );</p> <p><code>MEMCPY</code> copies size bytes starting from source address fm, to destination address to. The source and destination areas should not overlap; if they do the behaviour is undefined and the result is the first argument.</p> <p><code>MEMCPY</code>'s versatility stems from being able to associate to it using many different type declarations.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example","title":"Example","text":"<p>Suppose a global buffer (at address: <code>addr</code>) contains (<code>numb</code>) double floating point numbers. To copy these to an APL array, we could define the association:</p> <pre><code>      'doubles' \u2395NA 'dyalog32|MEMCPY &gt;F8[] I4 U4'\n      doubles numb addr (numb\u00d78)\n</code></pre> <p>Notice that:</p> <ul> <li>As the first argument to <code>doubles</code> is an output argument, we must supply the number of elements to reserve for the output data.</li> <li><code>MEMCPY</code> is defined to take the number of bytes to copy, so we must multiply the number of elements by the element size in bytes.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example_1","title":"Example","text":"<p>Suppose that a database application requires that we construct a record in global memory prior to writing it to file. The record structure might look like this: typedef struct {         int empno;// employee number.         float salary;// salary.         char name[20];// name.         } person;</p> <p>Then, having previously allocated memory (<code>addr</code>) to receive the record, we can define:</p> <pre><code>      'prec' \u2395NA 'dyalog64|MEMCPY P &lt;{P F4 T[20]} P'\n      prec addr(99 12345.60 'Charlie Brown')(4+4+20)\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#strncpy","title":"STRNCPY","text":"<p><code>STRNCPY</code> is used to copy null-terminated strings between memory buffers.</p> <p>Its C definition is: void STRNCPY(// copy null-terminated string         char to,// target address         char *fm,// source address         size_t size// MAX number of chars to copy         );</p> <p><code>STRNCPY</code> copies a maximum of size characters from the null-terminated source string at address fm, to the destination address to. If the source and destination strings overlap, the result is the first argument.</p> <p>If the source string is shorter than size, a null character is appended to the destination string.</p> <p>If the source string (including its terminating null) is longer than size, only size characters are copied and the resulting destination string is not null-terminated</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example_2","title":"Example","text":"<p>Suppose that a database application returns a pointer (<code>addr</code>) to a structure that contains two (max 20-char) null-terminated strings. typedef struct {  // null-terminated strings:         char first[20];  // first name (max 19 chars + 1 null).         char last[20];   // last name. (max 19 chars + 1 null).         } name;</p> <p>To copy the names from the structure:</p> <pre><code>      'get'\u2395NA'dyalog64|STRNCPY &gt;0T1[] P U4'\n      get 20 addr 20\nCharlie\n      get 20 (addr+20) 20\nBrown\n</code></pre> <p>Note that (as this is a 64-bit example), <code>\u2395FR</code> must be 1287 for the addition to be reliable.</p> <p>To copy data from the workspace into an already allocated (<code>new</code>) structure:</p> <pre><code>      'put'\u2395NA'dyalog32|STRNCPY I4 &lt;0T[] U4'\n      put new 'Bo' 20\n      put (new+4) 'Peep' 20\n</code></pre> <p>Notice in this example that you must ensure that names no longer than 19 characters are passed to <code>put</code>. More than 19 characters would not leave STRNCPY enough space to include the trailing null, which would probably cause the application to fail.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#strncpya","title":"STRNCPYA","text":"<p>This is a synonym for STRNCPY. It is there so that STRNCPY* (on Windows) selects between STRNCPYA and STRNCPYW.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#strncpyw","title":"STRNCPYW","text":"<p>This is a cover for the C standard function wcsncpy(). It is named this way so that (on Windows) STRNCPY* will behave helpfully.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#strlen","title":"STRLEN","text":"<p><code>STRLEN</code> calculates the length of a C string (a 0-terminated string of bytes in memory). Its C declaration is: size_t STRLEN(         // calculate length of string         const char *s    // address of string         );</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example_3","title":"Example","text":"<p>Suppose that a database application returns a pointer (<code>addr</code>) to a null-terminated string and you do not know the upper bound on the length of the string.</p> <p>To copy the string into the workspace:</p> <pre><code>\n      'len'\u2395NA'P dyalog32|STRLEN P'\n      'cpy'\u2395NA'dyalog32|MEMCPY &gt;T[] P P'\n      cpy l addr (l\u2190len addr)\nBartholemew\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#examples_2","title":"Examples","text":"<p>The following examples all use functions from the Microsoft Windows user32.dll.</p> <p>This DLL should be located in a standard Windows directory, so you should not normally need to give the full path name of the library. However if trying these examples results in the error message <code>FILE ERROR 1 No such file or directory</code>, you must locate the DLL and supply the full path name (and possibly extension).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example-1-getcaretblinktime","title":"Example 1: GetCaretBlinkTime()","text":"<p>The Windows function GetCaretBlinkTime retrieves the caret blink rate.  It takes no arguments and returns an unsigned int and is declared as follows:</p> <p>UINT GetCaretBlinkTime(void);</p> <p>The following statements would provide access to this routine through an APL function of the same name.</p> <pre><code>      \u2395NA 'U user32|GetCaretBlinkTime'\n      GetCaretBlinkTime\n530\n</code></pre> <p>The following statement would achieve the same thing, but using an APL function called <code>BLINK</code>.</p> <pre><code>\n      'BLINK' \u2395NA 'U user32|GetCaretBlinkTime'\n      BLINK\n530\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example-2-setcaretblinktime","title":"Example 2: SetCaretBlinkTime()","text":"<p>The Windows function SetCaretBlinkTime sets the caret blink rate.  It takes a single unsigned int argument, does not return a result and is declared as follows:</p> <p>void SetCaretBlinkTime(UINT);</p> <p>The following statements would provide access to this routine through an APL function of the same name:</p> <pre><code>\n      \u2395NA 'user32|SetCaretBlinkTime U'\n      SetCaretBlinkTime 1000\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example-3-messagebox","title":"Example 3: MessageBox()","text":"<p>The Windows function MessageBox displays a standard dialog box on the screen and awaits a response from the user.  It takes 4 arguments.  The first is the window handle for the window that owns the message box.  This is declared as an unsigned int.  The second and third arguments are both pointers to null-terminated strings containing the message to be displayed in the Message Box and the caption to be used in the window title bar.  The 4th argument is an unsigned int that specifies the Message Box type.  The result is an int which indicates which of the buttons in the message box the user has pressed.  The function is declared as follows: int MessageBox(HWND, LPCSTR, LPCSTR, UINT);</p> <p>The following statements provide access to this routine through an APL function of the same name. Note that the 2nd and 3rd arguments are both coded as input pointers to type T null-terminated character arrays which ensures portability between Editions.</p> <pre><code>      \u2395NA 'I user32|MessageBox* P &lt;0T &lt;0T U'\n</code></pre> <p>The following statement displays a Message Box with a stop sign icon together with 2 push buttons labelled OK and Cancel (this is specified by the value 19).</p> <pre><code>      MessageBox 0 'Message' 'Title' 19\n</code></pre> <p>The function works equally well in the Unicode Edition because the &lt;0T specification is portable.</p> <pre><code>      MessageBox 0 '\u03a4\u03bf \u039c\u03ae\u03bd\u03c5\u03bc\u03b1' '\u039f \u03a4\u03af\u03c4\u03bb\u03bf\u03c2' 19\n</code></pre> <p>Note that a simpler, portable (and safer) method for displaying a Message Box is to use Dyalog APL's primitive <code>MsgBox</code> object.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example-4-findwindow","title":"Example 4: FindWindow()","text":"<p>The Windows function FindWindow obtains the window handle of a window which has a given character string in its title bar.  The function takes two arguments.  The first is a pointer to a null-terminated character string that specifies the window's class name. However, if you are not interested in the class name, this argument should be a NULL pointer.  The second is a pointer to a character string that specifies the title that identifies the window in question.  This is an example of a case described above where two instances of the function must be defined to cater for the two different types of argument.  However, in practice this function is most often used without specifying the class name.  The function is declared as follows:</p> <p>HWND FindWindow(LPCSTR, LPCSTR);</p> <p>The following statement associates the APL function <code>FW</code> with the second variant of the FindWindow call, where the class name is specified as a NULL pointer.  To indicate that APL is to pass the value of the NULL pointer, rather than its address, we need to code this argument as <code>I4</code>.</p> <pre><code>      'FW' \u2395NA 'P user32|FindWindow* P &lt;0T'\n</code></pre> <p>To obtain the handle of the window entitled \"CLEAR WS - Dyalog APL/W\":</p> <pre><code>      \u2395\u2190HNDL\u2190FW 0 'CLEAR WS - Dyalog APL/W'\n59245156\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example-5-getwindowtext","title":"Example 5: GetWindowText()","text":"<p>The Windows function GetWindowText retrieves the caption displayed in a window's title bar.  It takes 3 arguments.  The first is an unsigned int containing the window handle.  The second is a pointer to a buffer to receive the caption as a null-terminated character string.  This is an example of an output array.  The third argument is an int which specifies the maximum number of characters to be copied into the output buffer.  The function returns an int containing the actual number of characters copied into the buffer and is declared as follows:</p> <p>int GetWindowText(HWND, LPSTR, int);</p> <p>The following associates the \"GetWindowText\" DLL function with an APL function of the same name.  Note that the second argument is coded as \"<code>&gt;0T</code>\" indicating that it is a pointer to a character output array.</p> <pre><code>      \u2395NA 'I user32|GetWindowText* P &gt;0T I'\n</code></pre> <p>Now change the Session caption using <code>)WSID</code> :</p> <pre><code>      )WSID MYWS\nwas CLEAR WS\n</code></pre> <p>Then retrieve the new caption (max length 255) using window handle <code>HNDL</code> from the previous example:</p> <pre><code>      ]display GetWindowText HNDL 255 255\n.\u2192-------------------------.\n|    .\u2192------------------. |\n| 19 |MYWS - Dyalog APL/W| |\n|    '-------------------' |\n'\u220a-------------------------'\n</code></pre> <p>There are three points to note.</p> <ol> <li>Firstly, the number 255 is supplied as the second argument.  This instructs APL to allocate a buffer large enough for a 255-element character vector into which the DLL routine will write.</li> <li>Secondly, the result of the APL function is a nested vector of 2 elements.  The first element is the result of the DLL function.  The second element is the output character array. </li> <li>Finally, notice that although we reserved space for 255 elements, the result reflects the length of the actual text (19).</li> </ol> <p>An alternative way of coding and using this function is to treat the second argument as an input/output array.</p> <p>e.g.</p> <pre><code>      \u2395NA 'I User32|GetWindowText* P =0T I'\n\n      ]display GetWindowText HNDL (255\u2374' ') 255\n.\u2192-------------------------.\n|    .\u2192------------------. |\n| 19 |MYWS - Dyalog APL/W| |\n|    '-------------------' |\n'\u220a-------------------------'\n</code></pre> <p>In this case, the second argument is coded as <code>=0T</code>, so when the function is called an array of the appropriate size must be supplied.  This method uses more space in the workspace, although for small arrays (as in this case) the real impact of doing so is negligible.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example-6-getcharwidth","title":"Example 6: GetCharWidth()","text":"<p>The function GetCharWidth returns the width of each character in a given range. Its first argument is a device context (handle).  Its second and third arguments specify font positions (start and end).  The third argument is the resulting integer vector that contains the character widths (this is an example of an output array).  The function returns a Boolean value to indicate success or failure.  The function is defined as follows.  Note that this function is provided in the library: gdi32.dll.</p> <p>BOOL GetCharWidth(HDC, UINT, UINT, LPINT);</p> <p>The following statements provide access to this routine through an APL function of the same name:</p> <pre><code>      \u2395NA 'U4 gdi32|GetCharWidth* P U U &gt;I[]'\n\n     'Prin'\u2395WC'Printer'\n\n      ]display GetCharWidth ('Prin' \u2395WG 'Handle') 65 67 3 \n.\u2192-------------.\n|   .\u2192-------. |\n| 1 |50 50 50| |\n|   '~-------' |\n'\u220a-------------'\n</code></pre> <p>Note: <code>'Prin'\u2395WG'Handle'</code> returns a handle which is represented as a number. The number will be in the range (0 - 232] on a 32-bit version and (0 - 264] on a 64-bit version. These can be passed to a P type parameter. Older versions used a 32-bit signed integer.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#example-7-quadna-workspace","title":"Example 7: quadna workspace","text":"<p>The following example from the supplied workspace: quadna.dws. <code>quadna</code> illustrates several techniques which are important in advanced <code>\u2395NA</code> programming. Function <code>DllVersion</code> returns the major and minor version number for a given DLL. Note that this example assumes that the computer is running the 64-bit version of Dyalog.</p> <p>In advanced DLL programming, it is often necessary to administer memory outside APL's workspace. In general, the procedure for such use is:</p> <ol> <li>Allocate global memory.</li> <li>Lock the memory.</li> <li>Copy any DLL input information from workspace into memory.</li> <li>Call the DLL function.</li> <li>Copy any DLL output information from memory to workspace.</li> <li>Unlock the memory.</li> <li>Free the memory.</li> </ol> <p>Notice that steps 1 and 7 and steps 2 and 6 complement each other. That is, if you allocate global system memory, you must free it after you have finished using it. If you continue to use global memory without freeing it, your system will gradually run out of resources. Similarly, if you lock memory (which you must do before using it), then you should unlock it before freeing it. Although on some versions of Windows, freeing the memory will include unlocking it, in the interests of good style, maintaining the symmetry is probably a good thing.     \u2207 version\u2190DllVersion file;Alloc;Free;Lock;Unlock;Size                   ;Info;Value;Copy;size;hndl;addr;buff;ok [1] [2]  'Alloc'\u2395NA'P kernel32|GlobalAlloc U4 P' [3]   'Free'\u2395NA'P kernel32|GlobalFree P' [4]   'Lock'\u2395NA'P kernel32|GlobalLock P' [5] 'Unlock'\u2395NA'U4 kernel32|GlobalUnlock P' [6] [7]  'Size'\u2395NA'U4 version|GetFileVersionInfoSize &lt;0T &gt;U4' [8]  'Info'\u2395NA'U4 version|GetFileVersionInfo&lt;0T U4 U4 P' [9] 'Value'\u2395NA'U4 version|VerQueryValue P &lt;0T &gt;P &gt;U4' [10] [11] 'Copy'\u2395NA'dyalog64|MEMCPY &gt;U4[] P P' [12] [13]  :If \u00d7size\u2190\u2283Size file 0               \u235d Size of info [14]  :AndIf \u00d7hndl\u2190Alloc 0 size            \u235d Alloc memory [15]    :If \u00d7addr\u2190Lock hndl                \u235d Lock memory [16]      :If \u00d7Info file 0 size addr       \u235d Version info [17]        ok buff size\u2190Value addr'\\' 0 0 \u235d Version value [18]        :If ok [19]          buff\u2190Copy(size\u00f74)buff size   \u235d Copy info [20]          version\u2190(2/216)\u22a4\u22832\u2193buff     \u235d Split version [21]        :EndIf [22]      :EndIf [23]      ok\u2190Unlock hndl                   \u235d Unlock memory [24]    :EndIf [25]    ok\u2190Free hndl                       \u235d Free memory [26]  :EndIf     \u2207</p> <p>Lines [2-11] associate APL function names with the DLL functions that will be used.</p> <p>Lines [2-5] associate functions to administer global memory.</p> <p>Lines [7-9] associate functions to extract version information from a DLL.</p> <p>Line[11] associates <code>Copy</code> with <code>MEMCPY</code> function from dyalog64.dll.</p> <p>Lines [13-26] call the DLL functions.</p> <p>Line [13] requests the size of buffer required to receive version information for the DLL. A size of 0 will be returned if the DLL does not contain version information.</p> <p>Notice that care is taken to balance memory allocation and release:</p> <p>On line [14], the :If clause is taken only if the global memory allocation is successful, in which case (and only then) a corresponding Free is called on line [25].</p> <p>Unlock on line[23] is called if  and only if the call to Lock on line [15] succeeds.</p> <p>A result is returned from the function only if all the calls are successful Otherwise, the calling environment will sustain a <code>VALUE ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/na/#more-examples","title":"More Examples","text":"<p>\u2395NA'I4 advapi32 |RegCloseKey          P' \u2395NA'I4 advapi32 |RegCreateKeyEx      P &lt;0T U4 &lt;0T U4 U4 P &gt;P &gt;U4' \u2395NA'I4 advapi32 |RegEnumValue        P U4 &gt;0T =U4 =U4 &gt;U4 &gt;0T =U4' \u2395NA'I4 advapi32 |RegOpenKey          P &lt;0T &gt;P' \u2395NA'I4 advapi32 |RegOpenKeyEx        P &lt;0T U4 U4 &gt;P' \u2395NA'I4 advapi32 |RegQueryValueEx     P &lt;0T =U4 &gt;U4 &gt;0T =U4' \u2395NA'I4 advapi32 |RegSetValueEx       P &lt;0T =U4 U4 &lt;0T U4' \u2395NA'P  dyalog32 |STRNCPY              P P P' \u2395NA'P  dyalog32 |STRNCPYA             P P P' \u2395NA'P  dyalog32 |STRNCPYW             P P P' \u2395NA'P  dyalog32 |MEMCPY               P P P' \u2395NA'I4 gdi32    |AddFontResource     &lt;0T' \u2395NA'I4 gdi32    |BitBlt               P I4 I4 I4 I4 P I4 I4 U4' \u2395NA'U4 gdi32    |GetPixel             P I4 I4' \u2395NA'P  gdi32    |GetStockObject       I4' \u2395NA'I4 gdi32    |RemoveFontResource  &lt;0T' \u2395NA'U4 gdi32    |SetPixel             P I4 I4 U4' \u2395NA'   glu32    |gluPerspective       F8 F8 F8 F8' \u2395NA'I4 kernel32 |CopyFile            &lt;0T &lt;0T I4' \u2395NA'P  kernel32 |GetEnvironmentStrings' \u2395NA'U4 kernel32 |GetLastError' \u2395NA'U4 kernel32 |GetTempPath         U4 &gt;0T' \u2395NA'P  kernel32 |GetProcessHeap' \u2395NA'I4 kernel32 |GlobalMemoryStatusEx ={U4 U4 U8 U8 U8 U8 U8 U8}' \u2395NA'P  kernel32 |HeapAlloc            P U4 P' \u2395NA'I4 kernel32 |HeapFree             P U4 P' \u2395NA'   opengl32 |glClearColor         F4 F4 F4 F4' \u2395NA'   opengl32 |glClearDepth         F8' \u2395NA'   opengl32 |glEnable             U4' \u2395NA'   opengl32 |glMatrixMode         U4' \u2395NA'I4 user32   |ClientToScreen       P ={I4 I4}' \u2395NA'P  user32   |FindWindow          &lt;0T &lt;0T' \u2395NA'I4 user32   |ShowWindow           P I4' \u2395NA'I2 user32   |GetAsyncKeyState     I4' \u2395NA'P  user32   |GetDC                P' \u2395NA'I4 User32   |GetDialogBaseUnits' \u2395NA'P  user32   |GetFocus' \u2395NA'U4 user32   |GetSysColor          I4' \u2395NA'I4 user32   |GetSystemMetrics     I4' \u2395NA'I4 user32    |InvalidateRgn        P P I4' \u2395NA'I4 user32   |MessageBox          P &lt;0T &lt;0T U4' \u2395NA'I4 user32   |ReleaseDC            P P' \u2395NA'P  user32   |SendMessage         P U4 P P' \u2395NA'P  user32   |SetFocus             P' \u2395NA'I4 user32   |WinHelp             P &lt;0T U4 P' \u2395NA'I4 winnm    |sndPlaySound         &lt;0T U4'</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nappend/","title":"Native File Append","text":"Native File Append {R}\u2190X \u2395NAPPEND Y <p>This function appends the ravel of its left argument <code>X</code> to the end of the designated native file.  <code>X</code> must be a simple homogeneous APL array.  <code>Y</code> is a 1- or 2-element integer vector.  <code>Y[1]</code> is a negative integer that specifies the tie number of a native file.  The optional second element <code>Y[2]</code> specifies the data type to which the array <code>X</code> is to be converted before it is written to the file.</p> <p>The shy result is the location of the internal file pointer which will be pointing to the end of the newly written data.</p> <p>Note that <code>8 \u2395NINFO \u2283Y</code> can be used to report the current position of the file pointer.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nappend/#unicode-edition","title":"Unicode Edition","text":"<p>Unless you specify the data type in <code>Y[2</code>], a character array will by default be written using type 80.</p> <p>If the data will not fit into the specified character width (bytes) <code>\u2395NAPPEND</code> will fail with a <code>DOMAIN ERROR</code>.</p> <p>As a consequence of these two rules, you must specify the data type (either 160 or 320) in order to write Unicode characters whose code-point are in the range 256-65535 and &gt;65535 respectively.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nappend/#example","title":"Example","text":"<pre><code>\n\n      n\u2190'test'\u2395NCREATE 0\n      'abc' \u2395nappend n\n\n      '\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1'\u2395nappend n\nDOMAIN ERROR\n      '\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1'\u2395NAPPEND n\n     \u2227\n\n      '\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1'\u2395NAPPEND n 160\n\n      \u2395NREAD n 80 3 0\nabc\n      \u2395NREAD n 160 7\n\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1\n</code></pre> <p>To write 2 or more lines, you must insert appropriate end-of-line codes.</p> <pre><code>      ('hello',(\u2395UCS 13 10),'world')\u2395nappend \u00af1 \u235d Windows\n      ('hello',(\u2395UCS 10),'world')\u2395nappend \u00af1    \u235d Other\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/","title":"Name Classification","text":"Name Classification R\u2190\u2395NC Y <p><code>Y</code> must be a simple  character scalar, vector, matrix, or vector of vectors that specifies a list of names. <code>R</code> is a simple numeric vector containing one element per name in <code>Y</code>. Each element of <code>R</code> is the name class of the active referent to the object named in <code>Y</code>.</p> <p>If <code>Y</code> is simple, a name class may be:</p> Name Class Description <code>\u00af1</code> invalid name <code>0</code> undefined name <code>1</code> Label <code>2</code> Variable <code>3</code> Function <code>4</code> Operator <code>8</code> Event <code>9</code> Object (GUI, namespace, COM, .NET) <p>If <code>Y</code> is nested a more precise analysis of name class is obtained whereby different types  are identified by a decimal extension. For example, defined functions have name class 3.1, dfns have name class 3.2, and so forth. The complete set of name classification is as follows:</p> Array (2) Function (3) Operator (4) Namespace (9) n.1 Variable Traditional Traditional Created by <code>\u2395NS</code> , <code>)NS</code> or <code>:Namespace</code> n.2 Field dfn dop Instance n.3 Property Derived or Primitive Derived or Primitive n.4 Class n.5 Interface n.6 External Shared External External Class n.7 External Interface <p>In addition, values in <code>R</code> are negative to identify names of methods, properties and events that are inherited through the class hierarchy of the current class or instance.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#variable-name-class-21","title":"Variable (Name-Class 2.1)","text":"<p>Conventional APL arrays have name-class 2.1.</p> <pre><code>      NUM\u219088\n      CHAR\u2190'Hello World'\n\n      \u2395NC \u2191'NUM' 'CHAR'\n2 2\n\n      \u2395NC 'NUM' 'CHAR'\n2.1 2.1\n\n      'MYSPACE'\u2395NS ''\n      MYSPACE.VAR\u219010\n      MYSPACE.\u2395NC'VAR'\n2\n      MYSPACE.\u2395NC\u2282'VAR'\n2.1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#field-name-class-22","title":"Field (Name-Class 2.2)","text":"<p>Fields defined by APL Classes have name-class 2.2.</p> <pre><code>:Class nctest\n    :Field Public pubFld\n    :Field pvtFld\n\n    \u2207 r\u2190NameClass x \n      :Access Public \n      r\u2190\u2395NC x \n    \u2207 \n...\n:EndClass \u235d nctest       \n\n      ncinst\u2190\u2395NEW nctest\n</code></pre> <p>The name-class of a Field, whether Public or Private, viewed from a Method that is executing within the Instance Space, is 2.2.</p> <pre><code>      ncinst.NameClass'pubFld' 'pvtFld'\n2.2 2.2\n</code></pre> <p>Note that an internal Method sees both Public and Private Fields in the Class Instance. However, when viewed from outside the instance, only public fields are visible</p> <pre><code>      \u2395NC 'ncinst.pubFld' 'ncinst.pvtFld'\n\u00af2.2 0\n</code></pre> <p>In this case, the name-class is negative to indicate that the name has been exposed by the class hierarchy, rather than existing in the associated namespace which APL has created to contain the instance. The same result is returned if <code>\u2395NC</code> is executed inside this space:</p> <pre><code>      ncinst.\u2395NC'pubFld' 'pvtFld'\n\u00af2.2 0\n</code></pre> <p>Note that the names of Fields are reported as being unused if the argument to <code>\u2395NC</code> is simple.</p> <pre><code>      ncinst.\u2395NC 2 6\u2374'pubFldpvtFld'\n0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#property-name-class-23","title":"Property (Name-Class 2.3)","text":"<p>Properties defined by APL Classes have name-class 2.3.</p> <pre><code>:Class nctest\n    :Field pvtFld\u219099\n\n    :Property pubProp\n    :Access Public\n        \u2207 r\u2190get\n          r\u2190pvtFld\n        \u2207\n    :EndProperty\n\n    :Property pvtProp\n        \u2207 r\u2190get\n          r\u2190pvtFld\n        \u2207\n    :EndProperty\n\n    \u2207 r\u2190NameClass x\n      :Access Public\n      r\u2190\u2395NC x\n    \u2207\n...\n:EndClass \u235d nctest       \n\n      ncinst\u2190\u2395NEW nctest\n</code></pre> <p>The name-class of a Property, whether Public or Private, viewed from a Method that is executing within the Instance Space, is 2.3.</p> <pre><code>      ncinst.NameClass'pubProp' 'pvtProp'\n2.3 2.3\n\n</code></pre> <p>Note that an internal Method sees both Public and Private Properties in the Class Instance. However, when viewed from outside the instance, only Public Properties are visible</p> <pre><code>      \u2395NC 'ncinst.pubProp' 'ncinst.pvtProp'\n\u00af2.3 0\n</code></pre> <p>In this case, the name-class is negative to indicate that the name has been exposed by the class hierarchy, rather than existing in the associated namespace which APL has created to contain the instance. The same result is returned if <code>\u2395NC</code> is executed inside this space:</p> <pre><code>      ncinst.\u2395NC 'pubProp' 'pvtProp'\n\u00af2.3 0\n</code></pre> <p>Note that the names of Properties are reported as being unused if the argument to <code>\u2395NC</code> is simple.</p> <pre><code>      ncinst.\u2395NC 2 6\u2374'pubProppvtProp'\n0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#external-property-name-class-26","title":"External Property (Name-Class 2.6)","text":"<p>Properties exposed by external objects (.NET and COM and the APL GUI) have name-class <code>\u00af2.6</code>.</p> <pre><code>      \u2395USING\u2190'System'\n      dt\u2190\u2395NEW DateTime (2006 1 1)\n      dt.\u2395NC 'Day' 'Month' 'Year'\n\u00af2.6 \u00af2.6 \u00af2.6\n\n      'ex' \u2395WC 'OLEClient' 'Excel.Application'\n      ex.\u2395NC 'Caption' 'Version' 'Visible'\n\u00af2.6 \u00af2.6 \u00af2.6\n\n     'f'\u2395WC'Form'\n      f.\u2395NC'Caption' 'Size'\n\u00af2.6 \u00af2.6\n</code></pre> <p>Note that the names of such Properties are reported as being unused if the argument to <code>\u2395NC</code> is simple.</p> <pre><code>      f.\u2395NC 2 7\u2374'CaptionSize   '\n0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#defined-function-name-class-31","title":"Defined Function (Name-Class 3.1)","text":"<p>Traditional APL defined functions have name-class 3.1.</p> <pre><code>     \u2207 R\u2190AVG X\n[1]    R\u2190(+/X)\u00f7\u2374X\n     \u2207\n      AVG \u2373100\n50.5\n\n      \u2395NC'AVG'\n3\n      \u2395NC\u2282'AVG'\n3.1\n\n      'MYSPACE'\u2395NS 'AVG'\n       MYSPACE.AVG \u2373100\n50.5\n\n      MYSPACE.\u2395NC'AVG'\n3\n      \u2395NC\u2282'MYSPACE.AVG'\n3.1\n</code></pre> <p>Note that a function that is simply cloned from a defined function by assignment retains its name-class.</p> <pre><code>      MEAN\u2190AVG\n      \u2395NC'AVG' 'MEAN'\n3.1 3.1\n</code></pre> <p>Whereas, the name of a function that amalgamates a defined function with any other functions has the name-class of a Derived Function, i.e. 3.3.</p> <pre><code>      VMEAN\u2190AVG\u2218,\n      \u2395NC'AVG' 'VMEAN'\n3.1 3.3\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#dfn-name-class-32","title":"Dfn (Name-Class 3.2)","text":"<p>Dfns have name-class 3.2</p> <pre><code>      Avg\u2190{(+/\u2375)\u00f7\u2374\u2375}\n\n      \u2395NC'Avg'\n3\n      \u2395NC\u2282'Avg'\n3.2\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#derived-function-name-class-33","title":"Derived Function (Name-Class 3.3)","text":"<p>Names that reference a primitive or derived function have a name-class of 3.3.</p> <pre><code>      PLUS\u2190+\n      SUM\u2190+/\n      CUM\u2190PLUS\\\n      \u2395NC'PLUS' 'SUM' 'CUM'\n3.3 3.3 3.3\n      \u2395NC 3 4\u2374'PLUSSUM CUM '\n3 3 3\n</code></pre> <p>Note the difference between the name-class of a name referring to a defined function (3.1) and that of a name referring to a defined function bound with an operator to form a derived function (3.3). Trains, being derived functions, also have  nameclass 3.3.</p> <pre><code>     \u2207 R\u2190AVG X\n[1]    R\u2190(+/X)\u00f7\u2374X\n     \u2207\n\n      MEAN\u2190AVG\n      VMEAN\u2190AVG\u2218,\n\n      negrec\u2190-,\u00f7 \n\n      \u2395NC'AVG' 'MEAN' 'VMEAN' 'negrec'\n3.1 3.1 3.3 3.3\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#external-function-name-class-36","title":"External Function (Name-Class 3.6)","text":"<p>Methods exposed by the Dyalog APL GUI and COM and .NET objects have name-class <code>\u00af3.6</code>. Methods exposed by External Functions created using <code>\u2395NA</code> and <code>\u2395SH</code> all have name-class <code>3.6</code>.</p> <pre><code>      'F'\u2395WC'Form'\n\n      F.\u2395NC'GetTextSize' 'GetFocus'\n\u00af3.6 \u00af3.6\n\n      'EX'\u2395WC'OLEClient' 'Excel.Application'\n      EX.\u2395NC 'Wait' 'Save' 'Quit'\n\u00af3.6 \u00af3.6 \u00af3.6\n\n      \u2395USING\u2190'System'\n      dt\u2190\u2395NEW DateTime (2006 1 1)\n      dt.\u2395NC 'AddDays' 'AddHours'\n\u00af3.6 \u00af3.6\n\n\n</code></pre> <pre><code>      'beep'\u2395NA'user32|MessageBeep i'\n\n      \u2395NC'beep'\n3\n      \u2395NC\u2282'beep'\n3.6\n      'xutils'\u2395SH''\n      )FNS\navx     box     dbr     getenv  hex     ltom    ltov    mtol    ss      vtol\n      \u2395NC'hex' 'ss'\n3.6 3.6 \n</code></pre> <p>Note that the names of such Methods are reported as being unused if the argument to <code>\u2395NC</code> is simple.</p> <pre><code>      'F'\u2395WC'Form'\n      F.\u2395NC\u2191'GetTextSize' 'GetFocus'\n0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#operator-name-class-41","title":"Operator (Name-Class 4.1)","text":"<p>Traditional Defined Operators have name-class 4.1.</p> <pre><code>      \u2207FILTER\u2207\n     \u2207 VEC\u2190(P FILTER)VEC  \u235d Select from VEC those elts ..\n[1]    VEC\u2190(P\u00a8VEC)/VEC    \u235d for which BOOL fn P is true.\n     \u2207\n\n      \u2395NC'FILTER'\n4\n      \u2395NC\u2282'FILTER'\n4.1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#dop-name-class-42","title":"Dop (Name-Class 4.2)","text":"<p>Dops have name-class 4.2.</p> <pre><code>     pred\u2190{\u2395IO \u2395ML\u21901 3   \u235d Partitioned reduction.\n     \u2283\u237a\u237a/\u00a8(\u237a/\u2373\u2374\u237a)\u2282\u2375\n     }\n\n      2 3 3 2 +pred \u237310\n3 12 21 19\n\n      \u2395NC'pred'\n4\n      \u2395NC\u2282'pred'\n4.2\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#derived-operator-name-class-43","title":"Derived Operator (Name-Class 4.3)","text":"<p>Derived operators include:</p> <ul> <li>A name referring to a monadic operator.</li> <li>A dyadic operator curried with its right-operand. </li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#example","title":"Example:","text":"<pre><code>       each\u2190\u00a8\n       each\n\u00a8\n       \u2395NC \u2282'each'\n4.3 \n</code></pre> <pre><code>       inv\u2190\u2363\u00af1\n       inv\n\u2363 \u00af1\n       \u2395NC \u2282'inv'\n4.3\n       c2f\u2190(32\u2218+)\u2218(\u00d7\u22181.8) \u235d Centigrade to Fahrenheit\n       f2c 0 100\n32 212\n       f2c inv 32 212     \u235d Fahrenheit to Centigrade\n0 100\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#external-event-name-class-86","title":"External Event (Name-Class 8.6)","text":"<p>Events exposed by Dyalog APL GUI objects, COM and .NET objects have name-class <code>\u00af8.6</code>.</p> <pre><code>      f\u2190\u2395NEW'Form'('Caption' 'Dyalog GUI Form')\n      f.\u2395NC'Close' 'Configure' 'MouseDown'\n\u00af8.6 \u00af8.6 \u00af8.6\n\n      xl\u2190\u2395NEW'OLEClient'(\u2282'ClassName' 'Excel.Application')\n      xl.\u2395NL -8\n NewWorkbook  SheetActivate  SheetBeforeDoubleClick ...\n\n      xl.\u2395NC 'SheetActivate' 'SheetCalculate'\n\u00af8.6 \u00af8.6\n\n    \u2395USING\u2190'System.Windows.Forms,system.windows.forms.dll'\n    \u2395NC,\u2282'Form'\n9.6\n    Form.\u2395NL -8\n Activated  BackgroundImageChanged  BackColorChanged ...\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#namespace-name-class-91","title":"Namespace (Name-Class 9.1)","text":"<p>Plain namespaces created using <code>\u2395</code>NS, or fixed from a <code>:Namespace</code> script, have name-class 9.1.</p> <pre><code>      'MYSPACE' \u2395NS ''\n      \u2395NC'MYSPACE'\n9\n      \u2395NC\u2282'MYSPACE'\n9.1\n</code></pre> <p>Note however that a namespace created by cloning, where the right argument to <code>\u2395NS</code> is a <code>\u2395OR</code> of a namespace, retains the name-class of the original space.</p> <pre><code>      'CopyMYSPACE'\u2395NS \u2395OR 'MYSPACE'\n      'CopyF'\u2395NS \u2395OR 'F'\u2395WC'Form'\n\n      \u2395NC'MYSPACE' 'F'\n9.1 9.2\n      \u2395NC'CopyMYSPACE' 'CopyF'\n9.1 9.2\n</code></pre> <p>The Name-Class of .NET namespaces (visible through <code>\u2395USING</code>) is also 9.1</p> <pre><code>      \u2395USING\u2190''\n      \u2395NC 'System' 'System.IO'\n9.1 9.1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#instance-name-class-92","title":"Instance (Name-Class 9.2)","text":"<p>Instances of Classes created using <code>\u2395NEW</code>, and GUI objects created using <code>\u2395WC</code> all have name-class 9.2.</p> <pre><code>      MyInst\u2190\u2395NEW MyClass\n      \u2395NC'MyInst'\n9\n      \u2395NC\u2282'MyInst'\n9.2\n      UrInst\u2190\u2395NEW \u2395FIX ':Class'  ':EndClass'\n      \u2395NC 'MyInst' 'UrInst'\n9.2 9.2\n\n      'F'\u2395WC 'Form'\n      'F.B' \u2395WC 'Button'\n      \u2395NC 2 3\u2374'F  F.B'\n9 9\n      \u2395NC'F' 'F.B'\n9.2 9.2\n\n</code></pre> <pre><code>      F.\u2395NC'B'\n9\n      F.\u2395NC\u2282,'B'\n9.2\n</code></pre> <p>Instances of COM Objects whether created using <code>\u2395WC</code> or <code>\u2395NEW</code> also have name-class 9.2.</p> <pre><code>      xl\u2190\u2395NEW'OLEClient'(\u2282'ClassName' 'Excel.Application')\n      'XL'\u2395WC'OLEClient' 'Excel.Application'\n      \u2395NC'xl' 'XL'\n9.2 9.2\n</code></pre> <p>The same is true of Instances of .NET Classes (Types) whether created using <code>\u2395NEW</code> or <code>.New</code>.</p> <pre><code>      \u2395USING\u2190'System'\n      dt\u2190\u2395NEW DateTime (3\u2191\u2395TS)\n      DT\u2190DateTime.New 3\u2191\u2395TS\n      \u2395NC 'dt' 'DT'\n9.2 9.2\n</code></pre> <p>Note that if you remove the GUI component of a GUI object, using the Detach method, it reverts to a plain namespace.</p> <pre><code>      F.Detach\n      \u2395NC\u2282,'F'\n9.1\n</code></pre> <p>Correspondingly, if you attach a GUI component to a plain namespace using the monadic form of <code>\u2395WC</code>, it morphs into a GUI object</p> <pre><code>      F.\u2395WC 'PropertySheet'\n      \u2395NC\u2282,'F'\n9.2\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#class-name-class-94","title":"Class (Name-Class 9.4)","text":"<p>Classes created using the editor or <code>\u2395FIX</code> have name-class 9.4.</p> <pre><code>      )ED \u25cbMyClass\n\n:Class MyClass\n    \u2207 r\u2190NameClass x\n      :Access Public Shared\n      r\u2190\u2395NC x\n    \u2207\n:EndClass \u235d MyClass\n\n      \u2395NC 'MyClass'\n9\n      \u2395NC\u2282'MyClass'\n9.4\n\n</code></pre> <pre><code>      \u2395FIX ':Class UrClass'  ':EndClass'\n      \u2395NC 'MyClass' 'UrClass'\n9.4 9.4\n</code></pre> <p>Note that the name of the Class is visible to a Public Method in that Class, or an Instance of that Class.</p> <pre><code>      MyClass.NameClass'MyClass'\n9\n      MyClass.NameClass\u2282'MyClass'\n9.4\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#interface-name-class-95","title":"Interface (Name-Class 9.5)","text":"<p>Interfaces, defined by <code>:Interface ... :EndInterface</code> clauses, have name-class 9.5.</p> <pre><code>:Interface IGolfClub\n:Property Club\n    \u2207 r\u2190get\n    \u2207\n    \u2207 set\n    \u2207\n:EndProperty\n\n\u2207 Shank\u2190Swing Params\n\u2207\n\n:EndInterface \u235d IGolfClub\n\n      \u2395NC 'IGolfClub'\n9\n      \u2395NC \u2282'IGolfClub'\n9.5\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#external-class-name-class-96","title":"External Class (Name-Class 9.6)","text":"<p>External Classes (Types) exposed by .NET have name-class 9.6.</p> <pre><code>      \u2395USING\u2190'System' 'System.IO'\n\n      \u2395NC 'DateTime' 'File' 'DirectoryInfo'\n9.6 9.6 9.6\n</code></pre> <p>Note that referencing a .NET class (type) with <code>\u2395NC</code>, fixes the name of that class in the workspace and obviates the need for APL to repeat the task of searching for and loading the class when the name is next used.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nc/#external-interface-name-class-97","title":"External Interface (Name-Class 9.7)","text":"<p>External Interfaces exposed by .NET have name-class 9.7.</p> <pre><code>      \u2395USING\u2190'System.Web.UI,system.web.dll' \n\n      \u2395NC 'IPostBackDataHandler' 'IPostBackEventHandler' \n9.7 9.7\n</code></pre> <p>Note that referencing a .NET Interface with <code>\u2395NC</code>, fixes the name of that Interface in the workspace and obviates the need for APL to repeat the task of searching for and loading the Interface when the name is next used.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ncreate/","title":"Native File Create","text":"Native File Create {R}\u2190X \u2395NCREATE Y <p>This function creates a new file. Under Windows the file is opened with mode 66 (see Native File Tie on page 1). Under non-Windows operating systems the current umask will specify the file permissions. The name of the new file is specified by the left argument <code>X</code> which must be a simple character vector or scalar containing a valid pathname for the file.</p> <p><code>Y</code> is 0 or a negative integer value that specifies an (unused) tie number by which the file may subsequently be referred. If <code>Y</code> is 0, the system allocates the first (closest to zero) available tie number which is returned as the result.</p> <p>The shy result of <code>\u2395NCREATE</code> is the tie number of the new file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ncreate/#variant-options","title":"Variant Options","text":"<p><code>\u2395NCREATE</code> may be applied using the  Variant operator with the options Unique and IfExists. There is no primary option.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ncreate/#unique-option-boolean","title":"Unique Option (Boolean)","text":"0 the file named by <code>X</code> will be created <code>1</code> a uniquely named file will be created by extending the base name (see File Name Parts on page 1 ) with random characters. If a unique name cannot be created then an error will be signalled. The actual name of the file can be determined from <code>\u2395NNAMES</code> or <code>\u2395NINFO</code> ."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ncreate/#ifexists-option-character-vector","title":"IfExists Option (character vector)","text":"Error <code>\u2395NCREATE</code> will generate a <code>FILE NAME ERROR</code> if the file already exists <code>Replace</code> <code>\u2395NCREATE</code> will replace an existing file with an empty one of the same name."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ncreate/#examples","title":"Examples","text":"<pre><code>      \u22a2'myfile' \u2395NCREATE 0\n\u00af1\n      \u2395NUNTIE \u00af1\n      \u22a2'myfile' \u2395NCREATE 0\nFILE NAME ERROR: myfile: Unable to create file (\"The file exists.\")\n      \u22a2'myfile'\u2395NCREATE 0\n               \u2227\n</code></pre> <pre><code>\n      \u22a2'myfile' (\u2395NCREATE\u2360'IfExists' 'Replace') 0\n</code></pre> <pre><code>\u00af1    \u235d Note that it uses same tie number as before\n\n</code></pre> <pre><code>\n      \u22a2'myfile' (\u2395NCREATE\u2360('Unique' 1)) 0\n\u00af2\n      \u2395NNUMS,\u2395NNAMES\n\u00af1 myfile      \n\u00af2 myfile52c36z\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ncreate/#notes","title":"Notes:","text":"<ul> <li>Setting IfExists to <code>Replace</code> has no effect when Unique is 1, because the file cannot already exist.</li> <li>The IfExists option does not affect the operation of slippery ties.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ndelete/","title":"Native File Delete","text":"Native File Delete {R}\u2190{X}\u2395NDELETE Y <p>This function deletes files and directories.</p> <p><code>Y</code> is a character vector or scalar containing a single file or directory name, or a vector of character vectors containing zero or more file or directory names. Names must conform to the naming rules of the host Operating System.</p> <p>The optional left argument <code>X</code> is a numeric scalar; valid values are  shown in the following table. If omitted, its default value is 0.</p> <code>0</code> Each file or directory with the given name must exist. <code>1</code> If the file or directory with the given name does not exist then no action is taken. The result <code>R</code> may be used to determine whether the file or directory was deleted or not. <code>2</code> If a name identifies a non-empty directory it, and all its contents, are to be deleted. <code>3</code> Combination of 1 and 2. <p><code>R</code> is a numeric count of top-level entities deleted when processing the corresponding name in <code>Y</code>. If <code>Y</code> specifies a single name,  <code>R</code> is a scalar. If <code>Y</code> is a vector of character vectors   <code>R</code> is a vector  with the same length as <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ndelete/#variant-options","title":"Variant Options","text":"<p><code>\u2395NDELETE</code> may be applied using the  Variant operator with the Wildcard option.</p> <p>Note that when Wildcard is 1, element(s) of <code>R</code> can  be 0 or <code>&gt;1</code>. If Wildcard is 0, elements of <code>R</code> are always 1.</p> <p>If <code>Y</code> specifies the name of a  symbolic link, <code>\u2395NDELETE</code> deletes that symbolic link;   the target of the symbolic link is unaffected.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ndelete/#examples","title":"Examples","text":"<pre><code>\n      \u2395NEXISTS'/Users/Pete/Documents/temp/t1/t2'\n1\n      \u22a2\u2395NDELETE'/Users/Pete/Documents/temp/t1/t2'\n1\n      \u22a2\u2395NDELETE'/Users/Pete/Documents/temp/t1/t2'\nFILE NAME ERROR: Invalid file or directory name (\"The system cannot find the file specified.\")\n      \u22a2\u2395NDELETE'/Users/Pete/Documents/temp/t1/t2'\n     \u2227\n\n</code></pre> <pre><code>\n      \u22a21 \u2395NDELETE'/Users/Pete/Documents/temp/t1/t2'\n0\n      \u22a2\u2395NDELETE 'temp1' 'temp2'\n1 1\n      \u22a2\u2395MKDIR'temp1' 'temp2'\n1 1\n       \u22a2(\u2395NDELETE\u23601)'t*'\n2\n</code></pre> <pre><code>      \u22a2\u2395MKDIR'temp1'\n1\n      \u22a2'Hello World' \u2395NPUT 'temp1/hw.txt'\n13\n      \u22a2\u2395NDELETE 'temp1'\nFILE ACCESS ERROR: temp1: Unable to delete directory (\"The directory is not empty.\")\n      \u22a2\u2395NDELETE'temp1'\n       \u2227\n      \u22a22 \u2395NDELETE 'temp1'\n1\n\n</code></pre> <p>If the file is in use or the current user is not authorised to delete it, <code>\u2395NDELETE</code> will not succeed but will instead generate a <code>FILE ACCESS ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ndelete/#note","title":"Note","text":"<p>When multiple names are specified they are processed in the order given. If an error occurs at any point whilst deleting files or directories, processing will immediately stop and an error will be signalled. The operation is not atomic; the directory contents may be partially deleted before this happens. In the event of an error there will be no result and therefore no indication of how many files were deleted before the error occurred.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nerase/","title":"Native File Erase","text":"Native File Erase {R}\u2190X \u2395NERASE Y <p>This function erases (deletes) a tied native file.  <code>Y</code> is a negative integer tie number associated with a tied native file.  <code>X</code> is a simple character vector or scalar containing the name of the same file and must be identical to the name used when it was opened by <code>\u2395NCREATE</code> or <code>\u2395NTIE</code>.</p> <p>The shy result of <code>\u2395NERASE</code> is the tie number that the erased file had.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nerase/#example","title":"Example","text":"<pre><code>      file \u2395nerase file \u2395ntie 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/new/","title":"New Instance","text":"New Instance R\u2190\u2395NEW Y <p><code>\u2395NEW</code> creates a new instance of the Class, Dyalog GUI object, or .NET Type specified by <code>Y</code>.</p> <p><code>Y</code> must be a 1- or 2-item scalar or vector. The first item is a reference to a Class or to a .NET Type, or a character vector containing the name of a Dyalog GUI object.</p> <p>The second item, if specified, contains the argument to be supplied to the Class or Type Constructor or a list of property/value pairs for a Dyalog GUI object.</p> <p>The result <code>R</code> is a reference to a new instance of Class, Dyalog GUI object, or Type <code>Y</code>.</p> <p>For further information, see Interface Guide.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/new/#class-example","title":"Class Example","text":"<pre><code>:Class Animal\n    \u2207 Name nm\n      :Access Public\n      :Implements Constructor\n      \u2395DF nm\n    \u2207\n:EndClass \u235d Animal\n\n      Donkey\u2190\u2395NEW Animal 'Eeyore'\n      Donkey\nEeyore\n</code></pre> <p>If <code>\u2395NEW</code> is called with just a Class reference (i.e. without parameters for the Constructor), the default constructor will be called. A default constructor is defined by a niladic function with the :Implements Constructor attribute. For example, the Animal Class may be redefined as:</p> <pre><code>:Class Animal\n    \u2207 NoName\n      :Access Public\n      :Implements Constructor\n      \u2395DF 'Noname'\n    \u2207\n    \u2207 Name nm\n      :Access Public\n      :Implements Constructor\n      \u2395DF nm\n    \u2207\n:EndClass \u235d Animal\n\n      Horse\u2190\u2395NEW Animal\n      Horse\nNoname\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/new/#net-examples","title":".NET Examples","text":"<pre><code>      \u2395USING\u2190'System' 'System.Web.Mail,System.Web.dll'\n      dt\u2190\u2395NEW DateTime (2006 1 1)\n      msg\u2190\u2395NEW MailMessage\n      \u2395NC 'dt' 'msg' 'DateTime' 'MailMessage'\n9.2 9.2 9.6 9.6\n</code></pre> <p>Note that .NET Types are accessed as follows.</p> <p>If the name specified by the first item of <code>Y</code> would otherwise generate a <code>VALUE ERROR</code>, and <code>\u2395USING</code> has been set, APL attempts to load the Type specified by <code>Y</code> from the .NET assemblies (DLLs) specified in <code>\u2395USING</code>. If successful, the name specified by <code>Y</code> is entered into the SYMBOL TABLE with a name-class of <code>9.6</code>. Subsequent references to that symbol (in this case <code>DateTime</code>) are resolved directly and do not involve any assembly searching.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/new/#dyalog-gui-examples","title":"Dyalog GUI Examples","text":"<pre><code>      F\u2190\u2395NEW \u2282'Form'\n      F\n#.[Form]\n</code></pre> <p>To specify the initial values of any properties, <code>Y[2]</code> must be a vector (or scalar) of items each of which is of the form (PropertyName PropertyValue); the free-form syntax implemented by <code>\u2395WC</code> and <code>\u2395WS</code> is not allowed.</p> <pre><code>      \u2395NEW'Form'(\u2282'Caption' 'Hello')\n#.[Form]\n\n</code></pre> <pre><code>\n      F\u2190\u2395NEW'Form'(('Caption' 'Hello')('Posn' (10 10)))\n      F\n#.[Form]\n</code></pre> <p>Note that you may not create an instance of OCXClass using <code>\u2395NEW</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nexists/","title":"Native File Exists","text":"Native File Exists R\u2190\u2395NEXISTS Y <p>This function reports whether or not file and directories exist.</p> <p><code>Y</code> is a character vector or scalar containing a single file/directory name, or a vector of character vectors containing zero or more file/directory names.</p> <p>If <code>Y</code> specifies a single name, the result <code>R</code> is a scalar 1 if a file or directory exists or 0 if not. If <code>Y</code> is a vector of character vectors, <code>R</code> is a vector of 1s and 0s with the same length as <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nexists/#variant-options","title":"Variant Options","text":"<p><code>\u2395NEXISTS</code> may be applied using the  Variant operator with the Wildcard option.</p> <p>If the Wildcard option is 1, <code>R</code> indicates whether or not one or more matches to the corresponding pattern in <code>Y</code> exist.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nexists/#example","title":"Example","text":"<pre><code>\n      \u2395\u2190\u2395MKDIR'/Users/Pete/Documents/temp/t1/t2'\n1\n      \u2395NEXISTS'/Users/Pete/Documents/temp/t1/t2'\n1\n      \u2395NEXISTS'/Users/Pete/Documents/temp/t1/t2/pd'\n0\n\n      \u22a2\u2395MKDIR'temp1' 'temp2'\n1 1\n      \u2395NEXISTS 'temp1' 'temp2' 'temp3'\n1 1 0\n      (\u2395NEXISTS\u23601) 't*'\n1\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nexists/#note","title":"Note","text":"<p>If <code>Y</code> is a symbolic link, <code>\u2395NEXISTS</code> will return 1 whether or not the target of the symbolic link exists.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nget/","title":"Read Text File","text":"Read Text File R\u2190{X} \u2395NGET Y <p>This function reads the contents of the specified text file. See also Write Text File on page 1.</p> <p><code>Y</code> is either a character vector/scalar containing the name of the file to be read, or a 2-item vector whose first item is the file name and whose second is an integer scalar specifying <code>flags</code> for the operation.</p> <p>If <code>flags</code> is 0 (the default value if omitted) the content in the result <code>R</code> is a character vector. If <code>flags</code> is 1 the result is a nested array of character vectors corresponding to the lines in the file.</p> <p>The optional left-argument <code>X</code> is either</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nget/#-a-character-vector-that-specifies-the-file-encoding-as-shown-in-the-table-below","title":"- a character vector that specifies the file-encoding as shown in the table below.","text":"<p>File Encodings</p> Encoding Description <code>UTF-8</code> The data is encoded as UTF-8 format. <code>UTF-16LE</code> The data is encoded as UTF-16 little-endian format. <code>UTF-16BE</code> The data is encoded as UTF-16 big-endian format. <code>UTF-16</code> The data is encoded as UTF-16 with the endianness of the host system (currently BE on AIX platforms, LE on all others). <code>UTF-32LE</code> The data is encoded as UTF-32 little-endian format. <code>UTF-32BE</code> The data is encoded as UTF-32 big-endian format. <code>UTF-32</code> The data is encoded as UTF-32 with the endianness of the host system (currently BE on AIX platforms, LE on all others). <code>ASCII</code> The data is encoded as 7-bit ASCII format. <code>Windows-1252</code> The data is encoded as 8-bit Windows-1252 format. <code>ANSI</code> ANSI is a synonym of Windows-1252. <p>The above UTF formats may be qualified with -BOM or -NOBOM (e.g. UTF-8-BOM). See Write Text File on page 1.</p> <p>Whether or not <code>X</code> is specified, if the start of the file contains a recognised   Byte Order Mark (BOM), the file is decoded according to the BOM. Otherwise, if <code>X</code> is specified the file is decoded according to the value of <code>X</code>. Otherwise, the file is examined to try to decide its encoding and is decoded accordingly.</p> <p>The result <code>R</code> is a 3-element vector comprising <code>(content) (encoding) (newline)</code>  where:</p> <code>content</code> A simple character vector, or a vector of character vectors, according to the value of <code>flags</code> . <code>encoding</code> The encoding that was actually used to read the file. If this is a UTF format, it will always include the appropriate endianness (except for UTF-8 to which endianness doesn't apply) and a -BOM or -NOBOM suffix to indicate whether or not a BOM is actually present in the file. For example, UTF-16LE-BOM. If <code>X</code> specified a user-defined encoding as a 256-element numeric vector, <code>encoding</code> will be that same vector. <code>newline</code> Determined by the first occurrence in the file of one of the newline characters identified in the line separator table, or <code>\u236c</code> if no such line separator is found. <p>If <code>content</code> is simple then all its line separators (listed in the table below) are replaced by (normalised to) <code>\u2395UCS 10</code>, which in the Classic Edition must be in <code>\u2395AVU</code> (else <code>TRANSLATION ERROR</code>).</p> <p>If <code>content</code> is nested, it is formed by splitting the contents of the file on the occurrence of any of the line separators  shown in the table below. These line separators are  removed.</p> <p>The 3rd element of the result <code>newline</code> is a numeric vector from the Value column of the table below corresponding to the first occurrence of any of the newline characters in the file. If none of these characters are present, the value is <code>\u236c</code>.</p> <p>Line separators:</p> Value Code Description newline characters 13 <code>CR</code> Carriage Return (U+000D) 10 <code>LF</code> Line Feed (U+000A) 13 10 <code>CRLF</code> Carriage Return followed by Line Feed 133 <code>NEL</code> New Line (U+0085) other line separator characters 11 <code>VT</code> Vertical Tab (U+000B) 12 <code>FF</code> Form Feed (U+000C) 8232 <code>LS</code> Line Separator (U+2028) 8233 <code>PS</code> Paragraph Separator (U+2029)"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ninfo/","title":"Native File Information","text":"Native File Information R\u2190{X}\u2395NINFO Y <p>This function returns information about one or more files or directories. <code>Y</code> may  be:</p> <ul> <li>a numeric scalar containing the tie number of a native file</li> <li>a character vector or scalar containing a file or directory name that conforms to the naming rules of the host Operating System.</li> <li>a vector of character vectors and/or tie numbers</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ninfo/#variant-options","title":"Variant Options","text":"<p><code>\u2395NINFO</code> may be applied using the  Variant operator with the options  Wildcard (the Principal option), Recurse and Follow.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ninfo/#recurse-option","title":"Recurse Option","text":"0 the name(s) in <code>Y</code> are searched for only in the corresponding specified directory. <code>1</code> the name(s) in <code>Y</code> are searched for in the corresponding specified directory as well as all sub-directories. If Wildcard is also 1, the wild card search is performed recursively. <code>1 n</code> the name(s) in <code>Y</code> are searched for in the corresponding specified directory as well as its sub-directories to the n th -level sub-directory. If n is 0, no sub-directories are searched. If n is <code>\u00af1</code> all sub-directories are searched. <code>2 (n)</code> same as 1 but if any unreadable directories are encountered they are skipped (whereas if Recurse is <code>1 (n)</code> , <code>\u2395NINFO</code> stops and generates an error)."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ninfo/#follow-option-boolean","title":"Follow Option (Boolean)","text":"<code>0</code> the properties reported are those of the symbolic link itself 1 the properties reported for a symbolic link are those of the target of the symbolic link <p>The optional left argument <code>X</code> is a simple numeric array containing values shown in the following table.</p> <code>X</code> Property Default <code>0</code> Name of the file or directory, as a character vector. If <code>Y</code> is a tie number then this is the name which the file was tied. `` <code>1</code> Type, as a numeric scalar: 0=Not known 1=Directory 2=Regular file 3=Character device 4=Symbolic link (only when Follow is 0) 5=Block device 6=FIFO (not Windows) 7=Socket (not Windows) <code>0</code> <code>2</code> Size in bytes, as a numeric scalar <code>0</code> <code>3</code> Last modification time, as a timestamp in <code>\u2395TS</code> format <code>7\u23740</code> <code>4</code> Owner user id, as a character vector \u2013 on Windows a SID, on other platforms a numeric userid converted to character format <code>''</code> <code>5</code> Owner name, as a character vector <code>''</code> <code>6</code> Whether the file or directory is hidden (1) or not (0), as a numeric scalar. On Windows, file properties include a \"hidden\" attribute; on non-Windows platforms a file or directory is implicitly considered to be hidden if its name begins with a \".\" <code>\u00af1</code> <code>7</code> Target of symbolic link (when Type is 4) <code>''</code> <code>8</code> Current position in the file. Always 0 if <code>Y</code> is a file name. <code>0</code> <code>9</code> Last access time  in <code>\u2395TS</code> format, when available <code>7\u23740</code> <code>10</code> Creation time if available, otherwise the time of the last file status change in <code>\u2395TS</code> format <code>7\u23740</code> <code>11</code> Whether the file or directory can (1) or cannot (0) be read ( <code>\u00af1</code> if unknown) <code>\u00af1</code> <code>12</code> Whether the file or directory can (1) or cannot (0) be written  ( <code>\u00af1</code> if unknown or for a directory under Windows) <code>\u00af1</code> <code>13</code> Last modification time, as a UTC  Dyalog Date  Number. <code>0</code> <code>14</code> Last access time  as a UTC Dyalog Date  Number, when available. <code>0</code> <code>15</code> Creation time if available, otherwise the time of the last file status change  as a UTC Dyalog Date  Number. <code>0</code> <p>Note that the current file position identifies where <code>\u2395NREAD</code> will next read from or <code>\u2395NAPPEND</code> will next write to and is only pertinent when the corresponding value in <code>Y</code> is a tie number rather than a name. It will be reported as 0 for named files.</p> <p>Each value in <code>X</code> identifies a property of the file(s) or directory(ies) identified by <code>Y</code> whose value is to be returned in the result <code>R</code>. If omitted, the default value of <code>X</code> is 0. Values in <code>X</code> may be specified in any order and duplicates are allowed. A value in <code>X</code> which is not defined in the table above will not generate an error but results in a <code>\u236c</code> (Zilde) in the corresponding element of <code>R</code>.</p> <p><code>R</code> is the same shape as <code>X</code> and each element contains value(s) determined by the property specified in the corresponding element in <code>X</code>. The depth of <code>R</code> depends upon whether or not the Wildcard option is enabled. If, for any reason, the function is unable to obtain a property value, (for example, if the file is in use exclusively by another process) the default value shown in the last column is returned instead.</p> <p>If the Wildcard option is not enabled (the default) then <code>Y</code> specifies exactly one file or directory and must exist.  In this case each element in <code>R</code> is a single property value for that file. If the name in <code>Y</code> does not exist, the function signals an error. On non-Windows platforms \"\" and \"?\" are treated as normal characters. On Windows an error will be signalled since neither \"\" nor \"?\" are valid characters for file or directory names.</p> <p>If the Wildcard option is enabled,  zero or more files and/or directories may match the  pattern in <code>Y</code>. In this case each element in <code>R</code> is a vector of property values for each of the files. Note that  no error will be signalled if no files match the pattern.</p> <p>When using the Wildcard option, matching of names is done case insensitively on Windows and macOS, and case sensitively on other platforms. The names '.' and '..' are excluded from any matches. The order in which the names match is not defined.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ninfo/#note","title":"Note","text":""},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ninfo/#examples","title":"Examples","text":"<pre><code>\n      (0 1 2) \u2395NINFO 'c:/Users/Pete/Documents'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n\u2502 \u2502c:/Users/Pete/Documents\u2502 1 163840 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u22831\u2395NPARTS '' \u235d current working directory\nc:/Users/Pete/\n      (\u2395NINFO\u23601)'D*'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502Desktop\u2502Documents\u2502Downloads\u2502Dropbox\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      (\u2395NINFO\u23601)'Documents/*.zip'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502Documents/dyalog.zip\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u236a (0,\u23736) \u2395NINFO 'Documents/dyalog.zip'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Documents/dyalog.zip                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25022                                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25023429284                                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25022016 1 22 16 43 58 0                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502S-1-5-21-2756282986-1198856910-2233986399-1001\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502HP/Pete                                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25020                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u22831\u2395NPARTS '' \u235d current working directory\nC:/Users/Pete/Documents/Dyalog APL-64 16.0 Unicode Files/\n      (\u2395NINFO\u23601)'*.*'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502default.dlf\u2502def_uk.dse\u2502jsonx.dws\u2502UserCommand20.cache\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u22a2 \u2395MKDIR 'd1' 'd2'\n1 1\n      'a'\u2218\u2395NPUT\u00a8'find' 'd1/find' 'd1/nofind' 'd2/find'\n      (\u2395ninfo\u2360'Recurse' 1)'find'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502d1/find\u2502d2/find\u2502find\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The next set of examples, illustrate the use of the Recurse variant option to limit the sub-directory depth.</p> <pre><code>      Y\u2190'd:\\bouzouki\\*.*'\n      \u2374\u22830(\u2395NINFO\u2360('Wildcard' 1)('Recurse' 0))Y\n355\n      \u2374\u22830(\u2395NINFO\u2360('Wildcard' 1)('Recurse' (1 0)))Y\n355\n      \u2374\u22830(\u2395NINFO\u2360('Wildcard' 1)('Recurse' (1 1)))Y\n1333\n      \u2374\u22830(\u2395NINFO\u2360('Wildcard' 1)('Recurse' (1 3)))Y\n4223\n</code></pre> <p>The following expression will return all Word document (<code>.docx</code> and .doc) in the current directory, searching recursively through any sub-directories:</p> <pre><code>     (\u2395NINFO\u2360('Recurse' 1)('Wildcard' 1))'*.docx' '*.doc'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ninfo/#note_1","title":"Note","text":"<p>Of the file timestamps which are reported by the operating system, only the last modification time should be considered reliable and portable. Neither the access time or creation time are well supported across all platforms. Furthermore, they may not accurately reflect the actual time that the operation occurred.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nl/","title":"Name List","text":"Name List R\u2190{X}\u2395NL Y <p><code>Y</code> must be a simple numeric scalar or vector containing one or more of the values for name-class.  See also \"Name Classification: \" on page 1.</p> <p><code>X</code> is optional. If present, it must be a simple character scalar or vector. <code>R</code> is a list of the names of active objects whose name-class is included in <code>Y</code> in standard sorted order.</p> <p>If any element of <code>Y</code> is negative, positive values in <code>Y</code> are treated as if they were negative, and R is a vector of character vectors. Otherwise, <code>R</code> is simple character matrix.</p> <p>Furthermore, if <code>\u2395NL</code> is being evaluated inside the namespace associated with a Class or an Instance of a Class, and any element of <code>Y</code> is negative, <code>R</code> includes the Public names exposed by the Base Class (if any) and all other Classes in the Class hierarchy.</p> <p>If <code>X</code> is supplied, <code>R</code> contains only those names which begin with any character of <code>X</code>. Standard sorted order is in Unicode point order for Unicode editions, and in the collation order of <code>\u2395AV</code> for Classic editions.</p> <p>If an element of <code>Y</code> is an integer, the names of all of the corresponding sub-name-classes are included in <code>R</code>. For example, if <code>Y</code> contains the value 2, the names of all variables (name-class 2.1), fields (2.2), properties (2.3) and external or shared variables (2.6) are obtained. Otherwise, only the names of members of the corresponding sub-name-class are obtained.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nl/#examples","title":"Examples:","text":"<pre><code>\n      \u2395NL 2 3\nA\nFAST\nFIND\nFOO\nV\n\n      'AV' \u2395NL 2 3\nA\nV\n\n      \u2395NL \u00af9\n Animal  Bird  BirdBehaviour  Coin  Cylinder  DomesticParrot  Eeyore  FishBehaviour  Nickel  Parrot  Penguin  Polly  Robin \n      \u2395NL \u00af9.3 \u235d Instances\n Eeyore  Nickel  Polly  Robin \n      \u2395NL \u00af9.4 \u235d Classes\n Animal  Bird  Coin  Cylinder  DomesticParrot  Parrot  Penguin\n      \u2395NL \u00af9.5 \u235d Interfaces\n BirdBehaviour  FishBehaviour\n</code></pre> <p><code>\u2395NL</code> can also be used to explore Dyalog GUI Objects, .NET types and COM objects.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nl/#dyalog-gui-objects","title":"Dyalog GUI Objects","text":"<p><code>\u2395NL</code> may be used to obtain lists of the Methods, Properties and Events provided by Dyalog APL GUI Objects.</p> <pre><code>\n      'F' \u2395WC 'Form'\n      F.\u2395NL -2 \u235d Properties\n Accelerator AcceptFiles  Active  AlphaBlend  AutoConf  Border  BCol  Caption ...\n\n      F.\u2395NL -3 \u235d Methods\n Animate  ChooseFont  Detach  GetFocus  GetTextSize  ShowSIP  Wait\n\n      F.\u2395NL -8 \u235d Events\nClose  Create  DragDrop  Configure  ContextMenu  DropFiles  DropObjects  Expose  Help ...\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nl/#net-classes-types","title":".NET Classes (Types)","text":"<p><code>\u2395NL</code> can be used to explore .NET types.</p> <p>When a reference is made to an undefined name, and <code>\u2395USING</code> is set, APL attempts to load the Type from the appropriate .NET Assemblies. If successful, the name is entered into the symbol table with name-class 9.6.</p> <pre><code>\n      \u2395USING\u2190'System'\n      DateTime\n(System.DateTime)\n      \u2395NL -9\n DateTime\n      \u2395NC,\u2282'DateTime'\n9.6\n</code></pre> <p>The names of the Properties and Methods of a .NET Type may then be obtained using <code>\u2395NL</code>.</p> <pre><code>\n      DateTime.\u2395NL -2 \u235d Properties\n MaxValue  MinValue  Now  Today  UtcNow \n\n      DateTime.\u2395NL -3 \u235d Methods\n get_Now  get_Today  get_UtcNow  op_Addition  op_Equality  ...\n</code></pre> <p>In fact it is not necessary to make a separate reference first, because the expression <code>Type.\u2395NL</code> (where <code>Type</code> is a .NET Type) is itself a reference to Type. So, (with <code>\u2395USING</code> still set to <code>'System'</code>):</p> <pre><code>\n      Array.\u2395NL -3\n BinarySearch  Clear  Copy  CreateInstance  IndexOf  LastIndexOf  Reverse  Sort\n\n      \u2395NL -9\n Array  DateTime\n</code></pre> <p>Another use for <code>\u2395NL</code> is to examine .NET enumerations. For example:</p> <pre><code>\n      \u2395USING\u2190'System.Windows.Forms,system.windows.forms.dll'\n\n      FormBorderStyle.\u2395NL -2\nFixed3D  FixedDialog  FixedSingle  FixedToolWindow  None  Sizable  SizableToolWindow \n\n      FormBorderStyle.FixedDialog.value__\n3\n\n      FormBorderStyle.({\u2375,[1.5]\u234e\u00a8\u2375,\u00a8\u2282'.value__'}\u2395NL -2)\n Fixed3D            2\n FixedDialog        3\n FixedSingle        1\n FixedToolWindow    5\n None               0\n Sizable            4\n SizableToolWindow  6\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nl/#com-objects","title":"COM Objects","text":"<p>Once a reference to a COM object has been obtained, <code>\u2395NL</code> may be used to obtain lists of its Methods, Properties and Events.</p> <pre><code>\n      xl\u2190\u2395NEW'OLEClient'(\u2282'ClassName' 'Excel.Application')\n\n      xl.\u2395NL -2 \u235d Properties\n _Default  ActiveCell  ActiveChart  ActiveDialog  ActiveMenuBar  ActivePrinter  ActiveSheet  ActiveWindow ...\n\n      xl.\u2395NL -3 \u235d Methods\n _Evaluate  _FindFile  _Run2  _Wait  _WSFunction  ActivateMicrosoftApp  AddChartAutoFormat  AddCustomList  Browse  Calculate ...\n\n      \u2395NL -9\n xl\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nlock/","title":"Native File Lock","text":"Native File Lock {R}\u2190X \u2395NLOCK Y <p>This function assists the controlled update of shared native files by locking a range of bytes.</p> <p>Locking enables controlled update of native files by co-operating users. A process requesting a lock on a region of a file will be blocked until that region becomes available. A write-lock is exclusive, whereas a read-lock is shared. In other words, any byte in a file may be in one of only three states:</p> <ul> <li>Unlocked</li> <li>Write-locked by exactly one process.</li> <li>Read-locked by any number of processes.</li> </ul> <p><code>Y</code> must be a simple integer scalar or vector containing 1, 2 or 3 items namely:</p> <ol> <li>Tie number</li> <li>Offset (from 0) of first byte of region. Defaults to 0</li> <li>Number of bytes to lock. Defaults to maximum possible file size</li> </ol> <p><code>X</code> must be a simple integer scalar or vector containing 1 or 2 items, namely:</p> <ol> <li>Type: 0: Unlock, 1:Read lock, 2:Write lock.</li> <li>Timeout: Number of seconds to wait for lock before generating a <code>TIMEOUT</code> error. Defaults to indefinite wait.</li> </ol> <p>The shy result <code>R</code> is <code>Y</code>. To unlock the file, this value should subsequently be supplied in the right argument to <code>0 \u2395NLOCK</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nlock/#examples","title":"Examples:","text":"<pre><code>    2 \u2395NLOCK \u00af1        \u235d write-lock whole file\n    0 \u2395NLOCK \u00af1        \u235d unlock whole file.\n    1 \u2395NLOCK \u00af1        \u235d read (share) lock whole file.\n    2 \u2395NLOCK\u00a8\u2395NNUMS    \u235d write-lock all files.\n    0 \u2395NLOCK\u00a8\u2395NNUMS    \u235d unlock all files.\n\n    1 \u2395NLOCK \u00af1 12 1   \u235d read-lock byte 12.\n    1 \u2395NLOCK \u00af1 0 10   \u235d read-lock first 10 bytes.\n    2 \u2395NLOCK \u00af1 20     \u235d write-lock from byte 20 onwards.\n    2 \u2395NLOCK \u00af1 10 2   \u235d write-lock 2 bytes from byte 10\n    0 \u2395NLOCK \u00af1 12 1   \u235d remove lock from byte 12.\n</code></pre> <p>To lock the region immediately beyond the end of the file prior extending it:</p> <pre><code>   \u2395\u2190region\u21902 \u2395NLOCK \u00af1, \u2395NSIZE \u00af1 \u235d write-lock from EOF.\n\u00af1 1000   \n   ... \u2395NAPPEND \u00af1                 \u235d append bytes to file\n   ... \u2395NAPPEND \u00af1                 \u235d append bytes to file\n\n   0 \u2395NLOCK region                 \u235d release lock.\n</code></pre> <p>The left argument may have a second optional item that specifies a timeout value. If a lock has not been acquired within this number of seconds, the acquisition is abandoned and a <code>TIMEOUT</code> error reported.</p> <pre><code>    2 10 \u2395nlock \u00af1      \u235d wait up to 10 seconds for lock.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nlock/#notes","title":"Notes:","text":"<ul> <li>There is no per-byte cost associated with region locking. It takes the same time to lock/unlock a region, irrespective of that region's size.</li> <li>Different file servers implement locks in slightly different ways. For example on some systems, locks are advisory. This means that a write lock on a region precludes other locks intersecting that region, but doesn't stop reads or writes across the region. On the other hand, mandatory locks block both other locks and read/write operations. <code>\u2395NLOCK</code> will just pass the server's functionality along to the APL programmer without trying to standardise it across different systems.</li> <li>All locks on a file will be removed by <code>\u2395NUNTIE</code>.</li> <li>Blocked locking requests can be freed by a strong interrupt. Under Windows, this operation is performed from the Dyalog APL pop-up menu in the system tray.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nlock/#errors","title":"Errors","text":"<ul> <li>In this release, an attempt to unlock a region that contains bytes that have not been locked results in a <code>DOMAIN ERROR</code>.</li> <li>A <code>LIMIT ERROR</code> results if the operating system lock daemon has insufficient resources to honour the locking request.</li> <li>Some systems support only write locks. In this case an attempt to set a read lock will generate a <code>DOMAIN ERROR</code>, and it may be appropriate for the APL programmer to trap the error and apply a write lock.</li> <li>No attempt will be made to detect deadlock. Some servers do this and if such a condition is detected, a <code>DEADLOCK</code> error (1008) will be reported.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nnames/","title":"Native File Names","text":"Native File Names R\u2190\u2395NNAMES <p>This niladic function reports the names of all currently open native files.  <code>R</code> is a character matrix.  Each row contains the name of a tied native file padded if necessary with blanks.  The names are identical to those that were given when opening the files with <code>\u2395NCREATE</code> or <code>\u2395NTIE</code>. The rows of the result are in the order in which the files were tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nnums/","title":"Native File Numbers","text":"Native File Numbers R\u2190\u2395NNUMS <p>This niladic function reports the tie numbers associated with all currently open native files.  <code>R</code> is an integer vector of negative tie numbers. The elements of the result are in the order in which the files were tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nparts/","title":"File Name Parts","text":"File Name Parts R\u2190{X} \u2395NPARTS Y <p>Splits a file or directory name into its constituent parts.</p> <p><code>Y</code> is a character vector or scalar containing a single name, or a vector of character vectors containing zero or more names. Names must conform to the file-naming rules of the host Operating System.</p> <p>The file(s) need not exist; indeed this system function makes no attempt to identify or locate it/them.</p> <p>The optional left-argument <code>X</code> specifies whether or not the name or names specified by <code>Y</code> are normalised before being processed. The default value 0 means no normalisation; 1 means normalise as follows:</p> <ul> <li>Pathnames are made absolute.</li> <li>On Windows, all \"\\\" directory separators are changed to \"/\".</li> <li>The resultant name is simplified by removing extraneous directory separators etc. On Windows, this includes resolving occurrences of \".\" and \"..\"  within the name. On non-Windows platforms single \".\" are removed. Note that \"..\" and symbolic links interact differently on Windows to other platforms; on other platforms they cannot be removed without reference to the file system itself and are left in place. </li> </ul> <p>If <code>Y</code> is a scalar or vector, the result <code>R</code> is a 3-element vector of character vectors as follows:</p> <code>[1]</code> path <code>[2]</code> base name <code>[3]</code> extension <p>The path identifies the directory in which the file exists.</p> <p>The base name is the name of the file stripped of its path and extension, if any.</p> <p>The extension is the file extension including the leading \".\".</p> <p>If <code>Y</code> is a vector of character vectors, <code>R</code> is a vector of 3-element character vectors and is the same length as <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nparts/#examples","title":"Examples","text":"<pre><code>  \u2395CMD 'CD'\u235d Current working directory\n</code></pre> <p>c:\\Users\\Pete</p> <pre><code>  1 \u2395NPARTS '\u03b1'\n</code></pre> <p>\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2510 \u250c\u2296\u2510 \u2502 \u2502 \u2502c:/Users/Pete/\u2502 \u2502\u03b1\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       1 \u2395NPARTS '\\Users\\Pete\\Documents\\dyalog.zip' \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502C:/Users/Pete/Documents/\u2502 \u2502dyalog\u2502 \u2502.zip\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <pre><code>  \u2283'.'\u2395wg'APLVersion'\n</code></pre> <p>AIX-64       1 \u2395nparts'/home/andys/./..' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2510 \u2502/home/andys/\u2502..\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2518</p> <pre><code>  1 \u2395NPARTS '.' '..'\n</code></pre> <p>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u252c\u2510\u2502 \u2502\u2502i:/\u2502Documents\u2502\u2502\u2502\u2502i:/\u2502\u2502\u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2534\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      </p> <p>Note that <code>\u22831 \u2395NPARTS ''</code> returns the current working directory.</p> <pre><code>      \u22831 \u2395NPARTS ''\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502c:/Users/Pete/\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nput/","title":"Write Text File","text":"Write Text File {R}\u2190X \u2395NPUT Y <p>This function writes character data to a text file. See also Read Text File on page 1.</p> <p><code>Y</code> is either a simple character vector or scalar containing the name of the file to be written, or a 2-item vector whose first item is the file name and whose second is an integer scalar specifying <code>flags</code> for the operation.</p> <p>If <code>flags</code> is 0 (the default value if omitted) the file will not be overwritten if it already exists and <code>\u2395NPUT</code> will signal an error. If <code>flags</code> is 1 the file will be overwritten. If flags is 2 the file will be appended to; i.e.</p> flags file does not exist file exists <code>0</code> data is written to new file error signalled, file is unchanged <code>1</code> data is written to new file file is overwritten <code>2</code> data is written to new file data is appended to file <p>The left-argument <code>X</code> is comprised of 1, 2 or 3 items which identify <code>(content) (encoding) (newline)</code> respectively.</p> <p><code>content</code> is either a vector of character vectors, each of which represents a line in the file to be written, or a simple character vector.</p> <p>If specified, <code>encoding</code> is either:</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nput/#-a-character-vector-from-the-first-column-in-the-table-file-encodings-on-page-1-if-encoding-specifies-a-utf-format-it-may-be-qualified-with-bom-eg-utf-8-bom-which-causes-a-byte-order-mark-bom-to-be-written-at-the-beginning-of-the-file-or-nobom-which-does-not-if-the-bom-or-nobom-suffix-is-omitted-utf-8-defaults-to-utf-8-nobom-while-the-other-utf-formats-default-to-bom","title":"- a character vector from the first column in the table File Encodings on page 1.  If <code>encoding</code> specifies a UTF format, it may be qualified with -BOM  (e.g. UTF-8-BOM), which causes a Byte Order Mark (BOM) to be written at the beginning of the file or -NOBOM which does not. If the -BOM or -NOBOM suffix is omitted, UTF-8 defaults to UTF-8-NOBOM, while the other UTF formats default to -BOM.","text":"<p>If  omitted, <code>encoding</code> defaults to UTF-8-NOBOM.</p> <p>Note: If a non-empty file is appended to:</p> <ul> <li>No BOM will be written, even if encoding specifies it.</li> <li>No check is made that the existing file content is text in the same encoding format.</li> </ul> <p>If specified, <code>newline</code> is numeric and is either  <code>\u236c</code> or a scalar or vector  from the  column labelled Value in the newline characters section of the table Line separators: on page 1. Any other value causes <code>DOMAIN ERROR</code>. If <code>newline</code> is omitted it defaults to <code>(13 10)</code> on Windows and <code>10</code> on other platforms.</p> <p>In all cases, <code>newline</code> is appended if required to a simple vector or to each vector in a vector of vectors.</p> <p>If content contains anything other than a character vector or scalar (or these, nested) then a <code>DOMAIN ERROR</code> is signalled.</p> <p>If both <code>encoding</code> and <code>newline</code> are omitted <code>X</code> specifies only <code>content</code> and may be a simple character vector or a vector of character vectors.</p> <p>The shy result <code>R</code> is the number of bytes written to the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nput/#examples","title":"Examples:","text":"<pre><code>      txt\u2190'mene' 'mene' 'tekel' 'upharsin'\n\n      \u2395\u2190(\u2282txt) \u2395NPUT 'writing.txt'\n25\n      \u22a2(\u2282'adding' '3' 'lines')\u2395NPUT'writing.txt' 2\n18\n</code></pre> <pre><code>      LF\u2190\u2395UCS 10\n</code></pre> <pre><code>\n      t\u2190'adding',LF,'3',LF,'lines',LF\n      \u22a2t \u2395NPUT'writing.txt' 2\n18                                         \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nput/#neol-option","title":"NEOL Option","text":"<p>The NEOL variant option specifies how embedded line separators are treated.</p> <code>0</code> embedded line separator characters are preserved as is,and a <code>newline</code> is added to the last line if required. 1 every embedded LF is replaced by <code>newline</code> <code>2</code> every embedded line separator character is replaced by <code>newline</code> <code>\u00af1</code> same as 0 except that a <code>newline</code> is not added to the last line"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nput/#embedded-line-separator-examples","title":"Embedded line-separator examples","text":"<pre><code>      LF CR\u2190\u2395UCS 10 13\n      t\u2190'adding',LF,'3',CR,'lines',CR,LF\n\n      \u22a2t \u2395NPUT'writing.txt' 2                             \n17\n      \u22a2t(\u2395NPUT\u2360'NEOL' 0)'writing.txt' 2                   \n16\n      \u22a2t(\u2395NPUT\u2360'NEOL' 2)'writing.txt' 2                   \n18\n</code></pre> <p><code>t</code> contains three lines each with different line endings: LF, CR and CRLF.</p> <p>In the first example (NEOL is by default 1), only the LF is normalised so the written file contains lines ending with CRLF, CR and CRLF.</p> <p>In the second example, none of the line endings are normalised so the written file contains lines ending with LF, CR and CRLF.</p> <p>In the third example, all of the line endings are normalised so the written file contains lines ending with CRLF, CRLF and CRLF.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nput/#note","title":"Note:","text":"<p>If two or more APL processes separately write to a file using <code>\u2395NPUT</code> the behaviour is undefined. In particular, if multiple APLs use<code>\u2395NPUT</code> with flags set to 2 (append), it is not guaranteed that each  <code>\u2395NPUT</code> operation will be atomic and all the text written to the file will be complete and/or contiguous.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nq/","title":"Enqueue Event","text":"Enqueue Event {R}\u2190{X}\u2395NQ Y <p>This system function generates an event or invokes a method.</p> <p>While APL is executing, events occur \"naturally\" as a result of user action or of communication with other applications.  These events are added to the event queue as and when they occur, and are subsequently removed and processed one by one by <code>\u2395DQ</code>.  <code>\u2395NQ</code> provides an \"artificial\" means to generate an event and is analogous to <code>\u2395SIGNAL</code>.</p> <p>If the left argument <code>X</code> is omitted or is 0, <code>\u2395NQ</code> adds the event specified by <code>Y</code> to the bottom of the event queue. The event will subsequently be processed by <code>\u2395DQ</code> when it reaches the top of the queue.</p> <p>If <code>X</code> is 1, the event is actioned immediately by <code>\u2395NQ</code> itself and is processed in exactly the same way as it would be processed by <code>\u2395DQ</code>.  For example, if the event has a callback function attached, <code>\u2395NQ</code> will invoke it directly. See \"Dequeue Events: \" on page 1 for further details. If the event generates any subsidiary events (for example, a KeyPress might generate a GotFocus), the subsidiary events are added to the event queue rather than being executed immediately.</p> <p>Note that it is not possible for one thread to use <code>1 \u2395NQ</code> to send an event to another thread.</p> <p>If <code>X</code> is 2 and the name supplied is the name of an event, <code>\u2395NQ</code> performs the default processing for the event immediately, but does not invoke a callback function if there is one attached.</p> <p>If <code>X</code> is 2 and the name supplied is the name of a (Dyalog APL) method, <code>\u2395NQ</code> invokes the method.  Its (shy) result is the result produced by the method.</p> <p>If <code>X</code> is 3, <code>\u2395NQ</code> invokes a method in an OLE Control.  The (shy) result of <code>\u2395NQ</code> is the result produced by the method.</p> <p>If <code>X</code> is 4, <code>\u2395NQ</code> signals an event from an ActiveXControl object to its host application.  The (shy) result of <code>\u2395NQ</code> is the result returned by the host application and depends upon the syntax of the event. This case is only applicable to ActiveXControl objects.</p> <p><code>Y</code> is a nested vector containing an event message.  The first two elements of <code>Y</code>are:</p> <code>[1]</code> Object ref or character vector <code>[2]</code> Event numeric scalar or character vector which specifies an event or method <p><code>Y[1]</code> must specify an existing object.  If not, <code>\u2395NQ</code> terminates with a <code>VALUE ERROR</code>.</p> <p>If <code>Y[2]</code> specifies a standard event type, subsequent elements must conform to the structure defined for that event type.  If not, <code>\u2395NQ</code> terminates with a <code>SYNTAX ERROR</code>. If additional elements (beyond those defined for the event type) are supplied this will not cause an error, but is not recommended because Dyalog may extend the event message in the future.</p> <p>If <code>Y[2]</code> specifies a non-standard event type, <code>Y[3]</code> onwards (if present) may contain arbitrary information.  Although any event type not listed herein may be used, numbers in the range 0-1000 are reserved for future extensions.</p> <p>If <code>\u2395NQ</code> is used monadically, or with a left argument of 0, its (shy) result is always an empty character vector.  If a left argument of 1 is specified, <code>\u2395NQ</code> returns <code>Y</code> unchanged or a modified <code>Y</code> if the callback function returns its modified argument as a result.</p> <p>If the left argument is 2, <code>\u2395NQ</code> returns either the value 1 or a value that is appropriate.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nq/#examples","title":"Examples","text":"<pre><code>      \u235d Send a keystroke (\"A\") to an Edit Field\n      \u2395NQ TEST.ED 'KeyPress' 'A'\n\n      \u235d Iconify all top-level Forms\n      {\u2395NQ \u2375 'StateChange' 1}\u00a8'Form'\u2395WN'.'\n\n      \u235d Set the focus to a particular field\n      \u2395NQ TEST.ED3 40\n\n      \u235d Throw a new page on a printer\n      1 \u2395NQ PR1 'NewPage'\n\n      \u235d Terminate \u2395DQ under program control\n\n      'TEST'\u2395WC 'Form' ... ('Event' 1001 1)\n      ...\n      \u2395DQ 'TEST'\n      ...\n      \u2395NQ TEST 1001  \u235d From a callback\n\n      \u235d Call GetItemState method for a TreeView F.TV\n      +2 \u2395NQ F.TV 'GetItemState' 6\n96\n\n      \u235d Report where APL is installed\n      +2 \u2395NQ'.' 'GetEnvironment' 'DYALOG'\nC:\\Program Files\\Dyalog\\Dyalog APL-64 15.0 Unicode\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nr/","title":"Nested Representation","text":"Nested Representation R\u2190\u2395NR Y <p><code>Y</code> must be a simple character scalar or vector which represents the name of a function or a defined operator.</p> <p>If <code>Y</code> is a name of a defined function or defined operator, <code>R</code> is a vector of text vectors.  The first element of <code>R</code> contains the text of the function or operator header.  Subsequent elements contain lines of the function or operator.  Elements of <code>R</code> contain no unnecessary blanks, except for leading indentation of control structures and the blanks which precede comments.</p> <p>If <code>Y</code> is the name of a variable, a locked function or operator, an external function or a namespace, or is undefined, <code>R</code> is an empty vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nr/#example","title":"Example","text":"<pre><code>      \u2207R\u2190MEAN X    \u235d Average\n[1]   R\u2190(+/X)\u00f7\u2374X\n      \u2207\n\n      +F\u2190\u2395NR'MEAN'\n  R\u2190MEAN X    \u235dAverage   R\u2190(+/X)\u00f7\u2374X\n\n      \u2374F\n2\n      ]display F\n.\u2192----------------------------------------.\n| .\u2192---------------------.  .\u2192----------. |\n| | R\u2190MEAN X    \u235d Average|  | R\u2190(+/X)\u00f7\u2374X| |\n| '----------------------'  '-----------' |\n'\u220a----------------------------------------'\n</code></pre> <p>The definition of <code>\u2395NR</code> has been extended to names assigned to functions by specification (<code>\u2190</code>), and to local names of functions used as operands to defined operators.  In these cases, the result of <code>\u2395NR</code> is identical to that of <code>\u2395CR</code> except that the representation of defined functions and operators is as described above.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nr/#example_1","title":"Example","text":"<pre><code>      AVG\u2190MEAN\u2218,\n\n      +F\u2190\u2395NR'AVG'\n   R\u2190MEAN X    \u235d Average   R\u2190(+/X)\u00f7\u2374X  \u2218,\n\n      \u2374F\n3\n      ]display F\n.\u2192------------------------------------------------.\n| .\u2192----------------------------------------.     |\n| | .\u2192---------------------.  .\u2192----------. | \u2218 , |\n| | | R\u2190MEAN X    \u235d Average|  | R\u2190(+/X)\u00f7\u2374X| | - - |\n| | '----------------------'  '-----------' |     |\n| '\u220a----------------------------------------'     |\n'\u220a------------------------------------------------'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nread/","title":"Native File Read","text":"Native File Read R\u2190\u2395NREAD Y <p>This monadic function reads data from a native file. <code>Y</code> is a 3- or 4-element integer vector whose elements are as follows:</p> <code>[1]</code> negative tie number, <code>[2]</code> conversion code (see below), <code>[3]</code> count. If this value is <code>\u00af1</code> , all of the elements defined by <code>Y[2]</code> are read from the position specified by <code>Y[4]</code> to the end of the file. This may result in the last few bytes in the file being ignored if they do not form a complete element. <code>[4]</code> start byte, counting from 0. If this value omitted or is <code>\u00af1</code> , data is read starting from the current position in the file (initially <code>0</code> )."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nread/#notes","title":"Notes:","text":"<p><code>8 \u2395NINFO \u2283Y</code> can be used to report the current position of the file pointer.</p> <p><code>Y[2]</code> specifies conversion to an APL internal form as follows. Note that the internal formats for character arrays differ between the Unicode and Classic Editions.</p> <p>If both <code>Y[3]</code> and <code>Y[4]</code> have the value <code>\u00af1</code>, then <code>\u2395NREAD</code> reads data from the current position in the file to the end of the file.</p> <p><code>\u2395NREAD</code> can be used with any file. However, calling <code>\u2395NREAD</code> with at least one of <code>Y[3 4]</code> set to <code>\u00af1</code> is intended for regular files only; using on pipes, FIFOs or other special types of file is not recommended.</p> <p>Unicode Edition: Conversion Codes</p> Value Number of bytes read Result Type Result shape 11 count 1 bit Boolean 8 <code>\u00d7</code> count 80 count 8 bits character count 82 Conversion code 82 is permitted in the Unicode Edition for compatibility and causes 1-byte data on file to be translated (according to <code>\u2395NXLATE</code>) from <code>\u2395AV</code> indices into normal (Unicode) characters of type 80, 160 or 320. count 8 bits character count 83 count 8 bits integer count 160 2 <code>\u00d7</code> count 16-bits character count 163 2 <code>\u00d7</code> count 16 bits integer count 320 4 <code>\u00d7</code> count 32-bits character count 323 4 <code>\u00d7</code> count 32 bits integer count 645 8 <code>\u00d7</code> count 64 bits floating count <p>Classic Edition: Conversion Codes</p> Value Number of bytes read Result Type Result shape 11 count 1 bit Boolean 8 <code>\u00d7</code> count 82 count 8 bits character count 83 count 8 bits integer count 163 2 <code>\u00d7</code> count 16 bits integer count 323 4 <code>\u00d7</code> count 32 bits integer count 645 8 <code>\u00d7</code> count 64 bits floating count <p>Note that types 80, 160 and 320 and 83 and 163 are exclusive to Dyalog APL.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nread/#example","title":"Example","text":"<pre><code>\n      DATA\u2190\u2395NREAD \u00af1 160 (0.5\u00d7\u2395NSIZE \u00af1) 0 \u235d Unicode\n      DATA\u2190\u2395NREAD \u00af1 82 (\u2395NSIZE \u00af1) 0      \u235d Classic\n      DATA\u2190\u2395NREAD \u00af1 82 \u00af1 0       \u235d Shorter version\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nrename/","title":"Native File Rename","text":"Native File Rename {R}\u2190X \u2395NRENAME Y <p><code>\u2395NRENAME</code> is used to rename a native file.</p> <p><code>Y</code> is a negative integer tie number associated with a tied native file.  <code>X</code> is a simple character vector or scalar containing a valid (and unused) file name.</p> <p>The shy result of <code>\u2395NRENAME</code> is the tie number of the renamed file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nreplace/","title":"Native File Replace","text":"Native File Replace {R}\u2190X \u2395NREPLACE Y <p><code>\u2395NREPLACE</code> is used to write data to a native file, replacing data which is already there.</p> <p><code>X</code> must be a simple homogeneous APL array containing the data to be written.</p> <p><code>Y</code> is a 2- or 3-element integer vector whose elements are as follows:</p> <code>[1]</code> negative tie number, <code>[2]</code> start byte, counting from 0, at which the data is to be written; the value <code>\u00af1</code> causes the data to be written from the current position in the file (initially, 0). <code>[3]</code> conversion code (optional). <p>See \"Native File Read: \" on page 1 for a list of valid conversion codes.</p> <p>The shy result is the location of the internal file pointer which will be pointing to the end of the newly written data. Used, for example, in:</p> <pre><code>\n      \u235d Replace sequentially from indx.\n      {\u237a \u2395NREPLACE tie \u2375}/vec,indx \n</code></pre> <p>Note that <code>8 \u2395NINFO \u2283Y</code>  can be used to report the current position of the file pointer.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nreplace/#unicode-edition","title":"Unicode Edition","text":"<p>Unless you specify the data type in <code>Y[3]</code>, a character array will by default be written using type 80.</p> <p>If the data will not fit into the specified character width (bytes) <code>\u2395NREPLACE</code> will fail with a <code>DOMAIN ERROR</code>.</p> <p>As a consequence of these two rules, you must specify the data type (either 160 or 320) in order to write Unicode characters whose code-point is in the range 256-65535 and &gt;65535 respectively.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nreplace/#example","title":"Example","text":"<pre><code>\n      n\u2190'test'\u2395NTIE 0 \u235d See [\"Example\" on page 1](/nappend.md#Example)\n\n      \u2395NREAD n 80 3 0\nabc\n      \u2395NREAD n 160 7\n\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1\n\n      \u2395\u2190'\u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03cc\u03c1\u03b9\u03bf'\u2395NREPLACE n 3\nDOMAIN ERROR\n      \u2395\u2190'\u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03cc\u03c1\u03b9\u03bf'\u2395NREPLACE n 3\n     \u2227\n\n      \u2395\u2190'\u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03cc\u03c1\u03b9\u03bf'\u2395NREPLACE n 3 160\n23\n      \u2395NREAD n 80 3 0\nabc\n      \u2395NREAD n 160 10\n\u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03cc\u03c1\u03b9\u03bf\n</code></pre> <p>For compatibility with old files, you may specify that the data be converted to type 82 on output. The conversion (to <code>\u2395AV</code> indices) will be determined by the local value of <code>\u2395AVU</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nresize/","title":"Native File Resize","text":"Native File Resize {R}\u2190X \u2395NRESIZE Y <p>This function changes the size of a native file.</p> <p><code>Y</code> is a negative integer tie number associated with a tied native file.</p> <p><code>X</code> is a single integer value that specifies the new size of the file in bytes.  If <code>X</code> is smaller than the current file size, the file is truncated.  If <code>X</code> is larger than the current file size, the file is extended and the value of additional bytes is undefined.</p> <p>The shy result of <code>\u2395NRESIZE</code> is the tie number of the resized file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ns/","title":"Namespace","text":"Namespace {R}\u2190{X}\u2395NS Y <p>If specified, <code>X</code> must be a simple character scalar or vector identifying the name of a namespace.</p> <p><code>Y</code> is either a character array which represents a list of names of objects to be copied into the namespace, or a ref to a namespace, or  an array produced by the <code>\u2395OR</code> of a namespace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ns/#case-1","title":"Case 1","text":"<p>In the first case, <code>Y</code> must be a simple character scalar, vector, matrix or a nested vector of character vectors identifying zero or more workspace objects to be copied into the namespace <code>X</code>.  The identifiers in <code>X</code> and <code>Y</code> may be simple names or compound names separated by <code>'.'</code> and including the names of the special namespaces <code>'#'</code>, <code>'##'</code> and <code>'\u2395SE'</code>.</p> <p>The namespace <code>X</code> is created if it doesn't already exist.  If the name is already in use for an object other than a namespace, APL issues a <code>DOMAIN ERROR</code>.</p> <p>If <code>X</code> is omitted, an unnamed namespace is created.</p> <p>The objects identified in the list <code>Y</code> are copied into the namespace <code>X</code>.</p> <p>If <code>X</code> is specified, the result <code>R</code> is the full name (starting with <code>#.</code> or <code>\u2395SE.</code>) of the namespace <code>X</code>. If <code>X</code> is omitted, the result <code>R</code> is a namespace reference, or ref, to an unnamed namespace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ns/#examples","title":"Examples","text":"<pre><code>      +'X'\u2395NS''               \u235d Create namespace X.\n#.X\n      \u22a2'X'\u2395NS'VEC' 'UTIL.DISP'\u235d Copy VEC and DISP to X.\n#.X\n      )CS X                   \u235d Change to namespace X.\n#.X\n      \u22a2'Y'\u2395NS'#.MAT' '##.VEC' \u235d Create #.X.Y &amp;copy in\n#.X.Y\n      \u22a2'#.UTIL'\u2395NS'Y.MAT'     \u235d Copy MAT from Y to UTIL #.UTIL.\n#.UTIL\n      \u22a2'#'\u2395NS'Y'              \u235d Copy namespace Y to root.\n#\n\n</code></pre> <pre><code>      \u22a2''\u2395NS'#.MAT'           \u235d Copy MAT to current space.\n#.X\n      \u22a2''\u2395NS''                \u235d Display current space.\n#.X\n      \u22a2'Z'\u2395NS \u2395OR'Y'          \u235d Create nspace from \u2395OR.\n#.X.Z\n</code></pre> <pre><code>      NONAME\u2190\u2395NS ''           \u235d Create unnamed nspace\n      NONAME\n#.[Namespace]\n</code></pre> <pre><code>      DATA\u2190\u2395NS\u00a83\u2374\u2282''         \u235d Create 3-element vector of\n                             \u235d distinct unnamed nspaces\n      DATA\n #.[Namespace]  #.[Namespace]  #.[Namespace]\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ns/#case-2","title":"Case 2","text":"<p>The second case is where <code>Y</code> is a ref to a namespace or the <code>\u2395OR</code> of a namespace.</p> <p>If <code>Y</code> is a ref to or a <code>\u2395OR</code> of a GUIobject, <code>X</code> must be a valid parent for the GUI object represented by <code>Y</code>, or the operation will fail with a <code>DOMAIN ERROR</code>.</p> <p>Otherwise, the result of the operation depends upon the existence of <code>X</code>.</p> <ul> <li>If <code>X</code> does not currently exist (name class is 0), <code>X</code> is created as a complete copy (clone) of the original namespace represented by <code>Y</code>. If <code>Y</code> is a ref to or the <code>\u2395OR</code> of a GUI object or of a namespace containing GUI objects, the corresponding GUI components of <code>Y</code> will be instantiated in <code>X</code>.</li> <li>If <code>X</code> is the name of an existing namespace (name class 9), the contents of <code>Y</code>, including any GUI components, are merged into <code>X</code>. Any items in <code>X</code> with corresponding names in <code>Y</code> (names with the same path in both <code>Y</code> and <code>X</code>) will be replaced by the names in <code>Y</code>, unless they have a conflicting name class in which case the existing items in <code>X</code> will remain unchanged. However, all GUI spaces in <code>X</code> will be stripped of their GUI components prior to the merge operation.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nsi/","title":"Namespace Indicator","text":"Namespace Indicator R\u2190\u2395NSI <p><code>R</code> is a nested vector of character vectors containing the names of the spaces from which functions in the state indicator were called (<code>\u2374\u2395NSI``\u2190\u2192\u2374 \u2395RSI``\u2190\u2192\u2374\u2395SI</code>).</p> <p><code>\u2395RSI</code> and <code>\u2395NSI</code> are identical except that <code>\u2395RSI</code> returns refs to the spaces whereas <code>\u2395NSI</code> returns their names. Put another way:  <code>\u2395NSI\u2190\u2192\u2355\u00a8 \u2395RSI``.</code></p> <p>Note that<code>\u2395NSI</code> contains the names of spaces from which functions were called not those in which they are currently running.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nsi/#example","title":"Example","text":"<pre><code>      )OBJECTS\nxx      yy\n\n      \u2395VR 'yy.foo'\n     \u2207 r\u2190foo\n[1]    r\u2190\u2395SE.goo\n     \u2207                          \n      \u2395VR'\u2395SE.goo'\n     \u2207 r\u2190goo\n[1]    r\u2190\u2395SI,[1.5]\u2395NSI\n     \u2207\n\n      )CS xx\n#.xx\n      calling\u2190#.yy.foo\n      ]display calling\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502goo\u2502 \u2502#.yy\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502foo\u2502 \u2502#.xx\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nsize/","title":"Native File Size","text":"Native File Size R\u2190\u2395NSIZE Y <p>This reports the size of a native file.</p> <p><code>Y</code> is a negative integer tie number associated with a tied native file.  The result <code>R</code> is the size of the file in bytes.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ntie/","title":"Native File Tie","text":"Native File Tie {R}\u2190X \u2395NTIE Y <p><code>\u2395NTIE</code> opens a native file.</p> <p><code>X</code> is a simple character vector or scalar containing a valid pathname for an existing native file.</p> <p><code>Y</code> is a 1- or 2-element vector.</p> <p><code>Y[1]</code> is a negative integer value that specifies an (unused) tie number by which the file may subsequently be referred.</p> <p><code>Y[2]</code> is optional and specifies the mode in which the file is to be opened.  This is an integer value calculated as the sum of 2 codes.  The first code refers to the type of access needed from users who have already tied the native file.  The second code refers to the type of access you wish to grant to users who subsequently try to open the file while you have it open.</p> <p>If <code>Y[2]</code> is omitted, the system tries to open the file with the default value of 66 (read and write access for this process and for any subsequent processes that attempt to access the file). If this fails, the system attempts to open the file with the value 64 (read access for this process, read and write for subsequent processes).</p> Needed from existing users Granted to subsequent users 0 read access 1 write access 2 read and write access <p>On UNIX systems, the second column has no meaning and only the first code (<code>16|mode</code>) is passed to the open(2) call as the access parameter. See include file fcntl.h for details. See also Native File Lock on page 1 which is not platform dependent.</p> <p><code>R</code> is the tie number by which the file may subsequently be referred. If <code>Y[1]</code> is a negative integer, then <code>R</code> is a shy result; if <code>Y[1]</code> is 0, <code>R</code> is an explicit result.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ntie/#automatic-tie-number-allocation","title":"Automatic Tie Number Allocation","text":"<p>A tie number of 0 as argument to a create or tie operation, allocates, and returns as an explicit result, the first (closest to zero) available tie number. This allows you to simplify code. For example:</p> <p>from:</p> <pre><code>      tie\u2190\u00af1+\u230a/0,\u2395NNUMS    \u235d With next available number,\n      file \u2395NTIE tie       \u235d ... tie file.\n</code></pre> <p>to:</p> <pre><code>      tie\u2190file \u2395NTIE 0     \u235d Tie with first available no.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ntie/#example","title":"Example","text":"<pre><code>ntie\u2190{                  \u235d tie file and return tie no.\n    \u237a\u21902+64              \u235d default all access.\n    \u2375 \u2395ntie 0 \u237a         \u235d return new tie no.\n}\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ntie/#note","title":"Note:","text":"<p>If the native file is already tied, executing <code>\u2395NTIE</code> with the same or a different tie number simply re-ties it with the same or the new tie number. Re-tying a file with a tie number of 0, re-ties it with the same tie number. This feature may be used to re--tie the file using a different mode.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/null/","title":"Null Item","text":"Null Item R\u2190\u2395NULL <p>This is a reference to a null item, such as may be returned across the COM interface to represent a null value. A null might be returned as the result of a .NET method or as the value of an empty cell in a spreadsheet</p> <p><code>\u2395NULL</code> may be used in any context that accepts a namespace reference, in particular:</p> <ul> <li>As the argument to a defined function</li> <li>As an item of an array.</li> <li>As the argument to those primitive functions that take character data arguments, for example: <code>=, \u2260, \u2261, \u2262, ,, \u2374, \u2283, \u2282</code></li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/null/#example","title":"Example","text":"<pre><code>      'EX'\u2395WC'OLEClient' 'Excel.Application'\n      WB\u2190EX.Workbooks.Open 'simple.xls'\n\n      (WB.Sheets.Item 1).UsedRange.Value2\n [Null]  [Null]  [Null]  [Null]  [Null] \n [Null]    Year  [Null]  [Null]  [Null] \n [Null]    1999    2000    2001    2002 \n [Null]  [Null]  [Null]  [Null]  [Null] \n Sales      100      76     120     150 \n [Null]  [Null]  [Null]  [Null]  [Null] \n Costs       80      60     100     110 \n [Null]  [Null]  [Null]  [Null]  [Null] \n Margin      20      16      20      40 \n</code></pre> <p>To determine which of the cells are filled, you can compare the array with <code>\u2395NULL</code>.</p> <pre><code>      \u2395NULL\u2262\u00a8(WB.Sheets.Item 1).UsedRange.Value2\n0 0 0 0 0\n0 1 0 0 0\n0 1 1 1 1\n0 0 0 0 0\n1 1 1 1 1\n0 0 0 0 0\n1 1 1 1 1\n0 0 0 0 0\n1 1 1 1 1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nuntie/","title":"Native File Untie","text":"Native File Untie {R}\u2190\u2395NUNTIE Y <p>This closes one or more native files.  <code>Y</code> is a scalar or vector of negative integer tie numbers.  The files associated with elements of <code>Y</code> are closed.  Native file untie with a zero length argument (<code>\u2395NUNTIE \u236c</code>) flushes all file buffers to disk - see \"File Untie: \" on page 1 for more explanation.</p> <p>The shy result of <code>\u2395NUNTIE</code> is a vector of tie numbers of the files actually untied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nxlate/","title":"Native File Translate","text":"Native File Translate {R}\u2190{X}\u2395NXLATE Y <p>This associates a character translation vector with a native file or, if <code>Y</code> is 0, with the use by <code>\u2395DR</code>.</p> <p>A translate vector is a 256-element vector of integers from 0-255. Each element maps the corresponding <code>\u2395AV</code> position onto an ANSI character code.</p> <p>For example, to map <code>\u2395AV[17+\u2395IO]</code> onto ANSI 'a' (code 97), element 17 of the translate vector is set to 97.</p> <p><code>\u2395NXLATE</code> is a non-Unicode (Classic Edition) feature and is retained in the Unicode Edition only for compatibility.</p> <p><code>Y</code> is either a negative integer tie number associated with a tied native file or 0.  If <code>Y</code> is negative, monadic <code>\u2395NXLATE</code> returns the current translation vector associated with the corresponding native file. If specified, the left argument <code>X</code> is a 256-element vector of integers that specifies a new translate vector.  In this case, the old translate vector is returned as a shy result.  If <code>Y</code> is 0, it refers to the translate vector used by <code>\u2395DR</code> to convert to and from character data.</p> <p>The system treats a translate vector with value <code>(\u2373256)-\u2395IO</code> as meaning no translation and thus provides raw input/output bypassing the whole translation process.</p> <p>The default translation vector established at <code>\u2395NTIE</code> or <code>\u2395NCREATE</code> time  is derived from the mapping defined in the current output translation table (normally WIN.DOT) and maps alphabetic, numeric and most other characters in <code>\u2395AV</code>  to their corresponding ANSI positions. However, some characters are not resolved  by this process and it is recommended that users define translate vectors to cover all cases.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/nxlate/#unicode-edition","title":"Unicode Edition","text":"<p><code>\u2395NXLATE</code> is relevant in the Unicode Edition only to process Native Files that contain characters expressed as indices into <code>\u2395AV</code>, such as files written by the Classic Edition.</p> <p>In the Unicode Edition, when reading data from a Native File using conversion code 82, incoming bytes are translated first to <code>\u2395AV</code> indices using the translation table specified by <code>\u2395NXLATE</code>, and then to type 80, 160 or 320 using <code>\u2395AVU</code>. When writing data to a Native File using conversion code 82, characters are converted using these two translation tables in reverse.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/off/","title":"Sign Off APL","text":"Sign Off APL \u2395OFF <p>This niladic system function terminates the APL session, returning to the shell command level.  The active workspace does not replace the last continuation workspace.</p> <p>Although <code>\u2395OFF</code> is niladic, you may specify an optional integer <code>I</code> to the right of the system function which will be reported to the Operating System as the exit code. If <code>I</code> is an expression generating an integer, you should put the expression in parentheses. <code>I</code> must be in the range 0..255, but note that on UNIX processes use values greater than 127 to indicate the signal number which was used to terminate a process, and that currently APL itself generates values 0..8; this list may be extended in future. This list is documented in the Dyalog for Microsoft Windows Installation and Configuration Guide: APL Exit Codes.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/opt/","title":"Variant","text":"Variant {R}\u2190{X}(f \u2395OPT B)Y <p><code>\u2395OPT</code> is synonymous with the Variant Operator <code>\u2360</code> and can be used in both Classic and Unicode Editions - unlike <code>\u2360</code> which is valid in Unicode Editions only, and <code>\u2395U2360</code> which is valid in Classic Editions only.</p> <p>See \"Variant\" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/or/","title":"Object Representation","text":"Object Representation R\u2190\u2395OR Y <p><code>\u2395OR</code> converts a defined function, defined operator or namespace to a special form, described as its object representation, that may be assigned to a variable and/or stored on a component file<code>\u2395OR</code> and GUI objects stored in workspaces or in component files are not portable between 32-bit and 64-bit versions of Dyalog nor between different implementations (platforms) and are not backwards compatible. Classes and Instances are however outside the domain of <code>\u2395OR</code>.</p> <p>Taking the <code>\u2395OR</code> of a defined function or operator is an extremely fast operation as it simply changes the type information in the object's header, leaving its internal structure unaltered.  Converting the object representation back to an executable function or operator using <code>\u2395FX</code> is also very fast.</p> <p>However, the saved results of <code>\u2395OR</code> which were produced on a different hardware platform or using an older version of Dyalog APL may require a significant amount of processing when re-constituted using <code>\u2395FX</code>.  For optimum performance, it is strongly recommended that you save <code>\u2395OR</code>s using the same version of Dyalog APL and on the same hardware platform that you will use to <code>\u2395FX</code> them.</p> <p><code>\u2395OR</code> may also be used to convert a namespace (either a plain namespace or a named GUI object created by <code>\u2395WC</code>) into a form that can be stored in a variable or on a component file.  The namespace may be reconstructed using <code>\u2395NS</code> or <code>\u2395WC</code> with its original name or with a new one.  <code>\u2395OR</code> may therefore be used to clone a namespace or GUI object.</p> <p><code>Y</code> must be a simple character scalar or vector which contains the name of an APL object.</p> <p>If <code>Y</code> is the name of a variable, the result <code>R</code> is its value.  In this case, <code>R\u2190\u2395OR Y</code> is identical to <code>R\u2190\u234eY</code>.</p> <p>Otherwise, <code>R</code> is a special form of the name <code>Y</code>, re-classified as a variable. The rank of <code>R</code> is 0 (<code>R</code> is scalar), and the depth of <code>R</code> is 1.  These unique characteristics distinguish the result of <code>\u2395OR</code> from any other object.  The Type of <code>R</code> (<code>\u220aR</code>) is itself.  Note that although <code>R</code> is scalar, it may not be index assigned to an element of an array unless it is enclosed.</p> <p>If <code>Y</code> is the name of a function or operator, <code>R</code> is in the domain of the monadic functions Same (<code>\u22a3</code> and <code>\u22a2</code>), Depth (<code>\u2261</code>), Disclose (<code>\u2283</code>), Enclose (<code>\u2282</code>), Rotate (<code>\u233d</code>), Transpose (<code>\u2349</code>), Index (<code>\u2337</code>), Indexing (<code>[]</code>), Format (<code>\u2355</code>), Identity (<code>+</code>), Shape (<code>\u2374</code>), Type (<code>\u220a</code>) and Unique (<code>\u222a</code>), of the dyadic functions Left (<code>\u22a3</code>), Right (<code>\u22a2</code>), Without (<code>~</code>), Index Of (<code>\u2373</code>), Intersection (<code>\u2229</code>), Match (<code>\u2261</code>), Membership (<code>\u220a</code>), Not Match (<code>\u2260</code>) and Union (<code>\u222a</code>), and of the monadic system functions Canonical Representation (<code>\u2395CR</code>), Cross-Reference (<code>\u2395REFS</code>), Fix (<code>\u2395FX</code>), Format (<code>\u2395FMT</code>), Nested Representation (<code>\u2395NR</code>) and Vector Representation (<code>\u2395VR</code>).</p> <p>Note that a <code>\u2395OR</code> object can be transmitted through an 'APL-style' TCP socket. This technique may be used to transfer objects including namespaces between APL sessions.</p> <p>The object representation forms of namespaces produced by <code>\u2395OR</code> may not be used as arguments to any primitive functions.  The only operations permitted for such objects (or arrays containing such objects) are <code>\u2395EX</code>, <code>\u2395FAPPEND</code>, <code>\u2395FREPLACE</code>, <code>\u2395NS</code>, and <code>\u2395WC</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/or/#example","title":"Example","text":"<pre><code>      F\u2190\u2395OR \u2395FX'R\u2190FOO' 'R\u219010'\n\n      \u2374F\n\n      \u2374\u2374F\n0\n      \u2261F\n1\n      F\u2261\u220aF\n1\n</code></pre> <p>The display of the <code>\u2395OR</code> form of a function or operator is a listing of the function or operator.  If the <code>\u2395OR</code> form of a function or operator has been enclosed, then the result will display as the  name preceded by the symbol <code>\u2207</code>.  It is permitted to apply <code>\u2395OR</code> to a locked function or operator.  In this instance the result will display as for the enclosed form.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/or/#examples","title":"Examples","text":"<pre><code>       F\n      \u2207 R\u2190FOO\n[1]     R\u219010\n      \u2207\n\n      \u2282F\n \u2207FOO\n\n      \u2395LOCK'FOO'\n\n      \u2395OR'FOO'\n\u2207FOO\n</code></pre> <pre><code>      A\u2190\u23735\n\n      A[3]\u2190\u2282F\n\n      A\n1 2  \u2207FOO  4 5\n</code></pre> <p>For the <code>\u2395OR</code> forms of two functions or operators to be considered identical, their unlocked display forms must be the same, they must either both be locked or unlocked, and any monitors, trace and stop vectors must be the same.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/or/#example_1","title":"Example","text":"<pre><code>      F\u2190\u2395OR \u2395FX 'R\u2190A PLUS B' 'R\u2190A+B'\n\n      F\u2261\u2395OR 'PLUS'\n1\n\n      1 \u2395STOP 'PLUS'\n\n      F\u2261\u2395OR 'PLUS'\n0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/or/#namespace-examples","title":"Namespace Examples","text":"<p>The following example sets up a namespace called <code>UTILS</code>, copies into it the contents of the <code>UTIL</code> workspace, then writes it to a component file:</p> <pre><code>      )CLEAR\nclear ws\n      )NS UTILS\n#.UTILS\n      )CS UTILS\n#.UTILS\n      )COPY UTIL\nC:\\WDYALOG\\WS\\UTIL saved Fri Mar 17 12:48:06 1995\n      )CS\n#\n      'ORTEST' \u2395FCREATE 1\n      (\u2395OR'UTILS')\u2395FAPPEND 1\n</code></pre> <p>The namespace can be restored with <code>\u2395NS</code>, using either the original name or a new one:</p> <pre><code>      )CLEAR\nclear ws\n      'UTILS' \u2395NS \u2395FREAD 1 1\n#.UTILS\n      )CLEAR\nclear ws\n      'NEWUTILS' \u2395NS \u2395FREAD 1 1\n#.NEWUTILS\n</code></pre> <p>This example illustrates how <code>\u2395OR</code> can be used to clone a GUI object; in this case a Group containing some Button objects.  Note that <code>\u2395WC</code> will accept only a <code>\u2395OR</code> object as its argument (or preceded by the \"Type\" keyword).  You may not specify any other properties in the same <code>\u2395WC</code> statement, but you must instead use <code>\u2395WS</code> to reset them afterwards.     'F'\u2395WC'Form'     'F.G1' \u2395WC 'Group' '&amp;One' (10 10)(80 30)     'F.G1.B2'\u2395WC'Button' '&amp;Blue' (40 10)('Style' 'Radio')     'F.G1.B3'\u2395WC'Button' '&amp;Green' (60 10)('Style' 'Radio')     'F.G1.B1'\u2395WC'Button' '&amp;Red' (20 10)('Style' 'Radio')     'F.G2' \u2395WC \u2395OR 'F.G1'     'F.G2' \u2395WS ('Caption' 'Two')('Posn' 10 60)</p> <p>Note too that <code>\u2395WC</code> and <code>\u2395NS</code> may be used interchangeably to rebuild pure namespaces or GUI namespaces from a <code>\u2395OR</code> object.  You may therefore use <code>\u2395NS</code> to rebuild a Form or use <code>\u2395WC</code> to rebuild a pure namespace that has no GUI components.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/path/","title":"Search Path","text":"Search Path \u2395PATH <p><code>\u2395PATH</code> is a simple character vector representing a blank-separated list of namespaces.  It is approximately analogous to the PATH variable in Windows or UNIX.</p> <p>The <code>\u2395PATH</code> variable can be used to identify a namespace in which commonly used utility functions reside.  Functions or operators (NOT variables) which are copied into this namespace and exported (see \"Export Object\" on page 1) can then be used directly from anywhere in the workspace without giving their full path names. <code>\u2395PATH</code> has Session scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/path/#example","title":"Example","text":"<p>To make the <code>DISPLAY</code> function available directly from within any namespace.</p> <pre><code>      \u235d Create and reference utility namespace.\n      \u2395PATH\u2190'\u2395se.util'\u2395ns''\n      \u235d Copy DISPLAY function from UTIL into it.\n      'DISPLAY'\u2395se.util.\u2395cy'UTIL'\n      \u235d (Remember to save the session to file).  \n</code></pre> <p>In detail, <code>\u2395PATH</code> works as follows:</p> <p>When a reference to a name cannot be found in the current namespace, the system searches for it from left to right in the list of namespaces indicated by <code>\u2395PATH</code>.  In each namespace, if the name references a defined function (or operator) and the export type of that function is non-zero (see \"Export Object:\" on page 1 ), then it is used to satisfy the reference.  If the search exhausts all the namespaces in <code>\u2395PATH</code> without finding a qualifying reference, the system issues a <code>VALUE ERROR</code> in the normal manner.</p> <p>The special character <code>\u2191</code> stands for the list of namespace ancestors:</p> <pre><code>       ## ##.## ##.##.## ...\n</code></pre> <p>In other words, the search is conducted upwards through enclosing namespaces, emulating the static scope rule inherent in modern block-structured languages.</p> <p>Note that the <code>\u2395PATH</code> mechanism is used ONLY if the function reference cannot be satisfied in the current namespace.  This is analogous to the case when the Windows or UNIX PATH variable begins with a <code>'.'</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/path/#examples","title":"Examples","text":"<pre><code>   \u2395PATH               Search in ...\n\n</code></pre> <pre><code>1. '\u2395se.util'          Current space,   then\n                       \u2395se.util,        then\n                       VALUE ERROR\n\n2. '\u2191'                 Current space\n                       Parent space: ##\n                       Parent's parent space:  ##.##\n                       ...\n                       Root: # (or \u2395se if current space\n                                was inside \u2395se)\n                       VALUE ERROR\n\n3. 'util \u2191 \u2395se.util'   Current space\n                       util (relative to current space)\n                       Parent space: ##\n                       ...\n                       Root: # or \u2395se\n                       \u2395se.util\n                       VALUE ERROR\n</code></pre> <p>Note that <code>\u2395PATH</code> is a session variable.  This means that it is workspace-wide and survives <code>)LOAD</code> and <code>)CLEAR</code>. It can of course, be localised by a defined function or operator.</p> <p><code>\u2395PATH</code> does not support derived functions and will not be extended to support them; nor will it be extended to support other types of functions that may be developed in the future. <code>\u2395PATH</code> may therefore be considered an archaic feature.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/pfkey/","title":"Program Function Key","text":"Program Function Key R\u2190{X}\u2395PFKEY Y <p><code>\u2395PFKEY</code> is a system function that sets or queries the programmable function keys.  <code>\u2395PFKEY</code> associates a sequence of keystrokes with a function key.  When the user subsequently presses the key, it is as if he had typed the associated keystrokes one by one.</p> <p>Note that RIDE does not currently support the use of <code>\u2395PFKEY</code>; it is possible however to associate simple strings to function keys - see the RIDE User Guide for more information.</p> <p><code>Y</code> is an integer scalar in the range 0-255 specifying a programmable function key.  If <code>X</code> is omitted the result <code>R</code> is the current setting of the key.  If the key has not been defined previously, the result is an empty character vector.</p> <p>If <code>X</code> is specified it is a simple or nested character vector defining the new setting of the key.  The value of <code>X</code> is returned in the result <code>R</code>.</p> <p>The elements of <code>X</code> are either character scalars or 2-element character vectors which specify keycodes. See Keyboard Shortcuts on page 1Keyboard Shortcuts.</p> <p>Programmable function keys are recognised in any of the three types of window (SESSION, EDIT and TRACE) provided by the Dyalog APL development environment. <code>\u2395SR</code> operates with the 'raw' function keys and ignores programmed settings.</p> <p>Note that key definitions can reference other function keys, such as \"F1\" or \"F123\".</p> <p>The size of the buffer associated with <code>\u2395PFKEY</code> is specified by the pfkey_size parameter.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/pfkey/#examples","title":"Examples","text":"<pre><code>       (')FNS',\u2282'ER')\u2395PFKEY 1\n\u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2510\n\u2502)\u2502F\u2502N\u2502S\u2502ER\u2502\n\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2518\n       (')VARS',\u2282'ER')\u2395PFKEY 2\n\u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2510\n\u2502)\u2502V\u2502A\u2502R\u2502S\u2502ER\u2502\n\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2518\n      'F1' 'F2' \u2395PFKEY 3 \u235d Does )FNS and )VARS\n\u250c\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502F1\u2502F2\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2518\n\n</code></pre> <p>The following expression defines the action for F12 to be \"move the text to the right of the cursor to the left of the cursor\".</p> <pre><code>\n      'Rl' 'CT' 'LL' 'PT'\u2395PFKEY 12\n\u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502Rl\u2502CT\u2502LL\u2502PT\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/pp/","title":"Print Precision","text":"Print Precision \u2395PP <p><code>\u2395PP</code> is the number of significant digits in the display of numeric output. <code>\u2395PP</code> may be assigned any integer value in the range 1 to 34. <code>\u2395PP</code> has Namespace scope.</p> <p><code>\u2395PP</code> is used to format numbers displayed directly. It is an implicit argument of monadic function Format (<code>\u2355</code>), monadic <code>\u2395FMT</code> and for display of numbers via <code>\u2395</code> and <code>\u235e</code> output. <code>\u2395PP</code> is ignored for the display of integers.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/pp/#examples","title":"Examples:","text":"<pre><code>\n      \u2395PP\u219010\n\n      \u00f73 6\n0.3333333333 0.1666666667\n\n      \u2395PP\u21903\n\n      \u00f73 6\n0.333 0.167\n</code></pre> <p>If <code>\u2395PP</code> is set to a value <code>\u226517</code> (when <code>\u2395FR</code> is 645) or 34 (when <code>\u2395FR</code> is 1287), floating-point numbers may be converted between binary and character representation without loss of precision. Then, if  <code>\u2395CT</code> is 0 (to ensure exact comparison), for any floating-point number <code>N</code> the expression <code>N=\u234e\u2355N</code> is true.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/","title":"Profile Application","text":"Profile Application {R}\u2190{X}\u2395PROFILE Y <p><code>\u2395PROFILE</code> facilitates the profiling of either CPU consumption or elapsed time for a workspace. It does so by retaining time measurements collected for APL functions/operators and function/operator lines. <code>\u2395PROFILE</code> is used to both control the state of profiling and retrieve the collected profiling data.</p> <p>See also: Application Tuning Guide.</p> <p><code>Y</code> specifies the action to perform and any options for that action, if applicable. <code>Y</code> is case-insensitive. Note that the result <code>R</code> is in some cases shy.</p> Use Description <code>{state}\u2190\u2395PROFILE 'start' {timer}</code> Turn profiling on using the specified timer or resume if profiling was stopped <code>{state}\u2190\u2395PROFILE 'stop'</code> Suspend the collection of profiling data <code>{state}\u2190\u2395PROFILE 'clear'</code> Turn profiling off, if active, and discard any collected profiling data <code>{state}\u2190\u2395PROFILE 'calibrate'</code> Calibrate the profiling timer <code>state\u2190\u2395PROFILE 'state'</code> Query profiling state <code>data\u2190\u2395PROFILE 'data'</code> Retrieve profiling data in flat form <code>data\u2190\u2395PROFILE 'tree'</code> Retrieve profiling data in tree form <p><code>\u2395PROFILE</code> has 2 states:</p> <ul> <li>active \u2013 the profiler is running and profiling data is being collected. </li> <li>inactive \u2013 the profiler is not running.</li> </ul> <p>For most actions, the result of <code>\u2395PROFILE</code> is its current state and contains:</p> [1] character vector indicating the <code>\u2395PROFILE</code> state having one of the values <code>'active'</code> or <code>'inactive'</code> [2] character vector indicating the timer being used having one of the values <code>'CPU'</code> or <code>'elapsed'</code> [3] call time bias in milliseconds. This is the amount of time, in milliseconds, that is consumed for the system to take a time measurement [4] timer granularity in milliseconds. This is the resolution of the timer being used"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#stateprofile-start-timer","title":"{state}\u2190\u2395PROFILE 'start' {timer}","text":"<p>Turn profiling on; <code>timer</code> is an optional case-independent character vector containing  <code>'CPU'</code> or <code>'elapsed'</code> or <code>'none'</code> or <code>'coverage'</code>. If omitted, it defaults to <code>'CPU'</code>. If <code>timer</code> is <code>'none'</code>, <code>\u2395PROFILE</code>  records  just the number of times each line of code is executed without incurring the timing overhead. If <code>timer</code> is <code>'coverage'</code>, <code>\u2395PROFILE</code>   only identifies which  lines of code are executed without incurring the timing or counting overhead.</p> <p>The first time a particular timer is chosen, <code>\u2395PROFILE</code> will spend 1000 milliseconds (1 second) to approximate the call time bias and granularity for that timer.</p> <pre><code>      \u22a2\u2395PROFILE 'start' 'CPU'\n active  CPU  0.0001037499999 0.0001037499999\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#stateprofile-stop","title":"{state}\u2190\u2395PROFILE 'stop'","text":"<p>Suspends the collection of profiling data.</p> <pre><code>      \u22a2\u2395PROFILE 'stop'\n inactive  CPU  0.0001037499999 0.0001037499999\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#stateprofile-clear","title":"{state}\u2190\u2395PROFILE 'clear'","text":"<p>Clears any collected profiling data and, if profiling is active, places profiling in an inactive state.</p> <pre><code>      \u22a2\u2395PROFILE 'clear'\n inactive    0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#stateprofile-calibrate","title":"{state}\u2190\u2395PROFILE 'calibrate'","text":"<p>Causes <code>\u2395PROFILE</code> to perform a 1000 millisecond calibration to approximate the call time bias and granularity for the current timer. Note, a timer must have been previously selected by using <code>\u2395PROFILE 'start'</code>.</p> <p><code>\u2395PROFILE</code> will retain the lesser of the current timer values compared to the new values computed by the calibration. The rationale for this is to use the smallest possible values of which we can be certain.</p> <pre><code>      \u22a2\u2395PROFILE'calibrate'\n active  CPU  0.0001037499997 0.0001037499997\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#stateprofile-state","title":"state\u2190\u2395PROFILE 'state'","text":"<p>Returns the current profiling state.</p> <pre><code>      )clear\nclear ws\n      \u2395PROFILE 'state'\n inactive    0 0\n\n      \u2395PROFILE 'start' 'CPU'\n active  CPU  0.0001037499997 0.0001037499997\n      \u2395PROFILE 'state'\n active  CPU  0.0001037499997 0.0001037499997\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#datax-profile-data","title":"data\u2190{X} \u2395PROFILE 'data'","text":"<p>Retrieves the collected profiling data. If the optional left argument <code>X</code> is omitted, the result is a matrix with the following columns:</p> [;1] function name [;2] function line number or <code>\u236c</code> for a whole function entry [;3] number of times the line or function was executed [;4] accumulated time (ms) for this entry exclusive of items called by this entry [;5] accumulated time (ms) for this entry inclusive of items called by this entry [;6] number of times the timer function was called for the exclusive time [;7] number of times the timer function was called for the inclusive time"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#example-numbers-have-been-truncated-for-formatting","title":"Example: (numbers have been truncated for formatting)","text":"<pre><code>      \u2395PROFILE 'data'\n#####.foo             1  1.04406  39347.64945   503 4080803 #.foo      1      1  0.12488     0.124887     1       1 #.foo      2    100  0.58851 39347.193900   200 4080500 #.foo      3    100  0.21340     0.213406   100     100 #.NS1.goo       100 99.44404   39346.6053 50300 4080300 #.NS1.goo  1    100  0.61679     0.616793   100     100 #.NS1.goo  2  10000 67.80292   39314.9642 20000 4050000 #.NS1.goo  3  10000 19.60274      19.6027 10000   10000\n\n</code></pre> <p>If <code>X</code> is specified it must be a simple vector of column indices. In this case, the result has the same shape as <code>X</code> and is a vector of the specified column vectors:</p> <pre><code>X \u2395PROFILE 'data' \u2190\u2192 \u2193[\u2395IO](\u2395PROFILE 'data')[;X]\n</code></pre> <p>If column 2 is included in the result, the value <code>\u00af1</code> is used instead of <code>\u236c</code> to indicate a whole-function entry.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#datax-profile-tree","title":"data\u2190{X} \u2395PROFILE 'tree'","text":"<p>Retrieve the collected profiling data in tree format:</p> [;1] depth level [;2] function name [;3] function line number or <code>\u236c</code> for a whole function entry [;4] number of times the line or function was executed [;5] accumulated time (ms) for this entry exclusive of items called by this entry [;6] accumulated time (ms) for this entry inclusive of items called by this entry [;7] number of times the timer function was called for the exclusive time [;8] number of times the timer function was called for the inclusive time <p>The optional left argument is treated in exactly the same way as for <code>X \u2395PROFILE 'data'</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#example","title":"Example:","text":"<pre><code>  \u2395PROFILE 'tree'\n</code></pre> <p>0  #.foo               1     1.04406 39347.64945     503 4080803 1  #.foo      1        1     0.12488     0.12488       1       1 1  #.foo      2      100     0.58851 39347.19390     200 4080500 2  #.NS1.goo         100    99.44404 39346.60538   50300 4080300 3  #.NS1.goo  1      100     0.61679     0.61679     100     100 3  #.NS1.goo  2    10000    67.80292 39314.96426   20000 4050000 4  #.NS2.moo       10000 39247.16133 39247.16133 4030000 4030000 5  #.NS2.moo  1    10000    39.28315    39.28315   10000   10000 5  #.NS2.moo  2  1000000 36430.65236 36430.65236 1000000 1000000 5  #.NS2.moo  3  1000000  1645.36214  1645.36214 1000000 1000000 3  #.NS1.goo  3    10000    19.60274    19.60274   10000   10000 1  #.foo      3      100     0.21340     0.21340     100     100</p> <p>Note that rows with an even depth level in column <code>[;1]</code> represent function summary entries and odd depth level rows are function line entries. Recursive functions will generate separate rows for each level of recursion.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#notes","title":"Notes","text":""},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#profile-data-entry-types","title":"Profile Data Entry Types","text":"<p>The results of <code>\u2395PROFILE 'data'</code> and <code>\u2395PROFILE 'tree'</code> have two types of entries; function summary entries and function line entries. Function summary entries contain <code>\u236c</code> in the line number column, whereas function line entries contain the line number. Dfns line entries begin with 0 as they do not have a header line like traditional functions. The timer data and timer call counts in function summary entries represent the aggregate of the function line entries plus any time spent that cannot be directly attributed to a function line entry. This could include time spent during function initialisation, etc.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#example_1","title":"Example:","text":"<pre><code> #.foo         1  1.04406 39347.649450   503 4080803\n #.foo    1    1  0.12488     0.124887     1       1\n #.foo    2  100  0.58851 39347.193900   200 4080500\n #.foo    3  100  0.21340     0.213406   100     100\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#timer-data-persistence","title":"Timer Data Persistence","text":"<p>The profiling data collected is stored outside the workspace and will not impact workspace availability. The data is cleared upon workspace load, clear workspace, <code>\u2395PROFILE 'clear'</code>, or interpreter sign off.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#the-profile-user-command","title":"The PROFILE User Command","text":"<p><code>]PROFILE</code> is a utility which implements a high-level interface to <code>\u2395PROFILE</code> and provides reporting and analysis tools that act upon the profiling data. For further information, see Tuning Applications using the Profile User Command.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#using-profile-directly","title":"Using \u2395PROFILE Directly","text":"<p>If you choose to use <code>\u2395PROFILE</code> directly, the following guidelines and information may be of use to you.</p> <p>Note: Running your application with <code>\u2395PROFILE</code> turned on incurs a significant processing overhead and will slow your application down.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#decide-which-timer-to-use","title":"Decide which timer to use","text":"<p><code>\u2395PROFILE</code> supports profiling of either CPU or elapsed time. CPU time is generally of more interest in profiling application performance.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#simple-profiling","title":"Simple Profiling","text":"<p>To get a quick handle on the top CPU time consumers in an application, use the following procedure:</p> <ul> <li>Make sure the application runs long enough to collect enough data to overcome the timer granularity \u2013 a reasonable rule of thumb is to make sure the application runs for at least <code>(4000\u00d74\u2283\u2395PROFILE 'state')</code> milliseconds.</li> <li>Turn profiling on with <code>\u2395PROFILE 'start' 'CPU'</code></li> <li>Run your application.</li> <li>Pause the profiler with <code>\u2395PROFILE 'stop'</code></li> <li>Examine the profiling data from <code>\u2395PROFILE 'data'</code> or <code>\u2395PROFILE 'tree'</code> for entries that consume large amounts of resource.</li> </ul> <p>This should identify any items that take more than 10% of the run time.</p> <p>To find finer time consumers, or to focus on elapsed time rather than CPU time, take the following additional steps prior to running the profiler:</p> <p>Turn off as much hardware as possible. This would include peripherals, network connections, etc.</p> <ul> <li>Turn off as many other tasks and processes as possible. These include anti-virus software, firewalls, internet services, background tasks.</li> <li>Raise the priority on the Dyalog APL task to higher than normal, but in general avoid giving it the highest priority.</li> <li>Run the profiler as described above.</li> </ul> <p>Doing this should help identify items that take more than 1% of the run time.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#advanced-profiling","title":"Advanced Profiling","text":"<p>The timing data collected by <code>\u2395PROFILE</code> is not adjusted for the timer's call time bias; in other words, the times reported by <code>\u2395PROFILE</code> include the time spent calling the timer function. One effect of this can be to make \"cheap\" lines that are called many times seem to consume more resource. If you desire more accurate profiling measurements, or if your application takes a short amount of time to run, you will probably want to adjust for the timer call time bias. To do so, subtract from the timing data the timer's' 'call time bias multiplied by the number of times the timer was called.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/profile/#example_2","title":"Example:","text":"<pre><code>      CallTimeBias\u21903\u2283\u2395PROFILE 'state'\n      RawTimes\u2190\u2395PROFILE 'data'\n      Adjusted\u2190RawTimes[;4 5]-RawTimes[;6 7]\u00d7CallTimeBias\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/pw/","title":"Print Width","text":"Print Width \u2395PW <p><code>\u2395PW</code> is the maximum number of output characters per line before folding the display.</p> <p><code>\u2395PW</code> may be assigned any integer value in the range 42 to 32767. Note that in versions of Dyalog APL prior to 13.0 <code>\u2395PW</code> had a minimum value of 30; this was increased to support 128-bit decimal values. <code>\u2395PW</code> has Session scope.</p> <p>If an attempt is made to display a line wider than <code>\u2395PW</code>, then the display will be folded at or before the <code>\u2395PW</code> width and the folded portions indented 6 spaces.  The display of a simple numeric array may be folded at a width less than <code>\u2395PW</code> so that individual numbers are not split.</p> <p><code>\u2395PW</code> only affects output, either direct or through <code>\u2395</code> output.  It does not affect the result of the function Format (<code>\u2355</code>), of the system function <code>\u2395FMT</code>, or output through the system functions <code>\u2395ARBOUT</code> and <code>\u2395ARBIN</code>, or output through <code>\u235e</code>.</p> <p>Note that if the Auto_PW parameter (Options/Configure/Session/Auto PW) is set to 1, <code>\u2395PW</code> is automatically adjusted whenever the Session window is resized. In these circumstances, a value assigned to <code>\u2395PW</code> will only apply until the Session window is next resized.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/pw/#examples","title":"Examples","text":"<pre><code>      \u2395PW\u219042\n\n      \u2395\u21903\u2374\u00f73\n0.3333333333 0.3333333333 0.3333333333\n      0.3333333333\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-access-control/","title":"Query Access Control","text":"Query Access Control R\u2190\u2395SVC Y <p>This system function queries the access control on one or more shared variables.</p> <p><code>Y</code> is a character scalar, vector, or matrix containing names of shared variables.  Each name may optionally be paired with its surrogate.  If so, the surrogate must be separated from the name by at least one space.</p> <p>If <code>Y</code> specifies a single name, the result <code>R</code> is a Boolean vector containing the current effective access control vector.  If <code>Y</code> is a matrix of names, <code>R</code> is a Boolean matrix whose rows contain the current effective access control vectors for the corresponding row in <code>Y</code>.</p> <p>For further information, see the preceding section on setting the access control vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-access-control/#example","title":"Example","text":"<pre><code>      \u2395SVC 'X'\n0 0 0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-degree-of-coupling/","title":"Query Degree of Coupling","text":"Query Degree of Coupling R\u2190\u2395SVO Y <p>This system function returns the current degree of coupling for one or more shared variables.</p> <p><code>Y</code> is a character scalar, vector or matrix.  If it is a vector it contains a shared variable name and optionally its external name or surrogate separated from it by one of more blanks.</p> <p>If <code>Y</code> is a scalar, it specifies a single 1-character name.  If <code>Y</code> is a matrix, each row of <code>Y</code> specifies a name and an optional external name as for the vector case.</p> <p>If <code>Y</code> specifies a single name, the result <code>R</code> is a 1-element vector whose value 0, 1 or 2 indicates its current degree of coupling.  If <code>Y</code> specifies more than one name, <code>R</code> is a vector whose elements indicate the current degree of coupling of the variable specified by the corresponding row in <code>Y</code>.  A value of 2 indicates that the variable is fully coupled (via a warm or hot DDE link) with a shared variable in another APL workspace, or with a DDE item in another application.  A value of 1 indicates that you have offered the variable but there is no such connection, or that the second application rejected a warm link.  In this case, a transfer of data may have taken place (via a cold link) but the connection is no longer open.  A value of 0 indicates that the name is not a shared variable.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-degree-of-coupling/#examples","title":"Examples","text":"<pre><code>      \u2395SVO 'X'\n2\n      \u2395SVO \u2191'X SALES' 'Y' 'JUNK'\n2 1 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-external-variable/","title":"Query External Variable","text":"Query External Variable R\u2190\u2395XT Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be a variable name.  <code>R</code> is a simple character vector containing the file reference of the external array associated with the variable named by <code>Y</code>, or the null vector if there is no associated external array.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-external-variable/#example","title":"Example","text":"<pre><code>      \u2395XT'V'\nEXT\\ARRAY\n\n      \u2374\u2395XT'G'\n0\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-monitor/","title":"Query Monitor","text":"Query Monitor R\u2190\u2395MONITOR Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of a visible defined function or operator.</p> <p>Note that <code>\u2395MONITOR</code> does not apply to  dfns or dops.</p> <p><code>R</code> is a simple non-negative integer matrix of 5 columns with one row for each line in the function or operator <code>Y</code> which has the monitor set, giving:</p> Column 1 Line number Column 2 Number of times the line was executed Column 3 CPU time in milliseconds Column 4 Elapsed time in milliseconds Column 5 Reserved <p>The value of <code>0</code> in column one indicates that the monitor is set on the function or operator as a whole. <code>R</code> will be empty for dfns and dops.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-monitor/#example","title":"Example","text":"<pre><code>      \u2207 FOO\n[1]   A\u2190?25 25\u2374100\n[2]   B\u2190\u2339A\n[3]   C\u2190\u2339B\n[4]   R1\u2190\u230a0.5+A+.\u00d7B\n[5]   R2\u2190A=C\n      \u2207\n\n      (0,\u23735) \u2395MONITOR 'FOO' \u235d Set monitor\n\n      FOO                   \u235d Run function\n\n      \u2395MONITOR 'FOO'        \u235d Monitor query\n0 1 1418 1000 0\n1 1   83    0 0\n2 1  400    0 0\n3 1  397    0 0\n4 1  467 1000 0\n5 1  100    0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-stop/","title":"Query Stop","text":"Query Stop R\u2190\u2395STOP Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of a visible defined function or operator.  <code>R</code> is a simple non-negative integer vector of the line numbers of the function or operator named by <code>Y</code> on which stop controls are set, shown in ascending order.  The value 0 in <code>R</code> indicates that a stop control is set immediately prior to exit from the function or operator.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-stop/#example","title":"Example","text":"<pre><code>      \u2395STOP'FOO'\n0 1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-trace/","title":"Query Trace","text":"Query Trace R\u2190\u2395TRACE Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of a visible defined function or operator.  <code>R</code> is a simple non-negative integer vector of the line numbers of the function or operator named by <code>Y</code> on which trace controls are set, shown in ascending order.  The value 0 in <code>R</code> indicates that a trace control is set to display the result of the function or operator immediately prior to exit.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/query-trace/#example","title":"Example","text":"<pre><code>      \u2395TRACE'DSL'\n0 1 2 3 4 5 6\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/","title":"Replace","text":"Replace R\u2190{X}(A \u2395R B) Y <p><code>\u2395R</code> (Replace) and <code>\u2395S</code> (Search) are system operators which take search pattern(s) as their left arguments and transformation rule(s) as their right arguments; the derived function operates on text data to perform either a search, or a search and replace operation.</p> <p>The search patterns may include Regular Expressions so that complex searches may be performed. <code>\u2395R</code> and <code>\u2395S</code> utilise the open-source regular-expression search engine PCRE, which is built into Dyalog APL and distributed according to the PCRE licence which is published separately.</p> <p>The transformation rules are applied to the text which matches the search patterns; they may be given as a simple character vector, numeric codes, or  a function.</p> <p>The two system operators, <code>\u2395R</code> for replace and <code>\u2395S</code> for search, are syntactically identical. With <code>\u2395R</code>, the input document is examined; text which matches the search pattern is amended and the remainder is left unchanged. With <code>\u2395S</code>, each match in the input document results in an item in the result whose type is dependent on the transformation specified. The operators use the Variant operator to set options.</p> <p><code>A</code> specifies one or more search patterns, being given as a single character, a character vector, a vector of character vectors or a vector of both characters and character vectors. See search pattern following.</p> <p><code>B</code> is the transformation to be performed on matches within the input document; it may be either one or more transformation patterns (specified as a character, a character vector, a vector of character vectors, or a vector of both characters and character vectors), one or more transformation codes (specified as a numeric scalar or a numeric vector) or a function; see  transformation pattern, transformation codes and transformation function following.</p> <p><code>Y</code> specifies the input document; see input document below.</p> <p><code>X</code> optionally specifies an output stream; see output below.</p> <p><code>R</code> is the result value; see output below.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#examples-of-replace-operations","title":"Examples of replace operations","text":"<pre><code>      ('.at' \u2395R '\\u0') 'The cat sat on the mat'     \nThe CAT SAT on the MAT\n</code></pre> <p>In the search pattern the dot matches any character, so the pattern as a whole matches sequences of three characters ending 'at'. The transformation is given as a character string, and causes the entire matching text to be folded to upper case.</p> <pre><code>      ('\\w+' \u2395R {\u233d\u2375.Match}) 'The cat sat on the mat'\nehT tac tas no eht tam\n</code></pre> <p>The search pattern matches each word. The transformation is given as a function, which receives a namespace containing various variables describing the match, and it returns the match in reverse, which in turn replaces the matched text.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#examples-of-search-operations","title":"Examples of search operations","text":"<pre><code>      STR\u2190'The cat sat on the mat'\n      ('.at' \u2395S '\\u0') STR\nCAT  SAT  MAT \n</code></pre> <p>The example is identical to the first, above, except that after the transformation is applied to the matches the results are returned in a vector, not substituted into the source text.</p> <pre><code>      ('.at' \u2395S {\u2375.((1\u2191Offsets),1\u2191Lengths)}) STR\n4 3  8 3  19 3\n</code></pre> <p>When searching, the result vector need not contain only text and in this example the function returns the numeric position and length of the match given to it; the resultant vector contains these values for each of the three matches.</p> <pre><code>      ('.at' \u2395S 0 1) STR       \n4 3  8 3  19 3\n</code></pre> <p>Here the transformation is given as a vector of numeric codes which are a short-hand for the position and length of each match; the overall result is therefore identical to the previous example.</p> <p>These examples all operate on a simple character vector containing text, but the text may be given in several forms - character vectors, vectors of character vectors, and external data streams. These various forms constitute a 'document'. When the result also takes the form of a document it may be directed to a stream.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#input-document","title":"Input Document","text":"<p>The input document may be an array or a data stream.</p> <p>When it is an array it may be given in one of two forms:</p> <ol> <li>A character scalar or vector</li> <li>A vector of character vectors</li> </ol> <p>Currently, the only supported data stream is a native file, specified as tie number, which is read from the current position to the end. If the file is read from the start, and there is a valid Byte Order Mark (BOM) at the start of it, the data encoding is determined by this BOM. Otherwise, data in the file is assumed to be encoded as specified by the InEnc option.</p> <p>Hint: once a native file has been read to the end by <code>\u2395R</code> or <code>\u2395S</code> it is possible to reset the file position to the start so that it may be read again using:</p> <pre><code>      {} \u2395NREAD tienum 82 0 0\n</code></pre> <p>The input document is comprised of lines of text. Line breaks may be included in the data:</p> <p>Implicitly</p> <ul> <li>Between each item in the outer vector (type 2, above)</li> </ul> <p>Explicitly, as</p> <ul> <li>carriage return</li> <li>line feed</li> <li>carriage return and line feed together, in that order</li> <li>vertical tab (U+000B)</li> <li>newline (U+0085)</li> <li>form Feed (U+000C)</li> <li>line Separator (U+2028)</li> <li>paragraph Separator (U+2029)</li> </ul> <p>The implicit line ending character may be set using the EOL option. Explicit line ending characters may also be replaced by this character - so that all line endings are normalised - using the NEOL option.</p> <p>The input document may be processed in line mode, document mode or mixed mode. In document mode and mixed mode, the entire input document, line ending characters included, is passed to the search engine; in line mode the document is split on line endings and passed to the search engine in sections without the line ending characters. The choice of mode affects both memory usage and behaviour, as documented in the section 'Line, document and mixed modes'.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#output","title":"Output","text":"<p>The format of the output is dependent on whether <code>\u2395S</code> or <code>\u2395R</code> are in use, whether an output stream is specified and, for <code>\u2395R</code>, the form of the input and whether the ResultText option is specified.</p> <p>An output data stream may optionally be specified. Currently, the only supported data stream is a native file, specified as tie number, and all output will be appended to it. Data in the stream is encoded as specified by the OutEnc option. If this encoding specifies a Byte Order Mark and the file is initially empty then the Byte Order Mark will be written at the start. Appending to existing data using a different encoding is permitted but unlikely to produce desirable results. If an input stream is also used, care must be taken to ensure the input and output streams are not the same.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#r","title":"\u2395R","text":"<p>With no output stream specified and unless overridden by the ResultText option, the derived function result will be a document which closely matches the format of the input document, as follows:</p> <p>A character scalar or vector input will result in a character vector output. Any and all line endings in the output will be represented by line ending characters within the character vector.</p> <p>A vector of character vectors as input will result in a vector of character vectors as document output. Any and all line endings in the output document will be implied at the end of each character vector.</p> <p>A stream as input will result in a vector of character vectors document output. Any and all line endings in the output document will be implied at the end of each character vector.</p> <p>Note that the shape of the output document may be significantly different to that of the input document.</p> <p>If the ResultText option is specified, the output type may be forced to be a character vector or vector of character vectors as described above, regardless of the input document.</p> <p>With an output stream specified the text is appended to the stream. If the appended text does not end with a line ending character then the line ending character specified by the EOL option is also appended. The resulting length of the file  is returned as a shy result.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#s","title":"\u2395S","text":"<p>With no output stream specified, the result will be a vector containing one item for each match in the input document, of types determined by the transformation performed on each match.</p> <p>With an output stream specified each match is appended to the stream. If any match does not end with a line ending character then the line ending character specified by the EOL option is also appended.  The resulting length of the file  is returned as a shy result. Only text may be written to the stream, which means:</p> <ul> <li>When a transformation function is used, the function may only generate a character vector result.</li> <li>Transformation codes may not be used.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#search-pattern","title":"Search pattern","text":"<p>A summary of the syntax of the search pattern is reproduced from the PCRE documentation. See Appendix A - PCRE Syntax Summary on page 1PCRE Regular Expression Syntax Summary.</p> <p>A full description is provided in Appendix B - PCRE Regular Expression Details          on page 1PCRE Regular Expression Details.</p> <p>There may be multiple search patterns. If more than one search pattern is specified and more than one pattern matches the same part of the input document then priority is given to the pattern specified first.</p> <p>Note that when anchoring a search to the beginning of a line, it is essential to use <code>^</code> (<code>\u2395UCS 94</code>), not <code>\u2227</code> (<code>\u2395UCS 8743</code>).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#transformation-pattern","title":"Transformation pattern","text":"<p>For each match in the input document, the transformation pattern causes the creation of text which, for <code>\u2395R</code>, replaces the matching text and, for <code>\u2395S</code>, generates one item in the result.</p> <p>There may be either one transformation pattern, or the same number of transformation patterns as search patterns. If there are multiple search patterns and multiple transformation patterns then the transformation pattern used corresponds to the search pattern which matched the input text.</p> <p>Transformation patterns may not be mixed with transformation codes or functions.</p> <p>The following characters have special meaning:</p> Character Meaning % acts as a placeholder for the entire line (line mode) or document (document mode or mixed mode) which contained the match &amp; acts as a placeholder for the entire portion of text which matched \\n represents a line feed character \\r represents a carriage return \\0 equivalent to &amp; \\ n acts as a placeholder for the text which matched the first to ninth subpattern; n may be any single digit value from 1 to 9 ( n ) acts as a placeholder for the text which matched the numbered subpattern; n may have an integer value from 0 to 63. \\&lt; name &gt; acts as a placeholder for the text which matched the named subpattern \\ represents the backslash character \\% represents the percent character \\&amp; represents the ampersand character \\x{ nnnn } represents a Unicode code point; nnnn is a hexadecimal sequence of characters yielding a value between 0x1 and 0x10FFFF. <p>The above may be qualified so that matching text is folded, or mapped to upper- or lower-case, by using the f, u, and l modifiers respectively; the effect is as if the text was processed by <code>\u2395C</code>. See Case Convert on page 1.</p> <p>Character sequences beginning with the backslash place the modifier after the backslash; character sequences with no leading backslash add both a backslash and the modifier to the start of the sequence, for example:</p> \\u&amp; acts as a placeholder for the entire portion of text which matched, folded to upper case \\l0 equivalent to \\l&amp; <p>Character sequences beginning with the backslash other that those shown are invalid. All characters other than those shown are literal values and are included in the text without modification.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#transformation-codes","title":"Transformation codes","text":"<p>The transformation codes are a numeric scalar or vector. Transformation codes may only be used with <code>\u2395S</code>. For each match in the input document, a numeric scalar or vector of the same shape as the transformation codes is created, with the codes replaced with values as follows:</p> 0 The offset from the start of the line (line mode) or document (document mode or mixed mode) of the start of the match. 1 The length of the match. 2 In line mode, the block number in the source document of the start of the match. The value is origin zero. In document mode or mixed mode this value is always zero. 3 The pattern number which matched the input document, origin zero."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#transformation-function","title":"Transformation Function","text":"<p>The transformation function is called for each match within the input document.  The function is monadic and is passed a namespace, containing the following variables:</p> <code>Block</code> The entire line (line mode) or document (document mode or mixed mode) in which the match was found. <code>BlockNum</code> With line mode, the block (line) number in the source document of the start of the match. The value is origin zero. With document mode or mixed mode the entire document is contained within one block and this value is always zero. <code>Pattern</code> The search pattern which matched. <code>PatternNum</code> The index-zero pattern number which matched. <code>Match</code> The text within Block which matched Pattern. <code>Offsets</code> A vector of one or more offsets relative to the start of Block. The first value is the offset of the entire match; any and all additional values are the offsets of the portions of the text which matched the subpatterns, in the order of the subpatterns within Pattern. <code>\u00af1</code> indicates no match, see below. <code>Lengths</code> A vector of one or more lengths, corresponding to each value in Offset. <code>\u00af1</code> indicates no match, see below. <code>Names</code> A vector of one or more character vectors corresponding to each of the values in Offsets, specifying the names given to the subpatterns within Pattern. The first entry (corresponding to the match) and all subpatterns with no name are included as length zero character vectors. <code>ReplaceMode</code> A Boolean indicating whether the function was called by <code>\u2395R</code> (value 1) or <code>\u2395S</code> (value 0). <code>TextOnly</code> A Boolean indicating whether the return value from the function must be a character vector (value 1) or any value (value 0). <p>The return value from the function is used as follows:</p> <p>With <code>\u2395R</code> the function must return a character vector. The contents of this vector are used to replace the matching text.</p> <p>With <code>\u2395S</code> the function may return no value. If it does return a value:</p> <ul> <li>When output is being directed to a stream it must be a character vector.</li> <li>Otherwise, it may be any value. The overall result of the derived function is the catenation of the enclosure of each returned value into a single vector.</li> </ul> <p>The passed namespace exists over the lifetime of <code>\u2395R</code> or <code>\u2395S</code>; the function may therefore preserve state by creating variables in the namespace.</p> <p>The function may itself call <code>\u2395R</code> or <code>\u2395S</code>.</p> <p>There may be only one transformation function, regardless of the number of search patterns.</p> <p>The locations of the match within Block and subpatterns within Match are given as offsets rather than positions, i.e. the values are the number of characters preceding the data, and are not affected by the Index Origin.</p> <p>The value of <code>\u00af1</code> may appear in both the Offsets and Fields items (in corresponding positions). They indicate that the subpattern to which they refer did not appear in the match at all.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#example","title":"Example","text":"<pre><code>      {}('(A)|(B)'\u2395R{\u2395\u2190\u2375.(Offsets Lengths)\u22c4'x'})'ABC'\n 0 0  1 1 \n 1 \u00af1 1  1 \u00af1 1 \n\n</code></pre> <p>The pattern has two subpatterns - (<code>A</code>) and (<code>B</code>). Therefore Offsets and Lengths would be expected to have three elements each - one for the entire match, one for the first subpattern and one for the second subpattern. But these subpatterns have a <code>|</code> between them which means they are alternates - only one can match.</p> <p>When <code>ABC</code> is searched the first match is the <code>A</code> in the first subpattern. The second subpattern does not feature. Offsets is <code>0 0</code> and Lengths is <code>1 1</code>: the entire pattern matched from offset 0 length 1 and the first subpattern also matched from offset 0 length 1. The second subpattern did not feature in the match.</p> <p>Note that <code>\u00af1</code> is only used as a \"filler\" when there are higher-numbered subpatterns that did match.</p> <p>The second match is the B in the second subpattern. Offsets is <code>1 \u00af1 1</code> and Lengths is <code>1 \u00af1 1</code>: the entire pattern matched from offset 1 length 1 and the second subpattern also matched from offset 1 length 1. The first subpattern did not feature in the match and this is indicated by the <code>\u00af1</code>s. There has to be something between the offset/length for the entire pattern and the second subpattern.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#options","title":"Options","text":"<p>Options are specified using the Variant operator. The Principal option is IC.</p> <p>Default values are highlighted thus.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#ic-option","title":"IC Option","text":"<p>When set, case is ignored in searches.</p> <code>1</code> Matches are not case sensitive. 0 Matches are case sensitive."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#example_1","title":"Example:","text":"<pre><code>      ('[AEIOU]' \u2395R 'X' \u2360 'IC' 1) 'ABCDE abcde'\nXBCDX XbcdX\n      ('[AEIOU]' \u2395R 'X' \u2360 1)'ABCDE abcde'\nXBCDX XbcdX\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#mode-option","title":"Mode Option","text":"<p>Specifies whether the input document is interpreted in line mode, document mode or mixed mode.</p> L When line mode is set, the input document is split into separate lines (discarding the line ending characters themselves), and each line is processed separately. This means that the ML option applies per line, and the '^' and '$' anchors match the start and end respectively of each line. Because the document is split, searches can never match across multiple lines, nor can searches for line ending characters ever succeed. Setting line mode can result in significantly reduced memory requirements compared with the other modes. <code>D</code> When document mode is set, the entire input document is processed as a single block. The ML option applies to this entire block, and the '^' and '$' anchors match the start and end respectively of the block - not the lines within it. Searches can match across lines, and can match line ending characters. <code>M</code> When mixed mode is set, the '^' and '$' anchors match the start and end respectively of each line, as if line mode is set, but in all other respects behaviour is as if document mode is set - the entire input document is processed in a single block."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#examples","title":"Examples:","text":"<pre><code>      ('$' \u2395R '[Endline]' \u2360 'Mode' 'L') 'ABC' 'DEF'\n ABC[Endline]  DEF[Endline] \n\n      ('$' \u2395R '[Endline]' \u2360 'Mode' 'D') 'ABC' 'DEF'\n ABC  DEF[Endline]\n\n      ('$' \u2395R '[Endline]' \u2360 'Mode' 'M') 'ABC' 'DEF'\n ABC[Endline]  DEF[Endline]\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#dotall-option","title":"DotAll Option","text":"<p>Specifies whether the dot ('.') character in search patterns matches line ending characters.</p> 0 The '.' character in search patterns matches most characters, but not line endings. <code>1</code> The '.' character in search patterns matches all characters. <p>This option is invalid in line mode, because line endings are stripped from the input document.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#example_2","title":"Example:","text":"<pre><code>      ('.' \u2395R 'X' \u2360'Mode' 'D') 'ABC' 'DEF'\n XXX  XXX \n      ('.' \u2395R 'X' \u2360('Mode' 'D')('DotAll' 1)) 'ABC' 'DEF'\n XXXXXXXX\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#eol-option","title":"EOL Option","text":"<p>Sets the line ending character which is implicitly present between character vectors, when the input document is a vector of character vectors.</p> CR Carriage Return (U+000D) LF Line Feed (U+000A) CRLF Carriage Return followed by Line Feed VT Vertical Tab (U+000B) NEL New Line (U+0085) FF Form Feed (U+000C) LS Line Separator (U+2028) PS Paragraph Separator (U+2029) <p>In the Classic Edition, setting a value which is not in <code>\u2395AVU</code> may result in a <code>TRANSLATION ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#example_3","title":"Example:","text":"<pre><code>      ('\\n' \u2395R'X' \u2360('Mode' 'D')('EOL' 'LF')) 'ABC' 'DEF'\n ABCXDEF\n\n</code></pre> <p>Here, the implied line ending between 'ABC' and 'DEF' is '\\n', not the default '\\r\\n'.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#neol-option","title":"NEOL Option","text":"<p>Specifies whether explicit line ending sequences in the input document are normalised by replacing them with the character specified using the EOL option.</p> 0 Line endings are not normalised. 1 Line endings are normalised."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#example_4","title":"Example:","text":"<pre><code>      a\u2190'ABC',(1\u21912\u2193\u2395AV),'DEF',(1\u21913\u2193\u2395AV),'GHI'\n      ('\\n'\u2395S 0 \u2360 'Mode' 'D' \u2360 'NEOL' 1 \u2360 'EOL' 'LF') a\n3 7\n\n</code></pre> <p>'\\n' has matched both explicit line ending characters in the input, even though they are different.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#ml-option","title":"ML Option","text":"<p>Sets a limit to the number of processed pattern matches per line (line mode) or document (document mode and mixed mode).</p> Positive value n Sets the limit to the first n matches. 0 Sets no limit. Negative value <code>\u00af</code> n Sets the limit to exactly the nth match."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#examples_1","title":"Examples:","text":"<pre><code>      ('.' \u2395R 'x' \u2360 'ML' 2) 'ABC' 'DEF'\n xxC  xxF \n      ('.' \u2395R 'x' \u2360 'ML' \u00af2) 'ABC' 'DEF'\n AxC  DxF \n      ('.' \u2395R 'x' \u2360 'ML' \u00af4 \u2360 'Mode' 'D') 'ABC' 'DEF'\n ABC  xEF\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#greedy-option","title":"Greedy Option","text":"<p>Controls whether patterns are \"greedy\" (and match the maximum input possible) or are not (and match the minimum). Within the pattern itself it is possible to specify greediness for individual elements of the pattern; this option sets the default.</p> 1 Greedy by default. 0 Not greedy by default."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#examples_2","title":"Examples:","text":"<pre><code>      ('[A-Z].*[0-9]' \u2395R 'X' \u2360 'Greedy' 1)'ABC123 DEF456'\nX\n      ('[A-Z].*[0-9]' \u2395R 'X' \u2360 'Greedy' 0)'ABC123 DEF456'\nX23 X56\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#om-option","title":"OM Option","text":"<p>Specifies whether matches may overlap.</p> 1 Searching continues for all patterns and then from the character following the start of the match, thus permitting overlapping matches. 0 Searching continues from the character following the end of the match. <p>This option may only be used with <code>\u2395S</code>. With <code>\u2395R</code> searching always continues from the character following the end of the match (the characters following the start of the match will have been changed).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#examples_3","title":"Examples:","text":"<pre><code>      ('[0-9]+' \u2395S '\\0' \u2360 'OM' 0) 'A 1234 5678 B'\n 1234  5678 \n      ('[0-9]+' \u2395S '\\0' \u2360 'OM' 1) 'A 1234 5678 B'\n 1234  234  34  4  5678  678  78  8\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#inenc-option","title":"InEnc Option","text":"<p>This option specifies the encoding of the input stream when it cannot be determined automatically. It is either:</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#-a-character-vector-that-specifies-the-file-encoding-as-shown-in-the-table-below","title":"- a character vector that specifies the file-encoding as shown in the table below.","text":"<p>When the stream is read from its start, and the start of the stream contains a recognised Byte Order Mark (BOM), the encoding is taken as that specified by the BOM and this option is ignored. Otherwise, the encoding is assumed to be as specified by this option.</p> UTF-8 The stream is processed as UTF-8 data. Note that ASCII is a subset of UTF-8, so this default is also suitable for ASCII data. UTF-16 The stream is processed as UTF16 little-endian data on little-ended systems, or as UTF16 big-endian data on big-endian systems. UTF-16LE The stream is processed as UTF16 little-endian data. UTF-16BE The stream is processed as UTF16 big-endian data. UTF-32 The stream is processed as UTF32 little-endian data on little-ended systems, or as UTF32 big-endian data on big-endian systems. UTF-32LE The stream is processed as UTF32 little-endian data. UTF-32BE The stream is processed as UTF32 big-endian data. ASCII The stream is processed as ASCII data. If the stream contains any characters outside of the ASCII range then an error is produced. Windows-1252 The stream is processed as Windows-1252 (ANSI) data. ANSI Same as Windows-1252 <p>For compatibility with the OutEnc option, the above UTF formats may be qualified with -BOM (e.g. UTF-8-BOM) or -NOBOM. For input streams, the qualified and unqualified options are equivalent.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#outenc-option","title":"OutEnc Option","text":"<p>When the output is written to a stream, this option specifies how the data is to be encoded.  It is either:</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#-a-character-vector-that-specifies-the-file-encoding-as-shown-in-the-table-below_1","title":"- a character vector that specifies the file-encoding as shown in the table below.","text":"Implied If input came from a stream then the encoding format is the same as the input stream, otherwise UTF-8 UTF-8 The data is written in UTF-8 format. UTF-16 The data is written in UTF16 little-endian format on little-ended systems, or in UTF16 big-endian format on big-endian systems. UTF-16LE The data is written in UTF-16 little-endian format. UTF-16BE The data is written in UTF-16 big-endian format. UTF-32 The data is written in UTF32 little-endian format on little-ended systems, or in UTF32 big-endian format on big-endian systems. UTF-32LE The data is written in UTF-32 little-endian format. UTF-32BE The data is written in UTF-32 big-endian format. ASCII The data is written in ASCII format. Windows-1252 The data is written in Windows-1252 (ANSI) format. ANSI Same as Windows-1252 <p>The above UTF formats may be qualified with -BOM (e.g. UTF-8-BOM) to specify that a Byte Order Mark should be written at the start of the stream or, -NOBOM that it should not. For files, this is ignored if the file already contains any data.  If the -BOM or -NOBOM suffix is omitted, UTF-8 defaults to UTF-8-NOBOM, while the other UTF formats default to -BOM.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#enc-option","title":"Enc Option","text":"<p>This option sets both InEnc and OutEnc simultaneously, with the same given value. Any option value accepted by those options except Implied may be given.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#resulttext-option","title":"ResultText Option","text":"<p>For <code>\u2395R</code>, this option determines the format of the result.</p> Implied The output will either be a character vector or a vector of character vectors , dependent on the input document type Simple The output will be a character vector . Any and all line endings in the output will be represented by line ending characters within the character vector. Nested The output will be a vector of character vectors . Any and all line endings in the output document will be implied at the end of each character vector. <p>This option may only be used with <code>\u2395R</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#examples_4","title":"Examples:","text":"<pre><code>      \u2395UCS \u00a8 ('A' \u2395R 'x') 'AB' 'CD'                \n  120 66  67 68                    \n      \u2395UCS ('A' \u2395R 'x' \u2360 'ResultText' 'Simple') 'AB' 'CD'\n 120 66 13 10 67 68\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#ucp-option","title":"UCP Option","text":"<p>This affects the way PCRE that processes \\B, \\b, \\D, \\d, \\S, \\s,  \\W, \\w,  and  some  of  the POSIX character classes.</p> 1 Unicode  properties are  used to classify characters. 0 Only ASCII characters are recognized. <p>Implementation Note: this option is implemented by setting or not setting the PCRE_UCP option when calling pcre_compile(). More information can be found in the PCRE documentation.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#examples_5","title":"Examples","text":"<p>By default, the character \u00f8 (which is not an ASCII character) is considered to be a \"non-word\" character, so:</p> <pre><code>      ('\\w'\u2395S'\\0')'Bj\u00f8rn'  \u235d identify \"word\" characters\n B  j  r  n\n      ('\\W'\u2395S'\\0')'Bj\u00f8rn'  \u235d non-word\" characters\n \u00f8\n\n</code></pre> <p>When UCP is set to 1, Unicode characters are matched as \"word\" characters (\\w) too.</p> <pre><code>\n      ('\\w'\u2395S'\\0' \u2360'UCP' 1)'Bj\u00f8rn'\n B  j  \u00f8  r  n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#line-document-and-mixed-modes","title":"Line, document and mixed modes","text":"<p>The Mode setting determines how the input document is packaged as a block and passed to the search engine. In line mode each line is processed separately; in document mode and mixed mode the entire document is presented to the search engine. This affects both the semantics of the search expression, and memory usage.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#semantic-differences","title":"Semantic differences","text":"<ul> <li>The ML option applies per block of data.</li> <li>In line mode, search patterns cannot be constructed to span multiple lines. Specifically, patterns that include line ending characters (such as '\\r') will never match because the line endings are never presented to the search engine.</li> <li>By default the search pattern metacharacters '^' and '$' match the start and end of the block of data. In line mode this is always the start and end of each line. In document mode this is the start and end of the document. In mixed mode the behaviour of '^' and '$' are amended by setting the PCRE option 'MULTILINE' so that they match the start and end of each line within the document.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#memory-usage-differences","title":"Memory usage differences","text":"<p>Blocks of data passed to the search engine are processed and stored in the workspace. Processing the input document in line mode limits the total memory requirements; in particular this means that large streams can be processed without holding all the data in the workspace at the same time.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#technical-considerations","title":"Technical Considerations","text":"<p><code>\u2395R</code> and <code>\u2395S</code> utilise the open-source regular-expression search engine PCRE, which is built into the Dyalog software and distributed according to the PCRE licence which is published separately.</p> <p>Before data is passed to PCRE it is converted to UTF-8 format. This converted data is buffered in the workspace; processing large documents may have significant memory requirements. In line mode, the data is broken into individual lines and each is processed separately, potentially reducing memory demands.</p> <p>It is possible to save a workspace with an active <code>\u2395R</code> or <code>\u2395S</code> on the stack and execution can continue when the workspace is reloaded with the same interpreter version. Later versions of the interpreter may not remain compatible and may signal a <code>DOMAIN ERROR</code> with explanatory message in the status window if it is unable to continue execution.</p> <p>PCRE has a buffer length limit of 231 bytes (2GB). UTF-8 encodes each character using between 1 and 6 bytes (typically 1 or 3). In the very worst case, where every character is encoded in 6 bytes, the maximum block length which can be searched would be 357,913,940 characters.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#further-examples","title":"Further Examples","text":"<p>Several of the examples use the following vector as the input document:</p> <pre><code>      text\nTo be or not to be- that is the question:\nWhether 'tis nobler in the mind to suffer\nThe slings and arrows of outrageous fortune,\nOr to take arms against a sea of troubles\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#replace-all-upper-and-lower-case-vowels-by-x","title":"Replace all upper and lower-case vowels by 'X':","text":"<pre><code>       ('[aeiou]' \u2395R 'X' \u2360 'IC' 1) text\nTX bX Xr nXt tX bX- thXt Xs thX qXXstXXn:   \nWhXthXr 'tXs nXblXr Xn thX mXnd tX sXffXr   \nThX slXngs Xnd XrrXws Xf XXtrXgXXXs fXrtXnX,\nXr tX tXkX Xrms XgXXnst X sXX Xf trXXblXs   \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#replace-only-the-second-vowel-on-each-line-by-vowel","title":"Replace only the second vowel on each line by '\\VOWEL\\':","text":"<pre><code>       ('[aeiou]' \u2395R '\\\\VOWEL\\\\'\u2360('IC' 1)('ML' \u00af2)) text\nTo b\\VOWEL\\ or not to be- that is the question:   \nWheth\\VOWEL\\r 'tis nobler in the mind to suffer   \nThe sl\\VOWEL\\ngs and arrows of outrageous fortune,\nOr t\\VOWEL\\ take arms against a sea of troubles\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#case-fold-each-word","title":"Case fold each word:","text":"<pre><code>      ('(?&lt;first&gt;\\w)(?&lt;remainder&gt;\\w*)' \u2395R '\\u&lt;first&gt;\\l&lt;remainder&gt;') text\nTo Be Or Not To Be- That Is The Question:   \nWhether 'Tis Nobler In The Mind To Suffer   \nThe Slings And Arrows Of Outrageous Fortune,\nOr To Take Arms Against A Sea Of Troubles   \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#extract-only-the-lines-with-characters-or-in-upper-or-lower-case-on-them","title":"Extract only the lines with characters 'or' (in upper or lower case) on them:","text":"<pre><code>      \u2191('or' \u2395S '%' \u2360 ('IC' 1)('ML' 1)) text\nTo be or not to be\u2013 that is the question:   \nThe slings and arrows of outrageous fortune,\nOr to take arms against a sea of troubles \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#identify-which-lines-contain-the-word-or-in-upper-or-lower-case-on-them","title":"Identify which lines contain the word 'or' (in upper or lower case) on them:","text":"<pre><code>      ('\\bor\\b'\u2395S 2\u2360('IC' 1)('ML' 1))text\n0 3\n\n</code></pre> <p>Note the difference between the characters 'or' (which appear in 'fortune') and the word 'or'.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#place-every-non-space-sequence-of-characters-in-brackets","title":"Place every non-space sequence of characters in brackets:","text":"<pre><code>      ('[^\\s]+' \u2395R '(&amp;)' ) 'To be or not to be, that is the question'\n(To) (be) (or) (not) (to) (be,) (that) (is) (the) (question)\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#replace-all-sequences-of-one-or-more-spaces-by-newline-note-that-the-effect-of-this-is-dependent-on-the-input-format","title":"Replace all sequences of one or more spaces by newline. Note that the effect of this is dependent on the input format:","text":"<p>Character vector input results in a single character vector output with embedded newlines:</p> <pre><code>      ]display ('\\s+' \u2395R '\\r') 'To be or not to be, that is the question'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502To      \u2502\n\u2502be      \u2502\n\u2502or      \u2502\n\u2502not     \u2502\n\u2502to      \u2502\n\u2502be,     \u2502\n\u2502that    \u2502\n\u2502is      \u2502\n\u2502the     \u2502\n\u2502question\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>A vector of two character vectors as input results in a vector of 10 character vectors output:       ]display ('\\s+' \u2395R '\\r') 'To be or not to be,' 'that is the question' \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502To\u2502 \u2502be\u2502 \u2502or\u2502 \u2502not\u2502 \u2502to\u2502 \u2502be,\u2502 \u2502that\u2502 \u2502is\u2502 \u2502the\u2502 \u2502question\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#change-numerals-to-their-expanded-names-using-a-function","title":"Change numerals to their expanded names, using a function:","text":"<pre><code>\n     \u2207r\u2190f a;n\n[1]   n\u2190'zero' 'one' 'two' 'three' 'four'\n[2]   n,\u2190'five' 'six' 'seven' 'eight' 'nine'\n[3]   r\u2190' ',\u2283(\u234ea.Match)\u2193n\n     \u2207\n      verbose\u2190('[0-9]' \u2395R f)\n      verbose \u235527\u00d756\u00d787\n one three one five four four\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#swap-red-and-blue","title":"Swap 'red' and 'blue':","text":"<pre><code>      ('red' 'blue' \u2395R 'blue' 'red') 'red hat blue coat'\nblue hat red coat\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#convert-a-comma-separated-values-csv-file-so-that","title":"Convert a comma separated values (CSV) file so that","text":"<ul> <li>dates in the first field are converted from European format to ISO, and</li> <li>currency values are converted from Deutsche Marks (DEM) to Euros (DEM 1.95583 to \u20ac1).</li> </ul> <p>The currency conversion requires the use of a function. Note the nested use of <code>\u2395R</code>.</p> <p>Input file:</p> 01/03/1980,Widgets,DEM 10.20 02/04/1980,Bolts,DEM 61.75 17/06/1980,Nuts; special rate DEM 17.00,DEM 17.00 18/07/1980,Hammer,DEM 1.25 <p>Output file:</p> 1980-03-01,Widgets,\u20ac 5.21 1980-04-02,Bolts,\u20ac 31.57 1980-06-17,Nuts; special rate DEM 17.00,\u20ac 8.69 1980-07-18,Hammer,\u20ac 0.63 <pre><code>     \u2207 ret\u2190f a;d;m;y;v\n[1]    \u2395IO\u21900\n[2]    :Select a.PatternNum\n[3]    :Case 0\n[4]        d m y\u2190{a.Match[a.Offsets[\u2375+1]+\u2373a.Lengths[\u2375+1]]}\u00a8\u23733\n[5]        ret\u2190y,'-',m,'-',d,','\n[6]    :Else\n[7]        v\u2190\u234ea.Block[a.Offsets[1]+\u2373a.Lengths[1]]\n[8]        v\u00f7\u21901.95583\n[9]        ret\u2190',\u20ac ',('(\\d+\\.\\d\\d).*'\u2395R'\\1')\u2355v\n[10]   :EndSelect\n     \u2207\n</code></pre> <pre><code>      in \u2190 'x.csv' \u2395NTIE 0\n      out \u2190 'new.csv' \u2395NCREATE 0\n      dateptn\u2190'(\\d{2})/(\\d{2})/(\\d{4}),'\n      valptn\u2190',DEM ([0-9.]+)'\n      out (dateptn valptn \u2395R f) in\n      \u2395nuntie\u00a8in out\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#create-a-simple-profanity-filter-for-the-list-of-objectionable-words","title":"Create a simple profanity filter. For the list of objectionable words:","text":"<pre><code>       profanity\u2190'bleeding' 'heck'\n</code></pre> <p>first construct a pattern which will match the words:</p> <pre><code>      ptn\u2190(('^' '$' '\\r\\n') \u2395R '\\\\b(' ')\\\\b' '|'\n                           \u2395OPT 'Mode' 'D') profanity\n      ptn\n\\b(bleeding|heck)\\b\n</code></pre> <p>then a function that uses this pattern:</p> <pre><code>      sanitise\u2190ptn \u2395R '****' \u2395opt 1\n      sanitise '\"Heck\", I said'\n\"****\", I said\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/r/#replace-the-characters-or-with-u0-without-having-to-escape-the-backslash","title":"Replace the characters 'or' with '\\u0' without having to escape the backslash:","text":"<p>Escaping transformation strings can be a daunting task. To avoid doing so, one can simply enclose the string in braces. This is not a special feature, but just a consequence of how transformation functions are used.</p> <pre><code>      ('to' \u2395R {'\\u0'})text\nTo be or not \\u0 be\u2013 that is the question:\nWhether 'tis nobler in the mind \\u0 suffer\nThe slings and arrows of outrageous fortune,\nOr \\u0 take arms against a sea of troubles\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/refs/","title":"Cross References","text":"Cross References R\u2190\u2395REFS Y <p><code>Y</code> must be a simple character scalar or vector, identifying the name of a function or operator, or the object representation form of a function or operator (see \"Object Representation: \" on page 1).  <code>R</code> is a simple character matrix, with one name per row, of identified names in the function or operator in <code>Y</code> excluding distinguished names of system constants, variables or functions.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/refs/#example","title":"Example","text":"<pre><code>      \u2395VR'OPTIONS'\n     \u2207 OPTIONS;OPTS;INP\n[1]   \u235d REQUESTS AND EXECUTES AN OPTION\n[2]    OPTS \u2190'INPUT' 'REPORT' 'END'\n[3]   IN:INP\u2190ASK'OPTION:'\n[4]    \u2192EX\u2374\u2368(\u2282INP)\u220aOPTS\n[5]    'INVALID OPTION. SELECT FROM',OPTS \u22c4 \u2192IN\n[6]   EX:\u2192EX+OPTS\u2373\u2282INP\n[7]    INPUT \u22c4 \u2192IN\n[8]    REPORT \u22c4 \u2192IN\n[9]   END:\n     \u2207\n\n    \u2395REFS'OPTIONS'\nASK\nEND\nEX\nIN\nINP\nINPUT\nOPTIONS\nOPTS\nREPORT\n</code></pre> <p>If <code>Y</code> is locked or is an External Function, <code>R</code> contains its name only.  For example:</p> <pre><code>      \u2395LOCK 'OPTIONS' \u22c4 \u2395REFS 'OPTIONS'\nOPTIONS\n</code></pre> <p>If <code>Y</code> is the name of a primitive, external or derived function, <code>R</code> is an empty matrix with shape 0 0.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rl/","title":"Random Link","text":"Random Link \u2395RL <p><code>\u2395RL</code> is a 2-element vector. Its first element contains the  base or random number seed and its second element is an integer that identifies the random number generator that is currently  in use. Together these items define how the system generates random numbers using Roll and Deal.</p> <p>In a <code>clear ws</code> <code>\u2395RL</code> is <code>(\u236c 1)</code>. <code>\u2395RL</code> has Namespace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rl/#random-number-seed","title":"Random Number Seed","text":"<p>The facility to set the seed to a specific value provides the means to generate a repeatable sequence of random numbers, such as might be required by certain types of simulation modelling. This capability is not provided by RNG2.</p> <p>If the seed is set to 0, the seed is set randomly but may be retrieved and subsequently re-assigned to create a repeatable sequence.</p> <p>If the seed is set to <code>\u236c</code>, Dyalog is able to take advantage of certain optimisations which deliver maximum performance. In this case, the actual seed in use is intentionally hidden and <code>\u2395RL[1]</code> always reports <code>\u236c</code>, regardless of the Random Number Generator in use.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rl/#random-number-generators","title":"Random Number Generators","text":"<p>The 3 random number generators are listed in the table below. The 4th column of the table contains the values of seeds that may be assigned to them.</p> Id Name Algorithm Valid Seed Values 0 RNG0 Lehmer linear congruential generator. <code>0</code> , <code>\u236c</code> , or an integer in the range 1 to <code>\u00af2+2*31</code> 1 RNG1 Mersenne Twister. <code>0</code> , <code>\u236c</code> , an integer in the range 1 to <code>\u00af1+2*63</code> or a 625-element integer vector 2 RNG2 Operating System random number generator. <code>\u236c</code> <p>Note that assigning an invalid value to the seed will cause <code>DOMAIN ERROR</code>.</p> <p>The default random number generator in a <code>CLEAR WS</code> is 1 (Mersenne Twister). This algorithm RNG1 produces 64-bit values with good distribution.</p> <p>The Lehmer linear congruential generator RNG0 was the only random number generator provided in versions of Dyalog APL prior to Version 13.1. The implementation of this algorithm has several limitations including limited value range <code>(2*31)</code>, short period and non-uniform distribution (some values may appear more frequently than others). It is retained for backwards compatibility.</p> <p>Under Windows, the Operating System random number generator algorithm RNG2 uses the rand_s() function. Under UNIX/Linux it uses /dev/urandom.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rl/#random-number-sequences","title":"Random Number Sequences","text":"<p>Random number sequences may be predictable or not and  repeatable or not. A predictable and repeatable sequence is obtained by starting with the same specific value for the seed. A non-predictable sequence is obtained by starting with a seed which is itself chosen at random, but such a sequence is repeatable if the value of the seed (chosen at random) is visible. A non-predictable and non-repeatable sequence of random numbers is obtained where the initial seed is chosen completely at random and is unknown.</p> <p>Using RNG0 or RNG1:</p> <ul> <li>To obtain  an entirely predictable random sequence, set the seed to a non-zero value</li> <li>To obtain a non-predictable, but repeatable sequence, set the seed to <code>0</code></li> <li>To obtain a non-predictable, non-repeatable series of random numbers, set the seed to <code>\u236c</code></li> </ul> <p>RNG2 does not support a user modifiable random number seed, so when using this scheme, it is not possible to obtain a repeatable random number series and the seed must always be <code>\u236c</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rl/#implementation-note","title":"Implementation Note:","text":"<p><code>\u2395RL</code> does not behave quite like a regular 2-element variable; it has its own rules relating to assignment and reference.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rl/#reference","title":"Reference","text":"<p><code>\u2395RL</code> returns a 2-element vector whose second element identifies the scheme in use (0, 1 or 2).</p> <p>If  <code>\u2395RL[1]</code> is set to <code>\u236c</code>,  <code>\u2395RL[1]</code>always reports <code>\u236c</code>.</p> <p>Otherwise if the seed <code>\u2395RL[1]</code> is set to a value other than <code>\u236c</code>:</p> <ul> <li>using RNG0, <code>\u2395RL[1]</code> is an integer which  represents the seed for the next random number in the sequence.</li> <li>using RNG1, the system internally retains a block of 312 64-bit numbers which are used one by one to generate the results of roll and deal. When the first block of 312 have been used up, the system generates a second block. In this case, <code>\u2395RL[1]</code> is an integer vector of 32-bit numbers of length 625 (the first is an index into the block of 312) which represents the internal state of the random number generator. This means that, as with RNG0, you may save the value of  <code>\u2395RL</code> in a variable and reassign it later.</li> <li>Using RNG2, the seed is purely internal and <code>\u2395RL[1]</code> is always zilde.</li> <li>using RNG0, <code>\u2395RL[1]</code> is an integer which  represents the seed for the next random number in the sequence.</li> <li>using RNG1, the system internally retains a block of 312 64-bit numbers which are used one by one to generate the results of roll and deal. When the first block of 312 have been used up, the system generates a second block. In this case, <code>\u2395RL[1]</code> is an integer vector of 32-bit numbers of length 625 (the first is an index into the block of 312) which represents the internal state of the random number generator. This means that, as with RNG0, you may save the value of  <code>\u2395RL</code> in a variable and reassign it later.</li> <li>Using RNG2, the seed is purely internal and <code>\u2395RL[1]</code> is always zilde.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rl/#assignment","title":"Assignment","text":"<p><code>\u2395RL</code> may only be assigned in its entirety. Indexed and selective assignment may not be used to assign values to individual elements.</p> <p>To preserve compatibility with Versions of Dyalog prior to Version 15.0 (in which <code>\u2395RL</code> specifies just the seed) if the value assigned to <code>\u2395RL</code> represents a valid seed for the random number generator in use, it is taken to be the new seed. Otherwise, the value assigned to <code>\u2395RL</code> must be a 2-element vector, whose first item is the seed and whose second item is 0, 1 or 2 and specifies the random number generator to be used subsequently.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rl/#examples-specific-seeds-for-repeatable-sequences","title":"Examples (specific seeds for repeatable sequences)","text":"<pre><code>\n      )CLEAR\nclear ws\n      \u2395RL\u219016807 \n      10?10      \n4 1 6 5 2 9 7 10 3 8\n      5\u2191\u2283\u2395RL       \n10 0 16807 1819658750 \u00af355441828\n      X\u2190?1000\u23741000 \n      5\u2191\u2283\u2395RL       \n100 \u00af465541037 \u00af1790786136 \u00af205462449 996695303\n</code></pre> <pre><code>\n      \u2395RL\u219016807\n      10?10      \n4 1 6 5 2 9 7 10 3 8\n      Y\u2190?1000\u23741000 \n      X\u2261Y\n1\n      5\u2191\u2283\u2395RL       \n100 \u00af465541037 \u00af1790786136 \u00af205462449 996695303  \n</code></pre> <pre><code>\n      \u2395RL\u219016807 0 \u235d Select RNG0\n      \u2395RL\n16807 0\n      ?9 9 9\n2 7 5\n      ?9\n7\n      \u2395RL\n984943658 0\n\n      \u2395RL\u219016807\n      ?9 9 9\n2 7 5\n      ?9\n7\n      \u2395RL\n984943658 0\n</code></pre> <pre><code>\n      \u2395RL\u219016807 1 \u235d Select RNG1\n      5\u2191\u2283\u2395RL\n100 \u00af465541037 \u00af1790786136 \u00af205462449 996695303\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rl/#examples-0-seed","title":"Examples (0 seed)","text":"<p>When you set the seed to 0, a random seed is created for you:</p> <pre><code>      \u2395RL\u21900 0\n      \u2395RL\n865618822 0\n      \u2395RL\u21900\n      \u2395RL\n1100783275 0\n</code></pre> <p>Setting the seed to 0 gives you a new, unpredictable random sequence yet it is repeatable because you can retrieve (and subsequently re-use) the actual seed after you set it:</p> <pre><code>      ?10\u2374100\n14 22 18 30 42 22 71 32 32 12\n      \u2395RL\u21901100783275\n      ?10\u2374100\n14 22 18 30 42 22 71 32 32 12\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rl/#example-zilde","title":"Example (zilde)","text":"<p>When you set the seed to zilde, you get the same random initialisation as setting it to 0 but you can't retrieve the actual value of the seed. When it is  set to <code>\u236c</code> it is subsequently reported as <code>\u236c</code> and the internal value of the seed is hidden.</p> <pre><code>      \u2395RL\u2190\u236c\n      \u2395RL\n\u250c\u252c\u2500\u2510\n\u2502\u25020\u2502\n\u2514\u2534\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rsi/","title":"Space Indicator","text":"Space Indicator R\u2190\u2395RSI <p><code>R</code> is a vector of refs to the spaces from which functions in the state indicator were called <code>(\u2374\u2395RSI\u2190\u2192\u2374 \u2395NSI \u2190\u2192\u2374\u2395SI)</code>.</p> <p><code>\u2395RSI</code> and <code>\u2395 NSI</code> are identical except that <code>\u2395RSI</code> returns refs to the spaces whereas <code>\u2395NSI</code> returns their names. Put another way: <code>\u2395NSI \u2190\u2192\u2355\u00a8\u2395RSI``.</code></p> <p>Note that<code>\u2395RSI</code> returns refs to the spaces from which functions were called not those in which they are currently running.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rsi/#example","title":"Example","text":"<pre><code>      )OBJECTS\nxx      yy\n\n      \u2395VR 'yy.foo'\n     \u2207 r\u2190foo\n[1]    r\u2190\u2395SE.goo\n     \u2207                          \n      \u2395VR'\u2395SE.goo'\n     \u2207 r\u2190goo\n[1]    r\u2190\u2395SI,[1.5]\u2395RSI\n     \u2207\n\n      )CS xx\n#.xx\n      calling\u2190#.yy.foo\n      ]display calling\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2510      \u2502\n\u2502 \u2502goo\u2502 #.yy \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518      \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2510      \u2502\n\u2502 \u2502foo\u2502 #.xx \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518      \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rtl/","title":"Response Time Limit","text":"Response Time Limit \u2395RTL <p>A non-zero value in <code>\u2395RTL</code> places a time limit, in seconds, for input requested via <code>\u235e</code>, <code>\u2395ARBIN</code>, and <code>\u2395SR</code>.  <code>\u2395RTL</code> may be assigned any integer in the range 0 to 32767.  The value in a clear workspace is 0. <code>\u2395RTL</code> has Namespace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/rtl/#example","title":"Example","text":"<pre><code>      \u2395RTL\u21905 \u22c4 \u235e\u2190'FUEL QUANTITY?' \u22c4 R\u2190\u235e\nFUEL QUANTITY?\nTIMEOUT\n      \u2395RTL\u21905 \u22c4 \u235e\u2190'FUEL QUANTITY?' \u22c4 R\u2190\u235e\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/s/","title":"Search","text":"Search R\u2190{X}(A \u2395S B) Y <p>See \"Replace: \" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/save/","title":"Save Workspace","text":"Save Workspace {R}\u2190{X}\u2395SAVE Y <p><code>Y</code> must be a simple character scalar or vector that identifies a  full or relative path name to the file in which the workspace will be written.</p> <p>Unless the path specified by <code>Y</code> is a full pathname, it is taken to be relative to the current working directory which may be obtained by the expression: <code>\u22831 \u2395NPARTS ''</code>.</p> <p>The active workspace is saved with the  file name specified by  <code>Y</code>, whether or not a workspace file of that name already exists.</p> <p>A <code>DOMAIN ERROR</code> is reported if the name in <code>Y</code> :</p> <ul> <li>is not a valid workspace name</li> <li>is not a valid  file name</li> <li>refers to an unauthorised directory</li> <li>specifies an existing file that does not already contain a Dyalog workspace or session file</li> </ul> <p>The shy result <code>R</code> is a simple Boolean scalar 1. However, when the  workspace is subsequently loaded using <code>\u2395LOAD</code> and execution restarts, the result is 0, as described below.</p> <p>The optional left argument <code>X</code> is either 0 or 1. If <code>X</code> is omitted or 1, the saved version of the workspace has execution suspended at the point of exit from the <code>\u2395SAVE</code> function.  If the saved workspace is subsequently loaded by <code>\u2395LOAD</code>, execution is resumed, and the value 0 is returned if the result is used or assigned, or otherwise the result is suppressed. In this case, the latent expression value (<code>\u2395LX</code>) is ignored.</p> <p>If <code>X</code> is 0, the workspace is saved without any state indicator in effect. The effect is the same as if you first executed <code>)RESET</code> and then <code>)SAVE</code>. In this case, when the workspace is subsequently loaded, the value of the latent expression (<code>\u2395LX</code>) is honoured if applicable.</p> <p>As is the case for <code>)SAVE</code> (see \"Save Workspace: \" on page 1), monadic <code>\u2395SAVE</code> will fail and issue <code>DOMAIN ERROR</code> if any threads (other than the root thread 0) are running or if there are any Edit or Trace windows open. However, neither of these restrictions apply if the left argument <code>X</code> is 0.</p> <p>Note that the values of all system variables (including <code>\u2395SM</code>) and all GUI objects are saved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/save/#example","title":"Example","text":"<pre><code>      (\u2283'SAVED' 'ACTIVE' [\u2395IO+\u2395SAVE'TEMP']),' WS'\nACTIVE WS\n      \u2395LOAD 'TEMP'\nSAVED WS\n</code></pre> <p>Additional operations may be performed before saving the workspace. For further information, see Set Workspace Save Options on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sd/","title":"Screen Dimensions","text":"Screen Dimensions R\u2190\u2395SD <p><code>\u2395SD</code> is a 2-element integer vector containing the number of rows and columns on the screen, or in the USER window.</p> <p>For asynchronous terminals under UNIX, the screen size is taken from the terminal database terminfo or termcap.</p> <p>In window implementations of Dyalog APL, <code>\u2395SD</code> reports the current size (in characters) of the USER window or the current size of the SM object, whichever is appropriate.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/se/","title":"Session Namespace","text":"Session Namespace \u2395SE <p><code>\u2395SE</code> is a system namespace.  Its GUI components (MenuBar, ToolBar, and so forth) define the appearance and behaviour of the APL Session window and may be customised to suit individual requirements.</p> <p><code>\u2395SE</code> is maintained separately from the active workspace and is not affected by <code>)LOAD</code> or <code>)CLEAR</code>.  It is therefore useful for containing utility functions.  The contents of <code>\u2395SE</code> may be saved in and loaded from a .DSE file.</p> <p>See The Session Object on page 1 : The Session Object for further details.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-access-control/","title":"Set Access Control","text":"Set Access Control R\u2190X \u2395SVC Y <p>This system function sets access control on one or more shared variables.</p> <p><code>Y</code> is a character scalar, vector, or matrix containing names of shared variables.  Each name may optionally be paired with its surrogate.  If so, the surrogate must be separated from the name by at least one space.</p> <p><code>X</code> may be a 4-element Boolean vector which specifies the access control to be applied to all of the shared variables named in <code>Y</code>.  Alternatively, <code>X</code> may be a 4-column Boolean matrix whose rows specify the access control for the corresponding name in <code>Y</code>.  <code>X</code> may also be a scalar or a 1-element vector.  If so, it treated as if it were a 4-element vector with the same value in each element.</p> <p>Each shared variable has a current access control vector which is a 4-element Boolean vector.  A 1 in each of the four positions has the following impact :</p> <code>[1]</code> You cannot set a new value for the shared variable until after an intervening use or set by your partner. <code>[2]</code> Your partner cannot set a new value for the shared variable until after an intervening use or set by you. <code>[3]</code> You cannot use the value of the shared variable until after an intervening set by your partner. <code>[4]</code> Your partner cannot use the value of the shared variable until after an intervening set by you. <p>The effect of <code>\u2395SVC</code> is to reset the access control vectors for each of the shared variables named in <code>Y</code> by OR-ing the values most recently specified by your partner with the values in <code>X</code>.  This means that you cannot reset elements of the control vector which your partner has set to 1.</p> <p>Note that the initial value of your partner's access control vector is normally 0 0 0 0.  However, if it is a non-APL client application that has established a hot DDE link, its access control vector is defined to be 1 0 0 1.  This inhibits either partner from setting the value of the shared variable twice, without an intervening use (or set) by the other.  This prevents loss of data which is deemed to be desirable from the nature of the link.  (An application that requests a hot link is assumed to require every value of the shared variable, and not to miss any).  Note that APL's way of inhibiting another application from setting the value twice (without an intervening use) is to delay the acknowledgement of the DDE message containing the second value until the variable has been used by the APL workspace.  An application that waits for an acknowledgement will therefore hang until this happens.  An application that does not wait will carry on obliviously.</p> <p>The result <code>R</code> is a Boolean vector or matrix, corresponding to the structure of <code>X</code>, which contains the new access control settings.  If <code>Y</code> refers to a name which is not a shared variable, or if the surrogate name is mis-spelt, the corresponding value in <code>R</code> is <code>4\u23740</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-access-control/#examples","title":"Examples","text":"<pre><code>      1 0 0 1 \u2395SVC 'X'\n1 0 0 1\n\n      1 \u2395SVC 'X EXTNAME'\n1 1 1 1\n\n      (2 4\u23741 0 0 1 0 1 1 0) \u2395SVC \u2191'ONE' 'TWO'\n1 1 1 1\n0 1 1 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-external-variable/","title":"Set External Variable","text":"Set External Variable {R}\u2190X \u2395XT Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be a variable name.  <code>X</code> must be a simple character scalar or vector which is taken to be a file reference.  The name given by <code>Y</code> is identified as an EXTERNAL VARIABLE associated with an EXTERNAL ARRAY whose value may be stored in file identified by <code>X</code>. The shy result <code>R</code> has the same value as <code>X</code>.</p> <p>If <code>Y</code> is the name of a defined function or operator, a label or a namespace in the active workspace, a <code>DOMAIN ERROR</code> is reported.</p> <p>Attempts to assign namespace references or the <code>\u2395OR</code> of namespaces to an external array will result in a <code>DOMAIN ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-external-variable/#example","title":"Example","text":"<pre><code>      'EXT\\ARRAY' \u2395XT 'V'\n</code></pre> <p>If the file reference does not exist, the external variable has no value until a value is assigned:</p> <pre><code>      V\nVALUE ERROR\n      V\n      ^\n</code></pre> <p>A value assigned to an external variable is stored in file space, not within the workspace:</p> <pre><code>      \u2395WA\n2261186\n\n      V\u2190\u2373100000\n\n      \u2395WA\n2261186\n</code></pre> <p>There are no specific restrictions placed on the use of external variables.  They must conform to the normal requirements when used as arguments of functions or as operands of operators.  The essential difference between a variable and an external variable is that an external variable requires only temporary workspace for an operation to accommodate (usually) a part of its value.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-external-variable/#examples","title":"Examples","text":"<pre><code>      V\u2190\u23735\n      +/V\n15\n\n      V[3]\u2190\u2282'ABC'\n\n      V\n1 2  ABC  4 5\n\n      \u2374\u00a8V\n     3\n</code></pre> <p>Assignment allows the structure or the value of an external variable to be changed without fully defining the external array in the workspace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-external-variable/#examples_1","title":"Examples","text":"<pre><code>      V,\u2190\u22822 4\u2374\u23738\n\n      \u2374V\n6\n\n      V[6]\n1 2 3 4\n5 6 7 8\n\n      V[1 2 4 5 6]\u00d7\u219010\n\n      V\n10 20  ABC  40 50  10 20 30 40\n                   50 60 70 80\n</code></pre> <p>An external array is (usually) preserved in file space when the name of the external variable is disassociated from the file.  It may be re-associated with any valid variable name.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-external-variable/#example_1","title":"Example","text":"<pre><code>      \u2395EX'V'\n\n      'EXT\\ARRAY'\u2395XT'F'\n\n      F\n10 20  ABC  40 50  10 20 30 40\n                   50 60 70 80\n</code></pre> <p>In UNIX versions, if <code>X</code> is an empty vector, the external array is associated with a temporary file which is erased when the array is disassociated.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-external-variable/#example_2","title":"Example","text":"<pre><code>      ''\u2395XT'TEMP'\n\n      TEMP\u2190\u237310\n\n      +/TEMP\u00d7TEMP\n385\n\n      \u2395EX'TEMP'\n</code></pre> <p>An external array may be erased using the native file function: <code>\u2395NERASE</code>.</p> <p>In a multi-user environment (UNIX or a Windows LAN) a new file associated with an external array is created with access permission for owner read/write.  An existing file is opened for exclusive use (by the owner) if the permissions remain at this level.  If the access permissions allow any other users to read and write to the file, the file is opened for shared use.  In UNIX versions, access permissions may be modified using the appropriate Operating System command, or in Windows using the supplied function <code>XVAR</code> from the UTIL workspace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-monitor/","title":"Set Monitor","text":"Set Monitor {R}\u2190X \u2395MONITOR Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of a visible defined function or operator.</p> <p>Note that <code>\u2395MONITOR</code> does not apply to  dfns or dops.</p> <p><code>X</code> must be a simple non-negative integer scalar or vector.  <code>R</code> is a simple integer vector of non-negative elements.</p> <p><code>X</code> identifies the numbers of lines in the function or operator named by <code>Y</code> on which a monitor is to be placed.  Numbers outside the range of line numbers in the function or operator (other than <code>0</code>) are ignored.  The number <code>0</code> indicates that a monitor is to be placed on the function or operator as a whole.  The value of <code>X</code> is independent of <code>\u2395IO</code>.</p> <p><code>R</code> is a vector of numbers on which a monitor has been placed in ascending order.  The result is suppressed unless it is explicitly used or assigned. <code>R</code> will be empty for dfns and dops.</p> <p>The effect of <code>\u2395MONITOR</code> is to accumulate timing statistics for the lines for which the monitor has been set.  See \"Query Monitor: \" on page 1 for details.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-monitor/#examples","title":"Examples","text":"<pre><code>      +(0,\u237310) \u2395MONITOR 'FOO'\n0 1 2 3 4 5\n</code></pre> <p>Existing monitors are cancelled before new ones are set:</p> <pre><code>      +1 \u2395MONITOR 'FOO'\n1\n</code></pre> <p>All monitors may be cancelled by supplying an empty vector:</p> <pre><code>      \u236c \u2395MONITOR 'FOO'\n</code></pre> <p>Monitors may be set on a locked function or operator, but no information will be reported.  Monitors are saved with the workspace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-stop/","title":"Set Stop","text":"Set Stop {R}\u2190X \u2395STOP Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of a visible defined function or operator.  <code>X</code> must be a simple non-negative integer scalar or vector.  <code>R</code> is a simple integer vector of non-negative elements.  <code>X</code> identifies the numbers of lines in the function or operator named by <code>Y</code> on which a stop control is to be placed.  Numbers outside the range of line numbers in the function or operator (other than 0) are ignored.  The number 0 indicates that a stop control is to be placed immediately prior to exit from the function or operator.  If <code>X</code> is empty, all existing stop controls are cancelled.  The value of <code>X</code> is independent of <code>\u2395IO</code>.</p> <p><code>R</code> is a vector of the line numbers on which a stop control has been placed in ascending order.  The result is suppressed unless it is explicitly used or assigned.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-stop/#examples","title":"Examples","text":"<pre><code>      \u22a2(0,\u237310) \u2395STOP 'FOO'\n0 1\n</code></pre> <p>Existing stop controls in the function or operator named by <code>Y</code> are cancelled before new stop controls are set:</p> <pre><code>      \u22a21 \u2395STOP 'FOO'\n1\n</code></pre> <p>All stop controls may be cancelled by giving <code>X</code> an empty vector:</p> <pre><code>      \u2374'' \u2395STOP 'FOO'\n0\n\n      \u2374\u236c \u2395STOP 'FOO'\n0\n</code></pre> <p>Attempts to set stop controls in a locked function or operator are ignored.</p> <pre><code>      \u2395LOCK'FOO'\n\n      \u22a20 1 \u2395STOP'FOO'\n</code></pre> <p>The effect of <code>\u2395STOP</code> when a function or operator is invoked is to suspend execution at the beginning of any line in the function or operator on which a stop control is placed immediately before that line is executed, and immediately before exiting from the function or operator if a stop control of 0 is set.  Execution may be resumed by a branch expression.  A stop control interrupt (1001) may also be trapped - see \"Trap Event: \" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-stop/#example","title":"Example","text":"<pre><code>      \u2395FX'R\u2190FOO' 'R\u219010'\n\n      0 1 \u2395STOP'FOO'\n\n      FOO\nFOO[1]\n\n      R\nVALUE ERROR\n      R\n      ^\n\n      \u21921\nFOO[0]\n\n      R\n10\n\n      \u2192\u2395LC\n10\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-trace/","title":"Set Trace","text":"Set Trace {R}\u2190X \u2395TRACE Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of a visible defined function or operator.  <code>X</code> must be a simple non-negative integer scalar or vector.</p> <p><code>X</code> identifies the numbers of lines in the function or operator named by <code>Y</code> on which a trace control is to be placed.  Numbers outside the range of line numbers in the function or operator (other than 0) are ignored.  The number 0 indicates that a trace control is to be placed immediately prior to exit from the function or operator.  The value of <code>X</code> is independent of <code>\u2395IO</code>.</p> <p><code>R</code> is a simple integer vector of non-negative elements indicating the lines in the function or operator on which a trace control has been placed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-trace/#example","title":"Example","text":"<pre><code>      +(0,\u237310) \u2395TRACE'FOO'\n0 1\n</code></pre> <p>Existing trace controls in the function or operator named by <code>Y</code> are cancelled before new trace controls are set:</p> <pre><code>      + 1 \u2395TRACE'FOO'\n1\n</code></pre> <p>All trace controls may be cancelled by giving <code>X</code> an empty vector:</p> <pre><code>      \u2374\u236c \u2395TRACE 'FOO'\n0\n</code></pre> <p>Attempts to set trace controls in a locked function or operator are ignored.</p> <pre><code>      \u2395LOCK 'FOO'\n      +1 \u2395TRACE 'FOO'\n</code></pre> <p>The effect of trace controls when a function or operator is invoked is to display the result of each complete expression for lines with trace controls as they are executed, and the result of the function if trace control 0 is set.  If a line contains expressions separated by <code>\u22c4</code>, the result of each complete expression is displayed for that line after execution.</p> <p>The result of a complete expression is displayed even where the result would normally be suppressed.  In particular:</p> <ul> <li>the result of a branch statement is displayed;</li> <li>the result (pass-through value) of assignment is displayed;</li> <li>the result of a function whose result would normally be suppressed is displayed;</li> </ul> <p>For each traced line, the output from <code>\u2395TRACE</code> is displayed as a two element vector, the first element of which contains the function or operator name and line number, and the second element of which takes one of two forms.</p> <ul> <li>The result of the line, displayed as in standard output.</li> <li><code>\u2192</code> followed by a line number.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/set-trace/#example_1","title":"Example","text":"<pre><code>      \u2395VR 'DSL'\n     \u2207 R\u2190DSL SKIP;A;B;C;D\n[1]    A\u21902\u00d73+4\n[2]    B\u2190(2 3\u2374'ABCDEF')A\n[3]    \u2192NEXT\u00d7\u2373SKIP\n[4]    'SKIPPED LINE'\n[5]   NEXT:C\u2190'one' \u22c4 D\u2190'two'\n[6]   END:R\u2190C D\n     \u2207\n\n      (0,\u23736) \u2395TRACE 'DSL'\n\n      DSL 1\n DSL[1]  14\n DSL[2]   ABC   14\n          DEF\n DSL[3]  \u21925\n DSL[5]  one\n DSL[5]  two\n DSL[6]   one   two\n DSL[0]   one   two\n one  two\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/shadow/","title":"Shadow Name","text":"Shadow Name {R}\u2190\u2395SHADOW Y <p><code>Y</code> must be a simple character scalar, vector or matrix or a vector of nested scalar  of character vectors identifying one or more APL names.  For a simple vector <code>Y</code>, names are separated by one or more blanks.  For a matrix <code>Y</code>, each row is taken to be a single name.</p> <p>Each valid name in <code>Y</code> is shadowed in the most recently invoked defined function or operator, as though it were included in the list of local names in the function or operator header.  The class of the name becomes 0 (undefined).  The name ceases to be shadowed when execution of the shadowing function or operator is completed.  Shadow has no effect when the state indicator is empty.</p> <p>The shy result <code>R</code> is a Boolean vector of 1s with the same length as the number of names in <code>Y</code>.</p> <p>If a name is ill-formed, or if it is the name of a system constant or system function, <code>DOMAIN ERROR</code> is reported.</p> <p>If the name of a top-level GUI object is shadowed, it is made inactive.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/shadow/#example","title":"Example","text":"<pre><code>      \u2395VR'RUN'\n     \u2207 NAME RUN FN\n[1]   \u235d Runs function named &lt;NAME&gt; defined\n[2]   \u235d from representation form &lt;FN&gt;\n[3]    \u2395SHADOW NAME\n[4]    \u234e\u2395FX FN\n     \u2207\n\n      0 \u2395STOP 'RUN' \u235d stop prior RUN exiting\n\n      'FOO' RUN 'R\u2190FOO' 'R\u219010'\n10\n\nRUN[0]\n\n      )SINL\n#.RUN[0]*       FOO     FN      NAME\n\n      \u2192\u2395LC\n\n      FOO\nVALUE ERROR\n      FOO\n      ^\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/shared-variable-offer/","title":"Shared Variable Offer","text":"Shared Variable Offer R\u2190X \u2395SVO Y <p>This system function offers to share one or more variables with another APL workspace or with another application.  Shared variables are implemented using Dynamic Data Exchange (DDE) and may be used to communicate with any other application that supports this protocol.  See Interface Guide for further details.</p> <p><code>Y</code> is a character scalar, vector or matrix.  If it is a vector it contains a name and optionally an external name or surrogate.  The first name is the name used internally in the current workspace.  The external name is the name used to make the connection with the partner and, if specified, must be separated from the internal name by one or more blanks.  If the partner is another application, the external name corresponds to the DDE item specified by that application.  If the external name is omitted, the internal name is used instead.  The internal name must be a valid APL name and be either undefined or be the name of a variable.  There are no such restrictions on the content of the external name.</p> <p>Instead of an external name, <code>Y</code> may contain the special symbol <code>'\u234e'</code> separated from the (internal) name by a blank.  This is used to implement a mechanism for sending DDE_EXECUTE messages, and is described at the end of this section.</p> <p>If <code>Y</code> is a scalar, it specifies a single 1-character name.  If <code>Y</code> is a matrix, each row of <code>Y</code> specifies a name and an optional external name as for the vector case.</p> <p>The left argument <code>X</code> is a character vector or matrix.  If it is a vector, it contains a string that defines the protocol, the application to which the shared variable is to be connected, and the topic of the conversation.  These three components are separated by the characters <code>':'</code> and <code>'|'</code> respectively.  The protocol is currently always <code>'DDE'</code>, but future implementations of Dyalog APL may support additional communications protocols if applicable.  If <code>Y</code> specifies more than one name, <code>X</code> may be a vector or a matrix with one row per row in <code>Y</code>.</p> <p>If the shared variable offer is a general one (server), <code>X</code>, or the corresponding row of <code>X</code>, should just contain <code>'DDE:'</code>. In this case, Dyalog automatically defines the application name and topic to be dyalog and <code>\u2395WSID</code> respectively.</p> <p>The result <code>R</code> is a numeric scalar or vector with one element for each name in <code>Y</code> and indicates the \"degree of coupling\".  A value of 2 indicates that the variable is fully coupled (via a warm or hot DDE link) with a shared variable in another APL workspace, or with a DDE item in another application.  A value of 1 indicates that there is no connection, or that the second application rejected a warm link.  In this case, a transfer of data may have taken place (via a cold link) but the connection is no longer open.  Effectively, APL treats an application that insists on a cold link as if it immediately retracts the sharing after setting or using the value, whichever is appropriate.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/shared-variable-offer/#examples","title":"Examples","text":"<pre><code>      'DDE:' \u2395SVO 'X'\n1\n\n      'DDE:' \u2395SVO 'X SALES_92'\n1\n\n      'DDE:' \u2395SVO \u2191'X SALES_92' 'COSTS_92'\n1 1\n\n      'DDE:DYALOG|SERV_WS' \u2395SVO 'X'\n2\n\n      'DDE:EXCEL|SHEET1' \u2395SVO 'DATA R1C1:R10C12'\n2\n</code></pre> <p>A special syntax is used to provide a mechanism for sending DDE_EXECUTE messages to another application.  This case is identified by specifying the <code>'\u234e'</code> symbol in place of the external name.  The subsequent assignment of a character vector to a variable shared with the external name of <code>'\u234e'</code> causes the value of the variable to be transmitted in the form of a DDE_EXECUTE message.  The value of the variable is then reset to 1 or 0 corresponding to a positive or negative acknowledgement from the partner.  In most (if not all) applications, commands transmitted in DDE_EXECUTE messages must be enclosed in square brackets <code>[]</code>.  For details, see the relevant documentation for the external application.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/shared-variable-offer/#examples_1","title":"Examples:","text":"<pre><code>      'DDE:EXCEL|SYSTEM' \u2395SVO 'X \u234e'\n2\n\n      X\u2190'[OPEN(\"c:\\mydir\\mysheet.xls\")]'\n      X\n1\n\n      X\u2190'[SELECT(\"R1C1:R5C10\")]'\n      X\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/si/","title":"State Indicator","text":"State Indicator R\u2190\u2395SI <p><code>R</code> is a nested vector of vectors giving the names of the functions or operators in the execution stack.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/si/#example","title":"Example","text":"<pre><code>\n      )SI\n#.PLUS[2]*\n.\n#.MATDIV[4]\n#.FOO[1]*\n\u234e\n\n      \u2395SI\n PLUS  MATDIV  FOO\n\n      (\u2374\u2395LC)=\u2374\u2395SI\n1\n</code></pre> <p>If execution stops in a callback function, <code>\u2395DQ</code> will appear on the stack, and may occur more than once</p> <pre><code>      )SI\n#.ERRFN[7]*\n\u2395DQ\n#.CALC\n\u2395DQ\n#.MAIN\n</code></pre> <p>To edit the function on the top of the stack:</p> <pre><code>      \u2395ED \u2283\u2395SI\n</code></pre> <p>The name of the function which called this one:</p> <pre><code>      \u22831\u2193\u2395SI\n</code></pre> <p>To check if the function <code>\u2206N</code> is pendent:</p> <pre><code>     ((\u2282\u2206N)\u220a1\u2193\u2395SI)/'Warning : ',\u2206N,' is pendent'\n</code></pre> <p>See also \"Extended State Indicator: \" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/signal/","title":"Signal Event","text":"Signal Event {R}\u2190{X}\u2395SIGNAL Y <p><code>Y</code> must be a scalar or vector.</p> <p>If <code>Y</code> is a an empty vector nothing is signalled.</p> <p>If <code>Y</code> is a vector of more than one element, all but the first element are ignored.</p> <p><code>R</code> has the same value as <code>Y</code>.</p> <p><code>Y=0</code> is a special form of <code>\u2395SIGNAL</code>, the side effect of which is to reset the values of certain system constants. It is described further down this section.</p> <p>If the first element of <code>Y</code> is a simple integer it is taken to be an event number. Permitted values are 0, 1-999 and 1006.  <code>X</code> is an optional text message.   If present, <code>X</code> must be a simple character scalar or vector, or an object reference. If <code>X</code> is omitted or is  empty, the standard event message for the corresponding event number  is assumed. . If there is no standard message, a message of the form <code>ERROR NUMBER n</code> is composed, where <code>n</code> is the event number in <code>Y</code>. Values outside the permitted range will result in a <code>DOMAIN ERROR</code>.</p> <p>If the first element of <code>Y</code> is a 2 column matrix or a vector of 2 element vectors of name/values pairs, then it is considered to be a set of values to be used to override the default values in a new instance of <code>\u2395DMX</code>. Any other value for the first element of <code>Y</code> will result in a <code>DOMAIN ERROR</code>.</p> <p>The names in the error specification must all  appear in a system-generated <code>\u2395DMX</code>, otherwise a <code>DOMAIN ERROR</code> will be issued. For each name specified, the default value in the new instance of <code>\u2395DMX</code> is replaced with the value specified. <code>EN</code> must be one of the names in the error specification. Attempting to specify certain names, including <code>InternalLocation</code> and <code>DM</code>, will result in a <code>DOMAIN ERROR</code>. The value which is to be assigned to a name must be appropriate to the name in question.</p> <p>Dyalog may enhance <code>\u2395DMX</code> in future, thus potentially altering the list of valid and/or assignable names.</p> <p>If the first element of <code>Y</code> is an array of name/value pairs then  specifying any value for <code>X</code> will result in a <code>DOMAIN ERROR</code>.</p> <p>The effect of the system function is to interrupt execution.  The state indicator is cut back to exit from the function or operator containing the line that invoked <code>\u2395SIGNAL</code>, or is cut back to exit the Execute (<code>\u234e</code>) expression that invoked <code>\u2395SIGNAL</code>. If executed within a nested dfn, the state indicator is cut back to exit from the capsule containing the line that invoked <code>\u2395SIGNAL</code>. An error is then generated.</p> <p>An error interrupt may be trapped if the system variable <code>\u2395TRAP</code> is set to intercept the event.  Otherwise, the standard system action is taken (which may involve cutting back the state indicator further if there are locked functions or operators in the state indicator).  The standard event message is replaced by the text given in <code>X</code>, if present.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/signal/#example","title":"Example","text":"<pre><code>      \u2395VR'DIVIDE'\n     \u2207 R\u2190A DIVIDE B;\u2395TRAP\n[1]    \u2395TRAP\u219011 'E' '\u2192ERR'\n[2]    R\u2190A\u00f7B \u22c4 \u21920\n[3]   ERR:'DIVISION ERROR' \u2395SIGNAL 11\n     \u2207\n\n      2 4 6 DIVIDE 0\nDIVISION ERROR\n      2 4 6 DIVIDE 0\n     ^\n</code></pre> <p>If you are using the Microsoft .NET Framework, you may use <code>\u2395SIGNAL</code> to throw an exception by specifying a value of 90 in <code>Y</code>. In this case, if you specify the optional left argument <code>X</code>, it must be a reference to a .NET object that is or derives from the Microsoft .NET class System.Exception. The following example illustrates a constructor function <code>CTOR</code> that expects to be called with a value for <code>\u2395IO</code> (0 or 1)</p> <pre><code>     \u2207 CTOR IO;EX\n[1]    :If IO\u220a0 1\n[2]        \u2395IO\u2190IO\n[3]    :Else\n[4]        EX\u2190ArgumentException.New'IO must be 0 or 1'\n[5]        EX \u2395SIGNAL 90\n[6]    :EndIf\n     \u2207\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/signal/#signal-0-reset-error-related-system-constants","title":"\u2395SIGNAL 0: Reset error-related system constants","text":"<p>If <code>Y</code> is a simple integer with the value 0, <code>\u2395SIGNAL</code> does not interrupt execution, but merely returns the value 0. The side effect of calling <code>\u2395SIGNAL 0</code> is to reset the values of <code>\u2395DM</code>, <code>\u2395DMX</code>, <code>\u2395EN</code> and <code>\u2395EXCEPTION</code> to their default values. <code>\u2395SIGNAL 0</code> is the only form of <code>\u2395SIGNAL</code> which can be used to reset the aforementioned system constants; including a left argument or using a name/value pair right argument of <code>\u2395SIGNAL</code> will result in a <code>DOMAIN ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/signal/#example_1","title":"Example:","text":"<pre><code>  \u00f70\n</code></pre> <p>DOMAIN ERROR: Divide by zero       \u00f70      \u2227       \u2395DM \u2395EN \u2395DMX \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250211\u2502 EM       DOMAIN ERROR   \u2502 \u2502\u2502DOMAIN ERROR\u2502      \u00f70\u2502     \u2227\u2502\u2502  \u2502 Message  Divide by zero \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502  \u2502                         \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u22a2\u2395SIGNAL 0 0       \u2395DM \u2395EN \u2395DMX \u250c\u252c\u2500\u252c\u2510 \u2502\u25020\u2502\u2502 \u2514\u2534\u2500\u2534\u2518</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/signal/#further-examples","title":"Further examples","text":""},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/signal/#example-1","title":"Example 1","text":"<pre><code>  'Hello'\u2395SIGNAL 200\n</code></pre> <p>Hello       'Hello'\u2395SIGNAL 200      \u2227       \u2395DMX  EM       Hello   Message            </p> <pre><code>  \u2395DM\n</code></pre> <p>Hello        'Hello'\u2395SIGNAL 200       \u2227 </p> <pre><code>  \u2395SIGNAL\u2282\u2282('EN' 200)\n</code></pre> <p>ERROR 200       \u2395SIGNAL\u2282\u2282('EN' 200)      \u2227</p> <pre><code>  \u2395DMX\n</code></pre> <p>EM       ERROR 200   Message    </p> <pre><code>  \u2395DM\n</code></pre> <p>ERROR 200        \u2395SIGNAL\u2282\u2282('EN' 200)       \u2227 </p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/signal/#example-2","title":"Example 2","text":"<pre><code>  \u2395SIGNAL\u2282('EN' 200)('Vendor' 'Andy')('Message' 'My error')\n</code></pre> <p>ERROR 200: My error       \u2395SIGNAL\u2282('EN' 200)('Vendor' 'Andy')('Message' 'My error')      \u2227</p> <pre><code>      \u2395DMX\n EM       ERROR 200 \n Message  My error\n</code></pre> <pre><code>      \u236a\u2395DMX.(EN EM Vendor)\n       200 \n ERROR 200 \n      Andy \n</code></pre> <p>Be aware of the following case, in which the argument has not been sufficiently nested:</p> <pre><code>  \u2395SIGNAL\u2282('EN' 200)\n</code></pre> <p>DOMAIN ERROR: Unexpected name in signalled \u2395DMX specification       \u2395SIGNAL\u2282('EN' 200)      \u2227</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/size/","title":"Size of Object","text":"Size of Object R\u2190\u2395SIZE Y <p><code>Y</code> must be a simple character scalar, vector or matrix, or a vector of character vectors containing a list of names. <code>R</code> is a simple integer vector of non-negative elements with the same length as the number of names in <code>Y</code>.</p> <p>If the name in <code>Y</code> identifies an object with an active referent, the workspace required in bytes by that object is returned in the corresponding element of <code>R</code>.  Otherwise, 0 is returned in that element of <code>R</code>.</p> <p>The result returned for an external variable is the space required to store the external array.  The result for a system constant, variable or function is 0.  The result returned for a GUI object gives the amount of workspace needed to store it, but excludes the space required for its children.</p> <p>Note: Wherever possible, Dyalog APL shares the whole or part of a workspace object rather than generates a separate copy; however <code>\u2395SIZE</code> reports the size as though nothing is shared. <code>\u2395SIZE</code> also includes the space required for the interpreter's internal information about the object in question.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/size/#examples","title":"Examples","text":"<pre><code>      \u2395VR 'FOO'\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n\n      A\u2190\u237310\n\n      'EXT/ARRAY' \u2395XT'E' \u22c4 E\u2190\u237320\n\n      \u2395SIZE 'A' 'FOO' 'E' 'UND'\n28 76 120 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sm/","title":"Screen Map","text":"Screen Map \u2395SM <p><code>\u2395SM</code> is a system variable that defines a character-based user interface (as opposed to a graphical user interface).  In versions of Dyalog APL that support asynchronous terminals, <code>\u2395SM</code> defines a form that is displayed on the USER SCREEN.  The implementation of <code>\u2395SM</code> in \"window\" environments is compatible with these versions.  In Dyalog APL/X, <code>\u2395SM</code> occupies its own separate window on the display, but is otherwise equivalent.  In versions of Dyalog APL with GUI support, <code>\u2395SM</code> either occupies its own separate window (as in Dyalog APL/X) or, if it exists, uses the window assigned to the SM object.  This allows <code>\u2395SM</code> to be used in a GUI application in conjunction with other GUI components.</p> <p><code>\u2395SM</code> has workspace scope.</p> <p>In general <code>\u2395SM</code> is a nested matrix containing between 3 and 13 columns.  Each row of <code>\u2395SM</code> represents a field; each column a field attribute.</p> <p>The columns have the following meanings:</p> Column Description Default 1 Field Contents N/A 2 Field Position - Top Row N/A 3 Field Position - Left Column N/A 4 Window Size - Rows 0 5 Window Size - Columns 0 6 Field Type 0 7 Behaviour 0 8 Video Attributes 0 9 Active Video Attributes <code>\u00af</code> 1 10 Home Element - Row 1 11 Home Element - Column 1 12 Scrolling Group - Vertical 0 13 Scrolling Group - Horizontal 0 <p>With the exception of columns 1 and 8, all elements in <code>\u2395SM</code> are integer scalar values.</p> <p>Elements in column 1 (Field Contents) may be:</p> <ul> <li>A numeric scalar</li> <li>A numeric vector</li> <li>A 1-column numeric matrix</li> <li>A character scalar</li> <li>A character vector</li> <li>A character matrix (rank 2)</li> <li>A nested matrix defining a sub-form whose structure and contents must conform to that defined for <code>\u2395SM</code> as a whole.  This definition is recursive.  Note however that a sub-form must be a matrix - a vector is not allowed.</li> </ul> <p>Elements in column 8 (Video Attributes) may be:</p> <ul> <li>An integer scalar that specifies the appearance of the entire field.</li> <li>An integer array of the same shape as the field contents.  Each element specifies the appearance of the corresponding element in the field contents.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sm/#screen-management-async-terminals","title":"Screen Management (Async Terminals)","text":"<p>Dyalog APL for UNIX systems on tty devices (async terminals or on terminal emulators) manages two screens; the SESSION screen and the USER screen.  If the SESSION screen is current, an assignment to <code>\u2395SM</code> causes the display to switch to the USER screen and show the form defined by <code>\u2395SM</code>.</p> <p>Note that the RIDE does not directly support <code>\u2395SM</code>, although it is possible to display <code>\u2395SM</code> in the tty session to which a RIDE client is connected.</p> <p>If the USER screen is current, any change in the value of <code>\u2395SM</code> is immediately reflected by a corresponding change in the appearance of the display.  However, an assignment to <code>\u2395SM</code> that leaves its value unchanged has no effect.</p> <p>Dyalog APL automatically switches to the SESSION screen for default output, if it enters immediate input mode (6-space prompt), or through use of <code>\u2395</code> or <code>\u235e</code>.  This means that typing</p> <pre><code>      \u2395SM \u2190 expression\n</code></pre> <p>in the APL session will cause the screen to switch first to the USER screen, display the form defined by <code>\u2395SM</code>, and then switch back to the SESSION screen to issue the 6-space prompt.  This normally happens so quickly that all the user sees is a flash on the screen.To retain the USER screen in view it is necessary to issue a call to <code>\u2395SR</code> or for APL to continue processing. e.g.</p> <pre><code>      \u2395SM \u2190 expression  \u22c4  \u2395SR 1\n</code></pre> <p>or</p> <pre><code>      \u2395SM \u2190 expression  \u22c4  \u2395DL 5\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sm/#screen-management-window-versions","title":"Screen Management (Window Versions)","text":"<p>In Dyalog APL/X, and optionally in Dyalog APL/W, <code>\u2395SM</code> is displayed in a separate USER WINDOW on the screen.  In an end-user application this may be the only Dyalog APL window.  However, during development, there will be a SESSION window, and perhaps EDIT and TRACE windows too.</p> <p>The USER Window will only accept input during execution of <code>\u2395SR</code>.  It is otherwise \"output-only\".  Furthermore, during the execution of <code>\u2395SR</code> it is the only active window, and the SESSION, EDIT and TRACE Windows will not respond to user input.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sm/#screen-management-gui-versions","title":"Screen Management (GUI Versions)","text":"<p>In versions of Dyalog APL that provide GUI support, there is a special SM object that defines the position and size of the window to be associated with <code>\u2395SM</code>.  This allows character-mode applications developed for previous versions of Dyalog APL to be migrated to and integrated with GUI environments without the need for a total re-write.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sm/#effect-of-localisation","title":"Effect of Localisation","text":"<p>Like all system variables (with the exception of <code>\u2395TRAP</code>) <code>\u2395SM</code> is subject to \"pass-through localisation\".  This means that a localised <code>\u2395SM</code> assumes its value from the calling environment.  The localisation of <code>\u2395SM</code> does not, of itself therefore, affect the appearance of the display.  However, reassignment of a localised <code>\u2395SM</code> causes the new form to overlay rather than replace whatever forms are defined further down the stack.  The localisation of <code>\u2395SM</code> thus provides a simple method of defining pop-up forms, help messages, etc.</p> <p>The user may edit the form defined by <code>\u2395SM</code> using the system function <code>\u2395SR</code>.  Under the control of <code>\u2395SR</code> the user may change the following elements in <code>\u2395SM</code> which may afterwards be referenced to obtain the new values.</p> Column 1 Field Contents Column 10 Home Element - Row (by scrolling vertically) Column 11 Home Element - Column (by scrolling horizontally)"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sr/","title":"Screen Read","text":"Screen Read R\u2190{X}\u2395SR Y <p><code>\u2395SR</code> is a system function that allows the user to edit or otherwise interact with the form defined by <code>\u2395SM</code>.</p> <p>In versions of Dyalog APL that support asynchronous terminals, if the current screen is the SESSION screen, <code>\u2395SR</code> immediately switches to the USER SCREEN and displays the form defined by <code>\u2395SM</code>.</p> <p>In Dyalog APL/X, <code>\u2395SR</code> causes the input cursor to be positioned in the USER window.  During execution of <code>\u2395SR</code>, only the USER Window defined by <code>\u2395SM</code> will accept input and respond to the keyboard or mouse.  The SESSION and any EDIT and TRACE Windows that may appear on the display are dormant.</p> <p>In versions of Dyalog APL with GUI support, a single SM object may be defined.  This object defines the size and position of the <code>\u2395SM</code> window, and allows <code>\u2395SM</code> to be used in conjunctions with other GUI components.  In these versions, <code>\u2395SR</code> acts as a superset of <code>\u2395DQ</code> (see \"Dequeue Events: \" on page 1) but additionally controls the character-based user interface defined by <code>\u2395SM</code>.</p> <p><code>Y</code> is an integer vector that specifies the fields which the user may visit.  In versions with GUI support, <code>Y</code> may additionally contain the names of GUI objects with which the user may also interact.</p> <p>If specified, <code>X</code> may be an enclosed vector of character vectors defining <code>EXIT_KEYS</code> or a 2-element nested vector defining <code>EXIT_KEYS</code> and the <code>INITIAL_CONTEXT</code>.</p> <p>The result <code>R</code> is the <code>EXIT_CONTEXT</code>.</p> <p>Thus the 3 uses of <code>\u2395SR</code>are:</p> <pre><code>     EXIT_CONTEXT\u2190\u2395SR FIELDS\n\n     EXIT_CONTEXT\u2190(\u2282EXIT_KEYS)\u2395SR FIELDS\n\n     EXIT_CONTEXT\u2190(EXIT_KEYS)(INITIAL_CONTEXT)\u2395SR FIELDS\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sr/#fields","title":"FIELDS","text":"<p>If an element of <code>Y</code> is an integer scalar, it specifies a field as the index of a row in <code>\u2395SM</code> (if <code>\u2395SM</code> is a vector it is regarded as having 1 row).</p> <p>If an element of <code>Y</code> is an integer vector, it specifies a sub-field.  The first element in <code>Y</code> specifies the top-level field as above.  The next element is used to index a row in the form defined by <code>\u2283\u2395SM[Y[1];1]</code> and so forth.</p> <p>If an element of <code>Y</code> is a character scalar or vector, it specifies the name of a top-level GUI object with which the user may also interact.  Such an object must be a \"top-level\" object, i.e. the <code>Root</code> object ('<code>.'</code>) or a <code>Form</code> or pop-up <code>Menu</code>.  This feature is implemented ONLY in versions of Dyalog APL with GUI support.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sr/#exit_keys","title":"EXIT_KEYS","text":"<p>Each element of <code>EXIT_KEYS</code> is a 2-character code from the Input Translate Table for the keyboard.  If the user presses one of these keys, <code>\u2395SR</code> will terminate and return a result.</p> <p>If <code>EXIT_KEYS</code> is not specified, it defaults to:</p> <pre><code>      'ER' 'EP' 'QT'\n</code></pre> <p>which (normally) specifies ,  and ."},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sr/#initial_context","title":"INITIAL_CONTEXT","text":"<p>This is a vector of between 3 and 6 elements with the following meanings and defaults:</p> Element Description Default 1 Initial Field N/A 2 Initial Cursor Position - Row N/A 3 Initial Cursor Position - Col N/A 4 Initial Keystroke <code>''</code> 5 (ignored) N/A 6 Changed Field Flags 0 <p>Structure of  INITIAL_CONTEXT</p> <p><code>INITIAL_CONTEXT[1]</code> specifies the field in which the cursor is to be placed.  It is an integer scalar or vector, and must be a member of <code>Y</code>.  It must not specify a field which has <code>BUTTON</code> behaviour (64), as the cursor is not allowed to enter such a field.</p> <p><code>INITIAL_CONTEXT[2 3]</code> are integer scalars which specify the initial cursor position within the field in terms of row and column numbers.</p> <p><code>INITIAL_CONTEXT[4]</code> is either empty, or a 2-element character vector specifying the initial keystroke as a code from the Input Translate Table for the keyboard.</p> <p><code>INITIAL_CONTEXT[5]</code> is ignored.  It is included so that the <code>EXIT_CONTEXT</code> result of one call to <code>\u2395SR</code> can be used as the <code>INITIAL_CONTEXT</code> to a subsequent call.</p> <p><code>INITIAL_CONTEXT[6]</code> is a Boolean scalar or vector the same length as <code>Y</code>.  It specifies which of the fields in <code>Y</code> has been modified by the user.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sr/#exit_context","title":"EXIT_CONTEXT","text":"<p>The result <code>EXIT_CONTEXT</code> is a 6 or 9-element vector whose first 6 elements have the same structure as the <code>INITIAL_CONTEXT</code>.  Elements 7-9 only apply to those versions of Dyalog APL that provide mouse support.</p> Element Description 1 Final Field 2 Final Cursor Position - Row 3 Final Cursor Position - Col 4 Terminating Keystroke 5 Event Code 6 Changed Field Flags 7 Pointer Field 8 Pointer Position - Row 9 Pointer Position - Col <p>Structure of the Result of <code>\u2395SR</code></p> <p><code>EXIT_CONTEXT[1]</code> contains the field in which the cursor was when <code>\u2395SR</code> terminated due to the user pressing an exit key or due to an event occurring.  It is an integer scalar or vector, and a member of <code>Y</code>.</p> <p><code>EXIT_CONTEXT[2 3]</code> are integer scalars which specify the row and column position of the cursor within the field <code>EXIT_CONTEXT[1]</code> when <code>\u2395SR</code> terminated.</p> <p><code>EXIT_CONTEXT[4]</code> is a 2-element character vector specifying the last keystroke pressed by the user before <code>\u2395SR</code> terminated.  Unless <code>\u2395SR</code> terminated due to an event, <code>EXIT_CONTEXT[4]</code> will contain one of the exit keys defined by <code>X</code>.  The keystroke is defined in terms of an Input Translate Table code.</p> <p><code>EXIT_CONTEXT[5]</code> contains the sum of the event codes that caused <code>\u2395SR</code> to terminate.  For example, if the user pressed a mouse button on a <code>BUTTON</code> field (event code 64) and the current field has <code>MODIFIED</code> behaviour (event code 2) <code>EXIT_CONTEXT[5]</code> will have the value 66.</p> <p><code>EXIT_CONTEXT[6]</code> is a Boolean scalar or vector the same length as <code>Y</code>.  It specifies which of the fields in <code>Y</code> has been modified by the user during this <code>\u2395SR</code>, ORed with <code>INITIAL_CONTEXT[6]</code>.  Thus if the <code>EXIT_CONTEXT</code> of one call to <code>\u2395SR</code> is fed back as the <code>INITIAL_CONTEXT</code> of the next, <code>EXIT_CONTEXT[6]</code> records the fields changed since the start of the process.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/sr/#exit_context-window-versions","title":"EXIT_CONTEXT (Window Versions)","text":"<p><code>\u2395SR</code> returns a 9-element result ONLY if it is terminated by the user pressing a mouse button.  In this case:</p> <p><code>EXIT_CONTEXT[7]</code> contains the field over which the mouse pointer was positioned when the user pressed a button. It is an integer scalar or vector, and a member of <code>Y</code>.</p> <p><code>EXIT_CONTEXT[8 9]</code> are integer scalars which specify the row and column position of the mouse pointer within the field <code>EXIT_CONTEXT[7]</code> when <code>\u2395SR</code> terminated.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/src/","title":"Source","text":"Source R\u2190\u2395SRC Y <p><code>\u2395SRC</code> returns the script that defines the scripted object   <code>Y</code>.</p> <p><code>Y</code> must be a reference to a scripted object. Scripted objects include Classes, Interfaces and scripted Namespaces.</p> <p><code>R</code> is a vector of character vectors containing the script that was used to define <code>Y</code>.</p> <pre><code>\n      )ed \u25cbMyClass\n</code></pre> <pre><code>\n:Class MyClass\n\u2207 r\u2190foo arg\n:Access public shared\nr\u21901+arg\n\u2207\n:EndClass\n\n      z\u2190\u2395SRC MyClass\n      \u2374z\n6\n      \u2374\u00a8z\n 14  15  27  13  5  9 \n      \u236az\n :Class MyClass\n     \u2207 r\u2190foo arg\n       :Access public shared\n       r\u21901+arg\n     \u2207\n :EndClass\n</code></pre> <p>Note: The only two ways to permanently alter the source of a scripted object are to change the object in the editor, or by refixing it using <code>\u2395FIX</code>. A useful technique to ensure that a scripted object is in sync with its source is to <code>\u2395FIX \u2395SRC ref</code>, where <code>ref</code> is an object reference..</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/stack/","title":"State Indicator Stack","text":"State Indicator Stack R\u2190\u2395STACK <p><code>R</code> is a two-column matrix, with one row per entry in the state indicator.</p> <p>Column 1 :<code>\u2395OR</code> form of user defined functions or operators on the state indicator.  Space (<code>\u2395UCS 32</code>) for entries that are not user defined functions or operators.</p> <p>Column 2 :Indication of the type of the item on the stack.</p> <code>space</code> user defined function or operator <code>\u234e</code> execute level <code>\u2395</code> evaluated input <code>*</code> desk calculator level <code>\u2395DQ</code> in callback function <code>other</code> primitive operator"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/stack/#example","title":"Example","text":"<pre><code>\n      )SI\n#.PLUS[2]*\n.\n#.MATDIV[4]\n#.FOO[1]*\n\u234e\n\n      \u2395STACK\n         *\n\u2207PLUS\n         .\n\u2207MATDIV\n         *\n\u2207FOO\n         \u234e\n         *\n\n      \u2374\u2395STACK\n8 2\n\n      (\u2374\u2395LC)=1\u2191\u2374\u2395STACK\n0\n</code></pre> <p>Pendent defined functions and operators may be edited in Dyalog APL with no resulting SI damage.  However, only the visible definition is changed; the pendent version on the stack is retained until its execution is complete.  When the function or operator is displayed, only the visible version is seen.  Hence <code>\u2395STACK</code> is a tool which allows the user to display the form of the actual function or operator being executed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/stack/#example_1","title":"Example","text":"<p>To display the version of <code>MATDIV</code> currently pendent on the stack:</p> <pre><code>\n      \u2283\u2395STACK[4;1]\n     \u2207 R\u2190A MATDIV B\n[1]   \u235d Divide matrix A by matrix B\n[2]    C\u2190A\u2339B\n[3]   \u235d Check accuracy\n[4]    D\u2190\u230a0.5+A PLUS.TIMES B\n     \u2207\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/start-unix-auxiliary-processor/","title":"Start UNIX Auxiliary Processor","text":"Start UNIX Auxiliary Processor {R}\u2190X \u2395SH Y <p>Used dyadically, <code>\u2395SH</code> starts an Auxiliary Processor. The effect, as far as the APL user is concerned, is identical under both Windows and UNIX although there are differences in the method of implementation. <code>\u2395SH</code> is a synonym of <code>\u2395CMD</code> Either function may be used in either environment (UNIX or Windows) with exactly the same effect. This section describes the behaviour of <code>\u2395SH</code> and <code>\u2395CMD</code> under UNIX. See \"Start Windows Auxiliary Processor: \" on page 1 for a discussion of the behaviour of these system functions under Windows.</p> <p>Although it is still possible for users to create their own APs, Dyalog strongly recommends creating shared libraries/DLLs instead.</p> <p><code>X</code> must be a simple character vector. <code>Y</code> may be a simple character scalar or vector, or a nested character vector.</p> <p><code>\u2395SH</code> loads the Auxiliary Processor from the file named by <code>X</code> using a search-path defined by the environment variable WSPATH.</p> <p>The shy result <code>R</code> is the process id of the Auxiliary Processor task.</p> <p>The effect of starting an AP is that one or more external functions are defined in the workspace. These appear as locked functions and may be used in exactly the same way as regular defined functions.</p> <p>When an external function is used in an expression, the argument(s) (if any) are piped to the AP for processing. If the function returns a result, APL halts while the AP is processing and waits for the result. If not it continues processing in parallel.</p> <p>The syntax of dyadic <code>\u2395SH</code> is similar to the UNIX execl(2) system call, where '<code>taskname</code>' is the name of the auxiliary processor to be executed and <code>arg0</code> through <code>argn</code> are the parameters of the calling line to be passed to the task, viz.</p> <pre><code>\n      'taskname' \u2395SH 'arg0' 'arg1' ... 'argn'\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/start-unix-auxiliary-processor/#examples","title":"Examples","text":"<pre><code>\n      'xutils' \u2395SH 'xutils' 'ss' 'dbr'\n      '/bin/sh' \u2395SH 'sh' '-c' 'adb test'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/start-windows-auxiliary-processor/","title":"Start Windows Auxiliary Processor","text":"Start Windows Auxiliary Processor {R}\u2190X \u2395CMD Y <p>Used dyadically, <code>\u2395CMD</code> starts an Auxiliary Processor.  The effect, as far as the APL workspace is concerned, is identical under both Windows and UNIX, although the method of implementation differs.  <code>\u2395CMD</code> is a synonym of <code>\u2395SH</code>.  Either function may be used in either environment (Windows or UNIX) with exactly the same effect.  <code>\u2395CMD</code> is probably more natural for the Windows user.  This section describes the behaviour of <code>\u2395CMD</code> and <code>\u2395SH</code> under Windows.  See \"Examples\" on page 1 for a discussion of the behaviour of these system functions under UNIX.</p> <p><code>X</code> must be a simple character vector containing the name (or pathname) of a Dyalog APL Auxiliary Processor (AP). Although it is possible for users to create their own APs, Dyalog recommends that user write their own DLLs/shared libraries instead.</p> <p><code>Y</code> may be a simple character scalar or vector, or a vector of character vectors.  Under Windows the contents of <code>Y</code> are ignored.</p> <p><code>\u2395CMD</code> loads the Auxiliary Processor into memory.  If no other APs are currently running, <code>\u2395CMD</code> also allocates an area of memory for communication between APL and its APs.</p> <p>The shy result <code>R</code> is the process id of the Auxiliary Processor task.</p> <p>The effect of starting an AP is that one or more external functions are defined in the workspace.  These appear as locked functions and may be used in exactly the same way as regular defined functions.</p> <p>When an external function is used in an expression, the argument(s) (if any) are passed to the AP for processing via the communications area described above.  APL halts whilst the AP is processing, and waits for a result.  Under Windows, unlike under UNIX, it is not possible for external functions to run in parallel with APL.</p> <p>Although it is still possible for users to create their own APs, Dyalog strongly recommends creating shared libraries/DLLs instead.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/state/","title":"State of Object","text":"State of Object R\u2190\u2395STATE Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of an APL object or a system variable. The result returned is a nested vector of 4 elements as described below. <code>\u2395STATE</code> supplies information about shadowed or localised objects that is otherwise unobtainable.</p> <code>1\u2283R</code> Boolean vector, element set to 1 if and only if this level shadows <code>Y</code> . Note: <code>(\u23741\u2283R)=\u2374\u2395LC</code> <code>2\u2283R</code> Numeric vector giving the stack state of this name as it entered this level. Note: <code>(\u23742\u2283R)=\u2374\u2395LC</code> 0=not on stack 1=suspended 2=pendent (may also be suspended) 3=active (may also be pendent or suspended) <code>3\u2283R</code> Numeric vector giving the name classification of <code>Y</code> as it entered this level. Note: <code>(\u23743\u2283R)=+/1\u2283R</code> <code>4\u2283R</code> Vector giving the contents of <code>Y</code> before it was shadowed at this level. Note: <code>(\u23744\u2283R)=+/0\u22603\u2283R</code>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/state/#example","title":"Example","text":"<pre><code>\n      \u2395FMT\u2218\u2395OR\u00a8'FN1' 'FN2' 'FN3'\n    \u2207 FN1;A;B;C      \u2207 FN2;A;C               \u2207 FN3;A\n[1]   A\u21901        [1]   A\u2190'HELLO'         [1]   A\u2190100\n[2]   B\u21902        [2]   B\u2190'EVERYONE'      [2]   \u2218\n[3]   C\u21903        [3]   C\u2190'HOW ARE YOU?'      \u2207\n[4]   FN2        [4]  FN3\n    \u2207                \u2207\n\n      )SI\n#.FN3[2]*\n#.FN2[4]\n#.FN1[4]\n\n      \u2395STATE 'A'\n 1 1 1  0 0 0  2 2 0   HELLO  1\n\n       \u2395FMT\u2218\u2395OR\u00a8'foo' 'goo'\n      \u2207 foo;\u2395IO       \u2207 goo;\u2395IO     \n [1]    \u2395IO\u21900    [1]    \u2395IO\u21901       \n [2]    goo      [2]    \u2395STATE'\u2395IO' \n      \u2207               \u2207             \n\n       foo\n 1 1  0 0  \u00af1 \u00af1  0 1 \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/svq/","title":"Shared Variable Query","text":"Shared Variable Query R\u2190\u2395SVQ Y <p>This system function is implemented for compatibility with other versions of APL but currently performs no useful function.  Its purpose is to obtain a list of outstanding shared variable offers made to you, to which you have not yet responded.</p> <p>Using DDE as the communication protocol, it is not possible to implement <code>\u2395SVQ</code> effectively.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/svr/","title":"Shared Variable Retract Offer","text":"Shared Variable Retract Offer R\u2190\u2395SVR Y <p>This system function terminates communication via one or more shared variables, or aborts shared variable offers that have not yet been accepted.</p> <p><code>Y</code> is a character scalar, vector or matrix.  If it is a vector it contains a shared variable name and optionally its external name or surrogate separated from it by one of more blanks.  If <code>Y</code> is a scalar, it specifies a single 1-character name.  If <code>Y</code> is a matrix, each row of <code>Y</code> specifies a name and an optional external name as for the vector case.</p> <p>The result <code>R</code> is vector whose length corresponds to the number of names specified by Y, indicating the level of sharing of each variable after retraction.</p> <p>See \"Shared Variable State: \" on page 1 for further information on the possible states of a shared variable.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/svs/","title":"Shared Variable State","text":"Shared Variable State R\u2190\u2395SVS Y <p>This system function returns the current state of one or more shared variables.</p> <p><code>Y</code> is a character scalar, vector or matrix.  If it is a vector it contains a shared variable name and optionally its external name or surrogate separated from it by one of more blanks.  If <code>Y</code> is a scalar, it specifies a single 1-character name.  If <code>Y</code> is a matrix, each row of <code>Y</code> specifies a name and an optional external name as for the vector case.</p> <p>If <code>Y</code> specifies a single name, the result <code>R</code>is a 4-element vector indicating its current state.  If <code>Y</code> specifies more than one name, <code>R</code> is a matrix whose rows indicate the current state of the variable specified by the corresponding row in <code>Y</code>.</p> <p>There are four possible shared variable states:</p> <code>0 0 1 1</code> means that you and your partner are both aware of the current value, and neither has since reset it.  This is also the initial value of the state when the link is first established. <code>1 0 1 0</code> means that you have reset the shared variable and your partner has not yet used it.  This state can only occur if both partners are APL workspaces. <code>0 1 0 1</code> means that your partner has reset the shared variable but that you have not yet used it. <code>0 0 0 0</code> the name is not that of a shared variable"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/svs/#examples","title":"Examples","text":"<pre><code>      \u2395SVS 'X'\n0 1 0 1\n\n      \u2395SVS \u2191'X SALES' 'Y' 'JUNK'\n0 0 1 1\n1 0 1 0\n0 0 0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/talloc/","title":"Allocate Token Range","text":"Allocate Token Range {R}\u2190{X} \u2395TALLOC Y <p><code>Y</code> is either a single integer or a 2-element vector. The first item in <code>Y</code> is 0, 1, 2 or \u00af1 and indicates the type of operation to perform. If the first item is 1, the optional second item is a character vector.</p> <p>The optional left argument  <code>X</code> identifies an existing allocated range of token numbers <code>n</code> where <code>(n\u2264X)\u2227(X&lt;n+1</code>. <code>X</code> must be a scalar.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/talloc/#allocation-first-element-of-y-is-1","title":"Allocation (First element of Y is 1)","text":"<p>If the first element of <code>Y</code> is 1,  the result <code>R</code> is a positive integer that identifies a range of numbers that may be used as token types for <code>\u2395TPUT</code> and <code>\u2395TGET</code>. That range is defined as the set of floating-point numbers between <code>R</code> and <code>R+1</code> (but not the integer end-points). Negated values of these number may also be used.</p> <p>In this case, the optional <code>Y[2]</code> is an arbitrary character vector that serves as a description for the allocated range of tokens.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/talloc/#de-allocation-y-is-1","title":"De-allocation (Y is \u00af1)","text":"<p>If <code>Y</code> is <code>\u00af1</code>, <code>\u2395TALLOC</code> releases a previously allocated range of tokens identified by the left-argument <code>X</code>. The result <code>R</code> is a shy <code>\u236c</code>.</p> <p>To succeed, this range must have previously been allocated, not freed by de-allocation, and must be inactive, i.e. its tokens must not currently be  in the token pool or in use by a <code>\u2395TGET</code>. If not, <code>\u2395TALLOC</code> will signal a <code>DOMAIN ERROR</code>.</p> <p>A de-allocated range becomes free for subsequent re-allocation by <code>\u2395TALLOC</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/talloc/#querying-a-description-y-is-0","title":"Querying a description (Y is 0)","text":"<p><code>Y</code> is 0, <code>\u2395TALLOC</code> returns a non-shy result <code>R</code> containing the description for a currently allocated range of tokens identified by the left-argument <code>X</code>.</p> <p>If <code>X</code> does not represent a currently allocated range, <code>\u2395TALLOC</code> will signal a <code>DOMAIN ERROR</code>.</p> <p>If <code>X</code> is omitted, the result <code>R</code> is a vector of 2-element vectors identifying the range and description of all currently allocated ranges.</p> <p>Descriptions that were not defined are returned as empty character vectors.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/talloc/#querying-the-token-pool-y-is-2","title":"Querying  the Token Pool (Y is 2)","text":"<p><code>Y</code> is 2, <code>\u2395TALLOC</code> returns a non-shy result <code>R</code> containing the list of tokens in the token pool that fall in the range specified by the left-argument <code>X</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/talloc/#examples","title":"Examples","text":"<pre><code>       \u2395\u2190trg\u2190\u2395TALLOC 1 'cats'\n1\n       \u2395TALLOC 0\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u25021\u2502cats\u2502\u2502\n\u2502\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2395TPUT trg+.1 .2 .3\n      \u2395TPUT -trg+.9\n      \u2395TPOOL             \n1.1 1.2 1.3 \u00af1.9\n\n      \u2395TGET trg+.1 .2 .3 .9\n\n      1 \u2395TALLOC \u00af1 \u235d Try to de-allocate the range     \nDOMAIN ERROR\n      1 \u2395TALLOC \u00af1 \n        \u2227\n      1 \u2395TALLOC 2  \u235d Failed due to \u00af1.9 token\n\u00af1.9\n      \u2395TGET \u00af1.9   \u235d Remove the in-exaustible  \u00af1.9 token\n      1 \u2395TALLOC 2\n\n      1 \u2395TALLOC \u00af1 \u235d De-allocation now works   \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tc/","title":"Terminal Control","text":"Terminal Control (\u2395ML) <p><code>\u2395TC</code> is a deprecated feature and is replaced by <code>\u2395UCS</code> (see note).</p> <p><code>\u2395TC</code> is a simple three element vector.  If <code>\u2395ML&lt;3</code> this is ordered as follows:</p> <code>\u2395TC[1]</code> Backspace <code>\u2395TC[2]</code> Linefeed <code>\u2395TC[3]</code> Newline <p>Note that <code>\u2395TC\u2261\u2395AV[1+\u23733]</code> for <code>\u2395ML&lt;3</code> .</p> <p>If <code>\u2395ML\u22653</code>the order of the elements of <code>\u2395TC</code> is instead compatible with IBM's APL2:</p> <code>\u2395TC[1]</code> Backspace <code>\u2395TC[2]</code> Newline <code>\u2395TC[3]</code> Linefeed <p>Elements of <code>\u2395TC</code> beyond 3 are not defined but are reserved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tc/#note","title":"Note","text":"<p>With the introduction of <code>\u2395UCS</code> in Version 12.0, the use of <code>\u2395TC</code> is discouraged and it is strongly recommended that you generate control characters using <code>\u2395UCS</code> instead. This recommendation holds true even if you continue to use the Classic Edition.</p> Control Character Old New Backspace <code>\u2395TC[1]</code> <code>\u2395UCS 8</code> Linefeed <code>\u2395TC[2] (\u2395ML&lt;3) \u2395TC[3] (\u2395ML\u22653)</code> <code>\u2395UCS 10</code> Newline <code>\u2395TC[3] (\u2395ML&lt;3) \u2395TC[2] (\u2395ML\u22653)</code> <code>\u2395UCS 13</code>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tcnums/","title":"Thread Child Numbers","text":"Thread Child Numbers R\u2190\u2395TCNUMS Y <p><code>Y</code> must be a simple array of integers representing thread numbers.</p> <p>The result <code>R</code> is a simple integer vector of the child threads of each thread of <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tcnums/#examples","title":"Examples","text":"<pre><code>      \u2395TCNUMS 0\n2 3\n\n      \u2395TCNUMS 2 3\n4 5 6 7 8 9\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tget/","title":"Get Tokens","text":"Get Tokens {R}\u2190{X} \u2395TGET Y <p><code>Y</code> must be a simple numeric scalar or vector that specifies one or more tokens, each with a specific non-zero token type, that are to be retrieved from the pool. Non-integer values in <code>Y</code> must fall within a range that has been allocated using <code>\u2395TALLOC</code>.</p> <p><code>X</code> is an optional time-out value in seconds.</p> <p>Shy result <code>R</code> is a scalar or vector containing the values of the tokens of type <code>Y</code> that have been retrieved from the token pool.</p> <p>Note that types of the tokens in the pool may be positive or negative, and the elements of <code>Y</code> may also be positive or negative.</p> <p>A request (<code>\u2395TGET</code>) for a positive token will be satisfied by the presence of a token in the pool with the same positive or negative type. If the pool token has a positive type, it will be removed from the pool. If the pool token has a negative type, it will remain in the pool. Negativelytyped tokens will therefore satisfy an infinite number of requests for their positive equivalents. Note that a request for a positive token will remove one if it is present, before resorting to its negative equivalent</p> <p>A request for a negative token type will only be satisfied by the presence of a negative token type in the pool, and that token will be removed.</p> <p>If, when a thread calls <code>\u2395TGET</code>, the token pool satisfies all of the tokens specified by <code>Y</code>, the function returns immediately with a (shy) result that contains the values associated with the pool tokens. Otherwise, the function will block (wait) until all of the requested tokens are present or until a time-out (as specified by <code>X</code>) or a weak interrupt occurs.</p> <p>For example, if the pool contains only tokens of type 2:</p> <pre><code>    \u2395TGET 2 4        \u235d blocks waiting for a 4-token ...\n</code></pre> <p>The <code>\u2395TGET</code> operation is atomic in the sense that no tokens are taken from the pool until all of the requested types are present. While this last example is waiting for a 4-token, other threads could take any of the remaining 2-tokens.</p> <p>Note also, that repeated items in the right argument are distinct. The following will block until there are at least 3 <code>\u00d7</code> 1.9-tokens in the pool:</p> <pre><code>    \u2395TGET 3/1.9       \u235d wait for 3 \u00d7 2-tokens ...\n</code></pre> <p>The pool is administered on a first-in-first-out basis. This is significant only if tokens of the same type are given distinct values. For example:</p> <pre><code>    \u2395TGET \u2395TPOOL             \u235d empty pool.\n\n    'ABCDE'\u2395TPUT\u00a82 2 3 2 3  \u235d pool some tokens.\n\n    \u22a2\u2395TGET 2 3\nAC\n\n    \u22a2\u2395TGET 2 3\nBE\n</code></pre> <p><code>R</code> is an empty numeric vector <code>\u236c</code> (zilde) if a timeout or a weak interrupt occurs.</p> <p>Beware - the following statement will wait forever and can only be terminated by an interrupt.</p> <pre><code>    \u2395TGET 0       \u235d wait forever ...\n</code></pre> <p>Note too that if a thread waiting to <code>\u2395TGET</code> tokens is <code>\u2395TKILL</code>ed, the thread disappears without removing any tokens from the pool. Conversely, if a thread that has removed tokens from the pools is <code>\u2395TKILL</code>ed, the tokens are not returned to the pool.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/this/","title":"This Space","text":"This Space R\u2190\u2395THIS <p><code>\u2395THIS</code> returns a reference to the current namespace, i.e. to the space in which it is referenced.</p> <p>If <code>NC9</code> is a reference to any object whose name-class is <code>9</code>, then:</p> <pre><code>      NC9\u2261NC9.\u2395THIS\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/this/#examples","title":"Examples","text":"<pre><code>      \u2395THIS\n#\n      'X'\u2395NS ''\n      X.\u2395THIS\n#.X\n     'F'\u2395WC'Form'\n     'F.B'\u2395WC'Button'\n      F.B.\u2395THIS\n#.F.B\n\n      Polly\u2190\u2395NEW Parrot\n      Polly.\u2395THIS\n#.[Parrot]\n</code></pre> <p>An Instance may use <code>\u2395THIS</code> to obtain a reference to its own Class:</p> <pre><code>    Polly.(\u2283\u2283\u2395CLASS \u2395THIS)\n#.Parrot\n</code></pre> <p>or a function (such as a Constructor or Destructor) may identify or enumerate all other Instances of the same Class:</p> <pre><code>      Polly.(\u2374\u2395INSTANCES\u2283\u2283\u2395CLASS \u2395THIS)\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tid/","title":"Current Thread Identity","text":"Current Thread Identity R\u2190\u2395TID <p><code>R</code> is a simple integer scalar whose value is the number of the current thread.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tid/#examples","title":"Examples","text":"<pre><code>      \u2395TID     \u235d Base thread number\n0\n\n      \u234e&amp;'\u2395TID' \u235d Thread number of async \u234e.\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tkill/","title":"Kill Thread","text":"Kill Thread {R}\u2190{X}\u2395TKILL Y <p><code>Y</code> must be a simple array of integers representing thread numbers to be terminated. <code>X</code> is a Boolean single, defaulting to 1, which indicates that all descendant threads should also be terminated.</p> <p>The shy result <code>R</code> is a vector of the numbers of all threads that have been terminated.</p> <p>The base thread 0 is always excluded from the cull.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tkill/#examples","title":"Examples","text":"<pre><code>      \u2395TKILL 0            \u235d Kill background threads.\n\n      \u2395TKILL \u2395TID         \u235d Kill self and descendants.\n\n      0 \u2395TKILL \u2395TID       \u235d Kill self only.\n\n      \u2395TKILL \u2395TCNUMS \u2395TID \u235d Kill descendants.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tname/","title":"Current Thread Name","text":"Current Thread Name \u2395TNAME <p>The system variable <code>\u2395TNAME</code> reports and sets the name of the current APL thread. This name is used to identify the thread in the Tracer.</p> <p>The default value of <code>\u2395TNAME</code> is an empty character vector. <code>\u2395TNAME</code> has workspace scope.</p> <p>You may set <code>\u2395TNAME</code> to any valid character vector, but it is recommended that control characters (such as <code>\u2395AV[\u2395IO]</code> ) be avoided.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tname/#example","title":"Example:","text":"<pre><code>      \u2395TNAME\u2190'Dylan'\n      \u2395TNAME\nDylan\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tnums/","title":"Thread Numbers","text":"Thread Numbers R\u2190\u2395TNUMS <p><code>\u2395TNUMS</code> reports the numbers of all current threads.</p> <p><code>R</code> is a simple integer vector of the base thread and all its living descendants.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tnums/#example","title":"Example","text":"<pre><code>      \u2395TNUMS\n0 2 4 5 6 3 7 8 9\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tpool/","title":"Token Pool","text":"Token Pool R\u2190\u2395TPOOL <p><code>R</code> is a simple scalar or vector containing the token types for each of the tokens that are currently in the token pool.</p> <p>The following (<code>\u2395ML=0</code>) function returns a 2-column snapshot of the contents of the pool. It does this by removing and replacing all of the tokens, restoring the state of the pool exactly as before. Coding it as a single expression guarantees that <code>snap</code> is atomic and cannot disturb running threads.</p> <pre><code>      snap\u2190{(\u2395TGET \u2375){(\u2349\u2191\u2375 \u237a) \u22a3 \u237a \u2395TPUT\u00a8\u2375}\u2375}\n\n      snap \u2395TPOOL   snap \u2395TPOOL\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021.1 \u25021.1      \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021.2 \u25021.2      \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021.3 \u25021.3      \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502\u00af1.9\u2502 no limit\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>See also: Querying  the Token Pool (Y is 2) on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tput/","title":"Put Tokens","text":"Put Tokens {R}\u2190{X} \u2395TPUT Y <p><code>Y</code> must be a simple numeric scalar or vector of non-zero token types. Non-integer values in <code>Y</code> must fall within a range that has been allocated using <code>\u2395TALLOC</code>.</p> <p><code>X</code> is an optional array of values to be stored in each of the tokens specified by <code>Y</code>.</p> <p>Shy result <code>R</code> is a vector of thread numbers (if any) unblocked by the <code>\u2395TPUT</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tput/#examples","title":"Examples","text":"<pre><code>    \u2395TPUT 2 3 2       \u235d put a 2-token, a 3-token and\n                        another 2-token into the pool.\n\n    88 \u2395TPUT 2        \u235d put another 2-token into the pool\n                        this token has the value 88.\n\n    'Hello'\u2395TPUT \u00af1.9 \u235d put a \u00af1.9-token into the pool\n                        with the value 'Hello'.\n</code></pre> <p>If <code>X</code> is omitted, the value associated with each of the tokens added to the pool is the same as its type.</p> <p>Note that you cannot put a 0-token into the pool; 0-s are removed from <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/trap/","title":"Trap Event","text":"Trap Event \u2395TRAP <p>This is a non-simple vector.  An item of <code>\u2395TRAP</code> specifies an action to be taken when one of a set of events occurs.  <code>\u2395TRAP</code> has workspace scope.</p> <p>An item of <code>\u2395TRAP</code> is a 2 or 3 element vector whose items are simple scalars or vectors in the following order:</p> <ol> <li>an integer vector whose value is one or more event codes selected from the list in the Figure on the following two pages.</li> <li>a character scalar whose value is an action code selected from the letters <code>C</code>, <code>E</code>, <code>N</code> or <code>S</code>.</li> <li>if element 2 is the letter <code>C</code> or <code>E</code>, this item is a character vector forming a valid APL expression or series of expressions separated by <code>\u22c4</code>.  Otherwise, this element is omitted.</li> </ol> <p>An EVENT may be an APL execution error, an interrupt by the user or the system, a control interrupt caused by the <code>\u2395STOP</code> system function, or an event generated by the <code>\u2395SIGNAL</code> system function.</p> <p>When an event occurs, the system searches for a trap definition for that event.  The most local <code>\u2395TRAP</code> value is searched first, followed by successive shadowed values of <code>\u2395TRAP</code>, and finally the global <code>\u2395TRAP</code> value.  Separate actions defined in a single <code>\u2395TRAP</code> value are searched from left to right.  If a trap definition for the event is found, the defined action is taken.  Otherwise, the normal system action is followed.</p> <p>The ACTION code identifies the nature of the action to be taken when an associated event occurs.  Permitted codes are interpreted as follows:</p> <p>Trappable Event Codes</p> <code>C</code> Cutback The state indicator is 'cut back' to the environment in which the <code>\u2395TRAP</code> is locally defined (or to immediate execution level).  The APL expression in element 3 of the same <code>\u2395TRAP</code> item is then executed. <code>E</code> Execute The APL expression in element 3 of the same <code>\u2395TRAP</code> item is executed in the environment in which the event occurred. <code>N</code> Next The event is excluded from the current <code>\u2395TRAP</code> definition.  The search will continue through further localised definitions of <code>\u2395TRAP</code> . <code>S</code> Stop Stops the search and causes the normal APL action to be taken in the environment in which the event occurred. Code Event <code>0</code> <code>Any event in range 1-999</code> <code>1</code> <code>WS FULL</code> <code>2</code> <code>SYNTAX ERROR</code> <code>3</code> <code>INDEX ERROR</code> <code>4</code> <code>RANK ERROR</code> <code>5</code> <code>LENGTH ERROR</code> <code>6</code> <code>VALUE ERROR</code> <code>7</code> <code>FORMAT ERROR</code> <code>10</code> <code>LIMIT ERROR</code> <code>11</code> <code>DOMAIN ERROR</code> <code>12</code> <code>HOLD ERROR</code> <code>16</code> <code>NONCE ERROR</code> <code>18</code> <code>FILE TIE ERROR</code> <code>19</code> <code>FILE ACCESS ERROR</code> <code>20</code> <code>FILE INDEX ERROR</code> <code>21</code> <code>FILE FULL</code> <code>22</code> <code>FILE NAME ERROR</code> <code>23</code> <code>FILE DAMAGED</code> <code>24</code> <code>FILE TIED</code> <code>25</code> <code>FILE TIED REMOTELY</code> <code>26</code> <code>FILE SYSTEM ERROR</code> <code>28</code> <code>FILE SYSTEM NOT AVAILABLE</code> <code>30</code> <code>FILE SYSTEM TIES USED UP</code> <code>31</code> <code>FILE TIE QUOTA USED UP</code> <code>32</code> <code>FILE NAME QUOTA USED UP</code> <code>34</code> <code>FILE SYSTEM NO SPACE</code> <code>35</code> <code>FILE ACCESS ERROR - CONVERTING FILE</code> <code>38</code> <code>FILE COMPONENT DAMAGED</code> <code>52</code> <code>FIELD CONTENTS RANK ERROR</code> <code>53</code> <code>FIELD CONTENTS TOO MANY COLUMNS</code> <code>54</code> <code>FIELD POSITION ERROR</code> <code>55</code> <code>FIELD SIZE ERROR</code> <code>56</code> <code>FIELD CONTENTS/TYPE MISMATCH</code> <code>57</code> <code>FIELD TYPE/BEHAVIOUR UNRECOGNISED</code> <code>58</code> <code>FIELD ATTRIBUTES RANK ERROR</code> <code>59</code> <code>FIELD ATTRIBUTES LENGTH ERROR</code> <code>60</code> <code>FULL-SCREEN ERROR</code> <code>61</code> <code>KEY CODE UNRECOGNISED</code> <code>62</code> <code>KEY CODE RANK ERROR</code> <code>63</code> <code>KEY CODE TYPE ERROR</code> <code>70</code> <code>FORMAT FILE ACCESS ERROR</code> <code>71</code> <code>FORMAT FILE ERROR</code> <code>72</code> <code>NO PIPES</code> <code>76</code> <code>PROCESSOR TABLE FULL</code> <code>84</code> <code>TRAP ERROR</code> <code>90</code> <code>EXCEPTION</code> <code>92</code> <code>TRANSLATION ERROR</code> <code>|</code> <code>200-499</code> <code>Reserved for distributed auxiliary processors</code> <code>|</code> <code>500-999</code> <code>User-defined events</code> <code>|</code> <code>1000</code> <code>Any event in range 1001-1008</code> <code>1001</code> <code>Stop vector</code> <code>1002</code> <code>Weak interrupt</code> <code>1003</code> <code>INTERRUPT</code> <code>1005</code> <code>EOF INTERRUPT</code> <code>1006</code> <code>TIMEOUT</code> <code>1007</code> <code>RESIZE (Dyalog APL/X, Dyalog APL/W)</code> <code>1008</code> <code>DEADLOCK</code> <p>See  Trap StatementProgrammer's Guide: \"Trap Statement\" for an alternative 'control structured' error trapping mechanism.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/trap/#examples","title":"Examples","text":"<pre><code>      \u2395TRAP\u2190\u2282(3 4 5) 'E' 'ERROR' \u22c4 \u2374\u2395TRAP\n1\n\n      \u2395TRAP\n  3 4 5 E ERROR\n</code></pre> <p>Items may be specified as scalars.  If there is only a single trap definition, it need not be enclosed.  However, the value of <code>\u2395TRAP</code> will be rigorously correct:</p> <pre><code>      \u2395TRAP\u219011 'E' '\u2192LAB'\n\n      \u2395TRAP\n  11 E \u2192ERR\n\n      \u2374\u2395TRAP\n1\n</code></pre> <p>The value of <code>\u2395TRAP</code> in a clear workspace is an empty vector whose prototype is</p> <p><code>0\u2374(\u236c '' '')</code>.  A convenient way of cancelling a <code>\u2395TRAP</code> definition is:</p> <pre><code>      \u2395TRAP\u21900\u2374\u2395TRAP\n</code></pre> <p>Event codes 0 and 1000 allow all events in the respective ranges 1-999 and 1000-1006 to be trapped.  Specific event codes may be excluded by the <code>N</code> action (which must precede the general event action):</p> <pre><code>      \u2395TRAP\u2190(1 'N')(0 'E' '\u2192GENERR')\n</code></pre> <p>The 'stop' action is a useful mechanism for cancelling trap definitions during development of applications.</p> <p>The 'cut-back' action is useful for returning control to a known point in the application system when errors occur.  The following example shows a function that selects and executes an option with a general trap to return control to the function when an untrapped event occurs:</p> <pre><code>\n     \u2207 SELECT;OPT;\u2395TRAP\n[1]   \u235d Option selection and execution\n[2]   \u235d A general cut-back trap\n[3]    \u2395TRAP\u2190(0 1000)'C' '\u2192ERR'\n[4]   INP:\u235e\u2190'OPTION : ' \u22c4 OPT\u2190(OPT\u2260' ')/OPT\u21909\u2193\u235e\n[5]    \u2192EX\u2374\u2368(\u2282OPT)\u220aOptions \u22c4 'INVALID OPTION' \u22c4 \u2192INP\n[6]   EX:\u234eOPT \u22c4 \u2192INP\n[7]   ERR:ERROR\u2206ACTION \u22c4 \u2192INP\n[8]   END:\n     \u2207\n</code></pre> <p>User-defined events may be signalled through the <code>\u2395SIGNAL</code> system function.  A user-defined event (in the range 500-999) may be trapped explicitly or implicitly by the event code 0.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/trap/#example","title":"Example","text":"<pre><code>      \u2395TRAP\u2190500 'E' '''USER EVENT 500 - TRAPPED'''\n\n      \u2395SIGNAL 500\nUSER EVENT 500 - TRAPPED\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/treq/","title":"Token Requests","text":"Token Requests R\u2190\u2395TREQ Y <p><code>Y</code> is a simple scalar or vector of thread numbers.</p> <p><code>R</code> is a vector containing the concatenated token requests for all the threads specified in <code>Y</code>. This is effectively the result of catenating all of the right arguments together for all threads in <code>Y</code> that are currently executing <code>\u2395TGET</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/treq/#example","title":"Example","text":"<pre><code>    \u2395TREQ \u2395TNUMS    \u235d tokens required by all threads.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ts/","title":"Timestamp","text":"Timestamp R\u2190\u2395TS <p>This is a seven element vector which identifies the clock time set on the particular installation as follows:</p> <code>\u2395TS[1]</code> Year <code>\u2395TS[2]</code> Month <code>\u2395TS[3]</code> Day <code>\u2395TS[4]</code> Hour <code>\u2395TS[5]</code> Minute <code>\u2395TS[6]</code> Second <code>\u2395TS[7]</code> Millisecond"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ts/#example","title":"Example","text":"<pre><code>      \u2395TS\n1989 7 11 10 42 59 123\n</code></pre> <p>Note that on some systems, where time is maintained only to the nearest second, a zero is returned for the seventh (millisecond) field.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tsync/","title":"Wait for Threads to Terminate","text":"Wait for Threads to Terminate R\u2190\u2395TSYNC Y <p><code>Y</code> must be a simple array of thread numbers.</p> <p>If <code>Y</code> is a simple scalar, <code>R</code> is an array, the result (if any) of the thread.</p> <p>If <code>Y</code> is a simple non-scalar, <code>R</code> has the same shape as <code>Y</code>, and result is an array of enclosed thread results.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tsync/#examples","title":"Examples","text":"<pre><code>      dup\u2190{\u2375 \u2375}        \u235d Duplicate\n\n      \u2395\u2190dup&amp;88         \u235d Show thread number\n11\n88 88\n\n      \u2395TSYNC dup&amp;88    \u235d Wait for result\n88 88\n\n      \u2395TSYNC,dup&amp;88\n 88 88 \n\n      \u2395TSYNC dup&amp;1 2 3\n 1 2 3  1 2 3 \n\n      \u2395TSYNC dup&amp;\u00a81 2 3\n 1 1  2 2  3 3 \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tsync/#deadlock","title":"Deadlock","text":"<p>The interpreter detects a potential deadlock if a number of threads wait for each other in a cyclic dependency. In this case, the thread that attempts to cause the deadlock issues error number <code>1008: DEADLOCK</code>.</p> <pre><code>     \u2395TSYNC \u2395TID      \u235d Wait for self\nDEADLOCK\n      \u2395TSYNC \u2395TID\n      ^\n\n      \u2395EN\n1008\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/tsync/#potential-value-error","title":"Potential Value Error","text":"<p>If any item of <code>Y</code> does not correspond to the thread number of an active thread, or if any subject thread terminates without returning a result, then <code>\u2395TSYNC</code> does not return a result. This means that, if the calling context of the <code>\u2395TSYNC</code> requires a result, for example: <code>rslt\u2190\u2395TSYNC tnums</code>, a <code>VALUE ERROR</code> will be generated. This situation can occur if threads have completed before <code>\u2395TSYNC</code> is called.</p> <pre><code>      \u2395\u2190\u00f7&amp;4          \u235d thread (3) runs and terminates.\n3\n0.25\n      \u2395TSYNC 3       \u235d no result required: no prob\n      \u2395\u2190\u2395tsync 3     \u235d context requires result\nVALUE ERROR\n\n      \u2395\u2190\u2395tsync {}&amp;0  \u235d non-result-returning fn: no result.\nVALUE ERROR\n</code></pre> <p>Coding would normally avoid such an inconvenient <code>VALUE ERROR</code> either by arranging that the thread-spawning and <code>\u2395TSYNC</code> were on the same line:</p> <pre><code>      rslt \u2190 \u2395TSYNC myfn&amp;\u00a8 argvec\n</code></pre> <p>or</p> <pre><code>      tnums\u2190myfn&amp;\u00a8 argvec \u22c4 rslt\u2190\u2395TSYNC tnums\n</code></pre> <p>or by error-trapping the <code>VALUE ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ucs/","title":"Unicode Convert","text":"Unicode Convert R\u2190{X} \u2395UCS Y <p><code>\u2395UCS</code> converts (Unicode) characters into integers and vice versa.</p> <p>The optional left argument <code>X</code> is a character vector containing the name of a variable-length Unicode encoding scheme which must be one of:</p> <ul> <li>'UTF-8'</li> <li>'UTF-16'</li> <li>'UTF-32'</li> </ul> <p>If not, a <code>DOMAIN ERROR</code> is issued.</p> <p>If <code>X</code> is omitted, <code>Y</code> is a simple character or integer array, and the result <code>R</code> is a simple integer or character array with the same rank and shape as <code>Y</code>.</p> <p>If <code>X</code> is specified, <code>Y</code> must be a simple character or integer vector, and the result <code>R</code> is a simple integer or character vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ucs/#monadic-ucs","title":"Monadic \u2395UCS","text":"<p>Used monadically, <code>\u2395UCS</code> simply converts characters to Unicode code points and vice-versa.</p> <p>With a few exceptions, the first 256 Unicode code points correspond to the ANSI character set.</p> <pre><code>\n      \u2395UCS 'Hello World'\n72 101 108 108 111 32 87 111 114 108 100\n\n      \u2395UCS 2 11\u237472 101 108 108 111 32 87 111 114 108 100\nHello World\nHello World\n</code></pre> <p>The code points for the Greek alphabet are situated in the 900's:</p> <pre><code>\n      \u2395UCS '\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1'\n954 945 955 951 956 941 961 945\n\n</code></pre> <p>Unicode also contains the APL character set. For example:</p> <pre><code>\n      \u2395UCS 123 40 43 47 9077 41 247 9076 9077 125\n{(+/\u2375)\u00f7\u2374\u2375}\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ucs/#dyadic-ucs","title":"Dyadic \u2395UCS","text":"<p>Dyadic <code>\u2395UCS</code> is used to translate between Unicode characters and one of three standard variable-length Unicode encoding schemes, UTF-8, UTF-16 and UTF-32. These represent a Unicode character string as a vector of 1-byte (UTF-8), 2-byte (UTF-16) and 4-byte (UTF-32) signed integer values respectively.</p> <pre><code>\n      'UTF-8' \u2395UCS 'ABC'\n65 66 67\n      'UTF-8' \u2395UCS 'ABC\u00c6\u00d8\u00c5'\n65 66 67 195 134 195 152 195 133\n      'UTF-8' \u2395UCS 195 134, 195 152, 195 133\n\u00c6\u00d8\u00c5\n      'UTF-8' \u2395UCS '\u03b3\u03b5\u03b9\u03b1 \u03c3\u03bf\u03c5'\n206 179 206 181 206 185 206 177 32 207 131 206 191 207 133\n      'UTF-16' \u2395UCS '\u03b3\u03b5\u03b9\u03b1 \u03c3\u03bf\u03c5'\n947 949 953 945 32 963 959 965\n      'UTF-32' \u2395UCS '\u03b3\u03b5\u03b9\u03b1 \u03c3\u03bf\u03c5'\n947 949 953 945 32 963 959 965\n</code></pre> <p>Because integers are signed, numbers greater than 127 will be represented as 2-byte integers (type 163), and are thus not suitable for writing directly to a native file. To write the above data to file, the easiest solution is to use  <code>\u2395UCS</code> to convert the data to 1-byte characters and append this data to the file:</p> <pre><code>\n      (\u2395UCS 'UTF-8' \u2395UCS 'ABC\u00c6\u00d8\u00c5') \u2395NAPPEND tn\n</code></pre> <p>Note regarding UTF-16: For most characters in the first plane of Unicode (0000-FFFF), UTF-16 and UCS-2 are identical. However, UTF-16 has the potential to encode all Unicode characters, by using more than 2 bytes for characters outside plane 1.</p> <pre><code>\n      'UTF-16' \u2395UCS 'ABC\u00c6\u00d8\u00c5\u2352\u234b'\n65 66 67 198 216 197 9042 9035\n      \u2395\u2190unihan\u2190\u2395UCS (2\u00d72*16)+\u23733 \u235d x20001-x20003\n\n      'UTF-16' \u2395UCS unihan\n55360 56321 55360 56322 55360 56323\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ucs/#translation-error","title":"Translation Error","text":"<p><code>\u2395UCS</code> will generate a <code>DOMAIN ERROR</code> if the argument cannot be converted. Additionally, in the Classic Edition, a <code>TRANSLATION ERROR</code> is generated if the result is not in <code>\u2395AV</code> or the numeric argument is not in <code>\u2395AVU</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/underscored-alphabetic-characters/","title":"Underscored Alphabetic Characters","text":"Underscored Alphabetic Characters R\u2190\u2395\u24b6 <p><code>\u2395\u24b6</code> is a deprecated feature. Dyalog strongly recommends that you move away from the use of <code>\u2395\u24b6</code>and of the underscored alphabet itself, as these symbols now constitute the sole remaining non-standard use of characters in Dyalog applications.</p> <p>In Versions of Dyalog APL prior to Version 11.0, <code>\u2395\u24b6</code> was a simple character vector, composed of the letters of the alphabet with underscores. If the Dyalog Alt font was in use, these symbols displayed as additional National Language characters.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/underscored-alphabetic-characters/#version-101-and-earlier","title":"Version 10.1 and Earlier","text":"<pre><code>      \u2395\u24b6\n\u24b6\u24b7\u24b8\u24b9\u24ba\u24bb\u24bc\u24bd\u24be\u24bf\u24c0\u24c1\u24c2\u24c3\u24c4\u24c5\u24c6\u24c7\u24c8\u24c9\u24ca\u24cb\u24cc\u24cd\u24ce\u24cf\n</code></pre> <p>For compatibility with previous versions of Dyalog APL, functions that contain references to <code>\u2395\u24b6</code> will continue to return characters with the same index in <code>\u2395AV</code> as before. However, the display of <code>\u2395\u24b6</code> is now <code>\u2395\u00c1</code>, and the old underscored symbols appear as they did in previous Versions when the Dyalog Alt font was in use.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/underscored-alphabetic-characters/#current-version","title":"Current Version","text":"<pre><code>      \u2395\u00c1\n\u00c1\u00c2\u00c3\u00c7\u00c8\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d2\u00d3\u00d4\u00d5\u00d9\u00da\u00db\u00dd\u00fe\u00e3\u00ec\u00f0\u00f2\u00f5\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/using/","title":"Using (Microsoft .NET Search Path)","text":"Using (Microsoft .NET Search Path) \u2395USING <p><code>\u2395USING</code> specifies a list of Microsoft .NET Namespaces that are to be searched for a reference to a .NET class. <code>\u2395USING</code> has Namespace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/using/#examples","title":"Examples:","text":"<pre><code>  \u2395USING\u2190'System'\n  ]display \u2395USING\n.\u2192---------.\n| .\u2192-----. |\n| |System| |\n| '------' |\n'\u220a---------'\n\n\u2395USING,\u2190\u2282'System.Windows.Forms,System.Windows.Forms.dll'\n\u2395USING,\u2190\u2282'System.Drawing,System.Drawing.dll'\n</code></pre> <p>An Assembly may contain top-level classes which are not packaged into .NET Namespaces. In this case, you omit the Namespace name. For example:</p> <pre><code>  \u2395USING\u2190,\u2282',.\\LoanService.dll'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/vfi/","title":"Verify & Fix Input","text":"Verify &amp; Fix Input R\u2190{X}\u2395VFI Y <p><code>Y</code>must be a simple character scalar or vector. <code>X</code> is optional.  If present, <code>X</code> must be a simple character scalar or vector.  <code>R</code> is a nested vector of length two whose first item is a simple logical vector and whose second item is a simple numeric vector of the same length as the first item of <code>R</code>.</p> <p><code>Y</code> is the character representation of a series of numeric constants.  If <code>X</code> is omitted, adjacent numeric strings are separated by one or more blanks.  Leading and trailing blanks and separating blanks in excess of one are redundant and ignored.  If <code>X</code> is present, <code>X</code> specifies one or more alternative separating characters.  Blanks in leading and trailing positions in <code>Y</code> and between numeric strings separated also by the character(s) in <code>X</code> are redundant and ignored.  Leading, trailing and adjacent occurrences of the character(s) in <code>X</code> are not redundant.  The character 0 is implied in <code>Y</code> before a leading character, after a trailing character, and between each adjacent pair of characters specified by <code>X</code>.</p> <p>The length of the items of <code>R</code> is the same as the number of identifiable strings (or implied strings) in <code>Y</code> separated by blank or the value of <code>X</code>.  An element of the first item of <code>R</code> is 1 where the corresponding string in <code>Y</code> is a valid numeric representation, or 0 otherwise.  An element of the second item of <code>R</code> is the numeric value of the corresponding string in <code>Y</code> if it is a valid numeric representation, or 0 otherwise.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/vfi/#examples","title":"Examples","text":"<pre><code>\n      \u2395VFI '2 -2 \u00af2'\n 1 0 1  2 0 \u00af2\n\n      \u2395VFI '12.1 1E1 1A1 \u00af10'\n 1 1 0 1  12.1 10 0 \u00af10\n\n      \u2283(//\u2395VFI'12.1 1E1 1A1 \u00af10')\n12.1 10 \u00af10\n\n      ','\u2395VFI'3.9,2.4,,76,'\n 1 1 1 1 1  3.9 2.4 0 76 0\n\n      '\u22c4'\u2395VFI'1 \u22c4 2 3 \u22c4 4 '\n 1 0 1  1 0 4\n      (\u236c \u236c)\u2261\u2395VFI''\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/vr/","title":"Vector Representation","text":"Vector Representation R\u2190\u2395VR Y <p><code>Y</code> must be a simple character scalar or vector which represents the name of a function or defined operator.</p> <p>If <code>Y</code> is the name of a defined function or defined operator, <code>R</code> is a simple character vector containing a character representation of the function or operator with each line except the last terminated by the newline character (<code>\u2395UCS \u2395AVU[4]</code>).</p> <p>Its display form is as follows:</p> <ol> <li>the header line starts at column 8 with the <code>\u2207</code> symbol in column 6,</li> <li>the line number for each line of the function starts in column 1,</li> <li>the statement contained in each line starts at column 8 except for labelled lines or lines beginning with <code>\u235d</code> which start at column 7,</li> <li>the header line and statements contain no redundant blanks beyond column 7 except that the <code>\u22c4</code> separator is surrounded by single blanks, control structure indentation is preserved and comments retain embedded blanks as originally defined,</li> <li>the last line shows only the <code>\u2207</code> character in column 6.</li> </ol> <p>If <code>Y</code> is the name of a variable, a locked function or operator, an external function, or is undefined, <code>R</code> is an empty vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/vr/#example","title":"Example","text":"<pre><code>\n      \u2374V\u2190\u2395VR'PLUS'\n128\n\n      V\n     \u2207 R\u2190{A}PLUS B\n[1]   \u235d MONADIC OR DYADIC +\n[2]    \u2192DYADIC\u2374\u23682=\u2395NC'A' \u22c4 R\u2190B \u22c4 \u2192END\n[3]   DYADIC:R\u2190A+B \u22c4 \u2192END\n[4]   END:\n     \u2207\n</code></pre> <p>The definition of <code>\u2395VR</code> has been extended to names assigned to functions by specification (<code>\u2190</code>), and to local names of functions used as operands to defined operators. In these cases, the result of <code>\u2395VR</code> is identical to that of <code>\u2395CR</code> except that the representation of defined functions and operators is as described above.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/vr/#example_1","title":"Example","text":"<pre><code>\n      AVG\u2190MEAN\u2218,\n\n      +F\u2190\u2395VR'AVG'\n      \u2207 R\u2190MEAN X    \u235d Arithmetic mean\n[1]     R\u2190(+/X)\u00f7\u2374X\n     \u2207 \u2218,\n\n      \u2374F\n3\n\n      ]display F\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502 \u2502     \u2207 R\u2190MEAN X    \u235d Arithmetic mean\u2502 \u2218 , \u2502\n\u2502 \u2502[1]    R\u2190(+/X)\u00f7\u2374X                   \u2502 - - \u2502\n\u2502 \u2502     \u2207                              \u2502     \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wa/","title":"Workspace Available","text":"Workspace Available R\u2190\u2395WA <p>This is a simple integer scalar.  It identifies the total available space in the active workspace area given as the number of bytes it could hold.</p> <p>A side effect of using <code>\u2395WA</code> is an internal reorganisation of the workspace and process memory, as follows:</p> <ol> <li>Any un-referenced memory is discarded. This process, known as garbage collection, is required because whole cycles of refs can become un-referenced.</li> <li>Numeric arrays are demoted to their tightest form. For example, a simple numeric array that happens to contain only values 0 or 1, is demoted or squeezed to have a <code>\u2395DR</code> type of 11 (Boolean).</li> <li>All remaining used memory blocks are copied to the low-address end of the workspace, leaving a single free block at the high-address end. This process is known as compaction.</li> <li>All memory allocated is returned to the Operating System except the space required for the compacted workspace, plus a working overhead based on the configured maximum workspace size (MAXWS). If the compacted workspace occupies more than 1/16 of MAXWS then the overhead is 1/16 of MAXWS, otherwise it is 1/64 of MAXWS. On a Windows system, you can see the process size changing by using Task Manager.</li> </ol>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wa/#example","title":"Example","text":"<pre><code>      \u2395WA\n261412\n</code></pre> <p>See also: Specify Workspace Available: on page 1</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wc/","title":"Window Create Object","text":"Window Create Object {R}\u2190{X}\u2395WC Y <p>This system function creates a GUI object.  <code>Y</code> is either a vector which specifies properties that determine the new object's appearance and behaviour, or a ref to or the <code>\u2395OR</code> of a GUI object that exists or previously existed.  <code>X</code> is a character vector which specifies the name of the new object, and its position in the object hierarchy.</p> <p>If <code>X</code> is omitted, <code>\u2395WC</code> attaches a GUI component to the current namespace, retaining any functions, variables and other namespaces that it may contain.  Monadic <code>\u2395WC</code> is discussed in detail at the end of this section.</p> <p>If <code>Y</code> is a nested vector each element specifies a property.  The <code>Type</code> property (which specifies the class of the object) must be specified.  Most other properties take default values and need not be explicitly stated.  Properties (including <code>Type</code>) may be declared either positionally or with a keyword followed by a value. Note that <code>Type</code> must always be the first property specified. Properties are specified positionally by placing their values in <code>Y</code> in the order prescribed for an object of that type.</p> <p>If <code>Y</code> is a ref or the result of <code>\u2395OR</code>, the new object is a complete copy of the other, including any child objects, namespaces, functions and variables that it contained at that time.</p> <p>The shy result <code>R</code> is the full name (starting <code>#.</code> or   <code>\u2395SE</code>.) of the namespace <code>X</code>.</p> <p>An object's name is specified by giving its full pathname in the object hierarchy.  At the top of the hierarchy is the <code>Root</code> object whose name is \"<code>.</code>\".  Below \"<code>.</code>\" there may be one or more \"top-level\" objects.  The names of these objects follow the standard rules for other APL objects as described in Chapter 1.</p> <p>Names for sub-objects follow the same rules except that the character \"<code>.</code>\" is used as a delimiter to indicate parent/child relationships.</p> <p>The following are examples of legal and illegal names:</p> Legal Illegal <code>FORM1</code> <code>FORM 1</code> <code>form_23</code> <code>form#1</code> <code>Form1.Gp</code> <code>11_Form</code> <code>F1.g2.b34</code> <code>Form+1</code> <p>If <code>X</code> refers to the name of an APL variable, label, function, or operator, a <code>DOMAIN ERROR</code> is reported.  If <code>X</code> refers to the name of an existing GUI object or namespace, the existing one is replaced by the new one.  The effect is the same as if it were deleted first.</p> <p>If <code>Y</code> refers to a non-existent property, or to a property that is not defined for the type of object <code>X</code>, a <code>DOMAIN ERROR</code> is reported.  A <code>DOMAIN ERROR</code> is also reported if a value is given that is inconsistent with the corresponding property.  This can occur for example, if <code>Y</code> specifies values positionally and in the wrong order.</p> <p>A \"top-level\" object created by <code>\u2395WC</code> whose name is localised in a function/operator header, is deleted on exit from the function/operator.  All objects, including sub-objects, can be deleted using <code>\u2395EX</code>.</p> <p>GUI objects are named relative to the current namespace, so the following examples are equivalent:</p> <pre><code>      'F1.B1' \u2395WC 'Button'\n</code></pre> <p>is equivalent to :</p> <pre><code>      )CS F1\n#.F1\n      'B1' \u2395WC 'Button'\n      )CS\n#\n</code></pre> <p>is equivalent to :</p> <pre><code>      'B1' F1.\u2395WC 'Button'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wc/#examples","title":"Examples","text":"<pre><code>\u235d Create a default Form called F1\n\n      'F1' \u2395WC 'Form'\n\n\u235d Create a Form with specified properties (by position)\n\u235d   Caption = \"My Application\"  (Title)\n\u235d   Posn    = 10 30  (10% down, 30% across)\n\u235d   Size    = 80 60  (80% high, 60% wide)\n\n      'F1' \u2395WC 'Form' 'My Application' (10 30)(80 60)\n\n\n</code></pre> <pre><code>\u235d Create a Form with specified properties (by keyword)\n\u235d   Caption = \"My Application\"  (Title)\n\u235d   Posn    = 10 30  (10% down, 30% across)\n\u235d   Size    = 80 60  (80% high, 60% wide)\n\n      PROPS\u2190\u2282'Type' 'Form'\n      PROPS,\u2190\u2282'Caption' 'My Application'\n      PROPS,\u2190\u2282'Posn' 10 30\n      PROPS,\u2190\u2282'Size' 80 60\n      'F1' \u2395WC PROPS\n\n\u235d Create a default Button (a pushbutton) in the Form F1\n\n      'F1.BTN' \u2395WC 'Button'\n\n\u235d Create a pushbutton labelled \"Ok\"\n\u235d 10% down and 10% across from the start of the FORM\n\u235d with callback function FOO associated with EVENT 30\n\u235d (this event occurs when the user presses the button)\n\n      'F1.BTN'\u2395WC'Button' '&amp;Ok' (10 10)('Event' 30 'FOO')\n</code></pre> <p>Monadic <code>\u2395WC</code> is used to attach a GUI component to an existing object.  The existing object must be a pure namespace or a GUI object.  The operation may be performed by changing space to the object or by running <code>\u2395WC</code>inside the object using the dot syntax.  For example, the following statements are equivalent.</p> <pre><code>      )CS F\n#.F\n      \u2395WC 'Form'  \u235d Attach a Form to this namespace\n\n      )CS\n#\n      F.\u2395WC'Form' \u235d Attach a Form to namespace F\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wg/","title":"Window Get Property","text":"Window Get Property R\u2190{X}\u2395WG Y <p>This system function returns property values for a GUI object.</p> <p><code>X</code> is a namespace reference or a character vector containing the name of the object. <code>Y</code> is a character vector or a vector of character vectors containing the name(s) of the properties whose values are required. The result <code>R</code> contains the current values of the specified properties. If <code>Y</code> specifies a single property name, a single property value is returned. If <code>Y</code> specifies more than one property, <code>R</code> is a vector with one element per name in <code>Y</code>.</p> <p>If <code>X</code> refers to a non-existent GUI name, a <code>VALUE ERROR</code> is reported. If <code>Y</code> refers to a non-existent property, or to a property that is not defined for the type of object <code>X</code>, a <code>DOMAIN ERROR</code> is reported.</p> <p>GUI objects are named relative to the current namespace. A null value of <code>X</code> (referring to the namespace in which the function is being evaluated) may be omitted. The following examples are equivalent:</p> <pre><code>\n      'F1.B1' \u2395WG 'Caption'\n      'B1' F1.\u2395WG 'Caption'\n      '' F1.B1.\u2395WG 'Caption'\n      F1.B1.\u2395WG 'Caption'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wg/#examples","title":"Examples","text":"<pre><code>\n      'F1' \u2395WC 'Form' 'TEST'\n\n      'F1' \u2395WG 'Caption'\nTEST\n\n      'F1' \u2395WG 'MaxButton'\n1\n\n      'F1' \u2395WG 'Size'\n50 50\n\n      ]display 'F1' \u2395WG 'Caption' 'MaxButton' 'Size'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502TEST\u2502 1 \u250250 50\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518   \u2514~\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wn/","title":"Window Child Names","text":"Window Child Names R\u2190{X}\u2395WN Y <p>This system function reports the GUI objects whose parent is <code>Y</code>.</p> <p>If <code>Y</code> is a name (i.e. is a character vector) then the result <code>R</code> is a vector of character vectors containing the names of the named direct GUI children of <code>Y</code>.</p> <p>If <code>Y</code> is a reference  then the result <code>R</code> is a vector of references to  the direct GUI children of <code>Y</code>, named or otherwise.</p> <p>The optional left argument <code>X</code> is a character vector which specifies the <code>Type</code> of GUI object to be reported; if <code>X</code> is not specified, no such filtering is performed.</p> <p>Names of objects further down the tree are not returned, but can be obtained by recursive use of <code>\u2395WN</code>.</p> <p>If <code>Y</code> refers to a namespace with no GUI element, a <code>VALUE ERROR</code> is reported.</p> <p>Note that <code>\u2395WN</code> reports only those child objects visible from the current thread.</p> <p>GUI objects are named relative to the current namespace.  The following examples are equivalent:</p> <pre><code>      \u2395WN 'F1.B1'\n      F1.\u2395WN 'B1'\n      F1.B1.\u2395WN ''    \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wn/#example","title":"Example","text":"<pre><code>      f\u2190\u2395NEW\u2282'Form'\n      f.n\u2190\u2395ns''                  \u235d A non-GUI object       \n      f.l\u2190f.\u2395NEW\u2282'Label'         \u235d A reference to a Label\n      'f.b1'\u2395wc'Button'          \u235d A named Button\n      f.(b2\u2190\u2395new \u2282'Button')      \u235d A reference to a Button\n      \u2395wn 'f'\n [Form].b1\n      \u2395wn f\n #.[Form].[Label]  #.[Form].b1  #.[Form].[Button]\n      'Button' \u2395wn f\n #.[Form].b1  #.[Form].[Button]\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ws/","title":"Window Set Property","text":"Window Set Property {R}\u2190{X}\u2395WS Y <p>This system function resets property values for a GUI object.</p> <p><code>X</code> is a namespace reference or a character vector containing the name of the object.  <code>Y</code> defines the property or properties to be changed and the new value or values.  If a single property is to be changed, <code>Y</code> is a vector whose first element <code>Y[1]</code> is a character vector containing the property name.  If <code>Y</code> is of length 2, <code>Y[2]</code> contains the corresponding property value.  However, if the property value is itself a numeric or nested vector, its elements may be specified in <code>Y[2 3 4 ...]</code> instead of as a single nested element in <code>Y[2]</code>.  If <code>Y</code> specifies more than one property, they may be declared either positionally or with a keyword followed by a value.  Properties are specified positionally by placing their values in <code>Y</code> in the order prescribed for an object of that type.  Note that the first property in <code>Y</code> must always be specified with a keyword because the <code>Type</code> property (which is expected first) may not be changed using <code>\u2395WS</code>.</p> <p>If <code>X</code> refers to a non-existent GUI name, a <code>VALUE ERROR</code> is reported.  If <code>Y</code> refers to a non-existent property, or to a property that is not defined for the type of object <code>X</code>, or to a property whose value may not be changed by <code>\u2395WS</code>, a <code>DOMAIN ERROR</code> is reported.</p> <p>The shy result <code>R</code> contains the previous values of the properties specified in <code>Y</code>.</p> <p>GUI objects are named relative to the current namespace.  A null value of <code>X</code> (referring to the namespace in which the function is being evaluated) may be omitted.  The following examples are equivalent:</p> <pre><code>      'F1.B1' \u2395WS 'Caption' '&amp;Ok'\n      'B1' F1.\u2395WS 'Caption' '&amp;Ok'\n      '' F1.B1.\u2395WS 'Caption' '&amp;Ok'\n      F1.B1.\u2395WS 'Caption' '&amp;Ok'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/ws/#examples","title":"Examples","text":"<pre><code>      'F1' \u2395WC 'Form'  \u235d A default Form\n\n      'F1' \u2395WS 'Active' 0\n\n      'F1' \u2395WS 'Caption' 'My Application'\n\n      'F1' \u2395WS 'Posn' 0 0\n\n      'F1' \u2395WS ('Active' 1)('Event' 'Configure' 'FOO')\n\n      'F1' \u2395WS 'Junk' 10\nDOMAIN ERROR\n\n      'F1' \u2395WS 'MaxButton' 0\nDOMAIN ERROR\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wsid/","title":"Workspace Identification","text":"Workspace Identification \u2395WSID <p>This is a simple character vector.  It contains the identification name of the active workspace.  If a new name is assigned, that name becomes the identification name of the active workspace, provided that it is a correctly formed name.</p> <p>See Workspaces for workspace naming conventions.</p> <p>It is useful, though not essential, to associate workspaces with a specific directory in order to distinguish workspaces from other files.</p> <p>The value of <code>\u2395WSID</code> in a clear workspace is <code>'CLEAR WS'</code>. <code>\u2395WSID</code> has workspace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wsid/#example","title":"Example","text":"<pre><code>\n      \u2395WSID\nCLEAR WS\n\n      \u2395WSID\u2190'ws/mywork       (UNIX)\n\n      \u2395WSID\u2190'B:\\WS\\MYWORK'   (Windows)\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wx/","title":"Window Expose","text":"Window Expose \u2395WX <p><code>\u2395WX</code> is a system variable with the value 0, 1or 3. <code>\u2395WX</code> has Namespace scope.</p> <p>Considered as a sum of bit flags, the first bit in <code>\u2395WX</code> specifies (a); the second  (b) as follows:</p> <ol> <li>whether or not the names of properties, methods and events provided by a Dyalog APL GUI object are exposed </li> <li>certain aspects of behaviour of .NET and COM objects</li> </ol> <p>If <code>\u2395WX</code> is 1 (1st bit is set), the names of properties, methods and events are exposed as reserved names in GUI namespaces and can be accessed directly by name. This means that the same names may not be used for global variables in GUI namespaces.</p> <p>If <code>\u2395WX</code> is 0, these names are hidden and may only be accessed indirectly using <code>\u2395WG</code> and <code>\u2395WS</code>.</p> <p>If <code>\u2395WX</code> is 3 (2nd bit is also set) COM and .NET objects adopt the  behaviour introduced in Version 11, as opposed to the behaviour in previous versions of Dyalog APL.</p> <p>Any attempt to set <code>\u2395WX</code> to 2 generates a <code>DOMAIN ERROR</code>.</p> <p>Note that it is the value of <code>\u2395WX</code> in the object itself, rather than the value of <code>\u2395WX</code> in the calling environment, that determines its behaviour.</p> <p>When you create an object, its <code>\u2395WX</code> (like any other system variable) is initially inherited from its parent.</p> <p>If the value of <code>\u2395WX</code> of a GUI object is initially 0, it will not expose its members. If you subsequently change it from 0 to 1, it will expose them. If you change its <code>\u2395WX</code> back to 0, it will not expose any yet-unexposed members, although already-exposed members will continue to be exposed.</p> <p>The value of <code>\u2395WX</code> in a clear workspace is defined by the default_wx parameter (see Configuration Parameters default_wx on page 1) which itself defaults to 3.</p> <p><code>\u2395WX</code> has namespace scope and may be localised in a function header. This allows you to create a utility namespace or utility function in which the exposure of objects is known and determined, regardless of its global value in the workspace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/wx/#notes","title":"Notes:","text":"<ul> <li>The visibility of the properties and methods of the Root object are not controlled by <code>\u2395WX</code> but by the PropertyExposeRoot parameter. For further information, see PropertyExposeRoot Parameter PropertyExposeRoot on page 1.</li> <li><code>\u2395WX</code> is retained for backwards compatibility and should be considered as deprecated. Dyalog recommends  <code>\u2395WX</code> be set to 3 and never changed.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/","title":"XML Convert","text":"XML Convert R\u2190{X} \u2395XML Y <p><code>\u2395XML</code> converts an XML string into an APL array or converts an APL array into an XML string.</p> <p>Options for <code>\u2395XML</code> are specified using the Variant operator <code>\u2360</code> or by the optional left argument <code>X</code>. The former is recommended but the older mechanism using the left argument is still supported.</p> <p>For conversion from XML, <code>Y</code> is a character vector containing an XML string. The result <code>R</code> is a 5 column matrix whose columns are made up as follows:</p> Column Description 1 Numeric value which indicates the level of nesting 2 Element name, other markup text, or empty character vector when empty 3 Character data or empty character vector when empty 4 Attribute name and value pairs, ( <code>0 2\u2374\u2282''</code> ) when empty 5 A numeric value which indicates what the row contains <p>The values in column 5  have the following meanings:</p> Value Description 1 Element 2 Child element 4 Character data 8 Markup not otherwise defined 16 Comment markup 32 Processing instruction markup <p>These values are additive. For example, a value of 5 in column 5 means that the row contains both an element (value 1) and character data (value 4).</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#example","title":"Example","text":"<pre><code>      x\u2190'&lt;xml&gt;&lt;document id=\"001\"&gt;An introduction to XML'\n      x,\u2190'&lt;/document&gt;&lt;/xml&gt;'\n</code></pre> <pre><code>  ]display v\u2190\u2395XML x\n</code></pre> <p>\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2193   \u250c\u2192\u2500\u2500\u2510      \u250c\u2296\u2510                      \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502 \u2502 0 \u2502xml\u2502      \u2502 \u2502                      \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502    3 \u2502 \u2502   \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2518                      \u2502 \u2502 \u2502 \u2502 \u2502 \u2502      \u2502 \u2502                                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502      \u2502 \u2502                                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502 \u2502   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502 \u2502 1 \u2502document\u2502 \u2502An introduction to XML\u2502 \u2193 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 5 \u2502 \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502id\u2502 \u2502001\u2502 \u2502   \u2502 \u2502                                       \u2502 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502   \u2502 \u2502                                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>For conversion to XML, <code>Y</code> is a 3, 4 or 5 column matrix and the result <code>R</code> is a character vector. The columns of <code>Y</code> have the same meaning as those described above for the result of converting from XML.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#example_1","title":"Example","text":"<pre><code>      \u2395XML v\n&lt;xml&gt; \n  &lt;document id=\"001\"&gt;An introduction to XML&lt;/document&gt;\n&lt;/xml&gt;\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#introduction-to-xml-and-glossary-of-terms","title":"Introduction to XML and Glossary of Terms","text":"<p>XML is an open standard, designed to allow exchange of data between applications. The full specification http://www.w3.org/TR/2008/REC-xml-20081126/ describes functionality, including processing directives and other directives, which can transform XML data as it is read, and which a full XML processor would be expected to handle.</p> <p>The <code>\u2395XML</code> function is designed to handle XML to the extent required to import and export APL data. It favours speed over complexity - some markup is tolerated but largely ignored, and there are no XML query or validation features. APL applications which require processing, querying or validation will need to call external tools for this, and finally call <code>\u2395XML</code> on the resulting XML to perform the transformation into APL arrays.</p> <p>XML grammar such as processing instructions, document type declarations etc. may optionally be stored in the APL array, but will not be processed or validated. This is principally to allow regeneration of XML from XML input which contains such structures, but an APL application could process the data if it chose to do so.</p> <p>The XML definition uses specific terminology to describe its component parts. The following is a summary of the terms used in this section:</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#character-data","title":"Character Data","text":"<p>Character data consists of free-form text. The free-form text should not include the characters '&gt;', '&lt;' or '&amp;', so these must be represented by their entity references ('&gt;', '&lt;' and '&amp;' respectively), or numeric character references.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#entity-references-and-character-references","title":"Entity References and Character References","text":"<p>Entity references are named representations of single characters which cannot normally be used in character data because they are used to delimit markup, such as &gt; for '&gt;'. Character references are numeric representations of any character, such as  for space. Note that character references always take values in the Unicode code space, regardless of the encoding of the XML text itself.</p> <p><code>\u2395XML</code> converts entity references and all character references which the APL character set is able to represent into their character equivalent when generating APL array data; when generating XML it converts any or all characters to entity references as needed.</p> <p>There is a predefined set of entity references, and the XML specification allows others to be defined within the XML using the &lt;!ENTITY &gt; markup. <code>\u2395XML</code> does not process these additional declarations and therefore will only convert the predefined types.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#whitespace","title":"Whitespace","text":"<p>Whitespace sequences consist of one or more spaces, tabs or line-endings. Within character data, sequences of one or more whitespace characters are replaced with a single space when this is enabled by the whitespace option. Line endings are represented differently on different systems (0x0D 0x0A, 0x0A and 0x0D are all used) but are normalized by converting them all to 0x0A before the XML is parsed, regardless of the setting of the whitespace option.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#elements","title":"Elements","text":"<p>An element consists of a balanced pair of tags or a single empty element tag. Tags are given names, and start and end tag names must match.</p> <p>An example pair of tags, named TagName is</p> <p></p> <p>This pair is shown with no content between the tags; this may be abbreviated as an empty element tag as</p> <p></p> <p>Tags may be given zero or more attributes, which are specified as name/value pairs; for example</p> <p> <p>Attribute values may be delimited by either double quotes as shown or single quotes (apostrophes); they may not contain certain characters (the delimiting quote, '&amp;' or '&lt;') and these must be represented by entity or character references.</p> <p>The content of elements may be zero or more mixed occurrences of character data and nested elements. Tags and attribute names describe data, attribute values and the content within tags contain the data itself. Nesting of elements allows structure to be defined.</p> <p>Because certain markup which describes the format of allowable data (such as element type declarations and attribute-list declarations) is not processed, no error will be reported if element contents and attributes do not conform to their restricted declarations, nor are attributes automatically added to tags if not explicitly given.</p> <p>Attributes with names beginning xml: are reserved. Only xml:space is treated specially by <code>\u2395XML</code>. When converting both from and to XML, the value for this attribute has the following effects on space normalization for the character data within this element and child elements within it (unless subsequently overridden):</p> <ul> <li>default \u2013 space normalization is as determined by the whitespace option. </li> <li>preserve - space normalization is disabled \u2013 all whitespace is preserved as given.</li> <li>any other value \u2013 rejected.</li> </ul> <p>Regardless of whether the attribute name and value have a recognised meaning, the attribute will be included in the APL array / generated XML. Note that when the names and values of attributes are examined, the comparisons are case-sensitive and take place after entity references and character references have been expanded.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#comments","title":"Comments","text":"<p>Comments are fully supported markup. They are delimited by '' and all text between these delimiters is ignored. This text is included in the APL array if markup is being preserved, or discarded otherwise.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#cdata-sections","title":"CDATA Sections","text":"<p>CDATA Sections are fully supported markup. They are used to delimit text within character data which has, or may have, markup text in it which is not to be processed as such. They and are delimited by '&lt;![CDATA[' and ']]&gt;'. CDATA sections are never recorded in the APL array as markup when XML is processed \u2013 instead, that data appears as character data. Note that this means that if you convert XML to an APL array and then convert this back to XML, CDATA sections will not be regenerated. It is, however, possible to generate CDATA sections in XML by presenting them as markup.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#processing-instructions","title":"Processing Instructions","text":"<p>Processing Instructions are delimited by '&lt;&amp;' and '&amp;&gt;' but are otherwise treated as other markup, below.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#other-markup","title":"Other markup","text":"<p>The remainder of XML markup, including document type declarations,  XML declarations and text declarations are all delimited by '&lt;!' and '&gt;', and may contain nested markup. If markup is being preserved the text, including nested markup, will appear as a single row in the APL array.  <code>\u2395XML</code> does not process the contents of such markup. This has varying effects, including but not limited to the following:</p> <ul> <li>No validation is performed.</li> <li>Constraints specified in markup such element type declarations will be ignored and therefore syntactically correct elements which fall outside their constraint will not be rejected.</li> <li>Default attributes in attribute-list declarations will not be automatically added to elements.</li> <li>Conditional sections will always be ignored.</li> <li>Only standard, predefined, entity references will be recognized; entity declarations which define others entity references will have no effect.</li> <li>External entities are not processed.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#conversion-from-xml","title":"Conversion from XML","text":"<ul> <li>The level number in the first column of the result <code>R</code> is 0 for the outermost level and subsequent levels are represented by an increase of 1 for each level. Thus, for</li> <li>An introduction to XML </li> <li>The xml element is at level 0 and the document id element is at level 1. The text within the document id element is at level 2.</li> <li>Each tag in the XML contains an element name and zero or more attribute name and value pairs, delimited by '&lt;' and '&gt;' characters. The delimiters are not included in the result matrix. The element name of a tag is stored in column 2 and the attribute(s) in column 4.</li> <li>All XML markup other than tags are delimited by either '&lt;!' and '&gt;', or '&lt;?' and '&gt;' characters. By default these are not stored in the result matrix but the markup option may be used to specify that they are. The elements are stored in their entirety, except for the leading and trailing '&lt;' and '&gt;' characters, in column 2. Nested constructs are treated as a single block. Because the leading and trailing '&lt;' and '&gt;' characters are stripped, such entries will always have either '!' or '&amp;' as the first character.</li> <li>Character data itself has no tag name or attributes. As an optimisation, when character data is the sole content of an element, it is included with its parent rather than as a separate row in the result. Note that when this happens, the level number stored is that of the parent; the data itself implicitly has a level number one greater.</li> <li>Attribute name and value pairs associated with the element name are stored in the fourth column, in an (n x 2) matrix of character values, for the n (including zero) pairs.</li> <li>Each row is further described in the fifth column as a convenience to simplify processing of the array (although this information could be deduced). Any given row may contain an entry for an element, character data, markup not otherwise defined, a comment or a processing instruction. Furthermore, an element will have zero or more of these as children. For all types except elements, the value in the fifth column is as shown above. For elements, the value is computed by adding together the value of the row itself (1) and those of its children. For example, the value for a row for an element which contains one or more sub-elements and character data is 7 \u2013 that is 1 (element) + 2 (child element) + 4 (character data). It should be noted that:</li> <li>Odd values always represent elements. Odd values other than 1 indicate that there are children.</li> <li>Elements which contain just character data (5) are combined into a single row as noted previously.</li> <li>Only immediate children are considered when computing the value. For example, an element which contains a sub-element which in turn contains character data does not itself contain the character data.</li> <li>The computed value is derived from what is actually preserved in the array. For example, if the source XML contains an element which contains a comment, but comments are being discarded, there will be no entry for the comment in the array and the fifth column for the element will not indicate that it has a child comment.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#conversion-to-xml","title":"Conversion to XML","text":"<p>Conversion to XML takes an array with the format described above and generates XML text from it. There are some simplifications to the array which are accepted:</p> <ul> <li>The fifth column is not needed for XML generation and is effectively ignored. Any numeric values are accepted, or the column may be omitted altogether. If the fifth column is omitted then the fourth column may also be omitted.</li> <li>For the fourth column, if there are no attributes in a particular row then the <code>(0 2\u2374\u2282'')</code> may be abbreviated as <code>\u236c</code> (zilde). If there is only one attribute then a 2-element vector can be specified.</li> <li>Data in the third column and attribute values in the fourth column (if present) may be provided as either character vectors or numeric values. Numeric values are implicitly formatted as if <code>\u2395PP</code> was set to 17.</li> </ul> <p>The following validations are performed on the data in the array:</p> <ul> <li>All elements within the array are checked for type.</li> <li>Values in column 1 must be non-negative and start from level 0, and the increment from one row to the next must be <code>\u2264</code> +1. </li> <li>Tag names in column 2 and attribute names in column 4 (if present) must conform to the XML name definition.</li> </ul> <p>Then, character references and entity references are emitted in place of characters where necessary, to ensure that valid XML is generated. However, markup, if present, is not validated and it is possible to generate invalid XML if care in not taken with markup constructs.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#options","title":"Options","text":"<p>There are 3 options which may be specified using the Variant operator <code>\u2360</code> (recommended) or by the optional left argument <code>X</code> (retained for backwards compatibility). The names are different and are case-sensitive; they must be spelled exactly as shown below.</p> Option names for Variant Option names for left argument Whitespace whitespace Markup markup UnknownEntity unknown-entity <p>The values of each option are tabulated below. In each case the value of the option for Variant is given first, followed by its equivalent for the optional left argument in brackets; e.g. UnknownEntity (unknown-entity).</p> <p>Note that the default value is shown first, and that the option names and values are case-sensitive.</p> <p>If options are specified using the optional left argument,  <code>X</code> specifies a set of option/value pairs, each of which is a character vector. <code>X</code> may be a 2-element vector, or a vector of 2-element character vectors. In the examples below, this method is illustrated by the equivalent expression written as a comment, following the recommended approach using the Variant operator <code>\u2360</code>. i.e.</p> <pre><code>\n      ]display (\u2395XML\u2360'Whitespace' 'Strip')eg\n      \u235d      'whitespace' 'strip' \u2395XML eg\n</code></pre> <p>Errors detected in the input arrays or options will all cause <code>DOMAIN ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#whitespace-whitespace","title":"Whitespace (whitespace)","text":"<p>When converting from XML <code>Whitespace</code> specifies the default handling of white space surrounding and within character data. When converting to XML <code>Whitespace</code> specifies the default formatting of the XML. Note that attribute values are not comprised of character data so white space in attribute values is always preserved.</p> Converting from XML Strip (strip) <code>Trim (trim)</code> <code>Preserve (preserve)</code> Converting to XML Strip (strip) <code>Trim (trim)</code> <code>Preserve (preserve)</code> <pre><code>\n      ]display eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502&lt;xml&gt;               \u2502\n\u2502  &lt;a&gt;               \u2502\n\u2502    Data1           \u2502\n\u2502    &lt;!-- Comment --&gt;\u2502\n\u2502    Data2           \u2502\n\u2502    &lt;b&gt; Data3 &lt;/b&gt;  \u2502\n\u2502    Data4           \u2502\n\u2502    &lt;c att=\"val\"/&gt;  \u2502\n\u2502  &lt;/a&gt;              \u2502\n\u2502&lt;/xml&gt;              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ]display (\u2395XML\u2360'Whitespace' 'Strip')eg\n      \u235d      'whitespace' 'strip' \u2395XML eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193   \u250c\u2192\u2500\u2500\u2510 \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 0 \u2502xml\u2502 \u2502 \u2502           \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     3 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2518           \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 1 \u2502a\u2502   \u2502 \u2502           \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     7 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518           \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502Data1 Data2\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2510       \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502b\u2502   \u2502Data3\u2502       \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     5 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2510       \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502Data4\u2502       \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502 2 \u2502c\u2502   \u2502 \u2502           \u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 1 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518           \u2502 \u2502att\u2502 \u2502val\u2502 \u2502   \u2502\n\u2502                       \u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502   \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n</code></pre> <pre><code>      ]display (\u2395XML\u2360'Whitespace' 'Preserve')eg\n      \u235d         'whitespace' 'preserve' \u2395XML eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193   \u250c\u2192\u2500\u2500\u2510 \u250c\u2296\u2510         \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 0 \u2502xml\u2502 \u2502 \u2502         \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     7 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2518         \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                     \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2510        \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 1 \u2502 \u2502   \u2502  \u2502        \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2502  \u2502        \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502         \u2514\u2500\u2500\u2518        \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510         \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 1 \u2502a\u2502   \u2502 \u2502         \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     7 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518         \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                     \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502         \u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2502    Data1\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502         \u2502         \u2502 \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502         \u2502    Data2\u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502         \u2502         \u2502                   \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502b\u2502   \u2502 Data3 \u2502   \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     5 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                     \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502         \u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2502    Data4\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502         \u2502         \u2502 \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510         \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502 2 \u2502c\u2502   \u2502 \u2502         \u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 1 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518         \u2502 \u2502att\u2502 \u2502val\u2502 \u2502   \u2502\n\u2502                     \u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502   \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2510        \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502  \u2502        \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2502  \u2502        \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502         \u2514\u2500\u2500\u2518        \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2510         \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 1 \u2502 \u2502   \u2502 \u2502         \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2502 \u2502         \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502         \u2514\u2500\u2518         \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#markup-markup","title":"Markup (markup)","text":"<p>When converting from XML, <code>Markup</code> determines whether markup (other than entity tags) appears in the output array or not. When converting to XML <code>Markup</code> has no effect.</p> Converting from XML Strip (strip) <code>Preserve (preserve)</code> <pre><code>\n      ]display eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502&lt;xml&gt;               \u2502\n\u2502  &lt;a&gt;               \u2502\n\u2502    Data1           \u2502\n\u2502    &lt;!-- Comment --&gt;\u2502\n\u2502    Data2           \u2502\n\u2502    &lt;b&gt; Data3 &lt;/b&gt;  \u2502\n\u2502    Data4           \u2502\n\u2502    &lt;c att=\"val\"/&gt;  \u2502\n\u2502  &lt;/a&gt;              \u2502\n\u2502&lt;/xml&gt;              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ]display (\u2395XML\u2360'Markup' 'Strip')eg\n      \u235d      'markup' 'strip' \u2395XML eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193   \u250c\u2192\u2500\u2500\u2510 \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 0 \u2502xml\u2502 \u2502 \u2502           \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     3 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2518           \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 1 \u2502a\u2502   \u2502 \u2502           \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     7 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518           \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502Data1 Data2\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2510       \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502b\u2502   \u2502Data3\u2502       \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     5 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2510       \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502Data4\u2502       \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502 2 \u2502c\u2502   \u2502 \u2502           \u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 1 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518           \u2502 \u2502att\u2502 \u2502val\u2502 \u2502   \u2502\n\u2502                       \u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502   \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      ]display (\u2395XML\u2360'Markup' 'Preserve')eg\n      \u235d         'markup' 'preserve' \u2395XML eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193   \u250c\u2192\u2500\u2500\u2510            \u250c\u2296\u2510     \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 0 \u2502xml\u2502            \u2502 \u2502     \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     3  \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2518            \u2514\u2500\u2518     \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2192\u2510              \u250c\u2296\u2510     \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 1 \u2502a\u2502              \u2502 \u2502     \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     23 \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2518     \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2296\u2510              \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 2 \u2502 \u2502              \u2502Data1\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4  \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2296\u2510     \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 2 \u2502!-- Comment --\u2502 \u2502 \u2502     \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     16 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2518     \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2296\u2510              \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 2 \u2502 \u2502              \u2502Data2\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4  \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2192\u2510              \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 2 \u2502b\u2502              \u2502Data3\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     5  \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2296\u2510              \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 2 \u2502 \u2502              \u2502Data4\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4  \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2192\u2510              \u250c\u2296\u2510     \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502 2 \u2502c\u2502              \u2502 \u2502     \u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 1  \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2518     \u2502 \u2502att\u2502 \u2502val\u2502 \u2502    \u2502\n\u2502                            \u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502    \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xml/#unknownentity-unknown-entity","title":"UnknownEntity (unknown-entity)","text":"<p>When converting from XML, this option determines what happens when an unknown entity reference, or a character reference for a Unicode character which cannot be represented as an APL character, is encountered. In Classic versions of Dyalog APL that is any Unicode character which does not appear in <code>\u2395AVU</code>. When converting to XML, this option determines what happens to Esc characters (<code>\u2395UCS 27</code>) in data.</p> Converting from XML Replace (replace) <code>Preserve (preserve)</code> Converting to XML Replace (replace) <code>Preserve (preserve)</code>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xsi/","title":"Extended State Indicator","text":"Extended State Indicator R\u2190\u2395XSI <p><code>R</code> is a nested vector of character vectors giving the full path names of the functions or operators in the execution stack. Note that if a function has changed space, its original (home) space is reported, rather than its current one.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/xsi/#example","title":"Example","text":"<p>In the following, function <code>foo</code> in namespace <code>x</code> has called <code>goo</code> in namespace <code>y</code>.  Function <code>goo</code> has then changed space (<code>\u2395CS</code>) to namespace <code>z</code> where it has been suspended:</p> <pre><code>\n      )si\n[z] y.goo[2]*\nx.foo[1]\n\n</code></pre> <p><code>\u2395XSI</code> reports the full path name of each function:</p> <pre><code>       \u2395xsi\n #.y.goo  #.x.foo\n</code></pre> <p>This can be used for example, to edit all functions in the stack, irrespective of the current namespace by typing:    <code>\u2395ed \u2395xsi</code></p> <p>See also \"State Indicator: \" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json-name-manglling/","title":"JSON Name Mangling","text":""},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json-name-manglling/#json-name-mangling_1","title":"JSON Name Mangling","text":"<p>When Dyalog converts from JSON to APL data, and a member of a JSON object has a name which is not a valid APL name, it is renamed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json-name-manglling/#example","title":"Example:","text":"<p>In this example, the JSON describes an object containing two numeric items, one named a (which is a valid APL name) and the other named 2a (which is not): {\"a\": 1, \"2a\": 2}</p> <p>When this JSON is imported as an APL namespace using <code>\u2395JSON</code>, Dyalog converts the name 2a to a valid APL name. The name mangling algorithm creates a name beginning with <code>\u2359</code>.</p> <pre><code>      (\u2395JSON'{\"a\": 1, \"2a\": 2}').\u2395NL 2\na  \n\u23592a\n</code></pre> <p>When Dyalog exports JSON it performs the reverse name mangling, so:</p> <pre><code>      1 \u2395JSON \u2395JSON'{\"a\": 1, \"2a\": 2}'\n{\"a\":1,\"2a\":2}\n\n</code></pre> <p>Should you need to create and decode these names directly,<code>7162\u2336</code> provides the same name mangling and un-mangling operations. See JSON Translate Name on page 1.</p> <pre><code>      0(7162\u2336)'2a'\n\u23592a\n      1(7162\u2336)'\u23592a'\n2a\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/","title":"JSON Convert","text":"JSON Convert R\u2190{X}\u2395JSON Y <p>This function imports and exports data in JavaScript Object Notation (JSON) Data Interchange FormatIETF RFC 7159. The JavaScript Object Notation (JSON) Data Interchange Format is a widely supported, text based data interchange format for the portable representation of structured data; any application which conforms to the standard may exchange data with any other..</p> <p>JSON supports a limited number of data types and there is not a direct correspondence between JSON and APL data structures. In particular:</p> <ul> <li>JSON does not support arrays with rank &gt;1.</li> <li>The JSON standard includes Boolean values true and false which are distinct from numeric values 1 and 0, and have no direct APL equivalent.</li> <li>The JSON5 standard includes numeric constants Infinity, -Infinity, NaN and -NaN which have no direct APL equivalent.</li> <li>JSON object members are named and these names might not be valid names in APL.</li> </ul> <p>These differences are catered for in various ways as discussed below.</p> <p>If specified, <code>X</code> must be a numeric scalar with the value <code>0</code> (import JSON) or  <code>1</code> (export JSON). If <code>X</code> is not specified and <code>Y</code> is a character array, <code>X</code> is assumed to be <code>0</code> (import); otherwise it is assumed to be 1 (export).</p> <p>Although this system function was designed with an optional left argument, it is strongly recommended that the argument should always be used.</p> <p>Other options for <code>\u2395JSON</code> are Format, Compact, Null, HighRank, Charset and Dialect which are specified using the Variant operator <code>\u2360</code>. See Variant on page 1. The  Principal Option is Format.</p> <p>The Dialect Variant option is either <code>'JSON'</code> (the default) or <code>'JSON5'</code>. The latter enables JSON5 extensions on import and export JSON5 (\"JSON5 Data Interchange Format\") is an extension of JSON that extends the subset of JavaScript syntax to include optional trailing commas, unquoted object keys, single quoted and multiline strings, additional number formats, and comments..</p> <p>See also: JSON Name Mangling on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#json-import-x-is-0","title":"JSON Import (X is 0)","text":"<p><code>Y</code> is a character vector or matrix in JSON format. There is an implied newline character between each row of a matrix.</p> <p>The content of the result <code>R</code> depends upon the Format variant which may be <code>'D'</code> (the default) or <code>'M'</code>.</p> <p>If Format is <code>'D'</code> (which stands for \"data\") the JSON described by <code>Y</code> is converted to APL object(s) and <code>R</code> is an array or a namespace containing arrays and sub-namespaces.</p> <ul> <li>JSON objects are created as APL namespaces.</li> <li>JSON null is converted to  the value specified by the Null variant, which may be either <code>\u2282'null'</code> (the default) or <code>\u2395NULL</code>.</li> <li>JSON true and false and the JSON5 numeric constants Infinity, -Infinity, NaN and -NaN are converted to enclosed character vectors  <code>\u2282'true'</code>, <code>\u2282'false'</code> and so forth.</li> <li>If the JSON source contains object names which are not valid APL names they are converted to APL objects with mangled names. See JSON Name Mangling on page 1. <code>7162\u2336</code> can be used to obtain the original name. See JSON Translate Name on page 1.</li> </ul> <p>If Format is <code>'M'</code> (which stands for \"matrix\") the result <code>R</code> is a matrix whose columns contain the following:</p> <code>[;1]</code> depth <code>[;2]</code> name (for JSON object members) <code>[;3]</code> value <code>[;4]</code> JSON type (integer: see below) <ul> <li>The representation of null, true and false are the same as for <code>Format 'D'</code>.</li> <li>Object names are reported as specified in the JSON text; they are not mangled as they are for <code>Format 'D'</code>.</li> </ul> <p>JSON data types are as follows:</p> Type Description 1 Object 2 Array 3 Numeric 4 String 5 Null 6 No APL equivalent (represented by character string) 7 JavaScript Object (export only)"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#duplicate-names","title":"Duplicate Names","text":"<p>The JSON standard says that members of a JSON object should have unique names and that different implementations behave differently when there are duplicates. Dyalog handles duplicate names as follows:</p> <ul> <li>No error is generated.</li> <li>For <code>Format 'D'</code>, the last member encountered is used and  all previous members with the same name are discarded.</li> <li>For <code>Format 'M'</code> all duplicate members are recorded in the result matrix.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#examples","title":"Examples","text":"<pre><code>      \u2374JSON\n18 19\n      JSON\n{                  \n  \"a\": {           \n    \"b\": [         \n      \"string 1\",  \n      \"string 2\"   \n    ],             \n    \"c\": true,     \n    \"d\": {         \n      \"e\": false,  \n      \"f\u237a\": [       \n        \"string 3\",\n        123,       \n        1000.2,    \n        null       \n      ]            \n    }              \n  }                \n}                  \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#import-as-data-format-d","title":"Import as Data (Format 'D')","text":"<pre><code>      j\u21900 \u2395JSON JSON\n      j\n#.[JSON object]\n      j.\u2395NL 9\na\n      j.a.\u2395NL 2\nb\nc\n      j.a.b\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502string 1\u2502string 2\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      j.a.c\n\u250c\u2500\u2500\u2500\u2500\u2510\n\u2502true\u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n      j.a.\u2395NL 9\nd\n      j.a.d.\u2395NL 2 \u235d Note that f\u237a is an invalid APL name\ne       \n\u2359f\u23599082\u2359\n      j.a.d.e\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502false\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n      j.a.d.\u2359f\u23599082\u2359\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502string 3\u2502123\u25021000.2\u2502\u250c\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502        \u2502   \u2502      \u2502\u2502null\u2502\u2502\n\u2502        \u2502   \u2502      \u2502\u2514\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#performance-warning","title":"Performance Warning","text":"<p>Extracting part of a namespace created by <code>\u2395JSON)</code> can lead to poor application performance. For example, if you are only interested in an array of records contained as child namespaces that are nested within data that you receive via <code>\u2395JSON</code>, you might write something like:</p> <pre><code>     data\u2190(0 \u2395JSON \u2283\u2395NGET filename).records\n</code></pre> <p>This expression actually creates a temporary namespace <code>(0 \u2395JSON \u2283\u2395NGET filename)</code> (lets call it <code>temp</code> for now), extracts the sub-namespace <code>records</code>, and then discards its parent namespace <code>temp</code>. The result <code>data</code> however contains pointers to <code>temp</code>, so although it is not visible (it is unnamed), it is retained internally in the workspace. This  can lead to poor performance due to  the behaviour of the memory manager in this situation. This issue will be resolved in the next release of Dyalog. In the meantime, the situation can  be avoided by assigning a name to the  top-level namespace. Instead of the expression above, you could write:</p> <pre><code>      dataset\u21900 \u2395JSON \u2283\u2395NGET filename\n      data\u2190dataset.records\n</code></pre> <p>Giving a name to the top-level namespace effectively avoids the performance issue.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#import-as-matrix-format-m","title":"Import as Matrix (Format 'M')","text":"<pre><code>      (\u2395JSON\u2360'M')JSON\n\u250c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510\n\u25020\u2502  \u2502        \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502a \u2502        \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502b \u2502        \u25022\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25023\u2502  \u2502string 1\u25024\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25023\u2502  \u2502string 2\u25024\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502c \u2502\u250c\u2500\u2500\u2500\u2500\u2510  \u25026\u2502\n\u2502 \u2502  \u2502\u2502true\u2502  \u2502 \u2502\n\u2502 \u2502  \u2502\u2514\u2500\u2500\u2500\u2500\u2518  \u2502 \u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502d \u2502        \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25023\u2502e \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u25026\u2502\n\u2502 \u2502  \u2502\u2502false\u2502 \u2502 \u2502\n\u2502 \u2502  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25023\u2502f\u237a\u2502        \u25022\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25024\u2502  \u2502string 3\u25024\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25024\u2502  \u2502123     \u25023\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25024\u2502  \u25021000.2  \u25023\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25024\u2502  \u2502\u250c\u2500\u2500\u2500\u2500\u2510  \u25025\u2502\n\u2502 \u2502  \u2502\u2502null\u2502  \u2502 \u2502\n\u2502 \u2502  \u2502\u2514\u2500\u2500\u2500\u2500\u2518  \u2502 \u2502\n\u2514\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#json-export-x-is-1","title":"JSON Export (X is 1)","text":"<p><code>Y</code> is the data to be exported as JSON and may be an array, a namespace or a matrix representation of JSON such as would have been produced by JSON Import with <code>Format 'M'</code>. <code>Y</code> is interpreted according to the Format variant which may be <code>'D'</code> (the default) or <code>'M'</code>.</p> <p><code>\u2395JSON</code> will signal <code>DOMAIN ERROR</code> if <code>Y</code> is incompatible with the specified (or implied) value of Format.</p> <p>If Format is <code>M</code>, the data values in <code>Y[;3]</code> must correspond precisely with the JSON types specified in <code>Y[;4]</code>as specified in the following table.</p> <code>Y[;4]</code> (Type) <code>Y[;3]</code> (Value) 1 Empty array 2 Empty array 3 Numeric scalar 4 Character vector 5 Null 6 Enclosed character vector 7 Enclose character vector <p><code>R</code> is a character vector whose content depends upon the value of the Compact variant.</p> Compact Description <code>0</code> The JSON text is padded with spaces and new lines for readability. 1 The JSON text is compacted into its minimal form.. <p>The Charset variant option may be used to restrict the output to ASCII characters.</p> Charset Description 'Unicode' All Unicode characters in <code>Y</code> are passed unchanged in the result <code>R</code> . <code>'ASCII'</code> Non-ASCII characters are converted to an encoded string of the form \"\\uNNNN\" where \"NNNN\" is the upper-case hexadecimal value of the character in the Unicode system. For example, \u00e9 (e-acute) is converted to \"\\u00E9\". Furthermore, if the Dialect is JSON5, values less than hex 100 are converted to the form \\xNN. <p>The HighRank variant option may be used to instruct <code>\u2395JSON</code> to pre-process higher rank arrays into a form that can be represented by JSON. Note that if necessary, the transformation is applied recursively throughout the high-rank array(s) specified by <code>Y</code>.</p> HighRank Description <code>'Split'</code> High rank data is split into nested vectors. 'Error' Higher rank data is rejected ( <code>DOMAIN ERROR</code> ) <p>The name of any namespace member that begins with <code>\u2359</code> and otherwise conforms to the conversion format used for JSON object names will be demangled.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#example","title":"Example","text":"<pre><code>      j             \u235d See above\n#.[JSON object]\n      \u2374JS\u21901 \u2395JSON j\n94\n      JS\n{\"a\":{\"b\":[\"string 1\",\"string 2\"],\"c\":true,\"d\":{\"e\":false,\"f\u237a\":[\"string 3\",123,1000.2,null]}}}\n\n      1(\u2395JSON\u2360'Compact' 0) j\n{\n  \"a\": {\n    \"b\": [\n      \"string 1\",\n      \"string 2\"\n    ],\n    \"c\": true,\n    \"d\": {\n      \"e\": false,\n      \"f\u237a\": [\n        \"string 3\",\n        123,\n        1000.2,\n        null\n      ]\n    }\n  }\n}\n</code></pre> <p>If there are any mis-matches between the values in <code>Y[;3]</code> and the types in <code>Y[;4]</code>, <code>\u2395JSON</code> will signal <code>DOMAIN ERROR</code> and report the first row where there is a mis-match (<code>\u2395IO</code> sensitive) as illustrated in the following example.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#example_1","title":"Example","text":"<pre><code>      M\u2190(\u2395JSON\u2360'Format' 'M')'{\"values\": [ 75, 300 ]}'\n      M\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2510\n\u25020\u2502      \u2502   \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502values\u2502   \u25022\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502      \u250275 \u25023\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502      \u2502300\u25023\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2518\n\n      M[3;3]\u2190\u2282'75' \u235d character not numeric\n\n      M            \u235d but looks the same as before\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2510\n\u25020\u2502      \u2502   \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502values\u2502   \u25022\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502      \u250275 \u25023\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502      \u2502300\u25023\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2518\n      1 (\u2395JSON\u2360 'Format' 'M')M\nDOMAIN ERROR: Value does not match the specified type in row 3\n      1(\u2395JSON\u2360'Format' 'M')M\n     \u2227\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#charset-example","title":"Charset Example","text":"<pre><code>      ns\u2190\u2395NS ''\n      ns.d\u00e9\u2190'D\u00c9'\n      ns.d\u00e9\nD\u00c9\n      (\u2395JSON\u2360'Dialect' 'JSON5') ns\n{d\u00e9:\"D\u00c9\"}\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#high-rank-example","title":"High Rank Example","text":"<pre><code>      d\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2  \u2502ABC                      \u2502\n\u2502A B  \u2502DEF                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021 2 3\u25021            0.5         \u2502\n\u25024 5 6\u25020.3333333333 0.25        \u2502\n\u2502     \u2502                         \u2502\n\u2502     \u25020.2          0.1666666667\u2502\n\u2502     \u25020.1428571429 0.125       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      1 \u2395JSON d\nDOMAIN ERROR: JSON export: the right argument cannot be converted (\u2395IO=1)\n      1 \u2395JSON d\n        \u2227\n      1 (\u2395JSON\u2360'HighRank' 'Split') d\n[[[[1,2],\"AB\"],[\"ABC\",\"DEF\"]],[[[1,2,3],[4,5,6]],...\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#raw-text","title":"Raw Text","text":"<p>An enclosed character vector is inserted into the result of  JSON export as raw text. This feature may be used to export special JSON values such as null, true and false. Without the extra enclosure, the character vectors are exported as strings:</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#example_2","title":"Example","text":"<pre><code>      \u2395JSON 'null' 'true' 'false'\n[\"null\",\"true\",\"false\"]\n      \u2395JSON \u2282\u00a8'null' 'true' 'false'\n[null,true,false]\n</code></pre> <p>The same mechanism may be used to inject any raw text, although unless this is valid JSON it cannot then be re-imported.</p> <p>The following example illustrates how JavaScript objects may be exported. In the example, the object is a JavaScript function which is specified by the contents of an enclosed character vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#example_3","title":"Example","text":"<pre><code>\n     'Slider' \u2395NS ''\n      Slider.range\u2190\u2282'true'         \u235d Note the \u2282\n      Slider.min\u21900\n      Slider.max\u2190500\n      Slider.values\u219075 300\n\n      fn1\u2190' function( event, ui ) {'\n      fn2\u2190'$( \"#amount\" ).val( \"$\" + ui.values[ 0 ] +'\n      fn2,\u2190' \" - $\" + ui.values[ 1 ] );}'\n\n      Slider.slide\u2190,/fn1 fn2 \u235d Enclosed character vec\n</code></pre> <pre><code>      \u2374JS\u21901 \u2395JSON Slider\n159\n      JS\n{\"max\":500,\"min\":0,\"range\":true,\"slide\": function( event, ui ) {$( \\\"#amount\\\" ).val( \\\"$\\\" + ui.values[ 0 ] + \\\" - $\\\" + ui.values[ 1 ] );},\"values\":[75,300]}\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#wrappers","title":"Wrappers","text":"<p>A wrapper is an enclosed vector of the form:</p> <pre><code>     \u2282(code special)\n</code></pre> <p>The nature of the <code>special</code> data structure is identified within the wrapper by a leading numeric code. Code 1 is used to identify JSON values such as <code>null</code>, <code>true</code> and <code>false</code>. Codes 2, 3 and 4 are used to identify different forms of datasets.</p> <p>This wrapper mechanism has been chosen to identify special treatment because a scalar enclosure cannot be represented in JSON/JavaScript.</p> <p>A wrapper may be specified directly in the right argument to <code>\u2395JSON</code> and/or as part of the array structure specified by the right argument, as a sub-array or in a namespace. This allows a special array to be processed appropriately as part of a general data structure that is to be rendered in JSON notation.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#wrappers-for-special-json-values","title":"Wrappers for special JSON values","text":"<p>Wrappers may be used to export JSON special values such as null, true and false using code 1. This mechanism is supplementary to the use of enclosed character vectors. See Raw Text on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-a-z/system-functions-a-z/json-convert/json/#example_4","title":"Example","text":"<pre><code>      \u2395JSON\u2282\u00a8(1 'null')(1 'true')(1 'false')\n[null,true,false]\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/","title":"System Functions Categorised","text":"<p>The following tables list the system functions divided into appropriate categories.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#session-informationmanagement","title":"Session Information/Management","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#constants","title":"Constants","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#tools-and-access-to-external-utilities","title":"Tools and Access to External Utilities","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#manipulating-functions-and-operators","title":"Manipulating Functions and Operators","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#namespaces-and-objects","title":"Namespaces and Objects","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#inputoutput","title":"Input/Output","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#component-files","title":"Component Files","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#native-files","title":"Native Files","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#threads","title":"Threads","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#synchronisation","title":"Synchronisation","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#error-handling","title":"Error Handling","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#stack-and-workspace-information","title":"Stack and Workspace Information","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#shared-variables","title":"Shared Variables","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#gui-and-com-support","title":"GUI and COM Support","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-functions-categorised/#miscellaneous","title":"Miscellaneous","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/","title":"Component Files","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fappend/","title":"Fappend","text":"File Append Component {R}\u2190X \u2395FAPPEND Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fappend/#access-code-8","title":"Access code 8","text":"<p><code>Y</code> must be a simple integer scalar or a 1 or 2 element vector containing the file tie number followed by an optional passnumber.  If the passnumber is omitted it is assumed to be zero. Subject to a few restrictions, <code>X</code> may be any array.</p> <p>The shy result <code>R</code> is the number of the component to which <code>X</code> is written, and is 1 greater than the previously highest component number in the file, or 1 if the file is new.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fappend/#examples","title":"Examples","text":"<pre><code>      (1000?1000) \u2395FAPPEND 1\n\n      \u2395\u2190(2 3\u2374\u23736) 'Geoff' (\u2395OR'FOO') \u2395FAPPEND 1\n12\n\n      \u2395\u2190A B C \u2395FAPPEND\u00a81\n13 14 15\n\nDump\u2190{\n    tie\u2190\u237a \u2395FCREATE 0              \u235d create file.\n    (\u2395FUNTIE tie){}\u2375 \u2395FAPPEND tie \u235d append and untie.\n}\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/favail/","title":"Favail","text":"File System Available R\u2190\u2395FAVAIL <p><code>\u2395FAVAIL</code> returns the Boolean scalar value 1. This function is provided only for compatibility with other implementations of APL.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fchk/","title":"Fchk","text":"File Check and Repair R\u2190{X} \u2395FCHK Y <p><code>\u2395FCHK</code> validates and repairs component files, and validates files associated with external variables, following an abnormal termination of the APL process or operating system.</p> <p><code>Y</code> must be a simple character scalar or vector which specifies the name of the file to be exclusively checked or repaired. For component files, the file must be named in accordance with the operating system's conventions, and may be a relative or absolute pathname. The file must exist and must not be tied.</p> <p>For files associated with external variables, any filename extension must be specified even if <code>\u2395XT</code> would not require it. The file must exist and must not currently be associated with an external variable.</p> <p>Options for <code>\u2395FCHK</code> are specified using the Variant operator <code>\u2360</code> or by the optional left argument <code>X</code>. The former is recommended but the older mechanism using the left argument is still supported.</p> <p>In either case, the default behaviour is as follows:</p> <ol> <li>If the file appears to have been cleanly untied previously, return <code>\u236c</code>, i.e. report that the file is good.</li> <li>Otherwise, validate the file and return the appropriate result. If the file is corrupt, no attempt is made to repair it.</li> </ol> <p>The result <code>R</code> is a vector of the numbers of missing or damaged components. <code>R</code> may include non-positive numbers of \"pseudo components\" that indicate damage to parts of the file other than in specific components:</p> <code>0</code> ACCESS MATRIX. <code>\u00af1</code> Free-block tree. <code>\u00af2</code> Component index tree. <p>Other negative numbers represent damage to the file metadata; this set may be extended in the future.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fchk/#specifying-options-using-variant","title":"Specifying options using Variant","text":"<p>Using Variant, the options are as follows:</p> <ul> <li>Task</li> <li>Repair</li> <li>Force</li> </ul> <p>Rebuild causes the file indices to be discarded and rebuilt. Repair only takes place on files which have been checked and found to be damaged. It involves a rebuild, but that only takes place if it is needed. Note that Repair and Force only apply if Task is <code>'Scan'</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fchk/#task","title":"Task","text":"Scan causes the file to be checked and optionally repaired (see <code>'Repair'</code> below) <code>Rebuild</code> causes the file to be unconditionally rebuilt"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fchk/#repair-principle-option","title":"Repair (principle option)","text":"0 do not repair <code>1</code> causes the file to be repaired if damage is found"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fchk/#force","title":"Force","text":"0 do not validate the file if it appears to have been properly closed <code>1</code> validate the file even if it appears to have been properly closed <p>Default values are highlighted thus in the above tables.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fchk/#examples","title":"Examples","text":"<p>To check a file and attempt to fix it if damage is found:</p> <pre><code>      (\u2395FCHK \u2360 1)'suspect.dcf'\n</code></pre> <p>To forcibly check a file and attempt to fix it if damage is found:</p> <pre><code>      (\u2395FCHK \u2360 ('Repair' 1)('Force'1))'suspect.dcf'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fchk/#specifying-options-using-a-left-argument","title":"Specifying options using a left argument","text":"<p>Using the optional left-argument, <code>X</code> must be a vector of zero or more character vectors from among <code>'force'</code>, <code>'repair'</code> and <code>'rebuild'</code>, which determine the detailed operation of the function. Note that these options are case-insensitive.</p> <ul> <li>If <code>X</code> contains <code>'force'</code>, <code>\u2395FCHK</code> will validate the file even if it appears to have been cleanly untied.</li> <li>If <code>X</code> contains <code>'repair'</code>, <code>\u2395FCHK</code> will repair the file, following validation, if it appears to be damaged. This option may be used in conjunction with <code>'force'</code>.</li> <li>If <code>X</code> contains <code>'rebuild'</code>, <code>\u2395FCHK</code> will repair the file unconditionally.</li> <li>If <code>X</code> contains <code>'force'</code>, <code>\u2395FCHK</code> will validate the file even if it appears to have been cleanly untied.</li> <li>If <code>X</code> contains <code>'repair'</code>, <code>\u2395FCHK</code> will repair the file, following validation, if it appears to be damaged. This option may be used in conjunction with <code>'force'</code>.</li> <li>If <code>X</code> contains <code>'rebuild'</code>, <code>\u2395FCHK</code> will repair the file unconditionally.</li> </ul> <p>Following a check of the file, a non-null result indicates that the file is damaged.</p> <p>Following a repair of the file, the result indicates those components that could not be recovered. Un-recovered components will give a <code>FILE COMPONENT DAMAGED</code> error if read but may be replaced without error.</p> <p>Repair can recover only check-summed components from the file, i.e. only those components that were written with the checksum option enabled (see \"File Properties: \" on page 1).</p> <p>Following an operating system crash, repair may result in one or more individual components being rolled back to a previous version or not recovered at all, unless Journaling levels 2 or 3 were also set when these components were written.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fcopy/","title":"Fcopy","text":"File Copy R\u2190X \u2395FCOPY Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fcopy/#access-code-4609","title":"Access Code: 4609","text":"<p><code>Y</code> must be a simple integer scalar or 1 or 2-element vector containing the file tie number and optional passnumber. The file need not be tied exclusively.</p> <p><code>X</code> is a character vector containing the name of a new file to be copied to.</p> <p><code>\u2395FCOPY</code> creates a copy of the tied file specified by <code>Y</code>, named <code>X</code>.</p> <p>The new file <code>X</code> will have the same  component level information, including the user number and update time as the original. The operating system file creation, modification and access times will be set to the time at which the copy occurred.</p> <p>Unless otherwise specified (see File Properties below) the new file <code>X</code> will have the same file properties as the original, except that it will be a large-span file regardless of the span of the original.</p> <p>The result <code>R</code> is the file tie number associated with the new file <code>X</code>.</p> <p>Note that the Access Code is 4609, which is the sum of the Access Codes for <code>\u2395FREAD</code> (1), <code>\u2395FRDCI</code> (512) and <code>\u2395FRDAC</code> (4096).</p> <p>Note also that although the file need not be tied exclusively, the <code>\u2395FCOPY</code> function will not yield the file to other APL processes while it is running, and it may take some considerable time to run in the case of a large component file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fcopy/#example","title":"Example","text":"<pre><code>      told\u2190'oldfile32'\u2395FTIE 0\n      'S' \u2395FPROPS told\n32\n      tnew\u2190'newfile64' \u2395FCOPY told\n\n      'S' \u2395FPROPS tnew\n64\n</code></pre> <p>If <code>X</code> specifies the name of an existing file, the operation fails with a <code>FILE NAME ERROR</code>.</p> <p>Note: This operation is atomic. If an error occurs during the copy operation (such as disk full) or if a strong interrupt is issued, the copy will be aborted and the new file <code>X</code> will not be created.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fcopy/#file-properties","title":"File Properties","text":"<p><code>\u2395FCOPY</code> allows you to specify properties for the new file via the variant operator <code>\u2360</code> used with the following options:</p> <ul> <li><code>'J'</code> - journaling level; a numeric value.</li> <li><code>'C'</code> - checksum level; 0 or 1.</li> <li><code>'Z'</code> - compression; 0 or 1.</li> <li><code>'U'</code> - Unicode; 0 or 1</li> <li><code>'S'</code> - File Size (span); 64</li> </ul> <p>The Principal Option is  as follows:</p> <ul> <li>0 - sets <code>('J' 0) ('C' 0)</code></li> <li>1 - sets <code>('J' 1) ('C' 1)</code></li> <li>2 - sets <code>('J' 2) ('C' 1)</code></li> <li>3 - sets <code>('J' 3) ('C' 1)</code></li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fcopy/#examples","title":"Examples","text":"<pre><code>      newfid\u2190'newfile' (\u2395FCOPY \u23603) 1\n\n      'SEUJCZ' \u2395FPROPS newfid\n64 0 1 3 1 0\n\n</code></pre> <p>Alternatively:</p> <pre><code>      JFCOPY\u2190\u2395FCOPY \u2360 3\n</code></pre> <p>will name a variant of <code>\u2395FCREATE</code> which will create component file with level 3 journaling, and checksum enabled. Then:</p> <pre><code>      newfid\u2190'newfile' JFCOPY 1\n\n</code></pre> <p>Note: Setting <code>('U' 0)</code> (no Unicode support) is discouraged as it may cause the copy to fail with a <code>TRANSLATION ERROR</code>. Similarly using a Classic interpreter to <code>\u2395FCOPY</code> files may result in <code>TRANSLATION ERROR</code>s.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fcreate/","title":"Fcreate","text":"File Create {R}\u2190X \u2395FCREATE Y <p><code>Y</code> must be a simple integer scalar or a 1 or 2 element vector. The first element is the file tie number. The second element, if specified, must be 64This element sets the span of the file which in earlier Versions of Dyalog APL could be 32 or 64. Small-span (32-bit) component files may no longer be created and this element is retained only for backwards compatibility of code..</p> <p>The file tie number must not be the tie number associated with another tied file.</p> <p><code>X</code> must be either:</p> <ol> <li>a simple character scalar or vector which specifies the name of the file to be created. </li> <li>a vector of length 1 or 2 whose items are:- a simple character scalar or vector as above.</li> <li>an integer scalar specifying the file size limit in bytes.</li> </ol> <p>The newly created file is tied for exclusive use.</p> <p>The shy result of <code>\u2395FCREATE</code> is the tie number of the new file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fcreate/#automatic-tie-number-allocation","title":"Automatic Tie Number Allocation","text":"<p>A tie number of 0 as argument to a create or tie operation, allocates, and returns as an explicit result, the first (closest to zero) available tie number. This allows you to simplify code. For example:</p> <p>from:</p> <pre><code>\n      tie\u21901+\u2308/0,\u2395FNUM     \u235d With next available number,\n      file \u2395FCREATE tie   \u235d ... create file.\n\n</code></pre> <p>to:</p> <pre><code>\n      tie\u2190file \u2395FCREATE 0 \u235d Create with first available..\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fcreate/#examples","title":"Examples","text":"<pre><code>\n      '..\\BUDGET\\SALES'    \u2395FCREATE 2    \u235d Windows\n      '../budget/SALES.85' \u2395FCREATE 2    \u235d UNIX\n\n      'COSTS' 200000 \u2395FCREATE 4         \u235d max size 200000\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fcreate/#file-properties","title":"File Properties","text":"<p><code>\u2395FCREATE</code> allows you to specify properties for the newly created file via the variant operator <code>\u2360</code> used with the following options:</p> <ul> <li><code>'J'</code> - journaling level; a numeric value</li> <li><code>'C'</code> - checksum level; 0 or 1</li> <li><code>'Z'</code> - compression; 0 or 1</li> <li><code>'U'</code> - Unicode; 0 or 1</li> <li><code>'S'</code> - File Size (span); 64</li> </ul> <p>The Principal Option is  as follows:</p> <ul> <li>0 - sets <code>('J' 0) ('C' 0)</code></li> <li>1 - sets <code>('J' 1) ('C' 1)</code></li> <li>2 - sets <code>('J' 2) ('C' 1)</code></li> <li>3 - sets <code>('J' 3) ('C' 1)</code></li> </ul> <p>See also: File Properties  on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fcreate/#examples_1","title":"Examples","text":"<pre><code>      'newfile' (\u2395FCREATE\u23603) 0\n1\n      'SEUJCZ' \u2395FPROPS 1\n64 0 1 3 1 0\n\n</code></pre> <p>Alternatively:</p> <pre><code>      JFCREATE\u2190\u2395FCREATE \u2360 3\n</code></pre> <p>will name a variant of <code>\u2395FCREATE</code> which will create component file with level 3 journaling, and checksum enabled. Then:</p> <pre><code>      'newfile'JFCREATE 0\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fdrop/","title":"Fdrop","text":"File Drop Component {R}\u2190\u2395FDROP Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fdrop/#access-code-32","title":"Access code 32","text":"<p><code>Y</code> must be a simple integer vector of length 2 or 3 whose elements are:</p> <code>[1]</code> a file tie number <code>[2]</code> a number specifying the position and number of components to be dropped.  A positive value indicates that components are to be removed from the beginning of the file; a negative value indicates that components are to be removed from the end of the file <code>[3]</code> an optional passnumber which if omitted is assumed to be zero <p>The shy result of a <code>\u2395FDROP</code> is a vector of the numbers of the dropped components. This is analogous to <code>\u2395FAPPEND</code> in that the result is potentially useful for updating some sort of dictionary:</p> <pre><code>      cnos,\u2190vec \u2395FAPPEND\u00a8tie \u235d Append index to dictionary\n\n      cnos~\u2190\u2395FDROP tie,-\u2374vec \u235d Remove index from dict.\n</code></pre> <p>Note that the result vector, though potentially large, is generated only on request.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fdrop/#examples","title":"Examples","text":"<pre><code>      \u2395FSIZE 1\n1 21 5436 4294967295\n\n      \u2395FDROP 1 3 \u22c4 \u2395FSIZE 1\n4 21 5436 4294967295\n\n      \u2395FDROP 1 \u00af2 \u22c4 \u2395FSIZE 1\n4 19 5436 4294967295\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/ferase/","title":"Ferase","text":"File Erase {R}\u2190X \u2395FERASE Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/ferase/#access-code-4","title":"Access code 4","text":"<p><code>Y</code> must be a simple integer scalar or 1 or 2 element vector containing the file tie number followed by an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  <code>X</code> must be a character scalar or vector containing the name of the file associated with the tie number <code>Y</code>.  This name must be identical with the name used to tie the file (except that the directory delimiters <code>/</code> and <code>\\</code> are treated as being the same) and the file must be exclusively tied.  The file named in <code>X</code> is erased and untied.</p> <p>The shy result of <code>\u2395FERASE</code> is the tie number of the erased file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/ferase/#examples","title":"Examples","text":"<pre><code>\n      'SALES'\u2395FERASE 'SALES' \u2395FTIE 0\n\n      './temp' \u2395FCREATE 1\n      'temp' \u2395FERASE 1\nFILE NAME ERROR\n      'temp'\u2395FERASE 1\n\n      \u2395\u2190'.\\temp'\u2395FERASE 1 \u235d Works with / or \\\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fhist/","title":"Fhist","text":"File History R\u2190\u2395FHIST Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fhist/#access-code-16384","title":"Access code 16384","text":"<p><code>Y</code> must be a simple integer vector of length 1 or 2 containing the file tie number and an optional passnumber. If the passnumber is omitted it is assumed to be zero.</p> <p>The result is a numeric matrix with shape (5 2) whose rows represent the most recent occurrence of the following events.</p> <ol> <li>File creation (see note)</li> <li>Undefined, currently <code>(0 0)</code></li> <li>Last update of the access matrix</li> <li>Undefined, currently <code>(0 0)</code></li> <li>Last update performed by <code>\u2395FAPPEND</code>, <code>\u2395FCREATE</code>, <code>\u2395FDROP</code> or <code>\u2395FREPLACE</code></li> </ol> <p>For each event, the first column contain the user number and the second a timestamp. Like the timestamp reported by <code>\u2395FRDCI</code> this is measured in 60ths of a second since 1st January 1970 (UTC).</p> <p>Note: <code>\u2395FHIST</code> collects information only if journaling and/or checksum is in operation. If neither is in use, the collection of data for <code>\u2395FHIST</code> is disabled and its result is entirely 0. If a file has both journaling and checksum disabled, and then either is  enabled, the collection of data for <code>\u2395FHIST</code> is enabled too. In this case, the information in row 1 of <code>\u2395FHIST</code> relates to the most recent enabling <code>\u2395FPROPS</code> operation rather than the original <code>\u2395FCREATE</code>.</p> <p>In the examples that follow, the <code>FHist</code> function is used below to format the result of <code>\u2395FHIST</code>.</p> <pre><code>\n     \u2207 r\u2190FHist tn;cols;rows;fhist;fmt;ToTS;I2D\n[1]    rows\u2190'Created' 'Undefined' 'Last \u2395FSTAC'\n[2]    rows,\u2190'Undefined' 'Last Updated'\n[3]    cols\u2190'User' 'TimeStamp'\n[4]    fmt\u2190'ZI4,2(\u2282-\u2283,ZI2),\u2282 \u2283,ZI2,2(\u2282:\u2283,ZI2)'\n[5]    I2D\u2190{+2 \u2395NQ'.' 'IDNToDate'\u2375}\n[6]    ToTS\u2190{d t\u21901 1 0 0 0\u2282\u2349\u230a0 24 60 60 60\u22a4\u2375\n[7]        \u2193fmt \u2395FMT(0 \u00af1\u2193\u2191I2D\u00a825568+,d),0 \u00af1\u2193t}\n[8]    fhist\u2190\u2395FHIST tn\n[9]    fhist[;2]\u2190ToTS fhist[;2]\n[10]   fhist[;1]\u2190\u2355\u00a8fhist[;1]\n[11]   r\u2190((\u2282''),rows),cols\u236afhist\n     \u2207 \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fhist/#examples","title":"Examples","text":"<pre><code>     'c:\\temp'\u2395FCREATE 1 \u22c4 FHist 1\n               User  TimeStamp            \n Created       0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last \u2395FSTAC   0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last Updated  0     2012-01-14 12:29:53\n\n      (\u237310)\u2395FAPPEND 1  \u22c4 FHist 1\n               User  TimeStamp            \n Created       0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last \u2395FSTAC   0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last Updated  0     2012-01-14 12:29:55 \n\n      \u2395FUNTIE 1\n\n      'c:\\temp'\u2395FCREATE 1 \u22c4 FHist 1\n               User  TimeStamp            \n Created       0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last \u2395FSTAC   0     2012-01-14 12:29:53  \n Undefined     0     1970-01-01 00:00:00  \n Last Updated  0     2012-01-14 12:29:55  \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fhold/","title":"Fhold","text":"File Hold {R}\u2190{X} \u2395FHOLD Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fhold/#access-code-2048","title":"Access code 2048","text":"<p>This function holds component file(s) and/or external variable(s). It is used  to synchronise access to resources shared between multiple cooperating Dyalog processes. It is not intended to synchronise access between Dyalog threads; for this purpose you should use  <code>:Hold</code>.</p> <p>For a  multi-threaded and multi-process application, a single <code>\u2395FHOLD</code> is used to synchronise inter-process access, while <code>:Hold</code> is used in multiple threads to synchronise access between  threads in the same process. See also Hold Statement on page 1Hold Statement.</p> <p>If applied to component files, then <code>Y</code> is an integer scalar, vector, or one-row matrix of file tie numbers, or a two-row matrix whose first row contains file tie numbers and whose second row contains passnumbers.</p> <p>If applied to external variables, then <code>Y</code> is a simple scalar character, a character vector, a non-simple scalar character vector, or a vector of character vectors that specifies one or more names of external variable(s) (NOT the file names associated with those variables). Note that when <code>Y</code> is simple, each character in <code>Y</code> is interpreted as a  variable name. If applied to component files and external variables, <code>Y</code> is a vector whose elements are either integer scalars representing tie numbers, or character scalars or vectors containing names of external variables.</p> <p>The effect is as follows:</p> <ol> <li>All of the user's preceding holds (if any) are released, whether referenced in <code>Y</code> or not.</li> <li>Execution is suspended until the designated files are free of holds by any other task.</li> <li>When all the designated files are free, execution proceeds.  Until the hold is released, other tasks using <code>\u2395FHOLD</code> on any of the designated files will wait.</li> </ol> <p>The optional left argument <code>X</code> is a non-negative integer that specifies a time-out in milliseconds. If step 2 (see above) does not complete before the time-out value specified by <code>X</code>, <code>\u2395FHOLD</code> times out and signals a <code>TIMEOUT</code> error (1006) after releasing any holds that have succeeded.</p> <p>A time-out value of 0 indicates that the <code>\u2395FHOLD</code> should time out at once without waiting if it cannot immediately acquire all holds. If <code>X</code> is <code>\u00af1</code>, <code>\u2395FHOLD</code> behaves as the monadic case, and does not time out.</p> <p>If <code>Y</code> is empty, all of the user's preceding holds (if any) are released, and execution continues.</p> <p>A hold is released by any of the following:</p> <ul> <li>Another <code>\u2395FHOLD</code></li> <li>Untying or retying all the designated files.  If some but not all are untied or retied, they become free for another task but the hold persists for those that remain tied.</li> <li>Termination of APL.</li> <li>Any untrapped error or interrupt.</li> <li>A return to immediate execution mode.</li> </ul> <p>Note that a hold is not released by a request for input through <code>\u2395</code> or <code>\u235e</code>.</p> <p><code>\u2395FHOLD</code> is generally useful only when called from a defined function, as holds set in immediate execution (desk calculator) mode are released immediately.</p> <p>If <code>Y</code> is a matrix, the shy result <code>R</code> is <code>Y[1;]</code>. Otherwise, the  shy result <code>R</code> is <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fhold/#examples","title":"Examples:","text":"<pre><code>      \u2395FHOLD 1\n\n      \u2395FHOLD \u236c\n\n      \u2395FHOLD \u2282'XTVAR'\n\n      \u2395FHOLD 1 2,[0.5]0 16385\n\n      \u2395FHOLD 1 'XTVAR'\n\n      3000 \u2395FHOLD 1\nTIMEOUT\n      3000 \u2395FHOLD 1\n           \u2227\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/flib/","title":"Flib","text":"Component File Library R\u2190\u2395FLIB Y <p><code>Y</code> must be a simple character scalar or vector which specifies the name of the directory whose APL component files are to be listed.  If <code>Y</code> is empty, the current working directory is assumed.</p> <p>The result <code>R</code> is a character matrix containing the names of the component files in the directory with one row per file.  The number of columns is given by the longest file name.  Each file name is prefixed by <code>Y</code> followed by a directory delimiter character.  The ordering of the rows is not defined.</p> <p>If there are no APL component files accessible to the user in the directory in question, the result is an empty character matrix with 0 rows and 0 columns.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/flib/#examples","title":"Examples","text":"<pre><code>\n      \u2395FLIB ''\nSALESFILE\nCOSTS\n\n      \u2395FLIB '.'\n./SALESFILE\n./COSTS\n\n      \u2395FLIB '../budget'\n../budget/SALES.85\n../budget/COSTS.85\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fnames/","title":"Fnames","text":"File Names R\u2190\u2395FNAMES <p>The result is a character matrix containing the names of all tied files, with one file name per row.  The number of columns is that required by the longest file name.</p> <p>A file name is returned precisely as it was specified when the file was tied, except that the directory delimiter <code>\\</code> is replaced by <code>/</code>.  If no files are tied, the result is a character matrix with 0 rows and 0 columns.  The rows of the result are in the order in which the files were tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fnames/#examples","title":"Examples","text":"<pre><code>      '/usr/pete/SALESFILE' \u2395FSTIE 16\n\n      '..\\budget\\COSTFILE' \u2395FSTIE 2\n\n      'PROFIT' \u2395FCREATE 5\n\n       \u2395FNAMES\n/usr/pete/SALESFILE\n../budget/COSTFILE\nPROFIT\n\n      \u2374\u2395FNAMES\n3 19\n      \u2395FNUMS,\u2395FNAMES\n16 /usr/pete/SALESFILE\n 2 ../budget/COSTFILE\n 5 PROFIT\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fnums/","title":"Fnums","text":"File Numbers R\u2190\u2395FNUMS <p>The result is an integer vector of the file tie number of all tied files.  If no files are tied, the result is empty.  The elements of the result are in the order in which the files were tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fnums/#examples","title":"Examples","text":"<pre><code>\n      '/home/pete/SALESFILE' \u2395FSTIE 16\n\n      '../budget/COSTFILE' \u2395FSTIE 2\n\n      'PROFIT' \u2395FCREATE 5\n\n      \u2395FNUMS\n16 2 5\n\n      \u2395FNUMS,\u2395FNAMES\n16 /home/pete/SALESFILE\n 2 ../budget/COSTFILE\n 5 PROFIT\n\n      \u2395FUNTIE \u2395FNUMS\n      \u2374\u2395FNUMS\n0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fprops/","title":"Fprops","text":"File Properties R\u2190X \u2395FPROPS Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fprops/#access-code-1-to-read-or-8192-to-change-properties","title":"Access Code 1 (to read) or 8192 (to change properties)","text":"<p><code>\u2395FPROPS</code> reports and sets the properties of a component file.</p> <p><code>Y</code> must be a simple integer scalar or  1 or 2-element vector containing the file tie number followed by an optional passnumber. If the passnumber is omitted, it is assumed to be 0.</p> <p><code>X</code> must be a simple character scalar or vector containing one or more valid Identifiers listed in the table below, or a 2-element nested vector which specifies an Identifier and a (new) value for that property. To set new values for more than one property, <code>X</code> must be is a vector of 2-element vectors, each of which contains an Identifier and a (new) value for that property.</p> <p>If the left argument is a simple character array, the result <code>R</code> contains the current values for the properties identified by <code>X</code>. If the left argument is nested, the result <code>R</code> contains the previous values for the properties identified by <code>X</code>.</p> Identifier Property Description / Legal Values <code>S</code> File Size (read only) 32 = Small-span Component Files (&lt;4GB) 64 = Large-span Component Files <code>E</code> Endian-ness (read only) 0 = Little-endian 1 = Big-endian <code>U</code> Unicode 0 = Characters will be written as type 82 arrays 1 = Characters will be written as Unicode arrays <code>J</code> Journaling 0 = Disable Journaling 1 = Enable APL crash proof Journaling 2 = Enable System crash proof Journaling; repair needed on recovery 3 = Enable full System crash proof Journaling <code>C</code> Checksum 0 = Disable checksum 1 = Enable checksum <code>Z</code> Compression 0 = Disable compression 1 = Enable compression <p>The default properties for a newly created file are as follows:</p> <ul> <li>S = 64</li> <li>U = 1 (in Unicode Edition) or 0 (in Classic Edition)</li> <li>J = 1</li> <li>C = 1</li> <li>Z = 0</li> <li>E depends upon the computer architecture.</li> </ul> <p>Note that the defaults for C and J can be overridden by calling <code>\u2395FCREATE</code> via the Variant operator <code>\u2360</code>. For further information, see File Properties on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fprops/#journaling-levels","title":"Journaling Levels","text":"<p>Level 1 journaling (APL crash-proof) automatically protects a component file from damage in the event of abnormal termination of the APL process. The file state will be implicitly committed between updates and an incomplete update will automatically be rolled forward or back when the file is re-tied. In the event of an operating system crash the file may be more seriously damaged. If checksum was also enabled it may be repaired using <code>\u2395 FCHK</code> but some components may be restored to a previous state or not restored at all.</p> <p>Level 2 journaling (system crash-proof \u2013 repair needed on recovery) extends level 1 by ensuring that a component file is fully repairable using <code>\u2395FCHK</code> with no component loss in the event of an operating system failure. If an update was in progress when the system crashed the affected component will be rolled back to the previous state. Tying and modifying such a file without first running <code>\u2395FCHK</code> may however render it un-repairable.</p> <p>Level 3 journaling (system crash-proof) extends level 2 by protecting a component file from damage in the event of abnormal termination of the APL process and also the operating system. Rollback of an incomplete update will be automatic and no explicit repair will be needed.</p> <p>Enabling journaling on a component file will reduce performance of file updates; higher journaling levels have a greater impact.</p> <p>Journaling levels 2 and 3 cannot be set unless the checksum option is also enabled.</p> <p>The default level of journaling may be changed using the APL_FCREATE_PROPS_J parameter (see Dyalog for Microsoft Windows Installation and Configuration Guide: Configuration Parameters for more information).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fprops/#checksum-option","title":"Checksum Option","text":"<p>The checksum option is enabled by default. This  enables a damaged file to be repaired using <code>\u2395FCHK</code>. It will however  reduce the performance of file updates slightly and result in larger component files. The default may be changed using the APL_FCREATE_PROPS_C parameter (See User Guide).</p> <p>Enabling the checksum option on an existing non-empty component file will result in all previously written components without a checksum  being check-summed and converted. This operation which will take place when <code>\u2395FPROPS</code> is changed, may not therefore be instantaneous.</p> <p>Journaling and checksum settings may be changed at any time a file is exclusively tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fprops/#example","title":"Example","text":"<pre><code>\n      tn\u2190'myfile64' \u2395FCREATE 0\n      'SEUJ' \u2395FPROPS tn\n64 0 1 0\n\n</code></pre> <p>The following expression disables Unicode and switches Journaling on. The function returns the previous settings:</p> <pre><code>\n      ('U' 0)('J' 1) \u2395FPROPS tn\n1 0\n</code></pre> <p>Note that to set the value of just a single property, the following two statements are equivalent:</p> <pre><code>\n      'J' 1 \u2395FPROPS tn\n      (,\u2282'J' 1) \u2395FPROPS tn\n</code></pre> <p>Properties may be read by a task with <code>\u2395FREAD</code> permission (access code 1), and set by a task with <code>\u2395FSTAC</code> access (8192). To set the value of the Journaling property, the file must be exclusively tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fprops/#recommendation","title":"Recommendation","text":"<p>It is recommended that all component files are protected by  a minimum of Level 1 Journalling and have Checksum enabled.</p> <p>Unprotected files  should only be used:</p> <ul> <li>for temporary work files where speed is paramount and integrity a secondary issue</li> <li>or where compatibility with Versions of Dyalog prior to Version 12.0 is required</li> </ul> <p>This recommendation is given for the following reasons:</p> <ul> <li>Unprotected files are easily damaged by abnormal termination of the interpreter</li> <li>They cannot be repaired using <code>\u2395FCHK</code></li> <li>They do not support <code>\u2395FHIST</code></li> <li>They are not well supported by the Dyalog File Server (DFS)</li> <li>They do not support compression of components</li> <li>Additional features added in future may not be supported</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fprops/#compression-option","title":"Compression Option","text":"<p>Components are compressed using the LZ4 compressor which delivers a medium level of compression, but is considered to be very fast compared to other algorithms.</p> <p>Compression is intended to deliver a performance gain reading and writing large components on fast computers with slow (e.g. network) file access. Conversely, on a slow computer with fast file access compression may actually reduce read/write performance. For this reason it is optional at the component level.</p> <p>The default for the <code>'Z'</code> property is 0 which means no compression; 1 means compression. When written, components are compressed or not according to the current value of the <code>'Z'</code> property. Changing this property does not change any components already in the file.</p> <p>A component file may therefore contain a mixture of normal and compressed components. Note that only the data in file components are compressed, the file access matrix and other header information is not compressed.</p> <p>When read, compressed components are decompressed regardless of the value of the <code>'Z'</code> property.</p> <p>An exclusive tie is not needed to change the file property.</p> <p>Compression is not supported for files in which both Journalling and Checksum are disabled.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/frdac/","title":"Frdac","text":"File Read Access R\u2190\u2395FRDAC Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/frdac/#access-code-4096","title":"Access code 4096","text":"<p><code>Y</code> must be a simple integer scalar or 1 or 2 element vector containing the file tie number followed by an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  The result is the access matrix for the designated file.</p> <p>For details see File Access Control on page 1Component Files.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/frdac/#examples","title":"Examples","text":"<pre><code>\n      \u2395FRDAC 1\n28 2105 16385\n 0 2073 16385\n31   \u00af1     0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/frdci/","title":"Frdci","text":"File Read Component Information R\u2190\u2395FRDCI Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/frdci/#access-code-512","title":"Access code 512","text":"<p><code>Y</code> must be a simple integer vector of length 2 or 3 containing the file tie number, component number and an optional passnumber.  If the passnumber is omitted it is assumed to be zero.</p> <p>The result is a 3 element numeric vector containing the following information:</p> <ol> <li>the size of the component in bytes (i.e. how much disk space it occupies).</li> <li>the user number of the user who last updated the component.</li> <li>the time of the last update in 60ths of a second since 1st January 1970 (UTC).</li> </ol>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/frdci/#example","title":"Example","text":"<pre><code>      \u2395FRDCI 1 13\n2200 207 3.702094494E10\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fread/","title":"Fread","text":"File Read Components R\u2190\u2395FREAD Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fread/#access-code-1","title":"Access code 1","text":"<p><code>Y</code> is a  2 or 3 item  vector containing the file tie number, the component number(s), and an optional passnumber.  If the passnumber is omitted it is assumed to be zero. All elements of <code>Y</code> must be integers.</p> <p>The second item in <code>Y</code> may be scalar which specifies a single component number or a vector of component numbers. If it is a scalar, the result is the value of the array that is stored in the specified component on the tied file. If it is a vector, the result is a vector of such arrays.</p> <p>Note that any invocation of  <code>\u2395FREAD</code> is an atomic operation.  Thus if <code>compnos</code> is a vector, the statement:</p> <pre><code>      \u2395FREAD tie compnos passno\n</code></pre> <p>will return the same result as:</p> <pre><code>      {\u2395FREAD tie \u2375 passno}\u00a8compnos\n</code></pre> <p>However, the first statement will, in the case of a share-tied file,  prevent any potential intervening file access from another user (without the need for a  <code>\u2395FHOLD</code>). It will also perform slightly faster, especially when reading from a share-tied file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fread/#examples","title":"Examples","text":"<pre><code>      \u2374SALES\u2190\u2395FREAD 1 241\n3 2 12\n\nGetFile\u2190{\u2395io\u21900                \u235d Extract contents.\n    tie\u2190\u2375 \u2395fstie 0            \u235d new tie number.\n    fm to\u21902\u2191\u2395fsize tie        \u235d first and next component.\n    cnos\u2190fm+\u2373to-fm            \u235d vector of component nos.\n    cvec\u2190\u2395fread tie cnos      \u235d vector of components.\n    cvec\u22a3\u2395funtie tie        \u235d ... untie and return.\n}\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/frename/","title":"Frename","text":"File Rename {R}\u2190X \u2395FRENAME Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/frename/#access-code-128","title":"Access code 128","text":"<p><code>Y</code> must be a simple 1 or 2 element integer vector containing a file tie number and an optional passnumber.  If the passnumber is omitted it is assumed to be zero.</p> <p><code>X</code> must be a simple character scalar or vector containing the new name of the file.  This name must be in accordance with the operating system's conventions, and may be specified with a relative or absolute pathname.</p> <p>The file being renamed must be tied exclusively.</p> <p>The shy result of <code>\u2395FRENAME</code> is the tie number of the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/frename/#examples","title":"Examples","text":"<pre><code>      'SALES' \u2395FTIE 1\n      'PROFIT' \u2395FTIE 2\n\n      \u2395FNAMES\nSALES\nPROFIT\n\n      'SALES.85' \u2395FRENAME 1\n      '../profits/PROFITS.85' \u2395FRENAME 2\n</code></pre> <pre><code>      \u2395FNAMES\nSALES.85\n../profits/PROFITS.85\n\nRename\u2190{\n    fm to\u2190\u2375\n    \u2395FUNTIE to \u2395FRENAME fm \u2395FTIE 0\n}\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/freplace/","title":"Freplace","text":"File Replace Component {R}\u2190X \u2395FREPLACE Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/freplace/#access-code-16","title":"Access code 16","text":"<p><code>Y</code> must be a simple 2 or 3 element integer vector containing the file tie number, the component number, and an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  The component number specified must lie within the file's component number limits.</p> <p><code>X</code> is any array (including, for example, the <code>\u2395OR</code> of a namespace), and overwrites the value of the specified component.  The component information (see \"File Read Component Information: \" on page 1) is also updated.</p> <p>The shy result of <code>\u2395FREPLACE</code> is the file index (component number of replaced record).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/freplace/#example","title":"Example","text":"<pre><code>      SALES\u2190\u2395FREAD 1 241\n\n      (SALES\u00d71.1) \u2395FREPLACE 1 241\n</code></pre> <p>Define a function to replace (index, value) pairs in a component file JMS.DCF:</p> <pre><code>Frep\u2190{\n    tie\u2190\u237a \u2395FTIE 0\n    _\u2190{\u2375 \u2395FREPLACE tie \u237a}/\u00a8\u2375\n    \u2395FUNTIE tie\n} \n\n      'jms'Frep(3 'abc')(29 'xxx')(7 'yyy')\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fresize/","title":"Fresize","text":"File Resize {R}\u2190{X}\u2395FRESIZE Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fresize/#access-code-1024","title":"Access code 1024","text":"<p><code>Y</code> must be a simple integer scalar or 1 or 2 element vector containing the file tie number followed by an optional passnumber.  If the passnumber is omitted it is assumed to be zero.</p> <p><code>X</code> is an integer that specifies the maximum permitted size of the file in bytes. The value 0 means the maximum possible size of file.</p> <p>An attempt to update a component file that would cause it to exceed its maximum size will fail with a <code>FILE FULL</code> error (21). A side effect of <code>\u2395FRESIZE</code> is to cause the file to be compacted. This process removes any gaps in the file caused by replacing a component with a shorter array. Any interrupt entered at the keyboard during the compaction is ignored. Note that if the left argument is omitted, the file is simply compacted and the maximum file size remains unchanged.</p> <p>During compaction, the file is restructured by reordering the components and by amalgamating the free areas at the end of the file. The file is then truncated and excess disk space is released back to the operating system. For a large file with many components, this process may take a significant time.</p> <p>The shy result of <code>\u2395FRESIZE</code> is the tie number of the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fresize/#example","title":"Example","text":"<pre><code>      'test'\u2395FCREATE 1 \u22c4 \u2395FSIZE 1\n1 1 120 1.844674407E19\n      (10 1000\u23741.1)\u2395FAPPEND 1 \u22c4 \u2395FSIZE 1\n1 2 80288 1.844674407E19\n\n      100000 \u2395FRESIZE 1 \u235d Limit size to 100000 bytes\n\n      (10 1000\u23741.1)\u2395FAPPEND 1\nFILE FULL\n      (10 1000\u23741.1)\u2395FAPPEND 1\n     \u2227\n\n      \u2395FRESIZE 1      \u235d Force file compaction.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fsize/","title":"Fsize","text":"File Size R\u2190\u2395FSIZE Y <p><code>Y</code> must be a simple integer scalar or 1 or 2 element vector containing the file tie number followed by an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  The result is a 4 element numeric vector containing the following:</p> Element Description 1 the number of first component 2 1 + the number of the last component, (i.e. the result of the next <code>\u2395FAPPEND</code> ) 3 the current size of the file in bytes 4 the file size limit in bytes"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fsize/#example","title":"Example","text":"<pre><code>      \u2395FSIZE 1\n1 21 65271 4294967295\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fstac/","title":"Fstac","text":"File Set Access {R}\u2190X \u2395FSTAC Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fstac/#access-code-8192","title":"Access code 8192","text":"<p><code>Y</code> must be a simple integer scalar or 1 or 2 element vector containing the file tie number followed by an optional passnumber. If the passnumber is omitted it is assumed to be zero.</p> <p><code>X</code> must be a valid access matrix, i.e. a 3-column integer matrix with any number of rows.  The function sets access control for a set of specific users (1st column) and file operations (2nd column) with specified passnumbers ( 3rd column). Note that a 0 in the 1st column specifies all users, a <code>\u00af1</code> in the 2nd column specifies all file operations, and a <code>0</code> in the 3rd column specifies that no passnumber is required. For further details, see File Access Control on page 1Component Files.</p> <p>The shy result of <code>\u2395FSTAC</code> is the tie number of the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fstac/#examples","title":"Examples","text":"<pre><code>\n      'SALES' \u2395FCREATE 1\n      (3 3\u237428 2105 16385 0 2073 16385 31 \u00af1 0) \u2395FSTAC 1\n      ((\u2395FRDAC 1)\u236a21 2105 16385) \u2395FSTAC 1\n\n       (1 3\u23740 \u00af1 0)\u2395FSTAC 2 \u235d Let everyone do anything\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fstie/","title":"Fstie","text":"File Share Tie {R}\u2190X \u2395FSTIE Y <p><code>Y</code> must be 0 or a simple 1 or 2 element integer vector containing an available file tie number to be associated with the file for further file operations, and an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  The tie number must not already be associated with a tied file.</p> <p><code>X</code> must be a simple character scalar or vector which specifies the name of the file to be tied.  The file must be named in accordance with the operating system's conventions, and may be specified with a relative or absolute pathname.</p> <p>The file must exist and be accessible by the user.  If it is already tied by another task, it must not be tied exclusively.</p> <p>The shy result of <code>\u2395FSTIE</code> is the tie number of the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fstie/#automatic-tie-number-allocation","title":"Automatic Tie Number Allocation","text":"<p>A tie number of 0 as argument to a create, share tie or exclusive tie operation, allocates the first (closest to zero) available tie number and returns it as an explicit result. This allows you to simplify code. For example:</p> <p>from:</p> <pre><code>      tie\u21901+\u2308/0,\u2395FNUMS  \u235d With next available number,\n      file \u2395FSTIE tie   \u235d ... share tie file.\n</code></pre> <p>to:</p> <pre><code>      tie\u2190file \u2395FSTIE 0 \u235d Tie with 1st available number.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/fstie/#example","title":"Example","text":"<pre><code>      'SALES' \u2395FSTIE 1\n\n      '../budget/COSTS' \u2395FSTIE 2\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/ftie/","title":"Ftie","text":"Exclusive File Tie {R}\u2190X \u2395FTIE Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/ftie/#access-code-2","title":"Access code 2","text":"<p><code>Y</code> must be 0 or a simple 1 or 2 element integer vector containing an available file tie number to be associated with the file for further file operations, and an optional passnumber.  If the passnumber is omitted it is assumed to be zero.  The tie number must not already be associated with a share tied or exclusively tied file.</p> <p><code>X</code> must be a simple character scalar or vector which specifies the name of the file to be exclusively tied.  The file must be named in accordance with the operating system's conventions, and may be a relative or absolute pathname.</p> <p>The file must exist and  the user must have write access to it.  It may not already be tied by another user.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/ftie/#automatic-tie-number-allocation","title":"Automatic Tie Number Allocation","text":"<p>A tie number of 0 as argument to a create, share tie or exclusive tie operation, allocates the first (closest to zero) available tie number, and returns it as an explicit result. This allows you to simplify code. For example:</p> <p>from:</p> <pre><code>      tie\u21901+\u2308/0,\u2395FNUMS \u235d With next available number,\n      file \u2395FTIE tie   \u235d ... tie file.\n</code></pre> <p>to:</p> <pre><code>      tie\u2190file \u2395FTIE 0 \u235d Tie with first available number.\n</code></pre> <p>The shy result of <code>\u2395FTIE</code> is the tie number of the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/ftie/#examples","title":"Examples","text":"<pre><code>      'SALES' \u2395FTIE 1\n\n      '../budget/COSTS' \u2395FTIE  2\n\n      '../budget/expenses' \u2395FTIE 0\n3\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/funtie/","title":"Funtie","text":"File Untie {R}\u2190\u2395FUNTIE Y <p><code>Y</code> must be a simple integer scalar or vector (including Zilde).  Files whose tie numbers occur in <code>Y</code> are untied.  Other elements of <code>Y</code> have no effect.</p> <p>If <code>Y</code> is empty, no files are untied, but all the interpreter's internal file buffers are flushed and the operating system is asked to flush all file updates  to disk.  This special facility allows the programmer to add extra security (at the expense of performance) for application data files.</p> <p>The shy result of <code>\u2395FUNTIE</code> is a vector of tie numbers of the files actually untied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/component-files/component-files/funtie/#example","title":"Example","text":"<pre><code>      \u2395FUNTIE \u2395FNUMS \u235d Unties all tied files\n\n      \u2395FUNTIE \u236c      \u235d Flushes all buffers to disk\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/","title":"Error Handling","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/dmx/","title":"Dmx","text":"Extended Diagnostic Message R\u2190\u2395DMX <p><code>\u2395DMX</code> is a system object that provides information about the last reported APL error. <code>\u2395DMX</code> has thread scope, i.e. its value differs according to the thread from which it is referenced. In a multi-threaded application therefore, each thread has its own value of <code>\u2395DMX</code>.</p> <p><code>\u2395DMX</code> contains the following Properties (name class 2.6). Note that this list is likely to change. Your code should not assume that this list will remain unchanged. You should also not assume that the display form of <code>\u2395DMX</code> will remain unchanged.</p> <code>Category</code> character vector The category of the error <code>DM</code> nested vector Diagnostic message. This is the same as <code>\u2395DM</code> , but thread safe <code>EM</code> character vector Event message; this is the same as <code>\u2395EM \u2395EN</code> <code>EN</code> integer Error number. This is the same as <code>\u2395EN</code> , but thread safe <code>ENX</code> integer Sub-error number <code>HelpURL</code> character vector URL of a web page that will provide help for this error. APL identifies and has a handler for URLs starting with http: , https: , mailto: and www. This list may be extended in future <code>InternalLocation</code> nested vector Identifies the line of interpreter source code (file name and line number) which raised the error. This information may be useful to Dyalog support when investigating an issue <code>Message</code> character vector Further information about the error <code>OSError</code> see below If applicable, identifies the error generated by the Operating System or by a child process <code>Vendor</code> character vector For system generated errors, <code>Vendor</code> will always contain the character vector <code>'Dyalog'</code> . This value can be set using <code>\u2395SIGNAL</code> <p>OSError is a 3-element vector whose items are as follows:</p> <code>1</code> integer This indicates how an error from the operating system or a child process was retrieved. 0 = by the C-library errno() function 1 = by the Windows GetLastError() function 2 = as the exit status of a child process <code>2</code> integer Error code. The error number returned by the operating system using errno() or GetLastError() as above <code>3</code> character vector The description of the error returned by the operating system"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/dmx/#example","title":"Example","text":"<pre><code>      1\u00f70\nDOMAIN ERROR\n      1\u00f70\n     \u2227\n      \u2395DMX\n EM       DOMAIN ERROR                              \n Message  Divide by zero                            \n\n      \u2395DMX.InternalLocation\n arith_su.c  554\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/dmx/#isolation-of-handled-errors","title":"Isolation of Handled Errors","text":"<p><code>\u2395DMX</code> cannot be explicitly localised in the header of a function. However, for all trapped errors, the interpreter creates an environment which effectively makes the current instance of <code>\u2395DMX</code> local to, and available only for the duration of, the trap-handling code.</p> <p>With the exception of <code>\u2395TRAP</code> with Cutback,  <code>\u2395DMX</code> is implicitly localised within:</p> <ul> <li>Any function which explicitly localises <code>\u2395TRAP</code></li> <li>The <code>:Case[List]</code> or <code>:Else</code> clause of a <code>:Trap</code> control structure.</li> <li>The right hand side of a D-function Error-Guard.</li> </ul> <p>and is implicitly un-localised when:</p> <ul> <li>A function which has explicitly localised <code>\u2395TRAP</code> terminates (even if the trap definition has been inherited from a function further up the stack).</li> <li>The <code>:EndTrap</code> of the current <code>:Trap</code> control structure is reached.</li> <li>A D-function Error-Guard exists.</li> </ul> <p>During this time, if an error occurs then the localised <code>\u2395DMX</code> is updated to reflect the values generated by the error.</p> <p>The same is true for <code>\u2395TRAP</code> with Cutback, with the exception that  if the cutback trap event is triggered, the updated values for <code>\u2395DMX</code> are preserved until the function that set the cutback trap terminates.</p> <p>The benefit of the localisation strategy is that code which uses error trapping as a standard operating procedure (such as a file utility which traps <code>FILE NAME ERROR</code> and creates missing files when required) will not pollute the environment with irrelevant error information.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/dmx/#example_1","title":"Example","text":"<pre><code>     \u2207 tie\u2190NewFile name\n[1]    :Trap 22\n[2]        tie\u2190name \u2395FCREATE 0\n[3]    :Else\n[4]        \u2395DMX\n[5]        tie\u2190name \u2395FTIE 0\n[6]        name \u2395FERASE tie\n[7]        tie\u2190name \u2395FCREATE 0\n[8]    :EndTrap\n[9]    \u2395FUNTIE tie\n     \u2207\n\n</code></pre> <p><code>\u2395DMX</code> is cleared by  <code>)RESET</code>:</p> <pre><code>\n      )reset\n      \u2374\u2395FMT \u2395DMX\n0 0\n\n</code></pre> <p>The first time we run <code>NewFile 'pete'</code>, the file doesn't exist and  the <code>\u2395FCREATE</code> in <code>NewFile[2]</code>succeeds.</p> <pre><code>  NewFile 'pete'\n</code></pre> <p>1</p> <p>If we run the function again, the <code>\u2395FCREATE</code> in <code>NewFile[2]</code>generates an error which triggers the <code>:Else</code> clause of the :<code>Trap</code>.  On entry to the <code>:Else</code> clause, the values in <code>\u2395DMX</code> reflect the error generated by <code>\u2395FCREATE</code>. The file is then tied, erased and  recreated.  EM       FILE NAME ERROR                                       Message  File exists</p> <p>After exiting the <code>:Trap</code> control structure, the shadowed value of <code>\u2395DMX</code> is discarded, revealing the original value that it shadowed.</p> <pre><code>  \u2374\u2395FMT \u2395DMX\n</code></pre> <p>0 0</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/dmx/#example_2","title":"Example","text":"<p>The <code>EraseFile</code> function also uses a <code>:Trap</code> in order to ignore the situation when the file doesn't exist.      \u2207 EraseFile name;tie [1]    :Trap 22 [2]        tie\u2190name \u2395FTIE 0 [3]        name \u2395FERASE tie [4]    :Else [5]        \u2395DMX [6]    :EndTrap      \u2207</p> <p>The first time we run the function, it succeeds in tieing and then erasing the file.</p> <pre><code>  EraseFile 'pete'\n</code></pre> <p>The second time, the <code>\u2395FTIE</code> fails. On entry to the <code>:Else</code> clause, the values in <code>\u2395DMX</code> reflect this error.</p> <pre><code>  EraseFile 'pete'\n</code></pre> <p>EM       FILE NAME ERROR                                        Message  Unable to open file                                    OSError  1 2  The system cannot find the file specified.        </p> <p>Once again, the local value of <code>\u2395DMX</code> is discarded on exit from the <code>:Trap</code>, revealing the shadowed value as before.</p> <pre><code>  \u2374\u2395FMT \u2395DMX\n</code></pre> <p>0 0</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/dmx/#example_3","title":"Example","text":"<p>In this example only the error number (<code>EN</code>) property of <code>\u2395DMX</code> is displayed in order to simplify the output:</p> <pre><code>\n     \u2207 foo n;\u2395TRAP\n[1]    'Start foo'\u2395DMX.EN\n[2]    \u2395TRAP\u2190(2 'E' '\u2192err')(11 'C' '\u2192err')\n[3]    goo n\n[4]   err:'End foo:'\u2395DMX.EN\n     \u2207\n\n     \u2207 goo n;\u2395TRAP\n[1]    \u2395TRAP\u21905 'E' '\u2192err'\n[2]    \u234en\u2283'\u00f70' '1 2+1 2 3' '\u2218'\n[3]   err:'goo:'\u2395DMX.EN\n     \u2207\n\n</code></pre> <p>In the first case a <code>DOMAIN ERROR</code> (11) is generated on <code>goo[2]</code>. This error is not included in the definition of <code>\u2395TRAP</code> in <code>goo</code>, but rather  the Cutback <code>\u2395TRAP</code> definition in <code>foo</code>. The error causes the stack to be cut back to <code>foo</code>, and then execution branches to <code>foo[4]</code>.  Thus <code>\u2395DMX.EN</code> in <code>foo</code> retains the value set when the error occurred in <code>goo</code>.</p> <pre><code>      foo 1\n Start foo  0\n End foo:  11\n\n</code></pre> <p>In the second case a <code>LENGTH ERROR</code> (5) is raised on <code>goo[2]</code>.   This error is included in the definition of <code>\u2395TRAP</code> in <code>goo</code> so the value <code>\u2395DMX.EN</code> while in <code>goo</code> is 5, but when <code>goo</code> terminates and <code>foo</code> resumes execution the value of <code>\u2395DMX.EN</code> localised in <code>goo</code> is lost.</p> <pre><code>      foo 2\n Start foo  0\n goo:  5\n End foo:  0\n\n</code></pre> <p>In the third case a <code>SYNTAX ERROR</code> (2) is raised on <code>goo[2]</code>. Since the <code>\u2395TRAP</code> statement is handled within <code>goo</code> (although the applicable <code>\u2395TRAP</code> is defined in <code>foo</code>), the value <code>\u2395DMX.EN</code> while in <code>goo</code> is 2, but when <code>goo</code> terminates and <code>foo</code> resumes execution the value of <code>\u2395DMX.EN</code> localised in <code>goo</code> is lost.</p> <pre><code>      foo 3\n Start foo  0\n goo:  2\n End foo:  0\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/em/","title":"Em","text":"Event Message R\u2190\u2395EM Y <p><code>Y</code> must be a simple non-negative integer scalar or vector of event codes.  If <code>Y</code> is a scalar, <code>R</code> is a simple character vector containing the associated event message.  If <code>Y</code> is a vector, <code>R</code> is a vector of character vectors containing the corresponding event messages.</p> <p>If <code>Y</code> refers to an undefined error code \"<code>n</code>\", the event message returned is \"<code>ERROR NUMBER n</code>\".</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/em/#example","title":"Example","text":"<pre><code>      \u2395EM 11\nDOMAIN ERROR\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/en/","title":"En","text":"Event Number R\u2190\u2395EN <p>This simple integer scalar reports the identification number for the most recent event which occurred, caused by an APL action or by an interrupt or by the <code>\u2395SIGNAL</code> system function.  Its value in a clear workspace is <code>0</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/en/#example","title":"Example","text":"<pre><code>\n      \u00f70\nDOMAIN ERROR: Divide by zero\n      \u00f70\n     \u2227\n      \u2395EN\n11\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/exception/","title":"Exception","text":"Exception R\u2190\u2395EXCEPTION <p>This is a system object that identifies the most recent Exception thrown by a Microsoft .NET object.</p> <p><code>\u2395EXCEPTION</code> derives from the Microsoft .NET class System.Exception. Among its properties are the following, all of which are strings:</p> <code>Source</code> The name of the .NET namespace in which the exception was generated <code>StackTrace</code> The calling stack <code>Message</code> The error message <pre><code>      \u2395USING\u2190'System'\n      DT\u2190\u2395NEW DateTime (100000 0 0)\nEXCEPTION: Year, Month, and Day parameters describe an un-representable DateTime.\n      DT\u2190\u2395NEW DateTime(100000 0 0)\n     \u2227\n      \u2395EN\n90\n</code></pre> <pre><code>      \u2395EXCEPTION.Message\nYear, Month, and Day parameters describe an un-representable DateTime.\n\n      \u2395EXCEPTION.Source\nmscorlib\n\n      \u2395EXCEPTION.StackTrace\n   at System.DateTime.DateToTicks(Int32 year,\n                                  Int32 month, Int32 day)\n\n   at System.DateTime..ctor(Int32 year,\n                            Int32 month, Int32 day)\n</code></pre> <p>Similarly to GUI objects, <code>\u2395EXCEPTION</code> is not preserved across a save/load cycle if the workspace is loaded in a different interpreter.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/signal/","title":"Signal","text":"Signal Event {R}\u2190{X}\u2395SIGNAL Y <p><code>Y</code> must be a scalar or vector.</p> <p>If <code>Y</code> is a an empty vector nothing is signalled.</p> <p>If <code>Y</code> is a vector of more than one element, all but the first element are ignored.</p> <p><code>R</code> has the same value as <code>Y</code>.</p> <p><code>Y=0</code> is a special form of <code>\u2395SIGNAL</code>, the side effect of which is to reset the values of certain system constants. It is described further down this section.</p> <p>If the first element of <code>Y</code> is a simple integer it is taken to be an event number. Permitted values are 0, 1-999 and 1006.  <code>X</code> is an optional text message.   If present, <code>X</code> must be a simple character scalar or vector, or an object reference. If <code>X</code> is omitted or is  empty, the standard event message for the corresponding event number  is assumed. . If there is no standard message, a message of the form <code>ERROR NUMBER n</code> is composed, where <code>n</code> is the event number in <code>Y</code>. Values outside the permitted range will result in a <code>DOMAIN ERROR</code>.</p> <p>If the first element of <code>Y</code> is a 2 column matrix or a vector of 2 element vectors of name/values pairs, then it is considered to be a set of values to be used to override the default values in a new instance of <code>\u2395DMX</code>. Any other value for the first element of <code>Y</code> will result in a <code>DOMAIN ERROR</code>.</p> <p>The names in the error specification must all  appear in a system-generated <code>\u2395DMX</code>, otherwise a <code>DOMAIN ERROR</code> will be issued. For each name specified, the default value in the new instance of <code>\u2395DMX</code> is replaced with the value specified. <code>EN</code> must be one of the names in the error specification. Attempting to specify certain names, including <code>InternalLocation</code> and <code>DM</code>, will result in a <code>DOMAIN ERROR</code>. The value which is to be assigned to a name must be appropriate to the name in question.</p> <p>Dyalog may enhance <code>\u2395DMX</code> in future, thus potentially altering the list of valid and/or assignable names.</p> <p>If the first element of <code>Y</code> is an array of name/value pairs then  specifying any value for <code>X</code> will result in a <code>DOMAIN ERROR</code>.</p> <p>The effect of the system function is to interrupt execution.  The state indicator is cut back to exit from the function or operator containing the line that invoked <code>\u2395SIGNAL</code>, or is cut back to exit the Execute (<code>\u234e</code>) expression that invoked <code>\u2395SIGNAL</code>. If executed within a nested dfn, the state indicator is cut back to exit from the capsule containing the line that invoked <code>\u2395SIGNAL</code>. An error is then generated.</p> <p>An error interrupt may be trapped if the system variable <code>\u2395TRAP</code> is set to intercept the event.  Otherwise, the standard system action is taken (which may involve cutting back the state indicator further if there are locked functions or operators in the state indicator).  The standard event message is replaced by the text given in <code>X</code>, if present.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/signal/#example","title":"Example","text":"<pre><code>      \u2395VR'DIVIDE'\n     \u2207 R\u2190A DIVIDE B;\u2395TRAP\n[1]    \u2395TRAP\u219011 'E' '\u2192ERR'\n[2]    R\u2190A\u00f7B \u22c4 \u21920\n[3]   ERR:'DIVISION ERROR' \u2395SIGNAL 11\n     \u2207\n\n      2 4 6 DIVIDE 0\nDIVISION ERROR\n      2 4 6 DIVIDE 0\n     ^\n</code></pre> <p>If you are using the Microsoft .NET Framework, you may use <code>\u2395SIGNAL</code> to throw an exception by specifying a value of 90 in <code>Y</code>. In this case, if you specify the optional left argument <code>X</code>, it must be a reference to a .NET object that is or derives from the Microsoft .NET class System.Exception. The following example illustrates a constructor function <code>CTOR</code> that expects to be called with a value for <code>\u2395IO</code> (0 or 1)</p> <pre><code>     \u2207 CTOR IO;EX\n[1]    :If IO\u220a0 1\n[2]        \u2395IO\u2190IO\n[3]    :Else\n[4]        EX\u2190ArgumentException.New'IO must be 0 or 1'\n[5]        EX \u2395SIGNAL 90\n[6]    :EndIf\n     \u2207\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/signal/#signal-0-reset-error-related-system-constants","title":"\u2395SIGNAL 0: Reset error-related system constants","text":"<p>If <code>Y</code> is a simple integer with the value 0, <code>\u2395SIGNAL</code> does not interrupt execution, but merely returns the value 0. The side effect of calling <code>\u2395SIGNAL 0</code> is to reset the values of <code>\u2395DM</code>, <code>\u2395DMX</code>, <code>\u2395EN</code> and <code>\u2395EXCEPTION</code> to their default values. <code>\u2395SIGNAL 0</code> is the only form of <code>\u2395SIGNAL</code> which can be used to reset the aforementioned system constants; including a left argument or using a name/value pair right argument of <code>\u2395SIGNAL</code> will result in a <code>DOMAIN ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/signal/#example_1","title":"Example:","text":"<pre><code>  \u00f70\n</code></pre> <p>DOMAIN ERROR: Divide by zero       \u00f70      \u2227       \u2395DM \u2395EN \u2395DMX \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250211\u2502 EM       DOMAIN ERROR   \u2502 \u2502\u2502DOMAIN ERROR\u2502      \u00f70\u2502     \u2227\u2502\u2502  \u2502 Message  Divide by zero \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502  \u2502                         \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u22a2\u2395SIGNAL 0 0       \u2395DM \u2395EN \u2395DMX \u250c\u252c\u2500\u252c\u2510 \u2502\u25020\u2502\u2502 \u2514\u2534\u2500\u2534\u2518</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/signal/#further-examples","title":"Further examples","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/signal/#example-1","title":"Example 1","text":"<pre><code>  'Hello'\u2395SIGNAL 200\n</code></pre> <p>Hello       'Hello'\u2395SIGNAL 200      \u2227       \u2395DMX  EM       Hello   Message            </p> <pre><code>  \u2395DM\n</code></pre> <p>Hello        'Hello'\u2395SIGNAL 200       \u2227 </p> <pre><code>  \u2395SIGNAL\u2282\u2282('EN' 200)\n</code></pre> <p>ERROR 200       \u2395SIGNAL\u2282\u2282('EN' 200)      \u2227</p> <pre><code>  \u2395DMX\n</code></pre> <p>EM       ERROR 200   Message    </p> <pre><code>  \u2395DM\n</code></pre> <p>ERROR 200        \u2395SIGNAL\u2282\u2282('EN' 200)       \u2227 </p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/signal/#example-2","title":"Example 2","text":"<pre><code>  \u2395SIGNAL\u2282('EN' 200)('Vendor' 'Andy')('Message' 'My error')\n</code></pre> <p>ERROR 200: My error       \u2395SIGNAL\u2282('EN' 200)('Vendor' 'Andy')('Message' 'My error')      \u2227</p> <pre><code>      \u2395DMX\n EM       ERROR 200 \n Message  My error\n</code></pre> <pre><code>      \u236a\u2395DMX.(EN EM Vendor)\n       200 \n ERROR 200 \n      Andy \n</code></pre> <p>Be aware of the following case, in which the argument has not been sufficiently nested:</p> <pre><code>  \u2395SIGNAL\u2282('EN' 200)\n</code></pre> <p>DOMAIN ERROR: Unexpected name in signalled \u2395DMX specification       \u2395SIGNAL\u2282('EN' 200)      \u2227</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/trap/","title":"Trap","text":"Trap Event \u2395TRAP <p>This is a non-simple vector.  An item of <code>\u2395TRAP</code> specifies an action to be taken when one of a set of events occurs.  <code>\u2395TRAP</code> has workspace scope.</p> <p>An item of <code>\u2395TRAP</code> is a 2 or 3 element vector whose items are simple scalars or vectors in the following order:</p> <ol> <li>an integer vector whose value is one or more event codes selected from the list in the Figure on the following two pages.</li> <li>a character scalar whose value is an action code selected from the letters <code>C</code>, <code>E</code>, <code>N</code> or <code>S</code>.</li> <li>if element 2 is the letter <code>C</code> or <code>E</code>, this item is a character vector forming a valid APL expression or series of expressions separated by <code>\u22c4</code>.  Otherwise, this element is omitted.</li> </ol> <p>An EVENT may be an APL execution error, an interrupt by the user or the system, a control interrupt caused by the <code>\u2395STOP</code> system function, or an event generated by the <code>\u2395SIGNAL</code> system function.</p> <p>When an event occurs, the system searches for a trap definition for that event.  The most local <code>\u2395TRAP</code> value is searched first, followed by successive shadowed values of <code>\u2395TRAP</code>, and finally the global <code>\u2395TRAP</code> value.  Separate actions defined in a single <code>\u2395TRAP</code> value are searched from left to right.  If a trap definition for the event is found, the defined action is taken.  Otherwise, the normal system action is followed.</p> <p>The ACTION code identifies the nature of the action to be taken when an associated event occurs.  Permitted codes are interpreted as follows:</p> <p>Trappable Event Codes</p> <code>C</code> Cutback The state indicator is 'cut back' to the environment in which the <code>\u2395TRAP</code> is locally defined (or to immediate execution level).  The APL expression in element 3 of the same <code>\u2395TRAP</code> item is then executed. <code>E</code> Execute The APL expression in element 3 of the same <code>\u2395TRAP</code> item is executed in the environment in which the event occurred. <code>N</code> Next The event is excluded from the current <code>\u2395TRAP</code> definition.  The search will continue through further localised definitions of <code>\u2395TRAP</code> . <code>S</code> Stop Stops the search and causes the normal APL action to be taken in the environment in which the event occurred. Code Event <code>0</code> <code>Any event in range 1-999</code> <code>1</code> <code>WS FULL</code> <code>2</code> <code>SYNTAX ERROR</code> <code>3</code> <code>INDEX ERROR</code> <code>4</code> <code>RANK ERROR</code> <code>5</code> <code>LENGTH ERROR</code> <code>6</code> <code>VALUE ERROR</code> <code>7</code> <code>FORMAT ERROR</code> <code>10</code> <code>LIMIT ERROR</code> <code>11</code> <code>DOMAIN ERROR</code> <code>12</code> <code>HOLD ERROR</code> <code>16</code> <code>NONCE ERROR</code> <code>18</code> <code>FILE TIE ERROR</code> <code>19</code> <code>FILE ACCESS ERROR</code> <code>20</code> <code>FILE INDEX ERROR</code> <code>21</code> <code>FILE FULL</code> <code>22</code> <code>FILE NAME ERROR</code> <code>23</code> <code>FILE DAMAGED</code> <code>24</code> <code>FILE TIED</code> <code>25</code> <code>FILE TIED REMOTELY</code> <code>26</code> <code>FILE SYSTEM ERROR</code> <code>28</code> <code>FILE SYSTEM NOT AVAILABLE</code> <code>30</code> <code>FILE SYSTEM TIES USED UP</code> <code>31</code> <code>FILE TIE QUOTA USED UP</code> <code>32</code> <code>FILE NAME QUOTA USED UP</code> <code>34</code> <code>FILE SYSTEM NO SPACE</code> <code>35</code> <code>FILE ACCESS ERROR - CONVERTING FILE</code> <code>38</code> <code>FILE COMPONENT DAMAGED</code> <code>52</code> <code>FIELD CONTENTS RANK ERROR</code> <code>53</code> <code>FIELD CONTENTS TOO MANY COLUMNS</code> <code>54</code> <code>FIELD POSITION ERROR</code> <code>55</code> <code>FIELD SIZE ERROR</code> <code>56</code> <code>FIELD CONTENTS/TYPE MISMATCH</code> <code>57</code> <code>FIELD TYPE/BEHAVIOUR UNRECOGNISED</code> <code>58</code> <code>FIELD ATTRIBUTES RANK ERROR</code> <code>59</code> <code>FIELD ATTRIBUTES LENGTH ERROR</code> <code>60</code> <code>FULL-SCREEN ERROR</code> <code>61</code> <code>KEY CODE UNRECOGNISED</code> <code>62</code> <code>KEY CODE RANK ERROR</code> <code>63</code> <code>KEY CODE TYPE ERROR</code> <code>70</code> <code>FORMAT FILE ACCESS ERROR</code> <code>71</code> <code>FORMAT FILE ERROR</code> <code>72</code> <code>NO PIPES</code> <code>76</code> <code>PROCESSOR TABLE FULL</code> <code>84</code> <code>TRAP ERROR</code> <code>90</code> <code>EXCEPTION</code> <code>92</code> <code>TRANSLATION ERROR</code> <code>|</code> <code>200-499</code> <code>Reserved for distributed auxiliary processors</code> <code>|</code> <code>500-999</code> <code>User-defined events</code> <code>|</code> <code>1000</code> <code>Any event in range 1001-1008</code> <code>1001</code> <code>Stop vector</code> <code>1002</code> <code>Weak interrupt</code> <code>1003</code> <code>INTERRUPT</code> <code>1005</code> <code>EOF INTERRUPT</code> <code>1006</code> <code>TIMEOUT</code> <code>1007</code> <code>RESIZE (Dyalog APL/X, Dyalog APL/W)</code> <code>1008</code> <code>DEADLOCK</code> <p>See  Trap StatementProgrammer's Guide: \"Trap Statement\" for an alternative 'control structured' error trapping mechanism.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/trap/#examples","title":"Examples","text":"<pre><code>      \u2395TRAP\u2190\u2282(3 4 5) 'E' 'ERROR' \u22c4 \u2374\u2395TRAP\n1\n\n      \u2395TRAP\n  3 4 5 E ERROR\n</code></pre> <p>Items may be specified as scalars.  If there is only a single trap definition, it need not be enclosed.  However, the value of <code>\u2395TRAP</code> will be rigorously correct:</p> <pre><code>      \u2395TRAP\u219011 'E' '\u2192LAB'\n\n      \u2395TRAP\n  11 E \u2192ERR\n\n      \u2374\u2395TRAP\n1\n</code></pre> <p>The value of <code>\u2395TRAP</code> in a clear workspace is an empty vector whose prototype is</p> <p><code>0\u2374(\u236c '' '')</code>.  A convenient way of cancelling a <code>\u2395TRAP</code> definition is:</p> <pre><code>      \u2395TRAP\u21900\u2374\u2395TRAP\n</code></pre> <p>Event codes 0 and 1000 allow all events in the respective ranges 1-999 and 1000-1006 to be trapped.  Specific event codes may be excluded by the <code>N</code> action (which must precede the general event action):</p> <pre><code>      \u2395TRAP\u2190(1 'N')(0 'E' '\u2192GENERR')\n</code></pre> <p>The 'stop' action is a useful mechanism for cancelling trap definitions during development of applications.</p> <p>The 'cut-back' action is useful for returning control to a known point in the application system when errors occur.  The following example shows a function that selects and executes an option with a general trap to return control to the function when an untrapped event occurs:</p> <pre><code>\n     \u2207 SELECT;OPT;\u2395TRAP\n[1]   \u235d Option selection and execution\n[2]   \u235d A general cut-back trap\n[3]    \u2395TRAP\u2190(0 1000)'C' '\u2192ERR'\n[4]   INP:\u235e\u2190'OPTION : ' \u22c4 OPT\u2190(OPT\u2260' ')/OPT\u21909\u2193\u235e\n[5]    \u2192EX\u2374\u2368(\u2282OPT)\u220aOptions \u22c4 'INVALID OPTION' \u22c4 \u2192INP\n[6]   EX:\u234eOPT \u22c4 \u2192INP\n[7]   ERR:ERROR\u2206ACTION \u22c4 \u2192INP\n[8]   END:\n     \u2207\n</code></pre> <p>User-defined events may be signalled through the <code>\u2395SIGNAL</code> system function.  A user-defined event (in the range 500-999) may be trapped explicitly or implicitly by the event code 0.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/error-handling/error-handling/trap/#example","title":"Example","text":"<pre><code>      \u2395TRAP\u2190500 'E' '''USER EVENT 500 - TRAPPED'''\n\n      \u2395SIGNAL 500\nUSER EVENT 500 - TRAPPED\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/","title":"GUI and COM Support","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/dq/","title":"Dq","text":"Dequeue Events {R}\u2190\u2395DQ Y <p><code>\u2395DQ</code> awaits and processes events.  <code>Y</code> specifies the GUI objects(s) for which events are to be processed.  Objects are identified by their names, as character scalars/vectors, or by namespace references. These may be objects of type Root, Form, Locator, FileBox, MsgBox, PropertySheet, TCPSocket, Timer, Clipboard and pop-up Menu. Sub-objects (children) of those named in <code>Y</code> are also included.  However, any objects which exist, but are not named in <code>Y</code>, are effectively disabled (do not respond to the user).</p> <p>If <code>Y</code> is <code>#</code>, <code>'#'</code>, or <code>'.'</code>, all objects currently owned and subsequently created by the current thread are included in the <code>\u2395DQ</code>. Note that because the Root object is owned by thread 0, events on Root are reported only to thread 0.</p> <p>If <code>Y</code> is empty it specifies the object associated with the current namespace and is only valid if the current space is one of the objects listed above.</p> <p>Otherwise, <code>Y</code> contains the name(s) of or reference(s) to the objects for which events are to be processed.  Effectively, this is the list of objects with which the user may interact.  A <code>DOMAIN ERROR</code> is reported if an element of <code>Y</code> refers to anything other than an existing \"top-level\" object.</p> <p>Associated with every object is a set of events.  For every event there is defined an \"action\" which specifies how that event is to be processed by <code>\u2395DQ</code>.  The \"action\" may be a number with the value <code>0</code>, <code>1</code> or <code>\u00af1</code>,  a character vector containing the name of a \"callback function\", or a character vector containing the name of a callback function coupled with an arbitrary array.  Actions can be defined in a number of ways, but the following examples will illustrate the different cases.</p> <pre><code>      OBJ \u2395WS 'Event' 'Select' 0\n\n      OBJ \u2395WS 'Event' 'Select' 1\n\n      OBJ \u2395WS 'Event' 'Select' 'FOO'\n\n      OBJ \u2395WS 'Event' 'Select' 'FOO' 10\n\n      OBJ \u2395WS 'Event' 'Select' 'FOO&amp;'\n</code></pre> <p>These are treated as follows:</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/dq/#action-0-the-default","title":"Action = 0 (the default)","text":"<p><code>\u2395DQ</code> performs \"standard\" processing appropriate to the object and type of event.  For example, the standard processing for a KeyPress event in an Edit object is to action the key press, i.e. to echo the character on the screen.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/dq/#action-1","title":"Action = \u00af1","text":"<p>This disables the event.  The \"standard\" processing appropriate to the object and type of event is not performed, or in some cases is reversed.  For example, if the \"action code\" for a KeyPress event (22) is set to <code>\u00af1</code>,  <code>\u2395DQ</code> simply ignores all keystrokes for the object in question.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/dq/#action-1_1","title":"Action = 1","text":"<p><code>\u2395DQ</code> terminates and returns information pertaining to the event (the event message) in <code>R</code> as a nested vector whose first two elements are the name of the object (that generated the event) and the event code.  <code>R</code> may contain additional elements depending upon the type of event that occurred.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/dq/#action-fn-larg","title":"Action = fn {larg}","text":"<p><code>fn</code> is a character vector containing the name of a callback function.  This function is automatically invoked by <code>\u2395DQ</code> whenever the event occurs, and prior to the standard processing for the event.  The callback is supplied the event message (see above) as its right argument, and, if specified, the array <code>larg</code> as its left argument.  If the callback function fails to return a result, or returns the scalar value 1,  <code>\u2395DQ</code> then performs the standard processing appropriate to the object and type of event.  If the callback function returns a scalar 0, the standard processing is not performed or in some cases is reversed.</p> <p>If the callback function returns its event message with some of the parameters changed, these changes are incorporated into the standard processing.  An example would be the processing of a keystroke message where the callback function substitutes upper case for lower case characters. The exact nature of this processing is described in the reference section on each event type.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/dq/#action-expr","title":"Action = \u234eexpr","text":"<p>If <code>Action</code> is set to a character vector whose first element is the execute symbol (<code>\u234e</code>) the remaining string will be executed automatically whenever the event occurs.  The default processing for the event is performed first and may not be changed or inhibited in any way.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/dq/#action-fn-larg_1","title":"Action = fn&amp; {larg}","text":"<p><code>fn</code> is a character vector containing the name of a callback function.  The function is executed in a new thread. The default processing for the event is performed first and may not be changed or inhibited in any way.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/dq/#the-result-of-dq","title":"The Result of \u2395DQ","text":"<p><code>\u2395DQ</code> terminates, returning the shy result <code>R</code>, in one of four instances.</p> <p>Firstly, <code>\u2395DQ</code> terminates when an event occurs whose \"action code\" is 1.  In this case, its result is a nested vector containing the event message associated with the event.  The structure of an event message varies according to the event type (see Object Reference).  However, an event message has at least two elements of which the first is a ref to the object or a character vector containing the name of the object, and the second is a character vector or numeric code which identifies the event type.</p> <p><code>\u2395DQ</code> also terminates if all of the objects named in <code>Y</code> have been deleted.  In this case, the result is an empty character vector.  Objects are deleted either using <code>\u2395EX</code>, or on exit from a defined function or operator if the names are localised in the header, or on closing a form using the system menu.</p> <p>Thirdly, <code>\u2395DQ</code> terminates if the object named in its right argument is a special modal object, such as a <code>MsgBox</code>, <code>FileBox</code> or <code>Locator</code>, and the user has finished interacting with the object (e.g. by pressing an \"OK\" button).  The return value of <code>\u2395DQ</code> in this case depends on the action code of the event.</p> <p>Finally, <code>\u2395DQ</code> terminates with a <code>VALUE ERROR</code> if it attempts to execute a callback function that is undefined.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/export/","title":"Export","text":"Export Object {R}\u2190{X}\u2395EXPORT Y <p><code>\u2395EXPORT</code> is used to set or query the export type of a defined function (or operator) referenced by the <code>\u2395PATH</code> mechanism.</p> <p><code>Y</code> is a character matrix or vector-of-vectors representing the names of functions and operators whose export type is to be set or queried.</p> <p><code>X</code> is an integer scalar or vector (one per name in the namelist) indicating the export type.  <code>X</code> can currently be one of the values:</p> <ul> <li>0 - not exported.</li> <li>1 - exported (default).</li> </ul> <p>A scalar or 1-element-vector type is replicated to conform with a multi-name list.</p> <p>The result <code>R</code> is a vector that reports the export type of the functions and operators named in <code>Y</code>.  When used dyadically to set export type, the result is shy.</p> <p>When the path mechanism locates a referenced function (or operator) in the list of namespaces in the <code>\u2395PATH</code> system variable, it examines the function's export type:</p> 0 This instance of the function is ignored and the search is resumed at the next namespace in the <code>\u2395PATH</code> list.  Type-0 is typically used for functions residing in a utility namespace which are not themselves utilities, for example the private sub-function of a utility function. 1 This instance of the function is executed in the namespace in which it was found and the search terminated.  The effect is exactly as if the function had been referenced by its full path name. <p>Warning: The left domain of <code>\u2395EXPORT</code> may be extended in future to include extra types 2, 3,... (for example, to change the behaviour of the function).  This means that, while <code>\u2395EXPORT</code> returns a Boolean result in the first version, this may not be the case in the future.  If you need a Boolean result, use <code>0\u2260</code> or an equivalent.</p> <pre><code>   (0\u2260\u2395EXPORT \u2395nl 3 4)\u233f\u2395nl 3 4  \u235d list of exported\n                                \u235d functions and ops.\n</code></pre> <p><code>\u2395EXPORT</code> does not support derived functions and will not be extended to support them; nor will it be extended to support other types of functions that may be developed in the future. <code>\u2395EXPORT</code> may therefore be considered an archaic feature.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/nq/","title":"Nq","text":"Enqueue Event {R}\u2190{X}\u2395NQ Y <p>This system function generates an event or invokes a method.</p> <p>While APL is executing, events occur \"naturally\" as a result of user action or of communication with other applications.  These events are added to the event queue as and when they occur, and are subsequently removed and processed one by one by <code>\u2395DQ</code>.  <code>\u2395NQ</code> provides an \"artificial\" means to generate an event and is analogous to <code>\u2395SIGNAL</code>.</p> <p>If the left argument <code>X</code> is omitted or is 0, <code>\u2395NQ</code> adds the event specified by <code>Y</code> to the bottom of the event queue. The event will subsequently be processed by <code>\u2395DQ</code> when it reaches the top of the queue.</p> <p>If <code>X</code> is 1, the event is actioned immediately by <code>\u2395NQ</code> itself and is processed in exactly the same way as it would be processed by <code>\u2395DQ</code>.  For example, if the event has a callback function attached, <code>\u2395NQ</code> will invoke it directly. See \"Dequeue Events: \" on page 1 for further details. If the event generates any subsidiary events (for example, a KeyPress might generate a GotFocus), the subsidiary events are added to the event queue rather than being executed immediately.</p> <p>Note that it is not possible for one thread to use <code>1 \u2395NQ</code> to send an event to another thread.</p> <p>If <code>X</code> is 2 and the name supplied is the name of an event, <code>\u2395NQ</code> performs the default processing for the event immediately, but does not invoke a callback function if there is one attached.</p> <p>If <code>X</code> is 2 and the name supplied is the name of a (Dyalog APL) method, <code>\u2395NQ</code> invokes the method.  Its (shy) result is the result produced by the method.</p> <p>If <code>X</code> is 3, <code>\u2395NQ</code> invokes a method in an OLE Control.  The (shy) result of <code>\u2395NQ</code> is the result produced by the method.</p> <p>If <code>X</code> is 4, <code>\u2395NQ</code> signals an event from an ActiveXControl object to its host application.  The (shy) result of <code>\u2395NQ</code> is the result returned by the host application and depends upon the syntax of the event. This case is only applicable to ActiveXControl objects.</p> <p><code>Y</code> is a nested vector containing an event message.  The first two elements of <code>Y</code>are:</p> <code>[1]</code> Object ref or character vector <code>[2]</code> Event numeric scalar or character vector which specifies an event or method <p><code>Y[1]</code> must specify an existing object.  If not, <code>\u2395NQ</code> terminates with a <code>VALUE ERROR</code>.</p> <p>If <code>Y[2]</code> specifies a standard event type, subsequent elements must conform to the structure defined for that event type.  If not, <code>\u2395NQ</code> terminates with a <code>SYNTAX ERROR</code>. If additional elements (beyond those defined for the event type) are supplied this will not cause an error, but is not recommended because Dyalog may extend the event message in the future.</p> <p>If <code>Y[2]</code> specifies a non-standard event type, <code>Y[3]</code> onwards (if present) may contain arbitrary information.  Although any event type not listed herein may be used, numbers in the range 0-1000 are reserved for future extensions.</p> <p>If <code>\u2395NQ</code> is used monadically, or with a left argument of 0, its (shy) result is always an empty character vector.  If a left argument of 1 is specified, <code>\u2395NQ</code> returns <code>Y</code> unchanged or a modified <code>Y</code> if the callback function returns its modified argument as a result.</p> <p>If the left argument is 2, <code>\u2395NQ</code> returns either the value 1 or a value that is appropriate.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/nq/#examples","title":"Examples","text":"<pre><code>      \u235d Send a keystroke (\"A\") to an Edit Field\n      \u2395NQ TEST.ED 'KeyPress' 'A'\n\n      \u235d Iconify all top-level Forms\n      {\u2395NQ \u2375 'StateChange' 1}\u00a8'Form'\u2395WN'.'\n\n      \u235d Set the focus to a particular field\n      \u2395NQ TEST.ED3 40\n\n      \u235d Throw a new page on a printer\n      1 \u2395NQ PR1 'NewPage'\n\n      \u235d Terminate \u2395DQ under program control\n\n      'TEST'\u2395WC 'Form' ... ('Event' 1001 1)\n      ...\n      \u2395DQ 'TEST'\n      ...\n      \u2395NQ TEST 1001  \u235d From a callback\n\n      \u235d Call GetItemState method for a TreeView F.TV\n      +2 \u2395NQ F.TV 'GetItemState' 6\n96\n\n      \u235d Report where APL is installed\n      +2 \u2395NQ'.' 'GetEnvironment' 'DYALOG'\nC:\\Program Files\\Dyalog\\Dyalog APL-64 15.0 Unicode\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/wc/","title":"Wc","text":"Window Create Object {R}\u2190{X}\u2395WC Y <p>This system function creates a GUI object.  <code>Y</code> is either a vector which specifies properties that determine the new object's appearance and behaviour, or a ref to or the <code>\u2395OR</code> of a GUI object that exists or previously existed.  <code>X</code> is a character vector which specifies the name of the new object, and its position in the object hierarchy.</p> <p>If <code>X</code> is omitted, <code>\u2395WC</code> attaches a GUI component to the current namespace, retaining any functions, variables and other namespaces that it may contain.  Monadic <code>\u2395WC</code> is discussed in detail at the end of this section.</p> <p>If <code>Y</code> is a nested vector each element specifies a property.  The <code>Type</code> property (which specifies the class of the object) must be specified.  Most other properties take default values and need not be explicitly stated.  Properties (including <code>Type</code>) may be declared either positionally or with a keyword followed by a value. Note that <code>Type</code> must always be the first property specified. Properties are specified positionally by placing their values in <code>Y</code> in the order prescribed for an object of that type.</p> <p>If <code>Y</code> is a ref or the result of <code>\u2395OR</code>, the new object is a complete copy of the other, including any child objects, namespaces, functions and variables that it contained at that time.</p> <p>The shy result <code>R</code> is the full name (starting <code>#.</code> or   <code>\u2395SE</code>.) of the namespace <code>X</code>.</p> <p>An object's name is specified by giving its full pathname in the object hierarchy.  At the top of the hierarchy is the <code>Root</code> object whose name is \"<code>.</code>\".  Below \"<code>.</code>\" there may be one or more \"top-level\" objects.  The names of these objects follow the standard rules for other APL objects as described in Chapter 1.</p> <p>Names for sub-objects follow the same rules except that the character \"<code>.</code>\" is used as a delimiter to indicate parent/child relationships.</p> <p>The following are examples of legal and illegal names:</p> Legal Illegal <code>FORM1</code> <code>FORM 1</code> <code>form_23</code> <code>form#1</code> <code>Form1.Gp</code> <code>11_Form</code> <code>F1.g2.b34</code> <code>Form+1</code> <p>If <code>X</code> refers to the name of an APL variable, label, function, or operator, a <code>DOMAIN ERROR</code> is reported.  If <code>X</code> refers to the name of an existing GUI object or namespace, the existing one is replaced by the new one.  The effect is the same as if it were deleted first.</p> <p>If <code>Y</code> refers to a non-existent property, or to a property that is not defined for the type of object <code>X</code>, a <code>DOMAIN ERROR</code> is reported.  A <code>DOMAIN ERROR</code> is also reported if a value is given that is inconsistent with the corresponding property.  This can occur for example, if <code>Y</code> specifies values positionally and in the wrong order.</p> <p>A \"top-level\" object created by <code>\u2395WC</code> whose name is localised in a function/operator header, is deleted on exit from the function/operator.  All objects, including sub-objects, can be deleted using <code>\u2395EX</code>.</p> <p>GUI objects are named relative to the current namespace, so the following examples are equivalent:</p> <pre><code>      'F1.B1' \u2395WC 'Button'\n</code></pre> <p>is equivalent to :</p> <pre><code>      )CS F1\n#.F1\n      'B1' \u2395WC 'Button'\n      )CS\n#\n</code></pre> <p>is equivalent to :</p> <pre><code>      'B1' F1.\u2395WC 'Button'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/wc/#examples","title":"Examples","text":"<pre><code>\u235d Create a default Form called F1\n\n      'F1' \u2395WC 'Form'\n\n\u235d Create a Form with specified properties (by position)\n\u235d   Caption = \"My Application\"  (Title)\n\u235d   Posn    = 10 30  (10% down, 30% across)\n\u235d   Size    = 80 60  (80% high, 60% wide)\n\n      'F1' \u2395WC 'Form' 'My Application' (10 30)(80 60)\n\n\n</code></pre> <pre><code>\u235d Create a Form with specified properties (by keyword)\n\u235d   Caption = \"My Application\"  (Title)\n\u235d   Posn    = 10 30  (10% down, 30% across)\n\u235d   Size    = 80 60  (80% high, 60% wide)\n\n      PROPS\u2190\u2282'Type' 'Form'\n      PROPS,\u2190\u2282'Caption' 'My Application'\n      PROPS,\u2190\u2282'Posn' 10 30\n      PROPS,\u2190\u2282'Size' 80 60\n      'F1' \u2395WC PROPS\n\n\u235d Create a default Button (a pushbutton) in the Form F1\n\n      'F1.BTN' \u2395WC 'Button'\n\n\u235d Create a pushbutton labelled \"Ok\"\n\u235d 10% down and 10% across from the start of the FORM\n\u235d with callback function FOO associated with EVENT 30\n\u235d (this event occurs when the user presses the button)\n\n      'F1.BTN'\u2395WC'Button' '&amp;Ok' (10 10)('Event' 30 'FOO')\n</code></pre> <p>Monadic <code>\u2395WC</code> is used to attach a GUI component to an existing object.  The existing object must be a pure namespace or a GUI object.  The operation may be performed by changing space to the object or by running <code>\u2395WC</code>inside the object using the dot syntax.  For example, the following statements are equivalent.</p> <pre><code>      )CS F\n#.F\n      \u2395WC 'Form'  \u235d Attach a Form to this namespace\n\n      )CS\n#\n      F.\u2395WC'Form' \u235d Attach a Form to namespace F\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/wg/","title":"Wg","text":"Window Get Property R\u2190{X}\u2395WG Y <p>This system function returns property values for a GUI object.</p> <p><code>X</code> is a namespace reference or a character vector containing the name of the object. <code>Y</code> is a character vector or a vector of character vectors containing the name(s) of the properties whose values are required. The result <code>R</code> contains the current values of the specified properties. If <code>Y</code> specifies a single property name, a single property value is returned. If <code>Y</code> specifies more than one property, <code>R</code> is a vector with one element per name in <code>Y</code>.</p> <p>If <code>X</code> refers to a non-existent GUI name, a <code>VALUE ERROR</code> is reported. If <code>Y</code> refers to a non-existent property, or to a property that is not defined for the type of object <code>X</code>, a <code>DOMAIN ERROR</code> is reported.</p> <p>GUI objects are named relative to the current namespace. A null value of <code>X</code> (referring to the namespace in which the function is being evaluated) may be omitted. The following examples are equivalent:</p> <pre><code>\n      'F1.B1' \u2395WG 'Caption'\n      'B1' F1.\u2395WG 'Caption'\n      '' F1.B1.\u2395WG 'Caption'\n      F1.B1.\u2395WG 'Caption'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/wg/#examples","title":"Examples","text":"<pre><code>\n      'F1' \u2395WC 'Form' 'TEST'\n\n      'F1' \u2395WG 'Caption'\nTEST\n\n      'F1' \u2395WG 'MaxButton'\n1\n\n      'F1' \u2395WG 'Size'\n50 50\n\n      ]display 'F1' \u2395WG 'Caption' 'MaxButton' 'Size'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502TEST\u2502 1 \u250250 50\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518   \u2514~\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/wn/","title":"Wn","text":"Window Child Names R\u2190{X}\u2395WN Y <p>This system function reports the GUI objects whose parent is <code>Y</code>.</p> <p>If <code>Y</code> is a name (i.e. is a character vector) then the result <code>R</code> is a vector of character vectors containing the names of the named direct GUI children of <code>Y</code>.</p> <p>If <code>Y</code> is a reference  then the result <code>R</code> is a vector of references to  the direct GUI children of <code>Y</code>, named or otherwise.</p> <p>The optional left argument <code>X</code> is a character vector which specifies the <code>Type</code> of GUI object to be reported; if <code>X</code> is not specified, no such filtering is performed.</p> <p>Names of objects further down the tree are not returned, but can be obtained by recursive use of <code>\u2395WN</code>.</p> <p>If <code>Y</code> refers to a namespace with no GUI element, a <code>VALUE ERROR</code> is reported.</p> <p>Note that <code>\u2395WN</code> reports only those child objects visible from the current thread.</p> <p>GUI objects are named relative to the current namespace.  The following examples are equivalent:</p> <pre><code>      \u2395WN 'F1.B1'\n      F1.\u2395WN 'B1'\n      F1.B1.\u2395WN ''    \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/wn/#example","title":"Example","text":"<pre><code>      f\u2190\u2395NEW\u2282'Form'\n      f.n\u2190\u2395ns''                  \u235d A non-GUI object       \n      f.l\u2190f.\u2395NEW\u2282'Label'         \u235d A reference to a Label\n      'f.b1'\u2395wc'Button'          \u235d A named Button\n      f.(b2\u2190\u2395new \u2282'Button')      \u235d A reference to a Button\n      \u2395wn 'f'\n [Form].b1\n      \u2395wn f\n #.[Form].[Label]  #.[Form].b1  #.[Form].[Button]\n      'Button' \u2395wn f\n #.[Form].b1  #.[Form].[Button]\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/ws/","title":"Ws","text":"Window Set Property {R}\u2190{X}\u2395WS Y <p>This system function resets property values for a GUI object.</p> <p><code>X</code> is a namespace reference or a character vector containing the name of the object.  <code>Y</code> defines the property or properties to be changed and the new value or values.  If a single property is to be changed, <code>Y</code> is a vector whose first element <code>Y[1]</code> is a character vector containing the property name.  If <code>Y</code> is of length 2, <code>Y[2]</code> contains the corresponding property value.  However, if the property value is itself a numeric or nested vector, its elements may be specified in <code>Y[2 3 4 ...]</code> instead of as a single nested element in <code>Y[2]</code>.  If <code>Y</code> specifies more than one property, they may be declared either positionally or with a keyword followed by a value.  Properties are specified positionally by placing their values in <code>Y</code> in the order prescribed for an object of that type.  Note that the first property in <code>Y</code> must always be specified with a keyword because the <code>Type</code> property (which is expected first) may not be changed using <code>\u2395WS</code>.</p> <p>If <code>X</code> refers to a non-existent GUI name, a <code>VALUE ERROR</code> is reported.  If <code>Y</code> refers to a non-existent property, or to a property that is not defined for the type of object <code>X</code>, or to a property whose value may not be changed by <code>\u2395WS</code>, a <code>DOMAIN ERROR</code> is reported.</p> <p>The shy result <code>R</code> contains the previous values of the properties specified in <code>Y</code>.</p> <p>GUI objects are named relative to the current namespace.  A null value of <code>X</code> (referring to the namespace in which the function is being evaluated) may be omitted.  The following examples are equivalent:</p> <pre><code>      'F1.B1' \u2395WS 'Caption' '&amp;Ok'\n      'B1' F1.\u2395WS 'Caption' '&amp;Ok'\n      '' F1.B1.\u2395WS 'Caption' '&amp;Ok'\n      F1.B1.\u2395WS 'Caption' '&amp;Ok'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/ws/#examples","title":"Examples","text":"<pre><code>      'F1' \u2395WC 'Form'  \u235d A default Form\n\n      'F1' \u2395WS 'Active' 0\n\n      'F1' \u2395WS 'Caption' 'My Application'\n\n      'F1' \u2395WS 'Posn' 0 0\n\n      'F1' \u2395WS ('Active' 1)('Event' 'Configure' 'FOO')\n\n      'F1' \u2395WS 'Junk' 10\nDOMAIN ERROR\n\n      'F1' \u2395WS 'MaxButton' 0\nDOMAIN ERROR\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/wx/","title":"Wx","text":"Window Expose \u2395WX <p><code>\u2395WX</code> is a system variable with the value 0, 1or 3. <code>\u2395WX</code> has Namespace scope.</p> <p>Considered as a sum of bit flags, the first bit in <code>\u2395WX</code> specifies (a); the second  (b) as follows:</p> <ol> <li>whether or not the names of properties, methods and events provided by a Dyalog APL GUI object are exposed </li> <li>certain aspects of behaviour of .NET and COM objects</li> </ol> <p>If <code>\u2395WX</code> is 1 (1st bit is set), the names of properties, methods and events are exposed as reserved names in GUI namespaces and can be accessed directly by name. This means that the same names may not be used for global variables in GUI namespaces.</p> <p>If <code>\u2395WX</code> is 0, these names are hidden and may only be accessed indirectly using <code>\u2395WG</code> and <code>\u2395WS</code>.</p> <p>If <code>\u2395WX</code> is 3 (2nd bit is also set) COM and .NET objects adopt the  behaviour introduced in Version 11, as opposed to the behaviour in previous versions of Dyalog APL.</p> <p>Any attempt to set <code>\u2395WX</code> to 2 generates a <code>DOMAIN ERROR</code>.</p> <p>Note that it is the value of <code>\u2395WX</code> in the object itself, rather than the value of <code>\u2395WX</code> in the calling environment, that determines its behaviour.</p> <p>When you create an object, its <code>\u2395WX</code> (like any other system variable) is initially inherited from its parent.</p> <p>If the value of <code>\u2395WX</code> of a GUI object is initially 0, it will not expose its members. If you subsequently change it from 0 to 1, it will expose them. If you change its <code>\u2395WX</code> back to 0, it will not expose any yet-unexposed members, although already-exposed members will continue to be exposed.</p> <p>The value of <code>\u2395WX</code> in a clear workspace is defined by the default_wx parameter (see Configuration Parameters default_wx on page 1) which itself defaults to 3.</p> <p><code>\u2395WX</code> has namespace scope and may be localised in a function header. This allows you to create a utility namespace or utility function in which the exposure of objects is known and determined, regardless of its global value in the workspace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/gui-and-com-support/gui-and-com-support/wx/#notes","title":"Notes:","text":"<ul> <li>The visibility of the properties and methods of the Root object are not controlled by <code>\u2395WX</code> but by the PropertyExposeRoot parameter. For further information, see PropertyExposeRoot Parameter PropertyExposeRoot on page 1.</li> <li><code>\u2395WX</code> is retained for backwards compatibility and should be considered as deprecated. Dyalog recommends  <code>\u2395WX</code> be set to 3 and never changed.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/input-and-output/","title":"Input and Output","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/inputoutput/character-input-output/","title":"Character input output","text":"Character Input/Output \u235e <p><code>\u235e</code> is a variable which communicates between the user's terminal and APL.  Its behaviour depends on whether it is being assigned or referenced.</p> <p>When <code>\u235e</code> is assigned with a vector or a scalar, the array is displayed without the normal ending new-line character.  Successive assignments of vectors or scalars to <code>\u235e</code> without any intervening input or output cause the arrays to be displayed on the same output line.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/inputoutput/character-input-output/#example","title":"Example","text":"<pre><code>      \u235e\u2190'2+2' \u22c4 \u235e\u2190'=' \u22c4 \u235e\u21904\n2+2=4\n</code></pre> <p>Output through <code>\u235e</code> is independent of the print width in <code>\u2395PW</code>.  The way in which lines exceeding the print width of the terminal are treated is dependent on the characteristics of the terminal.  Numeric output is formatted in the same manner as direct output (see  Display of ArraysProgrammer's Guide: \"Display of Arrays\").</p> <p>When <code>\u235e</code> is assigned with a higher-rank array, the output is displayed in the same manner as for direct output except that the print width <code>\u2395PW</code> is ignored.</p> <p>When <code>\u235e</code> is referenced, terminal input is expected without any specific prompt, and the response is returned as a character vector.</p> <p>If the <code>\u235e</code> request was preceded by one or more assignments to <code>\u235e</code> without any intervening input or output, the last (or only) line of the output characters are returned as part of the response.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/inputoutput/character-input-output/#example_1","title":"Example","text":"<pre><code>      mat\u2190\u2191\u233d\u235e\u235e\u235e\u235e\u235e\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/inputoutput/character-input-output/#examples","title":"Examples","text":"<pre><code>      \u235e\u2190'OPTION : ' \u22c4 R\u2190\u235e\nOPTION : INPUT\n\n      R\nOPTION : INPUT\n\n      \u2374R\n14\n</code></pre> <p>The output of simple arrays of rank greater than 1 through <code>\u235e</code> includes a new-line character at the end of each line.  Input through <code>\u235e</code> includes the preceding output through <code>\u235e</code> since the last new-line character.</p> <p>A soft interrupt causes an <code>INPUT INTERRUPT</code> error if entered while <code>\u235e</code> is awaiting input, and execution is then suspended (unless the interrupt is trapped):</p> <pre><code>      R\u2190\u235e\n</code></pre> <p>(Interrupt)</p> <pre><code>INPUT INTERRUPT\n</code></pre> <p>A time limit is imposed on input through <code>\u235e</code> if <code>\u2395RTL</code> is set to a non-zero value:</p> <pre><code>      \u2395RTL\u21905 \u22c4 \u235e\u2190'PASSWORD ? ' \u22c4 R\u2190\u235e\nPASSWORD ?\nTIMEOUT\n      \u2395RTL\u21905 \u22c4 \u235e\u2190'PASSWORD : ' \u22c4 R\u2190\u235e\n                                   ^\n</code></pre> <p>The <code>TIMEOUT</code> interrupt is a trappable event.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/inputoutput/evaluated-input-output/","title":"Evaluated input output","text":"Evaluated Input/Output \u2395 <p><code>\u2395</code> is a variable which communicates between the user's terminal and APL.  Its behaviour depends on whether it is being assigned or referenced.</p> <p>When <code>\u2395</code> is assigned an array, the array is displayed at the terminal in exactly the same form as is direct output (see  Display of ArraysProgrammer's Guide: \"Display of Arrays\").</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/inputoutput/evaluated-input-output/#example","title":"Example","text":"<pre><code>      \u2395\u21902+\u23735\n3 4 5 6 7\n\n      \u2395\u21902 4\u2374'WINEMART'\nWINE\nMART\n</code></pre> <p>When <code>\u2395</code> is referenced, a prompt (<code>\u2395:</code>) is displayed at the terminal, and input is requested.  The response is evaluated and an array is returned if the result is valid.  If an error occurs in the evaluation, the error is reported as normal (unless trapped by a <code>\u2395TRAP</code> definition) and the prompt (<code>\u2395:</code>) is again displayed for input.  An EOF interrupt reports <code>INPUT INTERRUPT</code> and the prompt (<code>\u2395:</code>) is again displayed for input.  A soft interrupt is ignored and a hard interrupt reports <code>INTERRUPT</code> and the prompt (<code>\u2395:</code>) is redisplayed for input.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/inputoutput/evaluated-input-output/#examples","title":"Examples","text":"<pre><code>      10\u00d7\u2395+2\n\u2395:\n      \u23733\n30 40 50\n\n      2+\u2395\n\u2395:\n      X\nVALUE ERROR\n      X\n     ^\n\u2395:\n      2+\u23733\n5 6 7\n</code></pre> <p>A system command may be entered.  The system command is effected and the prompt is displayed again (unless the system command changes the environment):</p> <pre><code>      \u23743,\u2395\n\u2395:\n      )WSID\nWS/MYWORK\n\u2395:\n      )SI\n\u2395\n\u2395:\n      )CLEAR\nCLEAR WS\n</code></pre> <p>If the response to a <code>\u2395:</code> prompt is an abort statement (<code>\u2192</code>), the execution will be aborted:</p> <pre><code>      1 2 3 = \u2395\n\u2395:\n      \u2192\n</code></pre> <p>A trap definition on interrupt events set for the system variable <code>\u2395TRAP</code> in the range 1000-1008 has no effect whilst awaiting input in response to a <code>\u2395:</code> prompt.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/inputoutput/evaluated-input-output/#example_1","title":"Example","text":"<pre><code>      \u2395TRAP\u2190(11 'C' '''ERROR''')(1000 'C' '''STOP''')\n\n      2+\u2395\n\u2395:\n      (Interrupt Signal)\nINTERRUPT\n\u2395:\n      'C'+2\nERROR\n</code></pre> <p>A time limit set in system variable <code>\u2395RTL</code> has no effect whilst awaiting input in response to a <code>\u2395:</code> prompt.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/inputoutput/rtl/","title":"Rtl","text":"Response Time Limit \u2395RTL <p>A non-zero value in <code>\u2395RTL</code> places a time limit, in seconds, for input requested via <code>\u235e</code>, <code>\u2395ARBIN</code>, and <code>\u2395SR</code>.  <code>\u2395RTL</code> may be assigned any integer in the range 0 to 32767.  The value in a clear workspace is 0. <code>\u2395RTL</code> has Namespace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/input-and-output/inputoutput/rtl/#example","title":"Example","text":"<pre><code>      \u2395RTL\u21905 \u22c4 \u235e\u2190'FUEL QUANTITY?' \u22c4 R\u2190\u235e\nFUEL QUANTITY?\nTIMEOUT\n      \u2395RTL\u21905 \u22c4 \u235e\u2190'FUEL QUANTITY?' \u22c4 R\u2190\u235e\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/","title":"Manipulating Functions and Operators","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/at/","title":"At","text":"Attributes R\u2190{X} \u2395AT Y <p><code>Y</code> can be a simple character scalar, vector or matrix, or a vector of character vectors representing the names of 0 or more defined functions or operators. Used dyadically, this function closely emulates the APL2 implementation. Used monadically, it returns information that is more appropriate for Dyalog APL.</p> <p><code>Y</code> specifies one or more names. If <code>Y</code> specifies a single name as a character scalar, a character vector, or as a scalar enclosed character vector, the result <code>R</code> is a vector. If <code>Y</code> specifies one or more names as a character matrix or as a vector of character vectors <code>R</code> is a matrix with one row per name in <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/at/#monadic-use","title":"Monadic Use","text":"<p>If <code>X</code> is omitted, <code>R</code> is a 4-element vector or a 4 column matrix with the same number of rows as names in <code>Y</code> containing the following attribute information:</p> <p><code>R[1]</code> or <code>R[;1]</code>: Each item is a 3-element integer vector representing the function header syntax:</p> 1 Function result 0 if the function has no result 1 if the function has an explicit result <code>\u00af1</code> if the function has a shy result 2 Function valence 0 if the object is a niladic function or not a function 1 if the object is a monadic function 2 if the object is a dyadic function <code>\u00af2</code> if the object is an ambivalent                 function 3 Operator valence 0 if the object is not an operator 1 if the object is a monadic operator 2 if the object is a dyadic operator <p>The following values correspond to the syntax shown alongside:</p> <pre><code>\n        0  0  0     \u2207 FOO\n        1  0  0     \u2207 Z\u2190FOO\n       \u00af1  0  0     \u2207 {Z}\u2190FOO\n        0 \u00af2  0     \u2207 {A} FOO B\n       \u00af1  1  2     \u2207 {Z}\u2190(F OP G)B\n</code></pre> <p><code>R[2]</code> or <code>R[;2]</code>: Each item is the (<code>\u2395TS</code> form) timestamp of the time the function was last fixed.</p> <p><code>R[3]</code> or <code>R[;3]</code>: Each item is an integer reporting the current <code>\u2395LOCK</code> state of the function:</p> <code>0</code> Not locked <code>1</code> Cannot display function <code>2</code> Cannot suspend function <code>3</code> Cannot display or suspend <p><code>R[4]</code> or <code>R[;4]</code>: Each item is a character vector - the network ID of the user who last fixed (edited) the function.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/at/#example","title":"Example","text":"<pre><code>\n    \u2207 {z}\u2190{l}(fn myop)r\n[1]   ...\n\n    \u2207 z\u2190foo\n[1]   ...\n\n    \u2207 z\u2190{larg}util rarg\n[1]   ...\n\n      \u2395LOCK'foo'\n\n      util2\u2190util\n</code></pre> <pre><code>\n      ]display \u2395AT 'myop' 'foo' 'util' 'util2'\n.\u2192--------------------------------------------.\n\u2193 .\u2192------. .\u2192-----------------.     .\u2192---.   |\n| |\u00af1 \u00af2 1| |1996 8 2 2 13 56 0|   0 |john|   |\n| '~------' '~-----------------'     '----'   |\n| .\u2192----.   .\u2192------------.          .\u2296.      |\n| |1 0 0|   |0 0 0 0 0 0 0|        3 | |      |\n| '~----'   '~------------'          '-'      |\n| .\u2192-----.  .\u2192------------------.    .\u2192---.   |\n| |1 \u00af2 0|  |1996 3 1 14 12 10 0|  0 |pete|   |\n| '~-----'  '~------------------'    '----'   |\n| .\u2192-----.  .\u2192-------------------.   .\u2192-----. |\n| |1 \u00af2 0|  |1998 8 26 16 16 42 0| 0 |graeme| |\n| '~-----'  '~-------------------'   '------' |\n'\u220a--------------------------------------------'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/at/#dyadic-use","title":"Dyadic Use","text":"<p>The dyadic form of <code>\u2395AT</code> emulates APL2. It returns the same rank and shape result containing information that matches the APL2 implementation as closely as possible.</p> <p>The number of elements or columns in <code>R</code> and their meaning depends upon the value of <code>X</code> which may be 1, 2, 3 or 4.</p> <p>If <code>X</code> is 1, <code>R</code> specifies valences and contains 3 elements (or columns) whose meaning is as follows:</p> 1 Explicit result 1 if the object has an explicit result or is a variable 0 otherwise 2 Function valence 0 if the object is a niladic function or not a function 1 if the object is a monadic function 2 if the object is an ambivalent function 3 Operator valence 0 if the object is not an operator 1 if the object is a monadic operator 2 if the object is a dyadic operator <p>If <code>X</code> is 2, <code>R</code> specifies fix times (the time the object was last updated) for functions and operators named in <code>Y</code>. The time is reported as 7 integer elements (or columns) whose meaning is as follows. The fix time reported for names in <code>Y</code> which are not defined functions or operators is 0.</p> 1 Year 2 Month 3 Day 4 Hour 5 Minute 6 Second 7 Milliseconds (this is always reported as 0) <p>If <code>X</code> is 3, <code>R</code> specifies execution properties and contains 4 elements (or columns) whose meaning is as follows:</p> 1 Displayable 0 if the object is displayable 1 if the object is not displayable 2 Suspendable 0 if execution will suspend in the object 1 if execution will not suspend in the object 3 Weak Interrupt behaviour 0 if the object responds to interrupt 1 if the object ignores interrupt 4 (always 0) <p>If <code>X</code> is 4, <code>R</code> specifies object size and contains 2 elements (or columns) which both report the <code>\u2395SIZE</code> of the object.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/cr/","title":"Cr","text":"Canonical Representation R\u2190\u2395CR Y <p><code>Y</code> must be a simple character scalar or vector which represents the name of a defined function or operator.</p> <p>If <code>Y</code> is a name of a defined function or operator, <code>R</code> is a simple character matrix.  The first row of <code>R</code> is the function or operator header.  Subsequent rows are lines of the function or operator.  <code>R</code> contains no unnecessary blanks, except for leading indentation of control structures, trailing blanks that pad each row, and the blanks in comments.  If <code>Y</code> is the name of a variable, a locked function or operator, an external function, or is undefined, <code>R</code> is an empty matrix whose shape is <code>0 0</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/cr/#example","title":"Example","text":"<pre><code>      \u2207R\u2190MEAN X    \u235d Arithmetic mean\n[1]  R\u2190(+/X)\u00f7\u2374X\n[2]  \u2207\n      +F\u2190\u2395CR'MEAN'\nR\u2190MEAN X    \u235d Arithmetic mean\nR\u2190(+/X)\u00f7\u2374X\n\n      \u2374F\n2 30\n</code></pre> <p>The definition of <code>\u2395CR</code> has been extended to names assigned to functions by specification (<code>\u2190</code>), and to local names of functions used as operands to defined operators.</p> <p>If <code>Y</code> is a name assigned to a primitive function, <code>R</code> is a one-element vector containing the corresponding function symbol.  If <code>Y</code> is a name assigned to a system function, <code>R</code> is a one element nested array containing the name of the system function.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/cr/#examples","title":"Examples","text":"<pre><code>      PLUS\u2190+\n      +F\u2190\u2395CR'PLUS'\n+\n      \u2374F\n1\n      C\u2190\u2395CR\n      C'C'\n \u2395CR\n      \u2374C'C'\n1\n</code></pre> <pre><code>\n      \u2207R\u2190CONDITION (FN1 ELSE FN2) X\n[1]   \u2192CONDITION/L1\n[2]   R\u2190FN2 X \u22c4 \u21920\n[3]  L1:R\u2190FN1 X\n[4]   \u2207\n\n      2 \u2395STOP 'ELSE'\n      (X\u22650) \u230a ELSE \u2308 X\u2190\u00af2.5\n\nELSE[2]\n       X\n\u00af2.5\n       \u2395CR'FN2'\n\u2308\n       \u2192\u2395LC\n\u00af2\n</code></pre> <p>If <code>Y</code> is a name assigned to a derived function, <code>R</code> is a vector whose elements represent the arrays, functions, and operators from which <code>Y</code> was constructed.  Constituent functions are represented by their own <code>\u2395CR</code>s, so in this respect the definition of <code>\u2395CR</code> is recursive.  Primitive operators are treated like primitive functions, and are represented by their corresponding symbols.  Arrays are represented by themselves.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/cr/#example_1","title":"Example","text":"<pre><code>      BOX\u21902 2\u2218\u2374\n      +F\u2190\u2395CR'BOX'\n 2 2 \u2218\u2374\n      \u2374F\n3\n      ]display F\n.\u2192----------.\n| .\u2192--.     |\n| |2 2| \u2218 \u2374 |\n| '~--' - - |\n'\u220a----------'\n</code></pre> <p>If <code>Y</code> is a name assigned to a defined function, <code>R</code> is the <code>\u2395CR</code> of the defined function.  In particular, the name that appears in the function header is the name of the original defined function, not the assigned name <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/cr/#example_2","title":"Example","text":"<pre><code>      AVERAGE\u2190MEAN\n      \u2395CR'AVERAGE'\nR\u2190MEAN X    \u235d Arithmetic mean\nR\u2190(+/X)\u00f7\u2374X\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/ed/","title":"Ed","text":"Edit Object {R}\u2190{X}\u2395ED Y <p><code>\u2395ED</code> invokes the Editor.  <code>Y</code> is a simple character vector, a simple character matrix, or a vector of character vectors, containing the name(s) of objects to be edited.  The optional left argument <code>X</code> is  a character scalar or character vector which specifies the type(s) of the corresponding (new) object(s) named in <code>Y</code>, where:</p> <code>\u2207</code> function/operator <code>\u2192</code> simple character vector <code>\u220a</code> vector of character vectors <code>-</code> character matrix <code>\u235f</code> Namespace script <code>\u25cb</code> Class script <code>\u2218</code> Interface <p>If an object named in <code>Y</code> already exists, the type specification in <code>X</code> is ignored for that name.</p> <p>If <code>\u2395ED</code> is called from the Session, it opens Edit windows for the object(s) named in <code>Y</code> and returns a null result.  The cursor is positioned in the first of the Edit windows opened by <code>\u2395ED</code>, but may be moved to the Session or to any other window which is currently open.  The effect is almost identical to using <code>)ED</code>.</p> <p>If <code>\u2395ED</code> is called from a defined function or operator, its behaviour is different. On asynchronous terminals, the Edit windows are automatically displayed in \"full-screen\" mode (ZOOMED). In all implementations, the user is restricted to those windows named in <code>Y</code>. The user may not skip to the Session even though the Session may be visible.</p> <p><code>\u2395ED</code> terminates and returns a result ONLY when the user explicitly closes all the windows for the named objects. In this case the result contains the names of any objects which have been newly (re)fixed in the workspace as a result of the <code>\u2395ED</code>, and has the same structure as <code>Y</code>.</p> <p>Objects named in <code>Y</code> that cannot be edited are silently ignored. Objects qualified with a namespace path are (e.g.<code>a.b.c.foo</code>) are silently ignored if the namespace does not exist.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/ed/#variants-of-edit-object","title":"Variants of Edit Object","text":"<p>The behaviour of <code>\u2395ED</code> may be modified using the variant operator <code>\u2360</code> with the following options:</p> <ul> <li><code>'ReadOnly'</code> - 0 or 1</li> <li><code>'EditName'</code> - <code>'Default'</code>, <code>'Allow'</code> or <code>'Disallow'</code>.</li> </ul> <p>If <code>ReadOnly</code> is set to 1, the edit window and all edit windows opened from it will be read-only. Note that setting <code>ReadOnly</code> to 0 will have no effect if the edit window is inherently read-only due to the nature of its content.</p> <p>The <code>'EditName'</code> option determines whether or not the user may open another edit window by clicking a name, and its values are interpreted as follows:</p> EditName <code>\u2395ED</code> called from session <code>\u2395ED</code> called from function <code>'Default'</code> Allow Disallow <code>'Allow'</code> Allow Allow <code>'Disallow'</code> Disallow Disallow <p>There is no Principal Option.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/ed/#examples","title":"Examples","text":"<p>In the first example, <code>\u2395ED</code> will display the contents of <code>A</code> as an editable character array which the user may change. The user can double-click on Hello to open an edit window on an object named <code>Hello</code> (which will be a new function if <code>Hello</code> is currently undefined). Furthermore, the user can enter any arbitrary name and double-click to edit it. This may be undesirable in an application.</p> <pre><code>      A\u21903 11\u2374'Hello World'\n</code></pre> <p>In the second example, the Edit window will display the contents of <code>A</code> as a ReadOnly Character array. The user can still open a new edit by double-clicking Hello or World but nothing else.</p> <pre><code>      (\u2395ED \u2360 'ReadOnly' 1) 'A'\n</code></pre> <p>In the final example, the Edit window will display the contents of <code>A</code> as a ReadOnly Character array and the user cannot open a new edit window.</p> <pre><code>      (\u2395ED \u2360('ReadOnly' 1)('EditName' 'Disallow'))'A'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/ex/","title":"Ex","text":"Expunge Object {R}\u2190\u2395EX Y <p><code>Y</code> must be a simple character scalar, vector or matrix, or a vector of character vectors containing a list of names. <code>R</code> is a simple Boolean vector with one element per name in <code>Y</code>.</p> <p>Each name in <code>Y</code> is disassociated from its value if the active referent for the name is a defined function, operator, variable or namespace.</p> <p>The value of an element of <code>R</code> is 1 if the corresponding name in <code>Y</code> is now available for use.  This does not necessarily mean that the existing value was erased for that name.  A value of  0 is returned for an ill-formed name or for a distinguished name in <code>Y</code>.  The result is suppressed if not used or assigned.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/ex/#examples","title":"Examples","text":"<pre><code>      \u2395EX'VAR'\n      +\u2395EX'FOO' '\u2395IO' 'X' '123'\n1 0 1 0\n</code></pre> <p>If a named object is being executed the existing value will continue to be used until its execution is completed.  However, the name becomes available immediately for other use.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/ex/#examples_1","title":"Examples","text":"<pre><code>      )SI\n#.FOO[1]*\n\n      \u2395VR'FOO'\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n      +\u2395EX'FOO'\n1\n      )SI\n#.FOO[1]*\n\n     \u2207FOO[\u2395]\ndefn error\n\n      FOO\u21901 2 3\n      \u2192\u2395LC\n10\n      FOO\n1 2 3\n</code></pre> <p>If a named object is an external variable, the external array is disassociated from the name:</p> <pre><code>      \u2395XT'F'\nFILES/COSTS\n      \u2395EX'F' \u22c4 \u2395XT'F'\n</code></pre> <p>If the named object is a GUI object, the object and all its children are deleted and removed from the screen. The expression <code>\u2395EX'.'</code> deletes all GUI objects owned by the current thread in the Root namespace but not those in sub-namespaces. In addition, if this expression is executed by thread 0, it resets all the properties of  <code>'.'</code> to their default values. Furthermore, any unprocessed events in the event queue are discarded.</p> <p>If the named object is a shared variable, the variable is retracted.</p> <p>If the named object is the last remaining external function of an auxiliary process, the AP is terminated.</p> <p>If the named object is the last reference into a dynamic link library, the DLL is freed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/fx/","title":"Fx","text":"Fix Definition {R}\u2190\u2395FX Y <p><code>Y</code> is the representation form of a function or operator which may be:</p> <ul> <li>its canonical representation form similar to that produced by <code>\u2395CR</code> except that redundant blanks are permitted other than within names and constants, and the first and last rows may start with a del symbol (<code>\u2207</code>).</li> <li>its nested representation form similar to that produced by <code>\u2395NR</code> except that redundant blanks are permitted other than within names and constants, and the first and last items may be del (<code>\u2207</code>) symbols.</li> <li>its object representation form produced by <code>\u2395OR</code>.</li> <li>its vector representation form similar to that produced by <code>\u2395VR</code> except that additional blanks are permitted other than within names and constants.</li> </ul> <p><code>\u2395FX</code> attempts to create (fix) a function or operator in the workspace or current namespace from the definition given by <code>Y</code>.  <code>\u2395IO</code> is an implicit argument of <code>\u2395FX</code>. Note that <code>\u2395FX</code> does not update the source of a scripted namespace, or of class or instance; the only two methods of updating the source of scripted objects is via the Editor, or by calling <code>\u2395FIX</code>.</p> <p>If the function or operator is successfully fixed, <code>R</code> is a simple character vector containing its name and the result is shy. Otherwise <code>R</code> is an integer scalar containing the (<code>\u2395IO</code> dependent) index of the row of the canonical representation form in which the first error preventing its definition is detected. In this case the result <code>R</code> is not shy.</p> <p>Functions and operators which are pendent, that is, in the state indicator without a suspension mark (<code>*</code>), retain their original definition until they complete, or are cleared from the state indicator.  All other occurrences of the function or operator assume the new definition.  The function or operator will fail to fix if it has the same name as an existing variable, or a visible label.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/lock/","title":"Lock","text":"Lock Definition {R}\u2190{X}\u2395LOCK Y <p><code>Y</code> must be a simple character scalar, or vector which is taken to be the name of a defined function or operator in the active workspace. <code>\u2395LOCK</code> does not apply to dfns or derived functions.</p> <p>The active referent to the name in the workspace is locked.  Stop, trace and monitor settings, established by the <code>\u2395STOP</code>, <code>\u2395TRACE</code> and <code>\u2395MONITOR</code> functions, are cancelled.</p> <p>The optional left argument <code>X</code> specifies to what extent the function code is hidden. <code>X</code> may be 1, 2 or 3 (the default) with the following meaning:</p> <ol> <li>The object may not be displayed and you may not obtain its character form using <code>\u2395CR</code>, <code>\u2395VR</code> or <code>\u2395NR</code>.</li> <li>If an error or exception occurs that would normally cause a suspension of execution within the locked function or operator, the state indicator is cut back to the statement that called it and the suspension is triggered there instead.</li> <li>Both 1 and 2 apply. You can neither display the locked object nor suspend execution within it.</li> </ol> <p>Locks are additive, so that</p> <pre><code>      1 \u2395LOCK'FOO' \u22c4 2 \u2395LOCK'FOO'     \n</code></pre> <p>is equivalent to:</p> <pre><code>      3 \u2395LOCK'FOO' \n</code></pre> <p>The shy result <code>R</code> is the lock state (1,2 or 3) of <code>Y</code>.</p> <p>A <code>DOMAIN ERROR</code> is reported if <code>Y</code> is ill-formed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/lock/#examples","title":"Examples","text":"<pre><code>      \u2395FX'r\u2190foo' 'r\u219010'\n      \u2395NR'foo'  \n  r\u2190foo r\u219010\n      \u2374\u2395NR'foo'\n2\n      \u2395LOCK'foo'\n      \u2374\u2395NR'foo'\n0\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/nr/","title":"Nr","text":"Nested Representation R\u2190\u2395NR Y <p><code>Y</code> must be a simple character scalar or vector which represents the name of a function or a defined operator.</p> <p>If <code>Y</code> is a name of a defined function or defined operator, <code>R</code> is a vector of text vectors.  The first element of <code>R</code> contains the text of the function or operator header.  Subsequent elements contain lines of the function or operator.  Elements of <code>R</code> contain no unnecessary blanks, except for leading indentation of control structures and the blanks which precede comments.</p> <p>If <code>Y</code> is the name of a variable, a locked function or operator, an external function or a namespace, or is undefined, <code>R</code> is an empty vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/nr/#example","title":"Example","text":"<pre><code>      \u2207R\u2190MEAN X    \u235d Average\n[1]   R\u2190(+/X)\u00f7\u2374X\n      \u2207\n\n      +F\u2190\u2395NR'MEAN'\n  R\u2190MEAN X    \u235dAverage   R\u2190(+/X)\u00f7\u2374X\n\n      \u2374F\n2\n      ]display F\n.\u2192----------------------------------------.\n| .\u2192---------------------.  .\u2192----------. |\n| | R\u2190MEAN X    \u235d Average|  | R\u2190(+/X)\u00f7\u2374X| |\n| '----------------------'  '-----------' |\n'\u220a----------------------------------------'\n</code></pre> <p>The definition of <code>\u2395NR</code> has been extended to names assigned to functions by specification (<code>\u2190</code>), and to local names of functions used as operands to defined operators.  In these cases, the result of <code>\u2395NR</code> is identical to that of <code>\u2395CR</code> except that the representation of defined functions and operators is as described above.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/nr/#example_1","title":"Example","text":"<pre><code>      AVG\u2190MEAN\u2218,\n\n      +F\u2190\u2395NR'AVG'\n   R\u2190MEAN X    \u235d Average   R\u2190(+/X)\u00f7\u2374X  \u2218,\n\n      \u2374F\n3\n      ]display F\n.\u2192------------------------------------------------.\n| .\u2192----------------------------------------.     |\n| | .\u2192---------------------.  .\u2192----------. | \u2218 , |\n| | | R\u2190MEAN X    \u235d Average|  | R\u2190(+/X)\u00f7\u2374X| | - - |\n| | '----------------------'  '-----------' |     |\n| '\u220a----------------------------------------'     |\n'\u220a------------------------------------------------'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/or/","title":"Or","text":"Object Representation R\u2190\u2395OR Y <p><code>\u2395OR</code> converts a defined function, defined operator or namespace to a special form, described as its object representation, that may be assigned to a variable and/or stored on a component file<code>\u2395OR</code> and GUI objects stored in workspaces or in component files are not portable between 32-bit and 64-bit versions of Dyalog nor between different implementations (platforms) and are not backwards compatible. Classes and Instances are however outside the domain of <code>\u2395OR</code>.</p> <p>Taking the <code>\u2395OR</code> of a defined function or operator is an extremely fast operation as it simply changes the type information in the object's header, leaving its internal structure unaltered.  Converting the object representation back to an executable function or operator using <code>\u2395FX</code> is also very fast.</p> <p>However, the saved results of <code>\u2395OR</code> which were produced on a different hardware platform or using an older version of Dyalog APL may require a significant amount of processing when re-constituted using <code>\u2395FX</code>.  For optimum performance, it is strongly recommended that you save <code>\u2395OR</code>s using the same version of Dyalog APL and on the same hardware platform that you will use to <code>\u2395FX</code> them.</p> <p><code>\u2395OR</code> may also be used to convert a namespace (either a plain namespace or a named GUI object created by <code>\u2395WC</code>) into a form that can be stored in a variable or on a component file.  The namespace may be reconstructed using <code>\u2395NS</code> or <code>\u2395WC</code> with its original name or with a new one.  <code>\u2395OR</code> may therefore be used to clone a namespace or GUI object.</p> <p><code>Y</code> must be a simple character scalar or vector which contains the name of an APL object.</p> <p>If <code>Y</code> is the name of a variable, the result <code>R</code> is its value.  In this case, <code>R\u2190\u2395OR Y</code> is identical to <code>R\u2190\u234eY</code>.</p> <p>Otherwise, <code>R</code> is a special form of the name <code>Y</code>, re-classified as a variable. The rank of <code>R</code> is 0 (<code>R</code> is scalar), and the depth of <code>R</code> is 1.  These unique characteristics distinguish the result of <code>\u2395OR</code> from any other object.  The Type of <code>R</code> (<code>\u220aR</code>) is itself.  Note that although <code>R</code> is scalar, it may not be index assigned to an element of an array unless it is enclosed.</p> <p>If <code>Y</code> is the name of a function or operator, <code>R</code> is in the domain of the monadic functions Same (<code>\u22a3</code> and <code>\u22a2</code>), Depth (<code>\u2261</code>), Disclose (<code>\u2283</code>), Enclose (<code>\u2282</code>), Rotate (<code>\u233d</code>), Transpose (<code>\u2349</code>), Index (<code>\u2337</code>), Indexing (<code>[]</code>), Format (<code>\u2355</code>), Identity (<code>+</code>), Shape (<code>\u2374</code>), Type (<code>\u220a</code>) and Unique (<code>\u222a</code>), of the dyadic functions Left (<code>\u22a3</code>), Right (<code>\u22a2</code>), Without (<code>~</code>), Index Of (<code>\u2373</code>), Intersection (<code>\u2229</code>), Match (<code>\u2261</code>), Membership (<code>\u220a</code>), Not Match (<code>\u2260</code>) and Union (<code>\u222a</code>), and of the monadic system functions Canonical Representation (<code>\u2395CR</code>), Cross-Reference (<code>\u2395REFS</code>), Fix (<code>\u2395FX</code>), Format (<code>\u2395FMT</code>), Nested Representation (<code>\u2395NR</code>) and Vector Representation (<code>\u2395VR</code>).</p> <p>Note that a <code>\u2395OR</code> object can be transmitted through an 'APL-style' TCP socket. This technique may be used to transfer objects including namespaces between APL sessions.</p> <p>The object representation forms of namespaces produced by <code>\u2395OR</code> may not be used as arguments to any primitive functions.  The only operations permitted for such objects (or arrays containing such objects) are <code>\u2395EX</code>, <code>\u2395FAPPEND</code>, <code>\u2395FREPLACE</code>, <code>\u2395NS</code>, and <code>\u2395WC</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/or/#example","title":"Example","text":"<pre><code>      F\u2190\u2395OR \u2395FX'R\u2190FOO' 'R\u219010'\n\n      \u2374F\n\n      \u2374\u2374F\n0\n      \u2261F\n1\n      F\u2261\u220aF\n1\n</code></pre> <p>The display of the <code>\u2395OR</code> form of a function or operator is a listing of the function or operator.  If the <code>\u2395OR</code> form of a function or operator has been enclosed, then the result will display as the  name preceded by the symbol <code>\u2207</code>.  It is permitted to apply <code>\u2395OR</code> to a locked function or operator.  In this instance the result will display as for the enclosed form.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/or/#examples","title":"Examples","text":"<pre><code>       F\n      \u2207 R\u2190FOO\n[1]     R\u219010\n      \u2207\n\n      \u2282F\n \u2207FOO\n\n      \u2395LOCK'FOO'\n\n      \u2395OR'FOO'\n\u2207FOO\n</code></pre> <pre><code>      A\u2190\u23735\n\n      A[3]\u2190\u2282F\n\n      A\n1 2  \u2207FOO  4 5\n</code></pre> <p>For the <code>\u2395OR</code> forms of two functions or operators to be considered identical, their unlocked display forms must be the same, they must either both be locked or unlocked, and any monitors, trace and stop vectors must be the same.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/or/#example_1","title":"Example","text":"<pre><code>      F\u2190\u2395OR \u2395FX 'R\u2190A PLUS B' 'R\u2190A+B'\n\n      F\u2261\u2395OR 'PLUS'\n1\n\n      1 \u2395STOP 'PLUS'\n\n      F\u2261\u2395OR 'PLUS'\n0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/or/#namespace-examples","title":"Namespace Examples","text":"<p>The following example sets up a namespace called <code>UTILS</code>, copies into it the contents of the <code>UTIL</code> workspace, then writes it to a component file:</p> <pre><code>      )CLEAR\nclear ws\n      )NS UTILS\n#.UTILS\n      )CS UTILS\n#.UTILS\n      )COPY UTIL\nC:\\WDYALOG\\WS\\UTIL saved Fri Mar 17 12:48:06 1995\n      )CS\n#\n      'ORTEST' \u2395FCREATE 1\n      (\u2395OR'UTILS')\u2395FAPPEND 1\n</code></pre> <p>The namespace can be restored with <code>\u2395NS</code>, using either the original name or a new one:</p> <pre><code>      )CLEAR\nclear ws\n      'UTILS' \u2395NS \u2395FREAD 1 1\n#.UTILS\n      )CLEAR\nclear ws\n      'NEWUTILS' \u2395NS \u2395FREAD 1 1\n#.NEWUTILS\n</code></pre> <p>This example illustrates how <code>\u2395OR</code> can be used to clone a GUI object; in this case a Group containing some Button objects.  Note that <code>\u2395WC</code> will accept only a <code>\u2395OR</code> object as its argument (or preceded by the \"Type\" keyword).  You may not specify any other properties in the same <code>\u2395WC</code> statement, but you must instead use <code>\u2395WS</code> to reset them afterwards.     'F'\u2395WC'Form'     'F.G1' \u2395WC 'Group' '&amp;One' (10 10)(80 30)     'F.G1.B2'\u2395WC'Button' '&amp;Blue' (40 10)('Style' 'Radio')     'F.G1.B3'\u2395WC'Button' '&amp;Green' (60 10)('Style' 'Radio')     'F.G1.B1'\u2395WC'Button' '&amp;Red' (20 10)('Style' 'Radio')     'F.G2' \u2395WC \u2395OR 'F.G1'     'F.G2' \u2395WS ('Caption' 'Two')('Posn' 10 60)</p> <p>Note too that <code>\u2395WC</code> and <code>\u2395NS</code> may be used interchangeably to rebuild pure namespaces or GUI namespaces from a <code>\u2395OR</code> object.  You may therefore use <code>\u2395NS</code> to rebuild a Form or use <code>\u2395WC</code> to rebuild a pure namespace that has no GUI components.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/","title":"Profile","text":"Profile Application {R}\u2190{X}\u2395PROFILE Y <p><code>\u2395PROFILE</code> facilitates the profiling of either CPU consumption or elapsed time for a workspace. It does so by retaining time measurements collected for APL functions/operators and function/operator lines. <code>\u2395PROFILE</code> is used to both control the state of profiling and retrieve the collected profiling data.</p> <p>See also: Application Tuning Guide.</p> <p><code>Y</code> specifies the action to perform and any options for that action, if applicable. <code>Y</code> is case-insensitive. Note that the result <code>R</code> is in some cases shy.</p> Use Description <code>{state}\u2190\u2395PROFILE 'start' {timer}</code> Turn profiling on using the specified timer or resume if profiling was stopped <code>{state}\u2190\u2395PROFILE 'stop'</code> Suspend the collection of profiling data <code>{state}\u2190\u2395PROFILE 'clear'</code> Turn profiling off, if active, and discard any collected profiling data <code>{state}\u2190\u2395PROFILE 'calibrate'</code> Calibrate the profiling timer <code>state\u2190\u2395PROFILE 'state'</code> Query profiling state <code>data\u2190\u2395PROFILE 'data'</code> Retrieve profiling data in flat form <code>data\u2190\u2395PROFILE 'tree'</code> Retrieve profiling data in tree form <p><code>\u2395PROFILE</code> has 2 states:</p> <ul> <li>active \u2013 the profiler is running and profiling data is being collected. </li> <li>inactive \u2013 the profiler is not running.</li> </ul> <p>For most actions, the result of <code>\u2395PROFILE</code> is its current state and contains:</p> [1] character vector indicating the <code>\u2395PROFILE</code> state having one of the values <code>'active'</code> or <code>'inactive'</code> [2] character vector indicating the timer being used having one of the values <code>'CPU'</code> or <code>'elapsed'</code> [3] call time bias in milliseconds. This is the amount of time, in milliseconds, that is consumed for the system to take a time measurement [4] timer granularity in milliseconds. This is the resolution of the timer being used"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#stateprofile-start-timer","title":"{state}\u2190\u2395PROFILE 'start' {timer}","text":"<p>Turn profiling on; <code>timer</code> is an optional case-independent character vector containing  <code>'CPU'</code> or <code>'elapsed'</code> or <code>'none'</code> or <code>'coverage'</code>. If omitted, it defaults to <code>'CPU'</code>. If <code>timer</code> is <code>'none'</code>, <code>\u2395PROFILE</code>  records  just the number of times each line of code is executed without incurring the timing overhead. If <code>timer</code> is <code>'coverage'</code>, <code>\u2395PROFILE</code>   only identifies which  lines of code are executed without incurring the timing or counting overhead.</p> <p>The first time a particular timer is chosen, <code>\u2395PROFILE</code> will spend 1000 milliseconds (1 second) to approximate the call time bias and granularity for that timer.</p> <pre><code>      \u22a2\u2395PROFILE 'start' 'CPU'\n active  CPU  0.0001037499999 0.0001037499999\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#stateprofile-stop","title":"{state}\u2190\u2395PROFILE 'stop'","text":"<p>Suspends the collection of profiling data.</p> <pre><code>      \u22a2\u2395PROFILE 'stop'\n inactive  CPU  0.0001037499999 0.0001037499999\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#stateprofile-clear","title":"{state}\u2190\u2395PROFILE 'clear'","text":"<p>Clears any collected profiling data and, if profiling is active, places profiling in an inactive state.</p> <pre><code>      \u22a2\u2395PROFILE 'clear'\n inactive    0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#stateprofile-calibrate","title":"{state}\u2190\u2395PROFILE 'calibrate'","text":"<p>Causes <code>\u2395PROFILE</code> to perform a 1000 millisecond calibration to approximate the call time bias and granularity for the current timer. Note, a timer must have been previously selected by using <code>\u2395PROFILE 'start'</code>.</p> <p><code>\u2395PROFILE</code> will retain the lesser of the current timer values compared to the new values computed by the calibration. The rationale for this is to use the smallest possible values of which we can be certain.</p> <pre><code>      \u22a2\u2395PROFILE'calibrate'\n active  CPU  0.0001037499997 0.0001037499997\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#stateprofile-state","title":"state\u2190\u2395PROFILE 'state'","text":"<p>Returns the current profiling state.</p> <pre><code>      )clear\nclear ws\n      \u2395PROFILE 'state'\n inactive    0 0\n\n      \u2395PROFILE 'start' 'CPU'\n active  CPU  0.0001037499997 0.0001037499997\n      \u2395PROFILE 'state'\n active  CPU  0.0001037499997 0.0001037499997\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#datax-profile-data","title":"data\u2190{X} \u2395PROFILE 'data'","text":"<p>Retrieves the collected profiling data. If the optional left argument <code>X</code> is omitted, the result is a matrix with the following columns:</p> [;1] function name [;2] function line number or <code>\u236c</code> for a whole function entry [;3] number of times the line or function was executed [;4] accumulated time (ms) for this entry exclusive of items called by this entry [;5] accumulated time (ms) for this entry inclusive of items called by this entry [;6] number of times the timer function was called for the exclusive time [;7] number of times the timer function was called for the inclusive time"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#example-numbers-have-been-truncated-for-formatting","title":"Example: (numbers have been truncated for formatting)","text":"<pre><code>      \u2395PROFILE 'data'\n#####.foo             1  1.04406  39347.64945   503 4080803 #.foo      1      1  0.12488     0.124887     1       1 #.foo      2    100  0.58851 39347.193900   200 4080500 #.foo      3    100  0.21340     0.213406   100     100 #.NS1.goo       100 99.44404   39346.6053 50300 4080300 #.NS1.goo  1    100  0.61679     0.616793   100     100 #.NS1.goo  2  10000 67.80292   39314.9642 20000 4050000 #.NS1.goo  3  10000 19.60274      19.6027 10000   10000\n\n</code></pre> <p>If <code>X</code> is specified it must be a simple vector of column indices. In this case, the result has the same shape as <code>X</code> and is a vector of the specified column vectors:</p> <pre><code>X \u2395PROFILE 'data' \u2190\u2192 \u2193[\u2395IO](\u2395PROFILE 'data')[;X]\n</code></pre> <p>If column 2 is included in the result, the value <code>\u00af1</code> is used instead of <code>\u236c</code> to indicate a whole-function entry.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#datax-profile-tree","title":"data\u2190{X} \u2395PROFILE 'tree'","text":"<p>Retrieve the collected profiling data in tree format:</p> [;1] depth level [;2] function name [;3] function line number or <code>\u236c</code> for a whole function entry [;4] number of times the line or function was executed [;5] accumulated time (ms) for this entry exclusive of items called by this entry [;6] accumulated time (ms) for this entry inclusive of items called by this entry [;7] number of times the timer function was called for the exclusive time [;8] number of times the timer function was called for the inclusive time <p>The optional left argument is treated in exactly the same way as for <code>X \u2395PROFILE 'data'</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#example","title":"Example:","text":"<pre><code>  \u2395PROFILE 'tree'\n</code></pre> <p>0  #.foo               1     1.04406 39347.64945     503 4080803 1  #.foo      1        1     0.12488     0.12488       1       1 1  #.foo      2      100     0.58851 39347.19390     200 4080500 2  #.NS1.goo         100    99.44404 39346.60538   50300 4080300 3  #.NS1.goo  1      100     0.61679     0.61679     100     100 3  #.NS1.goo  2    10000    67.80292 39314.96426   20000 4050000 4  #.NS2.moo       10000 39247.16133 39247.16133 4030000 4030000 5  #.NS2.moo  1    10000    39.28315    39.28315   10000   10000 5  #.NS2.moo  2  1000000 36430.65236 36430.65236 1000000 1000000 5  #.NS2.moo  3  1000000  1645.36214  1645.36214 1000000 1000000 3  #.NS1.goo  3    10000    19.60274    19.60274   10000   10000 1  #.foo      3      100     0.21340     0.21340     100     100</p> <p>Note that rows with an even depth level in column <code>[;1]</code> represent function summary entries and odd depth level rows are function line entries. Recursive functions will generate separate rows for each level of recursion.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#notes","title":"Notes","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#profile-data-entry-types","title":"Profile Data Entry Types","text":"<p>The results of <code>\u2395PROFILE 'data'</code> and <code>\u2395PROFILE 'tree'</code> have two types of entries; function summary entries and function line entries. Function summary entries contain <code>\u236c</code> in the line number column, whereas function line entries contain the line number. Dfns line entries begin with 0 as they do not have a header line like traditional functions. The timer data and timer call counts in function summary entries represent the aggregate of the function line entries plus any time spent that cannot be directly attributed to a function line entry. This could include time spent during function initialisation, etc.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#example_1","title":"Example:","text":"<pre><code> #.foo         1  1.04406 39347.649450   503 4080803\n #.foo    1    1  0.12488     0.124887     1       1\n #.foo    2  100  0.58851 39347.193900   200 4080500\n #.foo    3  100  0.21340     0.213406   100     100\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#timer-data-persistence","title":"Timer Data Persistence","text":"<p>The profiling data collected is stored outside the workspace and will not impact workspace availability. The data is cleared upon workspace load, clear workspace, <code>\u2395PROFILE 'clear'</code>, or interpreter sign off.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#the-profile-user-command","title":"The PROFILE User Command","text":"<p><code>]PROFILE</code> is a utility which implements a high-level interface to <code>\u2395PROFILE</code> and provides reporting and analysis tools that act upon the profiling data. For further information, see Tuning Applications using the Profile User Command.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#using-profile-directly","title":"Using \u2395PROFILE Directly","text":"<p>If you choose to use <code>\u2395PROFILE</code> directly, the following guidelines and information may be of use to you.</p> <p>Note: Running your application with <code>\u2395PROFILE</code> turned on incurs a significant processing overhead and will slow your application down.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#decide-which-timer-to-use","title":"Decide which timer to use","text":"<p><code>\u2395PROFILE</code> supports profiling of either CPU or elapsed time. CPU time is generally of more interest in profiling application performance.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#simple-profiling","title":"Simple Profiling","text":"<p>To get a quick handle on the top CPU time consumers in an application, use the following procedure:</p> <ul> <li>Make sure the application runs long enough to collect enough data to overcome the timer granularity \u2013 a reasonable rule of thumb is to make sure the application runs for at least <code>(4000\u00d74\u2283\u2395PROFILE 'state')</code> milliseconds.</li> <li>Turn profiling on with <code>\u2395PROFILE 'start' 'CPU'</code></li> <li>Run your application.</li> <li>Pause the profiler with <code>\u2395PROFILE 'stop'</code></li> <li>Examine the profiling data from <code>\u2395PROFILE 'data'</code> or <code>\u2395PROFILE 'tree'</code> for entries that consume large amounts of resource.</li> </ul> <p>This should identify any items that take more than 10% of the run time.</p> <p>To find finer time consumers, or to focus on elapsed time rather than CPU time, take the following additional steps prior to running the profiler:</p> <p>Turn off as much hardware as possible. This would include peripherals, network connections, etc.</p> <ul> <li>Turn off as many other tasks and processes as possible. These include anti-virus software, firewalls, internet services, background tasks.</li> <li>Raise the priority on the Dyalog APL task to higher than normal, but in general avoid giving it the highest priority.</li> <li>Run the profiler as described above.</li> </ul> <p>Doing this should help identify items that take more than 1% of the run time.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#advanced-profiling","title":"Advanced Profiling","text":"<p>The timing data collected by <code>\u2395PROFILE</code> is not adjusted for the timer's call time bias; in other words, the times reported by <code>\u2395PROFILE</code> include the time spent calling the timer function. One effect of this can be to make \"cheap\" lines that are called many times seem to consume more resource. If you desire more accurate profiling measurements, or if your application takes a short amount of time to run, you will probably want to adjust for the timer call time bias. To do so, subtract from the timing data the timer's' 'call time bias multiplied by the number of times the timer was called.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/profile/#example_2","title":"Example:","text":"<pre><code>      CallTimeBias\u21903\u2283\u2395PROFILE 'state'\n      RawTimes\u2190\u2395PROFILE 'data'\n      Adjusted\u2190RawTimes[;4 5]-RawTimes[;6 7]\u00d7CallTimeBias\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/query-stop/","title":"Query stop","text":"Query Stop R\u2190\u2395STOP Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of a visible defined function or operator.  <code>R</code> is a simple non-negative integer vector of the line numbers of the function or operator named by <code>Y</code> on which stop controls are set, shown in ascending order.  The value 0 in <code>R</code> indicates that a stop control is set immediately prior to exit from the function or operator.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/query-stop/#example","title":"Example","text":"<pre><code>      \u2395STOP'FOO'\n0 1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/query-trace/","title":"Query trace","text":"Query Trace R\u2190\u2395TRACE Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of a visible defined function or operator.  <code>R</code> is a simple non-negative integer vector of the line numbers of the function or operator named by <code>Y</code> on which trace controls are set, shown in ascending order.  The value 0 in <code>R</code> indicates that a trace control is set to display the result of the function or operator immediately prior to exit.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/query-trace/#example","title":"Example","text":"<pre><code>      \u2395TRACE'DSL'\n0 1 2 3 4 5 6\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/refs/","title":"Refs","text":"Cross References R\u2190\u2395REFS Y <p><code>Y</code> must be a simple character scalar or vector, identifying the name of a function or operator, or the object representation form of a function or operator (see \"Object Representation: \" on page 1).  <code>R</code> is a simple character matrix, with one name per row, of identified names in the function or operator in <code>Y</code> excluding distinguished names of system constants, variables or functions.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/refs/#example","title":"Example","text":"<pre><code>      \u2395VR'OPTIONS'\n     \u2207 OPTIONS;OPTS;INP\n[1]   \u235d REQUESTS AND EXECUTES AN OPTION\n[2]    OPTS \u2190'INPUT' 'REPORT' 'END'\n[3]   IN:INP\u2190ASK'OPTION:'\n[4]    \u2192EX\u2374\u2368(\u2282INP)\u220aOPTS\n[5]    'INVALID OPTION. SELECT FROM',OPTS \u22c4 \u2192IN\n[6]   EX:\u2192EX+OPTS\u2373\u2282INP\n[7]    INPUT \u22c4 \u2192IN\n[8]    REPORT \u22c4 \u2192IN\n[9]   END:\n     \u2207\n\n    \u2395REFS'OPTIONS'\nASK\nEND\nEX\nIN\nINP\nINPUT\nOPTIONS\nOPTS\nREPORT\n</code></pre> <p>If <code>Y</code> is locked or is an External Function, <code>R</code> contains its name only.  For example:</p> <pre><code>      \u2395LOCK 'OPTIONS' \u22c4 \u2395REFS 'OPTIONS'\nOPTIONS\n</code></pre> <p>If <code>Y</code> is the name of a primitive, external or derived function, <code>R</code> is an empty matrix with shape 0 0.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/set-stop/","title":"Set stop","text":"Set Stop {R}\u2190X \u2395STOP Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of a visible defined function or operator.  <code>X</code> must be a simple non-negative integer scalar or vector.  <code>R</code> is a simple integer vector of non-negative elements.  <code>X</code> identifies the numbers of lines in the function or operator named by <code>Y</code> on which a stop control is to be placed.  Numbers outside the range of line numbers in the function or operator (other than 0) are ignored.  The number 0 indicates that a stop control is to be placed immediately prior to exit from the function or operator.  If <code>X</code> is empty, all existing stop controls are cancelled.  The value of <code>X</code> is independent of <code>\u2395IO</code>.</p> <p><code>R</code> is a vector of the line numbers on which a stop control has been placed in ascending order.  The result is suppressed unless it is explicitly used or assigned.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/set-stop/#examples","title":"Examples","text":"<pre><code>      \u22a2(0,\u237310) \u2395STOP 'FOO'\n0 1\n</code></pre> <p>Existing stop controls in the function or operator named by <code>Y</code> are cancelled before new stop controls are set:</p> <pre><code>      \u22a21 \u2395STOP 'FOO'\n1\n</code></pre> <p>All stop controls may be cancelled by giving <code>X</code> an empty vector:</p> <pre><code>      \u2374'' \u2395STOP 'FOO'\n0\n\n      \u2374\u236c \u2395STOP 'FOO'\n0\n</code></pre> <p>Attempts to set stop controls in a locked function or operator are ignored.</p> <pre><code>      \u2395LOCK'FOO'\n\n      \u22a20 1 \u2395STOP'FOO'\n</code></pre> <p>The effect of <code>\u2395STOP</code> when a function or operator is invoked is to suspend execution at the beginning of any line in the function or operator on which a stop control is placed immediately before that line is executed, and immediately before exiting from the function or operator if a stop control of 0 is set.  Execution may be resumed by a branch expression.  A stop control interrupt (1001) may also be trapped - see \"Trap Event: \" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/set-stop/#example","title":"Example","text":"<pre><code>      \u2395FX'R\u2190FOO' 'R\u219010'\n\n      0 1 \u2395STOP'FOO'\n\n      FOO\nFOO[1]\n\n      R\nVALUE ERROR\n      R\n      ^\n\n      \u21921\nFOO[0]\n\n      R\n10\n\n      \u2192\u2395LC\n10\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/set-trace/","title":"Set trace","text":"Set Trace {R}\u2190X \u2395TRACE Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of a visible defined function or operator.  <code>X</code> must be a simple non-negative integer scalar or vector.</p> <p><code>X</code> identifies the numbers of lines in the function or operator named by <code>Y</code> on which a trace control is to be placed.  Numbers outside the range of line numbers in the function or operator (other than 0) are ignored.  The number 0 indicates that a trace control is to be placed immediately prior to exit from the function or operator.  The value of <code>X</code> is independent of <code>\u2395IO</code>.</p> <p><code>R</code> is a simple integer vector of non-negative elements indicating the lines in the function or operator on which a trace control has been placed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/set-trace/#example","title":"Example","text":"<pre><code>      +(0,\u237310) \u2395TRACE'FOO'\n0 1\n</code></pre> <p>Existing trace controls in the function or operator named by <code>Y</code> are cancelled before new trace controls are set:</p> <pre><code>      + 1 \u2395TRACE'FOO'\n1\n</code></pre> <p>All trace controls may be cancelled by giving <code>X</code> an empty vector:</p> <pre><code>      \u2374\u236c \u2395TRACE 'FOO'\n0\n</code></pre> <p>Attempts to set trace controls in a locked function or operator are ignored.</p> <pre><code>      \u2395LOCK 'FOO'\n      +1 \u2395TRACE 'FOO'\n</code></pre> <p>The effect of trace controls when a function or operator is invoked is to display the result of each complete expression for lines with trace controls as they are executed, and the result of the function if trace control 0 is set.  If a line contains expressions separated by <code>\u22c4</code>, the result of each complete expression is displayed for that line after execution.</p> <p>The result of a complete expression is displayed even where the result would normally be suppressed.  In particular:</p> <ul> <li>the result of a branch statement is displayed;</li> <li>the result (pass-through value) of assignment is displayed;</li> <li>the result of a function whose result would normally be suppressed is displayed;</li> </ul> <p>For each traced line, the output from <code>\u2395TRACE</code> is displayed as a two element vector, the first element of which contains the function or operator name and line number, and the second element of which takes one of two forms.</p> <ul> <li>The result of the line, displayed as in standard output.</li> <li><code>\u2192</code> followed by a line number.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/set-trace/#example_1","title":"Example","text":"<pre><code>      \u2395VR 'DSL'\n     \u2207 R\u2190DSL SKIP;A;B;C;D\n[1]    A\u21902\u00d73+4\n[2]    B\u2190(2 3\u2374'ABCDEF')A\n[3]    \u2192NEXT\u00d7\u2373SKIP\n[4]    'SKIPPED LINE'\n[5]   NEXT:C\u2190'one' \u22c4 D\u2190'two'\n[6]   END:R\u2190C D\n     \u2207\n\n      (0,\u23736) \u2395TRACE 'DSL'\n\n      DSL 1\n DSL[1]  14\n DSL[2]   ABC   14\n          DEF\n DSL[3]  \u21925\n DSL[5]  one\n DSL[5]  two\n DSL[6]   one   two\n DSL[0]   one   two\n one  two\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/vr/","title":"Vr","text":"Vector Representation R\u2190\u2395VR Y <p><code>Y</code> must be a simple character scalar or vector which represents the name of a function or defined operator.</p> <p>If <code>Y</code> is the name of a defined function or defined operator, <code>R</code> is a simple character vector containing a character representation of the function or operator with each line except the last terminated by the newline character (<code>\u2395UCS \u2395AVU[4]</code>).</p> <p>Its display form is as follows:</p> <ol> <li>the header line starts at column 8 with the <code>\u2207</code> symbol in column 6,</li> <li>the line number for each line of the function starts in column 1,</li> <li>the statement contained in each line starts at column 8 except for labelled lines or lines beginning with <code>\u235d</code> which start at column 7,</li> <li>the header line and statements contain no redundant blanks beyond column 7 except that the <code>\u22c4</code> separator is surrounded by single blanks, control structure indentation is preserved and comments retain embedded blanks as originally defined,</li> <li>the last line shows only the <code>\u2207</code> character in column 6.</li> </ol> <p>If <code>Y</code> is the name of a variable, a locked function or operator, an external function, or is undefined, <code>R</code> is an empty vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/vr/#example","title":"Example","text":"<pre><code>\n      \u2374V\u2190\u2395VR'PLUS'\n128\n\n      V\n     \u2207 R\u2190{A}PLUS B\n[1]   \u235d MONADIC OR DYADIC +\n[2]    \u2192DYADIC\u2374\u23682=\u2395NC'A' \u22c4 R\u2190B \u22c4 \u2192END\n[3]   DYADIC:R\u2190A+B \u22c4 \u2192END\n[4]   END:\n     \u2207\n</code></pre> <p>The definition of <code>\u2395VR</code> has been extended to names assigned to functions by specification (<code>\u2190</code>), and to local names of functions used as operands to defined operators. In these cases, the result of <code>\u2395VR</code> is identical to that of <code>\u2395CR</code> except that the representation of defined functions and operators is as described above.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/manipulating-functions-and-operators/manipulating-functions-and-operators/vr/#example_1","title":"Example","text":"<pre><code>\n      AVG\u2190MEAN\u2218,\n\n      +F\u2190\u2395VR'AVG'\n      \u2207 R\u2190MEAN X    \u235d Arithmetic mean\n[1]     R\u2190(+/X)\u00f7\u2374X\n     \u2207 \u2218,\n\n      \u2374F\n3\n\n      ]display F\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502 \u2502     \u2207 R\u2190MEAN X    \u235d Arithmetic mean\u2502 \u2218 , \u2502\n\u2502 \u2502[1]    R\u2190(+/X)\u00f7\u2374X                   \u2502 - - \u2502\n\u2502 \u2502     \u2207                              \u2502     \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/","title":"Miscellaneous","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/av/","title":"Av","text":"Atomic Vector R\u2190\u2395AV <p><code>\u2395AV</code> is a deprecated feature and is replaced by <code>\u2395UCS</code>.</p> <p>This is a simple character vector of all 256 characters in the Classic Dyalog APL character.</p> <p>In the Classic Edition the contents of <code>\u2395AV</code> are defined by the Output Translate Table.</p> <p>In the Unicode Edition, the contents of <code>\u2395AV</code> are defined by the system variable <code>\u2395AVU</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/av/#examples","title":"Examples","text":"<pre><code>      \u2395AV[48+\u237310]\n0123456789\n\n      5 52\u237412\u2193\u2395av%'\u237a\u2375_abcdefghijklmnopqrstuvwxyz\u00af.\u236c0123456789\u22a2\u00a5$\u00a3\u00a2\n\u2206ABCDEFGHIJKLMNOPQRSTUVWXYZ\u00fd\u00b7\u007f\u2359\u00c1\u00c2\u00c3\u00c7\u00c8\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d2\u00d3\u00d4\u00d5\u00d9\u00da\u00db\n\u00dd\u00fe\u00e3\u00ec\u00f0\u00f2\u00f5{\u20ac}\u22a3\u2337\u00a8\u00c0\u00c4\u00c5\u00c6\u2368\u00c9\u00d1\u00d6\u00d8\u00dc\u00df\u00e0\u00e1\u00e2\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ed\u00ee\u00ef\u00f1[/\u233f\\\u2340&lt;\u2264=\u2265&gt;\u2260\u2228\u2227\n-+\u00f7\u00d7?\u220a\u2374~\u2191\u2193\u2373\u25cb*\u2308\u230a\u2207\u2218(\u2282\u2283\u2229\u222a\u22a5\u22a4|;,\u2371\u2372\u2352\u234b\u2349\u233d\u2296\u235f\u2339!\u2355\u234e\u236b\u236a\u2261\u2262\u00f3\u00f4\u00f6\u00f8\"#&amp;\u00b4\n\u2518\u2510\u250c\u2514\u253c\u2500\u251c\u2524\u2534\u252c\u2502@\u00f9\u00fa\u00fb^\u00fc`\u2223\u00b6:\u2377\u00bf\u00a1\u22c4\u2190\u2192\u235d)] \u00a7\u2395\u235e\u2363%'\u237a\u2375_abcdefghijk\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/avu/","title":"Avu","text":"Atomic Vector - Unicode \u2395AVU <p><code>\u2395AVU</code> specifies the contents of the atomic vector, <code>\u2395AV</code>, and is used to translate data between Unicode and non-Unicode character formats when required, for example when:</p> <ul> <li>Unicode Edition loads or copies a Classic Edition workspace or a workspace saved by a Version prior to Version 12.0.</li> <li>Unicode Edition reads character data from a non-Unicode component file, or receives data type 82 from a TCP socket.</li> <li>Unicode Edition writes data to a non-Unicode component file</li> <li>Unicode Edition reads or writes data from or to a Native File using conversion code 82.</li> <li>Classic Edition loads or copies a Unicode Edition workspace</li> <li>Classic Edition reads character data from a Unicode component file, or receives data type 80, 160, or 320 from a TCP socket.</li> <li>Classic Edition writes data to a Unicode component file.</li> </ul> <p><code>\u2395AVU</code> is an integer vector with 256 elements, containing the Unicode code points which define the characters in <code>\u2395AV</code>. <code>\u2395AVU</code> has Namespace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/avu/#note","title":"Note","text":"<p>In Versions of Dyalog prior to Version 12.0 and in the Classic Edition, a character is stored internally as an index into the atomic vector, <code>\u2395AV</code>. When a character is displayed or printed, the index in <code>\u2395AV</code> is translated to a number in the range 0-255 which represents the index of the character in an Extended ASCII font. This mapping is done by the Output Translate Table which is user-configurable. Note that although ASCII fonts typically all contain the same symbols in the range 0-127, there are a number of different Extended ASCII font layouts, including proprietary APL fonts, which provide different symbols in positions 128-255. The actual symbol that appears on the screen or on the printed page is therefore a function of the Output Translate Table and the font in use. Classic Edition provides two different fonts (and thus two different <code>\u2395AV</code> layouts) for use with the Development Environment, named Dyalog Std (with APL underscores) and Dyalog Alt (without APL underscores).</p> <p>The default value of <code>\u2395``AVU</code> corresponds to the use of the Dyalog Alt Output Translate Table and font in the Classic Edition or in earlier versions of Dyalog APL.</p> <pre><code>      2 13\u2374\u2395AVU[97+\u237326]\n193 194 195 199 200 202 203 204 205 206 207 208 210\n211 212 213 217 218 219 221 254 227 236 240 242 245\n      \u2395UCS 2 13\u2374\u2395AVU[97+\u237326]\n\u00c1\u00c2\u00c3\u00c7\u00c8\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d2\n\u00d3\u00d4\u00d5\u00d9\u00da\u00db\u00dd\u00fe\u00e3\u00ec\u00f0\u00f2\u00f5\n</code></pre> <p><code>\u2395AVU</code> can be localised, in order to make it straightforward to write access functions which receive or read data from systems with varying atomic vectors. If you have been using Dyalog Alt for most things but have some older code which uses underscores, you can bring this code together in the same workspace and have it all look \"as it should\" by using the Alt and Std definitions for <code>\u2395AVU</code> as you copy each part of the code into the same Unicode Edition workspace.</p> <pre><code>      )COPY avu.dws Std.\u2395AVU\nC:\\Program Files\\Dyalog\\Dyalog APL 12.0 Unicode\\ws\\avu saved Thu Dec 06 11:24:32 2007\n\n      2 13\u2374\u2395AVU[97+\u237326]\n9398 9399 9400 9401 9402 9403 9404 9405 9406 9407 9408 9409 9410\n9411 9412 9413 9414 9415 9416 9417 9418 9419 9420 9421 9422 9423\n       \u2395UCS 2 13\u2374\u2395AVU[97+\u237326]\n\u24b6\u24b7\u24b8\u24b9\u24ba\u24bb\u24bc\u24bd\u24be\u24bf\u24c0\u24c1\u24c2\n\u24c3\u24c4\u24c5\u24c6\u24c7\u24c8\u24c9\u24ca\u24cb\u24cc\u24cd\u24ce\u24cf\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/avu/#rules-for-conversion-on-import","title":"Rules for Conversion on Import","text":"<p>When the Unicode Edition imports APL objects from a non-Unicode source, function comments and character data of type 82 are converted to Unicode. When the Classic Edition imports APL objects from a Unicode source, this translation is performed in reverse.</p> <p>If the objects are imported from a Version 12.0 (or later) workspace (i.e. from a workspace that contains its own value of <code>\u2395AVU</code>) the value of <code>#.\u2395AVU</code> (the value of <code>\u2395AVU</code> in the root) in the source workspace is used. Otherwise, such as when APL objects are imported from a pre-Version 12 workspace, from a component file, or from a TCP socket, the local value of <code>\u2395AVU</code> in the target workspace is used.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/avu/#rules-for-conversion-on-export","title":"Rules for Conversion on Export","text":"<p>When the Unicode Edition exports APL objects to a non-Unicode destination, such as a non-Unicode Component File or non-Unicode TCPSocket Object, function comments (in <code>\u2395OR</code>s) and character data of type 82 are converted to <code>\u2395AV</code> indices using the local value of <code>\u2395AVU</code>.</p> <p>When the Classic Edition exports APL objects to a Unicode destination, such as a Unicode Component File or Unicode TCPSocket Object, function comments (in <code>\u2395OR</code>s) and character data of type 82 are converted to Unicode using the local value of <code>\u2395AVU</code>.</p> <p>In all cases, if a character to be translated is not defined in <code>\u2395AVU</code>, a <code>TRANSLATION ERROR</code> (event number 92) will be signalled.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/kl/","title":"Kl","text":"Key Label R\u2190\u2395KL Y <p><code>Y</code> is a simple character vector or a vector of character vectors containing Input Codes for Keyboard Shortcuts. In the Classic Edition, keystrokes are associated with Keyboard Shortcuts by the Input Translate Table.</p> <p><code>R</code> is a simple character vector or a vector of character vectors containing the labels associated with the codes.  If <code>Y</code> specifies codes that are not defined, the corresponding elements of <code>R</code> are the codes in <code>Y</code>.</p> <p><code>\u2395KL</code> provides the information required to build device-independent help messages into applications, particularly full-screen applications using <code>\u2395SM</code> and <code>\u2395SR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/kl/#examples","title":"Examples:","text":"<pre><code>      \u2395KL 'RC'\nRight\n\n      \u2395KL 'ER' 'EP' 'QT' 'F1' 'F13'\n  Enter  Esc  Shift+Esc  F1  Shift+F1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/opt/","title":"Opt","text":"Variant {R}\u2190{X}(f \u2395OPT B)Y <p><code>\u2395OPT</code> is synonymous with the Variant Operator <code>\u2360</code> and can be used in both Classic and Unicode Editions - unlike <code>\u2360</code> which is valid in Unicode Editions only, and <code>\u2395U2360</code> which is valid in Classic Editions only.</p> <p>See \"Variant\" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/pfkey/","title":"Pfkey","text":"Program Function Key R\u2190{X}\u2395PFKEY Y <p><code>\u2395PFKEY</code> is a system function that sets or queries the programmable function keys.  <code>\u2395PFKEY</code> associates a sequence of keystrokes with a function key.  When the user subsequently presses the key, it is as if he had typed the associated keystrokes one by one.</p> <p>Note that RIDE does not currently support the use of <code>\u2395PFKEY</code>; it is possible however to associate simple strings to function keys - see the RIDE User Guide for more information.</p> <p><code>Y</code> is an integer scalar in the range 0-255 specifying a programmable function key.  If <code>X</code> is omitted the result <code>R</code> is the current setting of the key.  If the key has not been defined previously, the result is an empty character vector.</p> <p>If <code>X</code> is specified it is a simple or nested character vector defining the new setting of the key.  The value of <code>X</code> is returned in the result <code>R</code>.</p> <p>The elements of <code>X</code> are either character scalars or 2-element character vectors which specify keycodes. See Keyboard Shortcuts on page 1Keyboard Shortcuts.</p> <p>Programmable function keys are recognised in any of the three types of window (SESSION, EDIT and TRACE) provided by the Dyalog APL development environment. <code>\u2395SR</code> operates with the 'raw' function keys and ignores programmed settings.</p> <p>Note that key definitions can reference other function keys, such as \"F1\" or \"F123\".</p> <p>The size of the buffer associated with <code>\u2395PFKEY</code> is specified by the pfkey_size parameter.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/pfkey/#examples","title":"Examples","text":"<pre><code>       (')FNS',\u2282'ER')\u2395PFKEY 1\n\u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2510\n\u2502)\u2502F\u2502N\u2502S\u2502ER\u2502\n\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2518\n       (')VARS',\u2282'ER')\u2395PFKEY 2\n\u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2510\n\u2502)\u2502V\u2502A\u2502R\u2502S\u2502ER\u2502\n\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2518\n      'F1' 'F2' \u2395PFKEY 3 \u235d Does )FNS and )VARS\n\u250c\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502F1\u2502F2\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2518\n\n</code></pre> <p>The following expression defines the action for F12 to be \"move the text to the right of the cursor to the left of the cursor\".</p> <pre><code>\n      'Rl' 'CT' 'LL' 'PT'\u2395PFKEY 12\n\u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502Rl\u2502CT\u2502LL\u2502PT\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/query-external-variable/","title":"Query external variable","text":"Query External Variable R\u2190\u2395XT Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be a variable name.  <code>R</code> is a simple character vector containing the file reference of the external array associated with the variable named by <code>Y</code>, or the null vector if there is no associated external array.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/query-external-variable/#example","title":"Example","text":"<pre><code>      \u2395XT'V'\nEXT\\ARRAY\n\n      \u2374\u2395XT'G'\n0\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sd/","title":"Sd","text":"Screen Dimensions R\u2190\u2395SD <p><code>\u2395SD</code> is a 2-element integer vector containing the number of rows and columns on the screen, or in the USER window.</p> <p>For asynchronous terminals under UNIX, the screen size is taken from the terminal database terminfo or termcap.</p> <p>In window implementations of Dyalog APL, <code>\u2395SD</code> reports the current size (in characters) of the USER window or the current size of the SM object, whichever is appropriate.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/set-external-variable/","title":"Set external variable","text":"Set External Variable {R}\u2190X \u2395XT Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be a variable name.  <code>X</code> must be a simple character scalar or vector which is taken to be a file reference.  The name given by <code>Y</code> is identified as an EXTERNAL VARIABLE associated with an EXTERNAL ARRAY whose value may be stored in file identified by <code>X</code>. The shy result <code>R</code> has the same value as <code>X</code>.</p> <p>If <code>Y</code> is the name of a defined function or operator, a label or a namespace in the active workspace, a <code>DOMAIN ERROR</code> is reported.</p> <p>Attempts to assign namespace references or the <code>\u2395OR</code> of namespaces to an external array will result in a <code>DOMAIN ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/set-external-variable/#example","title":"Example","text":"<pre><code>      'EXT\\ARRAY' \u2395XT 'V'\n</code></pre> <p>If the file reference does not exist, the external variable has no value until a value is assigned:</p> <pre><code>      V\nVALUE ERROR\n      V\n      ^\n</code></pre> <p>A value assigned to an external variable is stored in file space, not within the workspace:</p> <pre><code>      \u2395WA\n2261186\n\n      V\u2190\u2373100000\n\n      \u2395WA\n2261186\n</code></pre> <p>There are no specific restrictions placed on the use of external variables.  They must conform to the normal requirements when used as arguments of functions or as operands of operators.  The essential difference between a variable and an external variable is that an external variable requires only temporary workspace for an operation to accommodate (usually) a part of its value.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/set-external-variable/#examples","title":"Examples","text":"<pre><code>      V\u2190\u23735\n      +/V\n15\n\n      V[3]\u2190\u2282'ABC'\n\n      V\n1 2  ABC  4 5\n\n      \u2374\u00a8V\n     3\n</code></pre> <p>Assignment allows the structure or the value of an external variable to be changed without fully defining the external array in the workspace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/set-external-variable/#examples_1","title":"Examples","text":"<pre><code>      V,\u2190\u22822 4\u2374\u23738\n\n      \u2374V\n6\n\n      V[6]\n1 2 3 4\n5 6 7 8\n\n      V[1 2 4 5 6]\u00d7\u219010\n\n      V\n10 20  ABC  40 50  10 20 30 40\n                   50 60 70 80\n</code></pre> <p>An external array is (usually) preserved in file space when the name of the external variable is disassociated from the file.  It may be re-associated with any valid variable name.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/set-external-variable/#example_1","title":"Example","text":"<pre><code>      \u2395EX'V'\n\n      'EXT\\ARRAY'\u2395XT'F'\n\n      F\n10 20  ABC  40 50  10 20 30 40\n                   50 60 70 80\n</code></pre> <p>In UNIX versions, if <code>X</code> is an empty vector, the external array is associated with a temporary file which is erased when the array is disassociated.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/set-external-variable/#example_2","title":"Example","text":"<pre><code>      ''\u2395XT'TEMP'\n\n      TEMP\u2190\u237310\n\n      +/TEMP\u00d7TEMP\n385\n\n      \u2395EX'TEMP'\n</code></pre> <p>An external array may be erased using the native file function: <code>\u2395NERASE</code>.</p> <p>In a multi-user environment (UNIX or a Windows LAN) a new file associated with an external array is created with access permission for owner read/write.  An existing file is opened for exclusive use (by the owner) if the permissions remain at this level.  If the access permissions allow any other users to read and write to the file, the file is opened for shared use.  In UNIX versions, access permissions may be modified using the appropriate Operating System command, or in Windows using the supplied function <code>XVAR</code> from the UTIL workspace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sm/","title":"Sm","text":"Screen Map \u2395SM <p><code>\u2395SM</code> is a system variable that defines a character-based user interface (as opposed to a graphical user interface).  In versions of Dyalog APL that support asynchronous terminals, <code>\u2395SM</code> defines a form that is displayed on the USER SCREEN.  The implementation of <code>\u2395SM</code> in \"window\" environments is compatible with these versions.  In Dyalog APL/X, <code>\u2395SM</code> occupies its own separate window on the display, but is otherwise equivalent.  In versions of Dyalog APL with GUI support, <code>\u2395SM</code> either occupies its own separate window (as in Dyalog APL/X) or, if it exists, uses the window assigned to the SM object.  This allows <code>\u2395SM</code> to be used in a GUI application in conjunction with other GUI components.</p> <p><code>\u2395SM</code> has workspace scope.</p> <p>In general <code>\u2395SM</code> is a nested matrix containing between 3 and 13 columns.  Each row of <code>\u2395SM</code> represents a field; each column a field attribute.</p> <p>The columns have the following meanings:</p> Column Description Default 1 Field Contents N/A 2 Field Position - Top Row N/A 3 Field Position - Left Column N/A 4 Window Size - Rows 0 5 Window Size - Columns 0 6 Field Type 0 7 Behaviour 0 8 Video Attributes 0 9 Active Video Attributes <code>\u00af</code> 1 10 Home Element - Row 1 11 Home Element - Column 1 12 Scrolling Group - Vertical 0 13 Scrolling Group - Horizontal 0 <p>With the exception of columns 1 and 8, all elements in <code>\u2395SM</code> are integer scalar values.</p> <p>Elements in column 1 (Field Contents) may be:</p> <ul> <li>A numeric scalar</li> <li>A numeric vector</li> <li>A 1-column numeric matrix</li> <li>A character scalar</li> <li>A character vector</li> <li>A character matrix (rank 2)</li> <li>A nested matrix defining a sub-form whose structure and contents must conform to that defined for <code>\u2395SM</code> as a whole.  This definition is recursive.  Note however that a sub-form must be a matrix - a vector is not allowed.</li> </ul> <p>Elements in column 8 (Video Attributes) may be:</p> <ul> <li>An integer scalar that specifies the appearance of the entire field.</li> <li>An integer array of the same shape as the field contents.  Each element specifies the appearance of the corresponding element in the field contents.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sm/#screen-management-async-terminals","title":"Screen Management (Async Terminals)","text":"<p>Dyalog APL for UNIX systems on tty devices (async terminals or on terminal emulators) manages two screens; the SESSION screen and the USER screen.  If the SESSION screen is current, an assignment to <code>\u2395SM</code> causes the display to switch to the USER screen and show the form defined by <code>\u2395SM</code>.</p> <p>Note that the RIDE does not directly support <code>\u2395SM</code>, although it is possible to display <code>\u2395SM</code> in the tty session to which a RIDE client is connected.</p> <p>If the USER screen is current, any change in the value of <code>\u2395SM</code> is immediately reflected by a corresponding change in the appearance of the display.  However, an assignment to <code>\u2395SM</code> that leaves its value unchanged has no effect.</p> <p>Dyalog APL automatically switches to the SESSION screen for default output, if it enters immediate input mode (6-space prompt), or through use of <code>\u2395</code> or <code>\u235e</code>.  This means that typing</p> <pre><code>      \u2395SM \u2190 expression\n</code></pre> <p>in the APL session will cause the screen to switch first to the USER screen, display the form defined by <code>\u2395SM</code>, and then switch back to the SESSION screen to issue the 6-space prompt.  This normally happens so quickly that all the user sees is a flash on the screen.To retain the USER screen in view it is necessary to issue a call to <code>\u2395SR</code> or for APL to continue processing. e.g.</p> <pre><code>      \u2395SM \u2190 expression  \u22c4  \u2395SR 1\n</code></pre> <p>or</p> <pre><code>      \u2395SM \u2190 expression  \u22c4  \u2395DL 5\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sm/#screen-management-window-versions","title":"Screen Management (Window Versions)","text":"<p>In Dyalog APL/X, and optionally in Dyalog APL/W, <code>\u2395SM</code> is displayed in a separate USER WINDOW on the screen.  In an end-user application this may be the only Dyalog APL window.  However, during development, there will be a SESSION window, and perhaps EDIT and TRACE windows too.</p> <p>The USER Window will only accept input during execution of <code>\u2395SR</code>.  It is otherwise \"output-only\".  Furthermore, during the execution of <code>\u2395SR</code> it is the only active window, and the SESSION, EDIT and TRACE Windows will not respond to user input.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sm/#screen-management-gui-versions","title":"Screen Management (GUI Versions)","text":"<p>In versions of Dyalog APL that provide GUI support, there is a special SM object that defines the position and size of the window to be associated with <code>\u2395SM</code>.  This allows character-mode applications developed for previous versions of Dyalog APL to be migrated to and integrated with GUI environments without the need for a total re-write.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sm/#effect-of-localisation","title":"Effect of Localisation","text":"<p>Like all system variables (with the exception of <code>\u2395TRAP</code>) <code>\u2395SM</code> is subject to \"pass-through localisation\".  This means that a localised <code>\u2395SM</code> assumes its value from the calling environment.  The localisation of <code>\u2395SM</code> does not, of itself therefore, affect the appearance of the display.  However, reassignment of a localised <code>\u2395SM</code> causes the new form to overlay rather than replace whatever forms are defined further down the stack.  The localisation of <code>\u2395SM</code> thus provides a simple method of defining pop-up forms, help messages, etc.</p> <p>The user may edit the form defined by <code>\u2395SM</code> using the system function <code>\u2395SR</code>.  Under the control of <code>\u2395SR</code> the user may change the following elements in <code>\u2395SM</code> which may afterwards be referenced to obtain the new values.</p> Column 1 Field Contents Column 10 Home Element - Row (by scrolling vertically) Column 11 Home Element - Column (by scrolling horizontally)"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sr/","title":"Sr","text":"Screen Read R\u2190{X}\u2395SR Y <p><code>\u2395SR</code> is a system function that allows the user to edit or otherwise interact with the form defined by <code>\u2395SM</code>.</p> <p>In versions of Dyalog APL that support asynchronous terminals, if the current screen is the SESSION screen, <code>\u2395SR</code> immediately switches to the USER SCREEN and displays the form defined by <code>\u2395SM</code>.</p> <p>In Dyalog APL/X, <code>\u2395SR</code> causes the input cursor to be positioned in the USER window.  During execution of <code>\u2395SR</code>, only the USER Window defined by <code>\u2395SM</code> will accept input and respond to the keyboard or mouse.  The SESSION and any EDIT and TRACE Windows that may appear on the display are dormant.</p> <p>In versions of Dyalog APL with GUI support, a single SM object may be defined.  This object defines the size and position of the <code>\u2395SM</code> window, and allows <code>\u2395SM</code> to be used in conjunctions with other GUI components.  In these versions, <code>\u2395SR</code> acts as a superset of <code>\u2395DQ</code> (see \"Dequeue Events: \" on page 1) but additionally controls the character-based user interface defined by <code>\u2395SM</code>.</p> <p><code>Y</code> is an integer vector that specifies the fields which the user may visit.  In versions with GUI support, <code>Y</code> may additionally contain the names of GUI objects with which the user may also interact.</p> <p>If specified, <code>X</code> may be an enclosed vector of character vectors defining <code>EXIT_KEYS</code> or a 2-element nested vector defining <code>EXIT_KEYS</code> and the <code>INITIAL_CONTEXT</code>.</p> <p>The result <code>R</code> is the <code>EXIT_CONTEXT</code>.</p> <p>Thus the 3 uses of <code>\u2395SR</code>are:</p> <pre><code>     EXIT_CONTEXT\u2190\u2395SR FIELDS\n\n     EXIT_CONTEXT\u2190(\u2282EXIT_KEYS)\u2395SR FIELDS\n\n     EXIT_CONTEXT\u2190(EXIT_KEYS)(INITIAL_CONTEXT)\u2395SR FIELDS\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sr/#fields","title":"FIELDS","text":"<p>If an element of <code>Y</code> is an integer scalar, it specifies a field as the index of a row in <code>\u2395SM</code> (if <code>\u2395SM</code> is a vector it is regarded as having 1 row).</p> <p>If an element of <code>Y</code> is an integer vector, it specifies a sub-field.  The first element in <code>Y</code> specifies the top-level field as above.  The next element is used to index a row in the form defined by <code>\u2283\u2395SM[Y[1];1]</code> and so forth.</p> <p>If an element of <code>Y</code> is a character scalar or vector, it specifies the name of a top-level GUI object with which the user may also interact.  Such an object must be a \"top-level\" object, i.e. the <code>Root</code> object ('<code>.'</code>) or a <code>Form</code> or pop-up <code>Menu</code>.  This feature is implemented ONLY in versions of Dyalog APL with GUI support.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sr/#exit_keys","title":"EXIT_KEYS","text":"<p>Each element of <code>EXIT_KEYS</code> is a 2-character code from the Input Translate Table for the keyboard.  If the user presses one of these keys, <code>\u2395SR</code> will terminate and return a result.</p> <p>If <code>EXIT_KEYS</code> is not specified, it defaults to:</p> <pre><code>      'ER' 'EP' 'QT'\n</code></pre> <p>which (normally) specifies ,  and ."},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sr/#initial_context","title":"INITIAL_CONTEXT","text":"<p>This is a vector of between 3 and 6 elements with the following meanings and defaults:</p> Element Description Default 1 Initial Field N/A 2 Initial Cursor Position - Row N/A 3 Initial Cursor Position - Col N/A 4 Initial Keystroke <code>''</code> 5 (ignored) N/A 6 Changed Field Flags 0 <p>Structure of  INITIAL_CONTEXT</p> <p><code>INITIAL_CONTEXT[1]</code> specifies the field in which the cursor is to be placed.  It is an integer scalar or vector, and must be a member of <code>Y</code>.  It must not specify a field which has <code>BUTTON</code> behaviour (64), as the cursor is not allowed to enter such a field.</p> <p><code>INITIAL_CONTEXT[2 3]</code> are integer scalars which specify the initial cursor position within the field in terms of row and column numbers.</p> <p><code>INITIAL_CONTEXT[4]</code> is either empty, or a 2-element character vector specifying the initial keystroke as a code from the Input Translate Table for the keyboard.</p> <p><code>INITIAL_CONTEXT[5]</code> is ignored.  It is included so that the <code>EXIT_CONTEXT</code> result of one call to <code>\u2395SR</code> can be used as the <code>INITIAL_CONTEXT</code> to a subsequent call.</p> <p><code>INITIAL_CONTEXT[6]</code> is a Boolean scalar or vector the same length as <code>Y</code>.  It specifies which of the fields in <code>Y</code> has been modified by the user.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sr/#exit_context","title":"EXIT_CONTEXT","text":"<p>The result <code>EXIT_CONTEXT</code> is a 6 or 9-element vector whose first 6 elements have the same structure as the <code>INITIAL_CONTEXT</code>.  Elements 7-9 only apply to those versions of Dyalog APL that provide mouse support.</p> Element Description 1 Final Field 2 Final Cursor Position - Row 3 Final Cursor Position - Col 4 Terminating Keystroke 5 Event Code 6 Changed Field Flags 7 Pointer Field 8 Pointer Position - Row 9 Pointer Position - Col <p>Structure of the Result of <code>\u2395SR</code></p> <p><code>EXIT_CONTEXT[1]</code> contains the field in which the cursor was when <code>\u2395SR</code> terminated due to the user pressing an exit key or due to an event occurring.  It is an integer scalar or vector, and a member of <code>Y</code>.</p> <p><code>EXIT_CONTEXT[2 3]</code> are integer scalars which specify the row and column position of the cursor within the field <code>EXIT_CONTEXT[1]</code> when <code>\u2395SR</code> terminated.</p> <p><code>EXIT_CONTEXT[4]</code> is a 2-element character vector specifying the last keystroke pressed by the user before <code>\u2395SR</code> terminated.  Unless <code>\u2395SR</code> terminated due to an event, <code>EXIT_CONTEXT[4]</code> will contain one of the exit keys defined by <code>X</code>.  The keystroke is defined in terms of an Input Translate Table code.</p> <p><code>EXIT_CONTEXT[5]</code> contains the sum of the event codes that caused <code>\u2395SR</code> to terminate.  For example, if the user pressed a mouse button on a <code>BUTTON</code> field (event code 64) and the current field has <code>MODIFIED</code> behaviour (event code 2) <code>EXIT_CONTEXT[5]</code> will have the value 66.</p> <p><code>EXIT_CONTEXT[6]</code> is a Boolean scalar or vector the same length as <code>Y</code>.  It specifies which of the fields in <code>Y</code> has been modified by the user during this <code>\u2395SR</code>, ORed with <code>INITIAL_CONTEXT[6]</code>.  Thus if the <code>EXIT_CONTEXT</code> of one call to <code>\u2395SR</code> is fed back as the <code>INITIAL_CONTEXT</code> of the next, <code>EXIT_CONTEXT[6]</code> records the fields changed since the start of the process.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/sr/#exit_context-window-versions","title":"EXIT_CONTEXT (Window Versions)","text":"<p><code>\u2395SR</code> returns a 9-element result ONLY if it is terminated by the user pressing a mouse button.  In this case:</p> <p><code>EXIT_CONTEXT[7]</code> contains the field over which the mouse pointer was positioned when the user pressed a button. It is an integer scalar or vector, and a member of <code>Y</code>.</p> <p><code>EXIT_CONTEXT[8 9]</code> are integer scalars which specify the row and column position of the mouse pointer within the field <code>EXIT_CONTEXT[7]</code> when <code>\u2395SR</code> terminated.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/tc/","title":"Tc","text":"Terminal Control (\u2395ML) <p><code>\u2395TC</code> is a deprecated feature and is replaced by <code>\u2395UCS</code> (see note).</p> <p><code>\u2395TC</code> is a simple three element vector.  If <code>\u2395ML&lt;3</code> this is ordered as follows:</p> <code>\u2395TC[1]</code> Backspace <code>\u2395TC[2]</code> Linefeed <code>\u2395TC[3]</code> Newline <p>Note that <code>\u2395TC\u2261\u2395AV[1+\u23733]</code> for <code>\u2395ML&lt;3</code> .</p> <p>If <code>\u2395ML\u22653</code>the order of the elements of <code>\u2395TC</code> is instead compatible with IBM's APL2:</p> <code>\u2395TC[1]</code> Backspace <code>\u2395TC[2]</code> Newline <code>\u2395TC[3]</code> Linefeed <p>Elements of <code>\u2395TC</code> beyond 3 are not defined but are reserved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/tc/#note","title":"Note","text":"<p>With the introduction of <code>\u2395UCS</code> in Version 12.0, the use of <code>\u2395TC</code> is discouraged and it is strongly recommended that you generate control characters using <code>\u2395UCS</code> instead. This recommendation holds true even if you continue to use the Classic Edition.</p> Control Character Old New Backspace <code>\u2395TC[1]</code> <code>\u2395UCS 8</code> Linefeed <code>\u2395TC[2] (\u2395ML&lt;3) \u2395TC[3] (\u2395ML\u22653)</code> <code>\u2395UCS 10</code> Newline <code>\u2395TC[3] (\u2395ML&lt;3) \u2395TC[2] (\u2395ML\u22653)</code> <code>\u2395UCS 13</code>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/underscored-alphabetic-characters/","title":"Underscored alphabetic characters","text":"Underscored Alphabetic Characters R\u2190\u2395\u24b6 <p><code>\u2395\u24b6</code> is a deprecated feature. Dyalog strongly recommends that you move away from the use of <code>\u2395\u24b6</code>and of the underscored alphabet itself, as these symbols now constitute the sole remaining non-standard use of characters in Dyalog applications.</p> <p>In Versions of Dyalog APL prior to Version 11.0, <code>\u2395\u24b6</code> was a simple character vector, composed of the letters of the alphabet with underscores. If the Dyalog Alt font was in use, these symbols displayed as additional National Language characters.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/underscored-alphabetic-characters/#version-101-and-earlier","title":"Version 10.1 and Earlier","text":"<pre><code>      \u2395\u24b6\n\u24b6\u24b7\u24b8\u24b9\u24ba\u24bb\u24bc\u24bd\u24be\u24bf\u24c0\u24c1\u24c2\u24c3\u24c4\u24c5\u24c6\u24c7\u24c8\u24c9\u24ca\u24cb\u24cc\u24cd\u24ce\u24cf\n</code></pre> <p>For compatibility with previous versions of Dyalog APL, functions that contain references to <code>\u2395\u24b6</code> will continue to return characters with the same index in <code>\u2395AV</code> as before. However, the display of <code>\u2395\u24b6</code> is now <code>\u2395\u00c1</code>, and the old underscored symbols appear as they did in previous Versions when the Dyalog Alt font was in use.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/miscellaneous/miscellaneous/underscored-alphabetic-characters/#current-version","title":"Current Version","text":"<pre><code>      \u2395\u00c1\n\u00c1\u00c2\u00c3\u00c7\u00c8\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d2\u00d3\u00d4\u00d5\u00d9\u00da\u00db\u00dd\u00fe\u00e3\u00ec\u00f0\u00f2\u00f5\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/","title":"Namespaces and Objects","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/base/","title":"Base","text":"Base Class R\u2190\u2395BASE.Y <p><code>\u2395BASE</code> is used to access the base class implementation of the name specified by <code>Y</code>.</p> <p><code>Y</code> must be the name of a Public member (Method, Field or Property) that is provided by the Base Class of the current Class or Instance.</p> <p><code>\u2395BASE</code> is typically used to call a method in the Base Class which has been superseded by a Method in the current Class.</p> <p>Note that <code>\u2395BASE.Y</code> is special syntax and any direct reference to <code>\u2395BASE</code> on its own or in any other context, is meaningless and causes <code>SYNTAX ERROR</code>.</p> <p>In the following example, Class <code>DomesticParrot</code> derives from Class <code>Parrot</code> and supersedes its <code>Speak</code> method. <code>DomesticParrot.Speak</code> calls the <code>Speak</code> method in its Base Class <code>Parrot</code>, via <code>\u2395BASE</code>.</p> <pre><code>:Class Parrot: Bird\n    \u2207 R\u2190Speak\n      :Access Public\n      R\u2190'Squark!'\n    \u2207\n:EndClass \u235d Parrot\n\n:Class DomesticParrot: Parrot\n    \u2207 R\u2190Speak\n      :Access Public\n      R\u2190\u2395BASE.Speak,' Who''s a pretty boy, then!'\n    \u2207\n:EndClass \u235d DomesticParrot\n\n      Maccaw\u2190\u2395NEW Parrot\n      Maccaw.Speak\nSquark!\n\n      Polly\u2190\u2395NEW DomesticParrot\n      Polly.Speak\nSquark! Who's a pretty boy, then!\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/class/","title":"Class","text":"Class R\u2190{X}\u2395CLASS Y"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/class/#monadic-case","title":"Monadic Case","text":"<p>Monadic <code>\u2395CLASS</code> returns a list of references to Classes and Interfaces that specifies the class hierarchy for the Class or Instance specified by <code>Y</code>.</p> <p><code>Y</code> must be a reference to a Class or to an Instance of a Class.</p> <p><code>R</code> is a vector of vectors whose items represent nodes in the Class hierarchy of <code>Y</code>. Each item of <code>R</code> is a vector whose first item is a Class reference and whose subsequent items (if any) are references to the Interfaces supported by that Class.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/class/#example-1","title":"Example 1","text":"<p>This example illustrates a simple inheritance tree or Class hierarchy. There are 3 Classes, namely:</p> <pre><code>Animal\n    Bird (derived from Animal)\n        Parrot (derived from Bird)\n\n:Class Animal\n...\n:EndClass \u235d Animal\n\n:Class Bird: Animal\n...\n:EndClass \u235d Bird\n\n:Class Parrot: Bird\n...\n:EndClass \u235d Parrot\n\n</code></pre> <pre><code>       \u2395CLASS Eeyore\u2190\u2395NEW Animal\n  #.Animal  \n       \u2395CLASS Robin\u2190\u2395NEW Bird\n  #.Bird    #.Animal  \n       \u2395CLASS Polly\u2190\u2395NEW Parrot\n  #.Parrot    #.Bird    #.Animal\n\n      \u2395CLASS\u00a8 Parrot Animal\n   #.Parrot    #.Bird    #.Animal      #.Animal\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/class/#example-2","title":"Example 2","text":"<p>The Penguin Class example  illustrates the use of Interfaces.</p> <p>In this case, the <code>Penguin</code> Class derives from <code>Animal</code> (as above) but additionally supports the <code>BirdBehaviour</code> and <code>FishBehaviour</code> Interfaces, thereby inheriting members from both.</p> <pre><code>      Pingo\u2190\u2395NEW Penguin\n      \u2395CLASS Pingo\n  #.Penguin  #.FishBehaviour  #.BirdBehaviour    #.Animal\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/class/#dyadic-case","title":"Dyadic Case","text":"<p>If <code>X</code> is specified, <code>Y</code> must be a reference to an Instance of a Class and <code>X</code> is a reference to an Interface that is supported by Instance <code>Y</code> or to a Class upon which Instance <code>Y</code> is based.</p> <p>In this case, <code>R</code> is a reference to the implementation of Interface <code>X</code> by Instance <code>Y</code>, or to the implementation of (Base) Class <code>X</code> by Instance <code>Y</code>, and is used as a castin order to access members of <code>Y</code> that correspond to members of Interface of (Base) Class <code>X</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/class/#example-1_1","title":"Example 1:","text":"<p>Once again, the Penguin Class example  is used to illustrate the use of Interfaces.</p> <pre><code>      Pingo\u2190\u2395NEW Penguin\n      \u2395CLASS Pingo\n  #.Penguin  #.FishBehaviour  #.BirdBehaviour    #.Animal\n\n      (FishBehaviour \u2395CLASS Pingo).Swim\nI can dive and swim like a fish\n      (BirdBehaviour \u2395CLASS Pingo).Fly\nAlthough I am a bird, I cannot fly\n      (BirdBehaviour \u2395CLASS Pingo).Lay\nI lay one egg every year          \n      (BirdBehaviour \u2395CLASS Pingo).Sing\nCroak, Croak!           \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/class/#example-2_1","title":"Example 2:","text":"<p>This example illustrates the use of dyadic <code>\u2395CLASS</code> to cast an Instance to a lower Class and thereby access a member in the lower Class that has been superseded by another Class higher in the tree.</p> <pre><code>      Polly\u2190\u2395NEW DomesticParrot\n      Polly.Speak\nSquark! Who's a pretty boy, then!\n\n</code></pre> <p>Note that the <code>Speak</code> method invoked above is the <code>Speak</code> method defined by Class <code>DomesticParrot</code>, which supersedes the <code>Speak</code> methods of sub-classes <code>Parrot</code> and <code>Bird</code>.</p> <p>You may use a cast to access the (superseded) <code>Speak</code> method in the sub-classes <code>Parrot</code> and <code>Bird</code>.</p> <pre><code>      (Parrot \u2395CLASS Polly).Speak\nSquark!\n      (Bird \u2395CLASS Polly).Speak\nTweet, tweet!\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/cs/","title":"Cs","text":"Change Space {R}\u2190{X}\u2395CS Y <p><code>Y</code> must be namespace reference (ref) or a simple character scalar or vector identifying the name of a namespace.</p> <p>If specified, <code>X</code> is a simple character scalar, vector, matrix or a nested vector of character vectors identifying zero or more workspace objects to be exported into the namespace <code>Y</code>.</p> <p>The identifiers in <code>X</code> and <code>Y</code> may be simple names or compound names separated by <code>'.'</code> and including the names of the special namespaces <code>'\u2395SE'</code>, <code>'#'</code>, and <code>'##'</code>.</p> <p>The result <code>R</code> is the full name (starting <code>#.</code>) of the space in which the function or operator was executing prior to the <code>\u2395CS</code>.</p> <p><code>\u2395CS</code> changes the space in which the current function or operator is running to the namespace <code>Y</code> and returns the original space, in which the function was previously running, as a shy result.  After the <code>\u2395CS</code>, references to global names (with the exception of those specified in <code>X</code>) are taken to be references to global names in <code>Y</code>.  References to local names (i.e. those local to the current function or operator) are, with the exception of those with name class 9, unaffected. Local names with name class  9 are however no longer visible.</p> <p>When the function or operator terminates, the calling function resumes execution in its original space.</p> <p>The names listed in <code>X</code> are temporarily exported to the namespace <code>Y</code>.  If objects with the same name exist in <code>Y</code>, these objects are effectivelyshadowed and are inaccessible. Note that Dyadic <code>\u2395CS</code> may be used only if there is a traditional function in the state indicator (stack). Otherwise there would be no way to retract the export. In this case (for example in a clear workspace) <code>DOMAIN ERROR</code> is reported.</p> <p>Note that calling <code>\u2395CS</code> with an empty argument <code>Y</code> obtains the namespace in which a function is currently executing.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/cs/#example","title":"Example","text":"<p>This simple example illustrates how <code>\u2395CS</code> may be used to avoid typing long pathnames when building a tree of GUI objects.  Note that the objects <code>NEW</code> and <code>OPEN</code> are created as children of the <code>FILE</code> menu as a result of using <code>\u2395CS</code> to change into the <code>F.MB.FILE</code> namespace.</p> <pre><code>     \u2207 MAKE_FORM;F;OLD\n[1]    'F'\u2395WC'Form'\n[2]    'F.MB'\u2395WC'MenuBar'\n[3]    'F.MB.FILE'\u2395WC'Menu' '&amp;File'\n[4]\n[5]    OLD\u2190\u2395CS'F.MB.FILE'\n[6]    'NEW'\u2395WC'MenuItem' '&amp;New'\n[7]    'OPEN'\u2395WC'MenuItem' '&amp;Open'\n[8]    \u2395CS OLD\n[9]\n[10]   'F.MB.EDIT'\u2395WC'Menu' '&amp;Edit'\n[11]\n[12]   OLD\u2190\u2395CS'F.MB.EDIT'\n[13]   'UNDO'\u2395WC'MenuItem' '&amp;Undo'\n[14]   'REDO'\u2395WC'MenuItem' '&amp;Redo'\n[15]   \u2395CS OLD\n[16]   ...\n     \u2207\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/cs/#example_1","title":"Example","text":"<p>Suppose a form <code>F1</code> contains buttons <code>B1</code> and <code>B2</code>. Each button maintains a count of the number of times it has been pressed, and the form maintains a count of the total number of button presses. The single callback function <code>PRESS</code> and its subfunction <code>FMT</code> can reside in the form itself</p> <pre><code>      )CS F1\n#.F1\n      \u235d Note that both instances reference\n      \u235d the same callback function\n      'B1'\u2395WS'Event' 'Select' 'PRESS'\n      'B2'\u2395WS'Event' 'Select' 'PRESS'\n\n      \u235d Initialise total and instance counts.\n      TOTAL \u2190 B1.COUNT \u2190 B2.COUNT \u2190 0\n</code></pre> <pre><code>\n\n    \u2207 PRESS MSG\n[1]   'FMT' 'TOTAL'\u2395CS\u2283MSG \u235d     Switch to instance space\n[2]   (TOTAL COUNT)+\u21901   \u235d    Incr total &amp; instance count\n[3]   \u2395WS'Caption'(COUNT FMT TOTAL)\u235d Set instance caption\n    \u2207\n</code></pre> <pre><code>\n\n    \u2207 CAPT\u2190INST FMT TOTL      \u235d Format button caption.\n[1]   CAPT\u2190(\u2355INST),'/',\u2355TOTL  \u235d E.g. 40/100.\n    \u2207\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/cs/#example_2","title":"Example","text":"<p>This example uses <code>\u2395CS</code> to explore a namespace tree and display the structure.  Note that it must export its own name (tree) each time it changes space, because the name tree is global.</p> <pre><code>      \u2207 tabs tree space;subs     \u235d Display namespace tree\n[1]    tabs,space\n[2]    'tree'\u2395CS space\n[3]    \u2192(\u2374subs\u2190\u2193\u2395NL 9)\u21930\n[4]    (tabs,'.   ')\u2218tree\u00a8subs\n     \u2207 \n\n      )ns x.y\n#.x.y\n      )ns z\n#.z\n      ''tree '#'\n#\n.   x\n.   .   y\n.   z\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/cs/#note","title":"Note","text":"<p><code>\u2395CS</code> is not permitted in a dfn or dop. If used therein it will cause a <code>NONCE ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/df/","title":"Df","text":"Display Form {R}\u2190\u2395DF Y <p><code>\u2395DF</code> sets the Display Formof a namespace, a GUI object, a Class, or an Instance of a Class.</p> <p><code>Y</code> must be <code>\u2395NULL</code> or a simple character array that specifies the display form of a namespace. If defined, this array will be returned by the format functions and <code>\u2395FMT</code> instead of the default for the object in question. This also applies to the string that is displayed when the name is referenced but not assigned (the default display). If <code>Y</code> is  <code>\u2395NULL</code>, <code>\u2395DF</code> resets the Display Form to the default.</p> <p>The result <code>R</code> is the previous value of the Display Form which initially is <code>\u2395NULL</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/df/#example","title":"Example","text":"<pre><code>\n      'F'\u2395WC'Form'\n      \u2355F\n#.F\n      \u2374\u2355F\n3\n      \u2395FMT F\n#.F\n      \u2374\u2395FMT F\n1 3\n      F \u235d default display uses \u2355\n#.F\n\n      F.\u2395DF 'Pete''s Form'\n      \u2355F\nPete's Form\n      \u2374\u2355F\n11\n      \u2395FMT F\nPete's Form\n      \u2374\u2395FMT F\n1 11\n</code></pre> <p>Notice that <code>\u2395DF</code> will accept any character array, but <code>\u2395FMT</code> always returns a matrix.</p> <pre><code>\n      F.\u2395DF 2 2 5\u2374\u2395A\n      F\nABCDE\nFGHIJ\n\nKLMNO\nPQRST\n      \u2374\u2355F\n2 2 5\n\n</code></pre> <pre><code>\n      \u2374\u2395\u2190\u2395FMT F\nABCDE\nFGHIJ\n\nKLMNO\nPQRST\n5 5\n</code></pre> <p>Note that <code>\u2395DF</code> defines the Display Form statically, rather than dynamically.</p> <pre><code>\n      'F'\u2395WC'Form' 'This is the Caption'\n      F\n#.F\n\n      F.(\u2395DF Caption)\u235d set display form to current caption\n      F\nThis is the Caption\n\n      F.Caption\u2190'New Caption' \u235d changing caption does not\n                              \u235d change the display form\n      F\nThis is the Caption\n</code></pre> <p>You may use the Constructor function to assign the Display Form to an Instance of a Class. For example:</p> <pre><code>\n:Class MyClass\n    \u2207 Make arg\n      :Access Public\n      :Implements Constructor\n      \u2395DF arg\n    \u2207\n:EndClass \u235d MyClass\n\n      PD\u2190\u2395NEW MyClass 'Pete'\n      PD\nPete\n</code></pre> <p>It is possible to set the Display Form for the Root and for <code>\u2395SE</code></p> <pre><code>\n      )CLEAR\nclear ws\n      #\n#\n      \u2395DF \u2395WSID\n      #\nCLEAR WS\n\n      \u2395SE\n\u2395SE\n      \u2395SE.\u2395DF 'Session'\n      \u2395SE\nSession\n</code></pre> <p>Note that <code>\u2395DF</code> applies directly to the object in question and is not automatically applied in a hierarchical fashion.</p> <pre><code>\n      'X'\u2395NS ''\n      X\n#.X\n\n      'Y'X.\u2395NS ''\n      X.Y\n#.X.Y\n      X.\u2395DF 'This is X'\n      X\nThis is X\n\n      X.Y\n#.X.Y\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/","title":"Fix","text":"Fix Script {R}\u2190{X}\u2395FIX Y <p><code>\u2395FIX</code> establishes Namespaces, Classes, Interfaces and functions from the script specified by <code>Y</code> in the workspace.</p> <p>In this section, the term namespace covers scripted Namespaces, Classes and Interfaces.</p> <p><code>Y</code> may be a simple character vector, or  a vector of character vectors or character scalars. The value of <code>X</code> determines what <code>Y</code> may contain.</p> <p>If <code>Y</code> is a simple character vector, it must start with file://, followed by the name of a file which must exist. The contents of the file must follow the same rules that apply to <code>Y</code> when <code>Y</code> is a vector of character vectors or scalars. The file name can be relative or absolute; when considering cross-platform portability, using \"/\" as the directory delimiter is recommended, although \"\\\" is also valid under Windows.</p> <p>If specified, <code>X</code> must be a numeric scalar. It may currently take the value <code>0</code>, <code>1</code> or <code>2</code>. If not specified, the value is assumed to be <code>1</code>.</p> <p>If <code>X</code> is <code>0</code>, <code>Y</code> must specify a single valid namespace which may or may not be named, or a file containing such a definition. If so, the shy result <code>R</code> contains a reference to the namespace. Even if the namespace is named, it is not established per se, although it will exist for as long as at least one reference to it exists.</p> <p>If <code>X</code> is <code>1</code>, <code>Y</code> must specify a single valid namespace which may or may not be named, or a file containing such a definition.  If so, the shy result <code>R</code> contains a reference to the namespace. If <code>Y</code> contains the definition of a named namespace, the namespace is established in the workspace.</p> <p>If <code>X</code> is <code>2</code>, <code>Y</code> is either a character vector containing the name of a script file, or a vector of character vectors that represents a script.</p> <p><code>Y</code> may specify a series of named namespaces or function definitions,   or a combination of functions and namespaces.</p> <ul> <li>If the script contains more than one item,  tradfn definitions must be delimited by <code>\u2207</code>symbols.</li> <li>Derived and assigned functions may be specified only within namespaces.</li> </ul> <p>In this case,  the shy result <code>R</code> is a vector of character vectors, containing the names of all of the objects that have been established in the workspace; the order of the names in <code>R</code> is not defined. Currently <code>2 \u2395FIX</code> is not certain to be an atomic operation, although this might change in future versions.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#example-1","title":"Example 1","text":"<p>In the first example, the Class specified by <code>Y</code> is named (<code>MyClass</code>) but the result of <code>\u2395FIX</code> is discarded. The end-result is that <code>MyClass</code> is established in the workspace as a Class.</p> <pre><code>      \u2395\u2190\u2395FIX ':Class MyClass' ':EndClass'\n#.MyClass\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#example-2","title":"Example 2","text":"<p>In the second example, the Class specified by <code>Y</code> is named (<code>MyClass</code>) and the result of <code>\u2395FIX</code> is assigned to a different name (<code>MYREF</code>). The end-result is that a Class named <code>MyClass</code> is established in the workspace, and <code>MYREF</code> is a reference to it.</p> <pre><code>      MYREF\u2190\u2395FIX ':Class MyClass' ':EndClass'\n      )CLASSES\nMyClass MYREF\n      \u2395NC'MyClass' 'MYREF'\n9.4 9.4\n      MYREF\n#.MyClass\n      MYREF\u2261MyClass\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#example-3","title":"Example 3","text":"<p>In the third example, the left-argument of <code>0</code> causes the named Class <code>MyClass</code> to be visible only via the reference to it (<code>MYREF</code>). It is there, but hidden.</p> <pre><code>      MYREF\u21900 \u2395FIX ':Class MyClass' ':EndClass'\n      )CLASSES\nMYREF\n      MYREF\n#.MyClass\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#example-4","title":"Example 4","text":"<p>The fourth example illustrates the use of un-named Classes.</p> <pre><code>      src\u2190':Class' '\u2207Make n'\n      src,\u2190'Access Public' 'Implements Constructor'\n      src,\u2190'\u2395DF n' '\u2207' ':EndClass'\n      MYREF\u2190\u2395FIX src\n      )CLASSES\nMYREF\n      MYINST\u2190\u2395NEW MYREF'Pete'\n      MYINST\nPete\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#example-5","title":"Example 5","text":"<p>In the final example, the left argument of <code>2</code> allows a script containing multiple objects to be fixed:</p> <pre><code>\n      src\u2190':Namespace andys' '\u2207foo' '2' '\u2207'\n      src,\u2190':EndNamespace' 'dfn\u2190{\u237a \u2375}' '\u2207r\u2190tfn'\n      src,\u2190'r\u219033' '\u2207' ':Class c1' '\u2207goo' '1'\n      src,\u2190'\u2207' ':EndClass'\n      \u2262\u2395\u21902\u2395fix src\n c1  tfn  dfn  andys \n4\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#restriction","title":"Restriction","text":"<p><code>\u2395FIX</code> is unable to fix a namespace from <code>Y</code> when <code>Y</code> specifies a multi-line dfn which is preceded by a <code>\u22c4</code> (diamond separator).       \u2395FIX':Namespace iaK' 'a\u21901 \u22c4 adfn\u2190{' '\u2375' ' }' ':EndNamespace' DOMAIN ERROR: There were errors processing the script       \u2395FIX':Namespace iaK' 'a\u21901 \u22c4 adfn\u2190{' '\u2375' ' }' ':EndNamespace'       \u2227</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#variant-options","title":"Variant Options","text":"<p><code>\u2395FIX</code> may be applied using the  Variant operator with the options Quiet, FixWithErrors,  AllowLateBinding and InjectReferences. These options apply only to namespaces and classes specified by the script. There is no principal option.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#quiet-option","title":"Quiet Option","text":"0 If the script contains errors, these are displayed in the Status Window. <code>1</code> If the script contains errors, the errors are not shown  in the Status Window."},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#fixwitherrors-option","title":"FixWithErrors Option","text":"0 If the script contains errors, <code>\u2395FIX</code> fails with <code>DOMAIN ERROR</code> . <code>1</code> <code>\u2395FIX</code> fixes all the namespaces and classes in the script regardless of any errors they may contain. <code>2</code> If the script contains errors, <code>\u2395FIX</code> displays a message box prompting the user to choose whether or not to fix all the offending namespaces and classes in the script."},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#allowlatebinding-option","title":"AllowLateBinding Option","text":"0 <code>\u2395FIX</code> will only fix a Class whose Base class (if specified) is defined in the script or is present in the workspace. <code>1</code> <code>\u2395FIX</code> will fixes a Class whose Base class is neither defined in the script nor present in the workspace."},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/fix/#injectreferences-option","title":"InjectReferences Option","text":"<code>'All'</code> In order to implement lexical scope, <code>\u2395FIX</code> will insert internal references into all objects in the script. 'InClasses' In order to implement lexical scope, <code>\u2395FIX</code> will insert internal references ONLY into Classes and sub-classes in the script, but not into namespaces. <code>'None'</code> No internal references are inserted and lexical scope does not apply. <p>See Lexical Scope in Scripts on page 1.</p> <p>The following examples illustrate how different values of the InjectReferences option affect the scope of objects in scripts. The examples are based on the following family tree:</p> <p>Two scripts are defined to map this tree onto a structure of Classes and Namespaces. In this scheme, female family members are represented by Classes and male family members by Namespaces.</p> <p>So the scripted tree for <code>Pete</code> has a parent Namespace:</p> <pre><code>:Namespace Pete\n    :Namespace Andy\n        :Class Aisha\n        :Access Public\n        :endclass\n    :EndNamespace\n\n    :Class Katherine\n    :Access Public\n        :Namespace Woody\n        :EndNamespace\n        :Namespace George\n        :EndNamespace\n    :EndClass\n:EndNamespace\n</code></pre> <p>While the scripted tree for <code>Jill</code> has a parent Class:</p> <pre><code>:Class Jill\n:Access Public\n    :Namespace Andy\n        :Class Aisha\n        :Access Public\n        :endclass\n    :EndNamespace\n\n    :Class Katherine\n    :Access Public\n        :Namespace Woody\n        :EndNamespace\n        :Namespace George\n        :EndNamespace\n    :EndClass\n:EndClass\n</code></pre> <p>Using the <code>Pete</code> Namespace, after executing the expression:</p> <pre><code>      2(\u2395FIX\u2360'InjectReferences' 'All')\u2395SRC Pete\n</code></pre> <ul> <li>Code in <code>Pete</code> may refer to <code>Aisha</code>    , <code>Andy</code>     , <code>George</code>   , <code>Katherine</code>, and <code>Woody</code></li> <li>Code in <code>Andy</code> may refer to <code>Aisha</code>    and <code>Katherine</code></li> <li>... and so forth.</li> </ul> <p>But after executing:</p> <pre><code>      2(\u2395FIX\u2360'InjectReferences' 'InClasses')\u2395SRC Pete\n</code></pre> <ul> <li>Code in <code>Pete</code> may refer only to <code>Andy</code> and  <code>Katherine</code></li> <li>Code in <code>Andy</code> may refer only to <code>Aisha</code> </li> <li>... and so forth.</li> </ul> <p>The following tables show which objects in Namespace <code>Pete</code> can see (i.e. refer to) which other objects representing members of the family, in each case; <code>All</code>, <code>InClasses</code> and <code>None</code>.</p> 'All' Pete Andy Aisha Katherine Woody George Pete \u2714 \u2714 \u2714 \u2714 \u2714 Andy \u2714 \u2714 Aisha \u2714 \u2714 \u2714 Katherine \u2714 \u2714 \u2714 \u2714 \u2714 Woody \u2714 George \u2714 'InClasses' Pete Andy Aisha Katherine Woody George Pete \u2714 \u2714 Andy \u2714 Aisha \u2714 \u2714 \u2714 Katherine \u2714 \u2714 \u2714 \u2714 \u2714 Woody George 'None' Pete Andy Aisha Katherine Woody George Pete \u2714 \u2714 Andy \u2714 Aisha Katherine Woody George <p>Whilst the next set of tables show the same for Class <code>Jill</code>.</p> 'All' Jill Andy Aisha Katherine Woody George Jill \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 Andy \u2714 \u2714 Aisha \u2714 \u2714 \u2714 Katherine \u2714 \u2714 \u2714 \u2714 \u2714 Woody \u2714 George \u2714 'InClasses' Jill Andy Aisha Katherine Woody George Jill \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 Andy \u2714 Aisha \u2714 \u2714 \u2714 Katherine \u2714 \u2714 \u2714 \u2714 \u2714 Woody George 'None' Jill Andy Aisha Katherine Woody George Jill Andy \u2714 Aisha Katherine Woody George"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/instances/","title":"Instances","text":"Instances R\u2190\u2395INSTANCES Y <p><code>\u2395INSTANCES</code> returns a list all the current instances of the Class specified by <code>Y</code>.</p> <p><code>Y</code> must be a reference.</p> <p>If <code>Y</code> is a reference to a Class, <code>R</code> is a vector of references to all existing Class Instances of  <code>Y</code>. Otherwise, <code>R</code> is empty.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/instances/#examples","title":"Examples","text":"<p>This example illustrates a simple inheritance tree or Class hierarchy. There are 3 Classes, namely:</p> <pre><code>Animal\n    Bird (derived from Animal)\n        Parrot (derived from Bird)\n</code></pre> <pre><code>:Class Animal\n...\n:EndClass \u235d Animal\n\n:Class Bird: Animal\n...\n:EndClass \u235d Bird\n\n:Class Parrot: Bird\n...\n:EndClass \u235d Parrot\n</code></pre> <pre><code>      Eeyore\u2190\u2395NEW Animal\n      Robin\u2190\u2395NEW Bird\n      Polly\u2190\u2395NEW Parrot\n\n      \u2395INSTANCES Parrot\n #.[Parrot] \n      \u2395INSTANCES Bird\n #.[Bird]  #.[Parrot] \n      \u2395INSTANCES Animal\n #.[Animal]  #.[Bird]  #.[Parrot] \n\n</code></pre> <pre><code>      Eeyore.\u2395DF 'eeyore'\n      Robin.\u2395DF 'robin'\n      Polly.\u2395DF 'polly'\n\n      \u2395INSTANCES Parrot\n polly\n      \u2395INSTANCES Bird\n robin  polly \n      \u2395INSTANCES Animal\n eeyore  robin  polly \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/new/","title":"New","text":"New Instance R\u2190\u2395NEW Y <p><code>\u2395NEW</code> creates a new instance of the Class, Dyalog GUI object, or .NET Type specified by <code>Y</code>.</p> <p><code>Y</code> must be a 1- or 2-item scalar or vector. The first item is a reference to a Class or to a .NET Type, or a character vector containing the name of a Dyalog GUI object.</p> <p>The second item, if specified, contains the argument to be supplied to the Class or Type Constructor or a list of property/value pairs for a Dyalog GUI object.</p> <p>The result <code>R</code> is a reference to a new instance of Class, Dyalog GUI object, or Type <code>Y</code>.</p> <p>For further information, see Interface Guide.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/new/#class-example","title":"Class Example","text":"<pre><code>:Class Animal\n    \u2207 Name nm\n      :Access Public\n      :Implements Constructor\n      \u2395DF nm\n    \u2207\n:EndClass \u235d Animal\n\n      Donkey\u2190\u2395NEW Animal 'Eeyore'\n      Donkey\nEeyore\n</code></pre> <p>If <code>\u2395NEW</code> is called with just a Class reference (i.e. without parameters for the Constructor), the default constructor will be called. A default constructor is defined by a niladic function with the :Implements Constructor attribute. For example, the Animal Class may be redefined as:</p> <pre><code>:Class Animal\n    \u2207 NoName\n      :Access Public\n      :Implements Constructor\n      \u2395DF 'Noname'\n    \u2207\n    \u2207 Name nm\n      :Access Public\n      :Implements Constructor\n      \u2395DF nm\n    \u2207\n:EndClass \u235d Animal\n\n      Horse\u2190\u2395NEW Animal\n      Horse\nNoname\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/new/#net-examples","title":".NET Examples","text":"<pre><code>      \u2395USING\u2190'System' 'System.Web.Mail,System.Web.dll'\n      dt\u2190\u2395NEW DateTime (2006 1 1)\n      msg\u2190\u2395NEW MailMessage\n      \u2395NC 'dt' 'msg' 'DateTime' 'MailMessage'\n9.2 9.2 9.6 9.6\n</code></pre> <p>Note that .NET Types are accessed as follows.</p> <p>If the name specified by the first item of <code>Y</code> would otherwise generate a <code>VALUE ERROR</code>, and <code>\u2395USING</code> has been set, APL attempts to load the Type specified by <code>Y</code> from the .NET assemblies (DLLs) specified in <code>\u2395USING</code>. If successful, the name specified by <code>Y</code> is entered into the SYMBOL TABLE with a name-class of <code>9.6</code>. Subsequent references to that symbol (in this case <code>DateTime</code>) are resolved directly and do not involve any assembly searching.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/new/#dyalog-gui-examples","title":"Dyalog GUI Examples","text":"<pre><code>      F\u2190\u2395NEW \u2282'Form'\n      F\n#.[Form]\n</code></pre> <p>To specify the initial values of any properties, <code>Y[2]</code> must be a vector (or scalar) of items each of which is of the form (PropertyName PropertyValue); the free-form syntax implemented by <code>\u2395WC</code> and <code>\u2395WS</code> is not allowed.</p> <pre><code>      \u2395NEW'Form'(\u2282'Caption' 'Hello')\n#.[Form]\n\n</code></pre> <pre><code>\n      F\u2190\u2395NEW'Form'(('Caption' 'Hello')('Posn' (10 10)))\n      F\n#.[Form]\n</code></pre> <p>Note that you may not create an instance of OCXClass using <code>\u2395NEW</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/ns/","title":"Ns","text":"Namespace {R}\u2190{X}\u2395NS Y <p>If specified, <code>X</code> must be a simple character scalar or vector identifying the name of a namespace.</p> <p><code>Y</code> is either a character array which represents a list of names of objects to be copied into the namespace, or a ref to a namespace, or  an array produced by the <code>\u2395OR</code> of a namespace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/ns/#case-1","title":"Case 1","text":"<p>In the first case, <code>Y</code> must be a simple character scalar, vector, matrix or a nested vector of character vectors identifying zero or more workspace objects to be copied into the namespace <code>X</code>.  The identifiers in <code>X</code> and <code>Y</code> may be simple names or compound names separated by <code>'.'</code> and including the names of the special namespaces <code>'#'</code>, <code>'##'</code> and <code>'\u2395SE'</code>.</p> <p>The namespace <code>X</code> is created if it doesn't already exist.  If the name is already in use for an object other than a namespace, APL issues a <code>DOMAIN ERROR</code>.</p> <p>If <code>X</code> is omitted, an unnamed namespace is created.</p> <p>The objects identified in the list <code>Y</code> are copied into the namespace <code>X</code>.</p> <p>If <code>X</code> is specified, the result <code>R</code> is the full name (starting with <code>#.</code> or <code>\u2395SE.</code>) of the namespace <code>X</code>. If <code>X</code> is omitted, the result <code>R</code> is a namespace reference, or ref, to an unnamed namespace.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/ns/#examples","title":"Examples","text":"<pre><code>      +'X'\u2395NS''               \u235d Create namespace X.\n#.X\n      \u22a2'X'\u2395NS'VEC' 'UTIL.DISP'\u235d Copy VEC and DISP to X.\n#.X\n      )CS X                   \u235d Change to namespace X.\n#.X\n      \u22a2'Y'\u2395NS'#.MAT' '##.VEC' \u235d Create #.X.Y &amp;copy in\n#.X.Y\n      \u22a2'#.UTIL'\u2395NS'Y.MAT'     \u235d Copy MAT from Y to UTIL #.UTIL.\n#.UTIL\n      \u22a2'#'\u2395NS'Y'              \u235d Copy namespace Y to root.\n#\n\n</code></pre> <pre><code>      \u22a2''\u2395NS'#.MAT'           \u235d Copy MAT to current space.\n#.X\n      \u22a2''\u2395NS''                \u235d Display current space.\n#.X\n      \u22a2'Z'\u2395NS \u2395OR'Y'          \u235d Create nspace from \u2395OR.\n#.X.Z\n</code></pre> <pre><code>      NONAME\u2190\u2395NS ''           \u235d Create unnamed nspace\n      NONAME\n#.[Namespace]\n</code></pre> <pre><code>      DATA\u2190\u2395NS\u00a83\u2374\u2282''         \u235d Create 3-element vector of\n                             \u235d distinct unnamed nspaces\n      DATA\n #.[Namespace]  #.[Namespace]  #.[Namespace]\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/ns/#case-2","title":"Case 2","text":"<p>The second case is where <code>Y</code> is a ref to a namespace or the <code>\u2395OR</code> of a namespace.</p> <p>If <code>Y</code> is a ref to or a <code>\u2395OR</code> of a GUIobject, <code>X</code> must be a valid parent for the GUI object represented by <code>Y</code>, or the operation will fail with a <code>DOMAIN ERROR</code>.</p> <p>Otherwise, the result of the operation depends upon the existence of <code>X</code>.</p> <ul> <li>If <code>X</code> does not currently exist (name class is 0), <code>X</code> is created as a complete copy (clone) of the original namespace represented by <code>Y</code>. If <code>Y</code> is a ref to or the <code>\u2395OR</code> of a GUI object or of a namespace containing GUI objects, the corresponding GUI components of <code>Y</code> will be instantiated in <code>X</code>.</li> <li>If <code>X</code> is the name of an existing namespace (name class 9), the contents of <code>Y</code>, including any GUI components, are merged into <code>X</code>. Any items in <code>X</code> with corresponding names in <code>Y</code> (names with the same path in both <code>Y</code> and <code>X</code>) will be replaced by the names in <code>Y</code>, unless they have a conflicting name class in which case the existing items in <code>X</code> will remain unchanged. However, all GUI spaces in <code>X</code> will be stripped of their GUI components prior to the merge operation.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/src/","title":"Src","text":"Source R\u2190\u2395SRC Y <p><code>\u2395SRC</code> returns the script that defines the scripted object   <code>Y</code>.</p> <p><code>Y</code> must be a reference to a scripted object. Scripted objects include Classes, Interfaces and scripted Namespaces.</p> <p><code>R</code> is a vector of character vectors containing the script that was used to define <code>Y</code>.</p> <pre><code>\n      )ed \u25cbMyClass\n</code></pre> <pre><code>\n:Class MyClass\n\u2207 r\u2190foo arg\n:Access public shared\nr\u21901+arg\n\u2207\n:EndClass\n\n      z\u2190\u2395SRC MyClass\n      \u2374z\n6\n      \u2374\u00a8z\n 14  15  27  13  5  9 \n      \u236az\n :Class MyClass\n     \u2207 r\u2190foo arg\n       :Access public shared\n       r\u21901+arg\n     \u2207\n :EndClass\n</code></pre> <p>Note: The only two ways to permanently alter the source of a scripted object are to change the object in the editor, or by refixing it using <code>\u2395FIX</code>. A useful technique to ensure that a scripted object is in sync with its source is to <code>\u2395FIX \u2395SRC ref</code>, where <code>ref</code> is an object reference..</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/this/","title":"This","text":"This Space R\u2190\u2395THIS <p><code>\u2395THIS</code> returns a reference to the current namespace, i.e. to the space in which it is referenced.</p> <p>If <code>NC9</code> is a reference to any object whose name-class is <code>9</code>, then:</p> <pre><code>      NC9\u2261NC9.\u2395THIS\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/namespaces-and-objects/namespaces-and-objects/this/#examples","title":"Examples","text":"<pre><code>      \u2395THIS\n#\n      'X'\u2395NS ''\n      X.\u2395THIS\n#.X\n     'F'\u2395WC'Form'\n     'F.B'\u2395WC'Button'\n      F.B.\u2395THIS\n#.F.B\n\n      Polly\u2190\u2395NEW Parrot\n      Polly.\u2395THIS\n#.[Parrot]\n</code></pre> <p>An Instance may use <code>\u2395THIS</code> to obtain a reference to its own Class:</p> <pre><code>    Polly.(\u2283\u2283\u2395CLASS \u2395THIS)\n#.Parrot\n</code></pre> <p>or a function (such as a Constructor or Destructor) may identify or enumerate all other Instances of the same Class:</p> <pre><code>      Polly.(\u2374\u2395INSTANCES\u2283\u2283\u2395CLASS \u2395THIS)\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/","title":"Native Files","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/mkdir/","title":"Mkdir","text":"Make Directory {R}\u2190{X}\u2395MKDIR Y <p>This function creates new directories.</p> <p><code>Y</code> is a character vector or scalar containing a single directory name, or a vector of character vectors containing zero or more directory names. Names must conform to the naming rules of the host Operating System.</p> <p>By default, for each file in <code>Y</code> the path must exist and the base name must not exist (see File Name Parts on page 1), otherwise an error is signalled.</p> <p>The optional left argument <code>X</code> is the numeric scalar 0, 1, 2 or 3 which amends this behaviour as shown in the following table. If omitted, it is assumed to be 0.</p> <code>0</code> Default behaviour. <code>1</code> No action is taken if a directory specified by <code>Y</code> already exists. The return value may be used to determine whether a new directory was created or not. <code>2</code> Any part of the paths specified in <code>Y</code> which does not already exist will be created in preparation of creating the corresponding directory. <code>3</code> Combination of 1 and 2. <p>If <code>Y</code> specifies a single name, the shy result <code>R</code> is a scalar 1 if a directory was created or 0 if not. If <code>Y</code> is a vector of character vectors, <code>R</code> is a vector of 1s and 0s with the same length as <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/mkdir/#examples","title":"Examples","text":"<pre><code>\n      \u2395NEXISTS '/Users/Pete/Documents/temp'\n0\n      \u2395\u2190\u2395MKDIR '/Users/Pete/Documents/temp'\n1\n      \u2395\u2190\u2395MKDIR '/Users/Pete/Documents/temp'\nFILE NAME ERROR: Directory exists\n      \u2395\u2190\u2395MKDIR'/Users/Pete/Documents/temp'\n     \u2227\n\n      \u2395\u2190\u2395MKDIR'/Users/Pete/Documents/temp/t1/t2'\nFILE NAME ERROR: Unable to create directory (\"The system cannot find the path specified.\")\n      \u2395\u2190\u2395MKDIR'/Users/Pete/Documents/temp/t1/t2'\n     \u2227\n\n      \u2395\u21902 \u2395MKDIR'/Users/Pete/Documents/temp/t1/t2'\n1\n      \u22a2\u2395MKDIR'temp1' 'temp2'\n1 1\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/mkdir/#note","title":"Note","text":"<p>When multiple names are specified they are processed in the order given. If an error occurs at any point whilst creating directories, processing will immediately stop and an error will be signalled. The operation is not atomic; some directories may be created before this happens. In the event of an error there will be no result and therefore no indication of how many directories were created before the error occurred.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nappend/","title":"Nappend","text":"Native File Append {R}\u2190X \u2395NAPPEND Y <p>This function appends the ravel of its left argument <code>X</code> to the end of the designated native file.  <code>X</code> must be a simple homogeneous APL array.  <code>Y</code> is a 1- or 2-element integer vector.  <code>Y[1]</code> is a negative integer that specifies the tie number of a native file.  The optional second element <code>Y[2]</code> specifies the data type to which the array <code>X</code> is to be converted before it is written to the file.</p> <p>The shy result is the location of the internal file pointer which will be pointing to the end of the newly written data.</p> <p>Note that <code>8 \u2395NINFO \u2283Y</code> can be used to report the current position of the file pointer.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nappend/#unicode-edition","title":"Unicode Edition","text":"<p>Unless you specify the data type in <code>Y[2</code>], a character array will by default be written using type 80.</p> <p>If the data will not fit into the specified character width (bytes) <code>\u2395NAPPEND</code> will fail with a <code>DOMAIN ERROR</code>.</p> <p>As a consequence of these two rules, you must specify the data type (either 160 or 320) in order to write Unicode characters whose code-point are in the range 256-65535 and &gt;65535 respectively.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nappend/#example","title":"Example","text":"<pre><code>\n\n      n\u2190'test'\u2395NCREATE 0\n      'abc' \u2395nappend n\n\n      '\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1'\u2395nappend n\nDOMAIN ERROR\n      '\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1'\u2395NAPPEND n\n     \u2227\n\n      '\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1'\u2395NAPPEND n 160\n\n      \u2395NREAD n 80 3 0\nabc\n      \u2395NREAD n 160 7\n\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1\n</code></pre> <p>To write 2 or more lines, you must insert appropriate end-of-line codes.</p> <pre><code>      ('hello',(\u2395UCS 13 10),'world')\u2395nappend \u00af1 \u235d Windows\n      ('hello',(\u2395UCS 10),'world')\u2395nappend \u00af1    \u235d Other\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ncreate/","title":"Ncreate","text":"Native File Create {R}\u2190X \u2395NCREATE Y <p>This function creates a new file. Under Windows the file is opened with mode 66 (see Native File Tie on page 1). Under non-Windows operating systems the current umask will specify the file permissions. The name of the new file is specified by the left argument <code>X</code> which must be a simple character vector or scalar containing a valid pathname for the file.</p> <p><code>Y</code> is 0 or a negative integer value that specifies an (unused) tie number by which the file may subsequently be referred. If <code>Y</code> is 0, the system allocates the first (closest to zero) available tie number which is returned as the result.</p> <p>The shy result of <code>\u2395NCREATE</code> is the tie number of the new file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ncreate/#variant-options","title":"Variant Options","text":"<p><code>\u2395NCREATE</code> may be applied using the  Variant operator with the options Unique and IfExists. There is no primary option.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ncreate/#unique-option-boolean","title":"Unique Option (Boolean)","text":"0 the file named by <code>X</code> will be created <code>1</code> a uniquely named file will be created by extending the base name (see File Name Parts on page 1 ) with random characters. If a unique name cannot be created then an error will be signalled. The actual name of the file can be determined from <code>\u2395NNAMES</code> or <code>\u2395NINFO</code> ."},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ncreate/#ifexists-option-character-vector","title":"IfExists Option (character vector)","text":"Error <code>\u2395NCREATE</code> will generate a <code>FILE NAME ERROR</code> if the file already exists <code>Replace</code> <code>\u2395NCREATE</code> will replace an existing file with an empty one of the same name."},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ncreate/#examples","title":"Examples","text":"<pre><code>      \u22a2'myfile' \u2395NCREATE 0\n\u00af1\n      \u2395NUNTIE \u00af1\n      \u22a2'myfile' \u2395NCREATE 0\nFILE NAME ERROR: myfile: Unable to create file (\"The file exists.\")\n      \u22a2'myfile'\u2395NCREATE 0\n               \u2227\n</code></pre> <pre><code>\n      \u22a2'myfile' (\u2395NCREATE\u2360'IfExists' 'Replace') 0\n</code></pre> <pre><code>\u00af1    \u235d Note that it uses same tie number as before\n\n</code></pre> <pre><code>\n      \u22a2'myfile' (\u2395NCREATE\u2360('Unique' 1)) 0\n\u00af2\n      \u2395NNUMS,\u2395NNAMES\n\u00af1 myfile      \n\u00af2 myfile52c36z\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ncreate/#notes","title":"Notes:","text":"<ul> <li>Setting IfExists to <code>Replace</code> has no effect when Unique is 1, because the file cannot already exist.</li> <li>The IfExists option does not affect the operation of slippery ties.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ndelete/","title":"Ndelete","text":"Native File Delete {R}\u2190{X}\u2395NDELETE Y <p>This function deletes files and directories.</p> <p><code>Y</code> is a character vector or scalar containing a single file or directory name, or a vector of character vectors containing zero or more file or directory names. Names must conform to the naming rules of the host Operating System.</p> <p>The optional left argument <code>X</code> is a numeric scalar; valid values are  shown in the following table. If omitted, its default value is 0.</p> <code>0</code> Each file or directory with the given name must exist. <code>1</code> If the file or directory with the given name does not exist then no action is taken. The result <code>R</code> may be used to determine whether the file or directory was deleted or not. <code>2</code> If a name identifies a non-empty directory it, and all its contents, are to be deleted. <code>3</code> Combination of 1 and 2. <p><code>R</code> is a numeric count of top-level entities deleted when processing the corresponding name in <code>Y</code>. If <code>Y</code> specifies a single name,  <code>R</code> is a scalar. If <code>Y</code> is a vector of character vectors   <code>R</code> is a vector  with the same length as <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ndelete/#variant-options","title":"Variant Options","text":"<p><code>\u2395NDELETE</code> may be applied using the  Variant operator with the Wildcard option.</p> <p>Note that when Wildcard is 1, element(s) of <code>R</code> can  be 0 or <code>&gt;1</code>. If Wildcard is 0, elements of <code>R</code> are always 1.</p> <p>If <code>Y</code> specifies the name of a  symbolic link, <code>\u2395NDELETE</code> deletes that symbolic link;   the target of the symbolic link is unaffected.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ndelete/#examples","title":"Examples","text":"<pre><code>\n      \u2395NEXISTS'/Users/Pete/Documents/temp/t1/t2'\n1\n      \u22a2\u2395NDELETE'/Users/Pete/Documents/temp/t1/t2'\n1\n      \u22a2\u2395NDELETE'/Users/Pete/Documents/temp/t1/t2'\nFILE NAME ERROR: Invalid file or directory name (\"The system cannot find the file specified.\")\n      \u22a2\u2395NDELETE'/Users/Pete/Documents/temp/t1/t2'\n     \u2227\n\n</code></pre> <pre><code>\n      \u22a21 \u2395NDELETE'/Users/Pete/Documents/temp/t1/t2'\n0\n      \u22a2\u2395NDELETE 'temp1' 'temp2'\n1 1\n      \u22a2\u2395MKDIR'temp1' 'temp2'\n1 1\n       \u22a2(\u2395NDELETE\u23601)'t*'\n2\n</code></pre> <pre><code>      \u22a2\u2395MKDIR'temp1'\n1\n      \u22a2'Hello World' \u2395NPUT 'temp1/hw.txt'\n13\n      \u22a2\u2395NDELETE 'temp1'\nFILE ACCESS ERROR: temp1: Unable to delete directory (\"The directory is not empty.\")\n      \u22a2\u2395NDELETE'temp1'\n       \u2227\n      \u22a22 \u2395NDELETE 'temp1'\n1\n\n</code></pre> <p>If the file is in use or the current user is not authorised to delete it, <code>\u2395NDELETE</code> will not succeed but will instead generate a <code>FILE ACCESS ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ndelete/#note","title":"Note","text":"<p>When multiple names are specified they are processed in the order given. If an error occurs at any point whilst deleting files or directories, processing will immediately stop and an error will be signalled. The operation is not atomic; the directory contents may be partially deleted before this happens. In the event of an error there will be no result and therefore no indication of how many files were deleted before the error occurred.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nerase/","title":"Nerase","text":"Native File Erase {R}\u2190X \u2395NERASE Y <p>This function erases (deletes) a tied native file.  <code>Y</code> is a negative integer tie number associated with a tied native file.  <code>X</code> is a simple character vector or scalar containing the name of the same file and must be identical to the name used when it was opened by <code>\u2395NCREATE</code> or <code>\u2395NTIE</code>.</p> <p>The shy result of <code>\u2395NERASE</code> is the tie number that the erased file had.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nerase/#example","title":"Example","text":"<pre><code>      file \u2395nerase file \u2395ntie 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nexists/","title":"Nexists","text":"Native File Exists R\u2190\u2395NEXISTS Y <p>This function reports whether or not file and directories exist.</p> <p><code>Y</code> is a character vector or scalar containing a single file/directory name, or a vector of character vectors containing zero or more file/directory names.</p> <p>If <code>Y</code> specifies a single name, the result <code>R</code> is a scalar 1 if a file or directory exists or 0 if not. If <code>Y</code> is a vector of character vectors, <code>R</code> is a vector of 1s and 0s with the same length as <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nexists/#variant-options","title":"Variant Options","text":"<p><code>\u2395NEXISTS</code> may be applied using the  Variant operator with the Wildcard option.</p> <p>If the Wildcard option is 1, <code>R</code> indicates whether or not one or more matches to the corresponding pattern in <code>Y</code> exist.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nexists/#example","title":"Example","text":"<pre><code>\n      \u2395\u2190\u2395MKDIR'/Users/Pete/Documents/temp/t1/t2'\n1\n      \u2395NEXISTS'/Users/Pete/Documents/temp/t1/t2'\n1\n      \u2395NEXISTS'/Users/Pete/Documents/temp/t1/t2/pd'\n0\n\n      \u22a2\u2395MKDIR'temp1' 'temp2'\n1 1\n      \u2395NEXISTS 'temp1' 'temp2' 'temp3'\n1 1 0\n      (\u2395NEXISTS\u23601) 't*'\n1\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nexists/#note","title":"Note","text":"<p>If <code>Y</code> is a symbolic link, <code>\u2395NEXISTS</code> will return 1 whether or not the target of the symbolic link exists.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nget/","title":"Nget","text":"Read Text File R\u2190{X} \u2395NGET Y <p>This function reads the contents of the specified text file. See also Write Text File on page 1.</p> <p><code>Y</code> is either a character vector/scalar containing the name of the file to be read, or a 2-item vector whose first item is the file name and whose second is an integer scalar specifying <code>flags</code> for the operation.</p> <p>If <code>flags</code> is 0 (the default value if omitted) the content in the result <code>R</code> is a character vector. If <code>flags</code> is 1 the result is a nested array of character vectors corresponding to the lines in the file.</p> <p>The optional left-argument <code>X</code> is either</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nget/#-a-character-vector-that-specifies-the-file-encoding-as-shown-in-the-table-below","title":"- a character vector that specifies the file-encoding as shown in the table below.","text":"<p>File Encodings</p> Encoding Description <code>UTF-8</code> The data is encoded as UTF-8 format. <code>UTF-16LE</code> The data is encoded as UTF-16 little-endian format. <code>UTF-16BE</code> The data is encoded as UTF-16 big-endian format. <code>UTF-16</code> The data is encoded as UTF-16 with the endianness of the host system (currently BE on AIX platforms, LE on all others). <code>UTF-32LE</code> The data is encoded as UTF-32 little-endian format. <code>UTF-32BE</code> The data is encoded as UTF-32 big-endian format. <code>UTF-32</code> The data is encoded as UTF-32 with the endianness of the host system (currently BE on AIX platforms, LE on all others). <code>ASCII</code> The data is encoded as 7-bit ASCII format. <code>Windows-1252</code> The data is encoded as 8-bit Windows-1252 format. <code>ANSI</code> ANSI is a synonym of Windows-1252. <p>The above UTF formats may be qualified with -BOM or -NOBOM (e.g. UTF-8-BOM). See Write Text File on page 1.</p> <p>Whether or not <code>X</code> is specified, if the start of the file contains a recognised   Byte Order Mark (BOM), the file is decoded according to the BOM. Otherwise, if <code>X</code> is specified the file is decoded according to the value of <code>X</code>. Otherwise, the file is examined to try to decide its encoding and is decoded accordingly.</p> <p>The result <code>R</code> is a 3-element vector comprising <code>(content) (encoding) (newline)</code>  where:</p> <code>content</code> A simple character vector, or a vector of character vectors, according to the value of <code>flags</code> . <code>encoding</code> The encoding that was actually used to read the file. If this is a UTF format, it will always include the appropriate endianness (except for UTF-8 to which endianness doesn't apply) and a -BOM or -NOBOM suffix to indicate whether or not a BOM is actually present in the file. For example, UTF-16LE-BOM. If <code>X</code> specified a user-defined encoding as a 256-element numeric vector, <code>encoding</code> will be that same vector. <code>newline</code> Determined by the first occurrence in the file of one of the newline characters identified in the line separator table, or <code>\u236c</code> if no such line separator is found. <p>If <code>content</code> is simple then all its line separators (listed in the table below) are replaced by (normalised to) <code>\u2395UCS 10</code>, which in the Classic Edition must be in <code>\u2395AVU</code> (else <code>TRANSLATION ERROR</code>).</p> <p>If <code>content</code> is nested, it is formed by splitting the contents of the file on the occurrence of any of the line separators  shown in the table below. These line separators are  removed.</p> <p>The 3rd element of the result <code>newline</code> is a numeric vector from the Value column of the table below corresponding to the first occurrence of any of the newline characters in the file. If none of these characters are present, the value is <code>\u236c</code>.</p> <p>Line separators:</p> Value Code Description newline characters 13 <code>CR</code> Carriage Return (U+000D) 10 <code>LF</code> Line Feed (U+000A) 13 10 <code>CRLF</code> Carriage Return followed by Line Feed 133 <code>NEL</code> New Line (U+0085) other line separator characters 11 <code>VT</code> Vertical Tab (U+000B) 12 <code>FF</code> Form Feed (U+000C) 8232 <code>LS</code> Line Separator (U+2028) 8233 <code>PS</code> Paragraph Separator (U+2029)"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ninfo/","title":"Ninfo","text":"Native File Information R\u2190{X}\u2395NINFO Y <p>This function returns information about one or more files or directories. <code>Y</code> may  be:</p> <ul> <li>a numeric scalar containing the tie number of a native file</li> <li>a character vector or scalar containing a file or directory name that conforms to the naming rules of the host Operating System.</li> <li>a vector of character vectors and/or tie numbers</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ninfo/#variant-options","title":"Variant Options","text":"<p><code>\u2395NINFO</code> may be applied using the  Variant operator with the options  Wildcard (the Principal option), Recurse and Follow.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ninfo/#recurse-option","title":"Recurse Option","text":"0 the name(s) in <code>Y</code> are searched for only in the corresponding specified directory. <code>1</code> the name(s) in <code>Y</code> are searched for in the corresponding specified directory as well as all sub-directories. If Wildcard is also 1, the wild card search is performed recursively. <code>1 n</code> the name(s) in <code>Y</code> are searched for in the corresponding specified directory as well as its sub-directories to the n th -level sub-directory. If n is 0, no sub-directories are searched. If n is <code>\u00af1</code> all sub-directories are searched. <code>2 (n)</code> same as 1 but if any unreadable directories are encountered they are skipped (whereas if Recurse is <code>1 (n)</code> , <code>\u2395NINFO</code> stops and generates an error)."},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ninfo/#follow-option-boolean","title":"Follow Option (Boolean)","text":"<code>0</code> the properties reported are those of the symbolic link itself 1 the properties reported for a symbolic link are those of the target of the symbolic link <p>The optional left argument <code>X</code> is a simple numeric array containing values shown in the following table.</p> <code>X</code> Property Default <code>0</code> Name of the file or directory, as a character vector. If <code>Y</code> is a tie number then this is the name which the file was tied. `` <code>1</code> Type, as a numeric scalar: 0=Not known 1=Directory 2=Regular file 3=Character device 4=Symbolic link (only when Follow is 0) 5=Block device 6=FIFO (not Windows) 7=Socket (not Windows) <code>0</code> <code>2</code> Size in bytes, as a numeric scalar <code>0</code> <code>3</code> Last modification time, as a timestamp in <code>\u2395TS</code> format <code>7\u23740</code> <code>4</code> Owner user id, as a character vector \u2013 on Windows a SID, on other platforms a numeric userid converted to character format <code>''</code> <code>5</code> Owner name, as a character vector <code>''</code> <code>6</code> Whether the file or directory is hidden (1) or not (0), as a numeric scalar. On Windows, file properties include a \"hidden\" attribute; on non-Windows platforms a file or directory is implicitly considered to be hidden if its name begins with a \".\" <code>\u00af1</code> <code>7</code> Target of symbolic link (when Type is 4) <code>''</code> <code>8</code> Current position in the file. Always 0 if <code>Y</code> is a file name. <code>0</code> <code>9</code> Last access time  in <code>\u2395TS</code> format, when available <code>7\u23740</code> <code>10</code> Creation time if available, otherwise the time of the last file status change in <code>\u2395TS</code> format <code>7\u23740</code> <code>11</code> Whether the file or directory can (1) or cannot (0) be read ( <code>\u00af1</code> if unknown) <code>\u00af1</code> <code>12</code> Whether the file or directory can (1) or cannot (0) be written  ( <code>\u00af1</code> if unknown or for a directory under Windows) <code>\u00af1</code> <code>13</code> Last modification time, as a UTC  Dyalog Date  Number. <code>0</code> <code>14</code> Last access time  as a UTC Dyalog Date  Number, when available. <code>0</code> <code>15</code> Creation time if available, otherwise the time of the last file status change  as a UTC Dyalog Date  Number. <code>0</code> <p>Note that the current file position identifies where <code>\u2395NREAD</code> will next read from or <code>\u2395NAPPEND</code> will next write to and is only pertinent when the corresponding value in <code>Y</code> is a tie number rather than a name. It will be reported as 0 for named files.</p> <p>Each value in <code>X</code> identifies a property of the file(s) or directory(ies) identified by <code>Y</code> whose value is to be returned in the result <code>R</code>. If omitted, the default value of <code>X</code> is 0. Values in <code>X</code> may be specified in any order and duplicates are allowed. A value in <code>X</code> which is not defined in the table above will not generate an error but results in a <code>\u236c</code> (Zilde) in the corresponding element of <code>R</code>.</p> <p><code>R</code> is the same shape as <code>X</code> and each element contains value(s) determined by the property specified in the corresponding element in <code>X</code>. The depth of <code>R</code> depends upon whether or not the Wildcard option is enabled. If, for any reason, the function is unable to obtain a property value, (for example, if the file is in use exclusively by another process) the default value shown in the last column is returned instead.</p> <p>If the Wildcard option is not enabled (the default) then <code>Y</code> specifies exactly one file or directory and must exist.  In this case each element in <code>R</code> is a single property value for that file. If the name in <code>Y</code> does not exist, the function signals an error. On non-Windows platforms \"\" and \"?\" are treated as normal characters. On Windows an error will be signalled since neither \"\" nor \"?\" are valid characters for file or directory names.</p> <p>If the Wildcard option is enabled,  zero or more files and/or directories may match the  pattern in <code>Y</code>. In this case each element in <code>R</code> is a vector of property values for each of the files. Note that  no error will be signalled if no files match the pattern.</p> <p>When using the Wildcard option, matching of names is done case insensitively on Windows and macOS, and case sensitively on other platforms. The names '.' and '..' are excluded from any matches. The order in which the names match is not defined.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ninfo/#note","title":"Note","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ninfo/#examples","title":"Examples","text":"<pre><code>\n      (0 1 2) \u2395NINFO 'c:/Users/Pete/Documents'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n\u2502 \u2502c:/Users/Pete/Documents\u2502 1 163840 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u22831\u2395NPARTS '' \u235d current working directory\nc:/Users/Pete/\n      (\u2395NINFO\u23601)'D*'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502Desktop\u2502Documents\u2502Downloads\u2502Dropbox\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      (\u2395NINFO\u23601)'Documents/*.zip'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502Documents/dyalog.zip\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u236a (0,\u23736) \u2395NINFO 'Documents/dyalog.zip'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Documents/dyalog.zip                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25022                                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25023429284                                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25022016 1 22 16 43 58 0                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502S-1-5-21-2756282986-1198856910-2233986399-1001\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502HP/Pete                                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25020                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u22831\u2395NPARTS '' \u235d current working directory\nC:/Users/Pete/Documents/Dyalog APL-64 16.0 Unicode Files/\n      (\u2395NINFO\u23601)'*.*'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502default.dlf\u2502def_uk.dse\u2502jsonx.dws\u2502UserCommand20.cache\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      \u22a2 \u2395MKDIR 'd1' 'd2'\n1 1\n      'a'\u2218\u2395NPUT\u00a8'find' 'd1/find' 'd1/nofind' 'd2/find'\n      (\u2395ninfo\u2360'Recurse' 1)'find'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u2502d1/find\u2502d2/find\u2502find\u2502\u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The next set of examples, illustrate the use of the Recurse variant option to limit the sub-directory depth.</p> <pre><code>      Y\u2190'd:\\bouzouki\\*.*'\n      \u2374\u22830(\u2395NINFO\u2360('Wildcard' 1)('Recurse' 0))Y\n355\n      \u2374\u22830(\u2395NINFO\u2360('Wildcard' 1)('Recurse' (1 0)))Y\n355\n      \u2374\u22830(\u2395NINFO\u2360('Wildcard' 1)('Recurse' (1 1)))Y\n1333\n      \u2374\u22830(\u2395NINFO\u2360('Wildcard' 1)('Recurse' (1 3)))Y\n4223\n</code></pre> <p>The following expression will return all Word document (<code>.docx</code> and .doc) in the current directory, searching recursively through any sub-directories:</p> <pre><code>     (\u2395NINFO\u2360('Recurse' 1)('Wildcard' 1))'*.docx' '*.doc'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ninfo/#note_1","title":"Note","text":"<p>Of the file timestamps which are reported by the operating system, only the last modification time should be considered reliable and portable. Neither the access time or creation time are well supported across all platforms. Furthermore, they may not accurately reflect the actual time that the operation occurred.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nlock/","title":"Nlock","text":"Native File Lock {R}\u2190X \u2395NLOCK Y <p>This function assists the controlled update of shared native files by locking a range of bytes.</p> <p>Locking enables controlled update of native files by co-operating users. A process requesting a lock on a region of a file will be blocked until that region becomes available. A write-lock is exclusive, whereas a read-lock is shared. In other words, any byte in a file may be in one of only three states:</p> <ul> <li>Unlocked</li> <li>Write-locked by exactly one process.</li> <li>Read-locked by any number of processes.</li> </ul> <p><code>Y</code> must be a simple integer scalar or vector containing 1, 2 or 3 items namely:</p> <ol> <li>Tie number</li> <li>Offset (from 0) of first byte of region. Defaults to 0</li> <li>Number of bytes to lock. Defaults to maximum possible file size</li> </ol> <p><code>X</code> must be a simple integer scalar or vector containing 1 or 2 items, namely:</p> <ol> <li>Type: 0: Unlock, 1:Read lock, 2:Write lock.</li> <li>Timeout: Number of seconds to wait for lock before generating a <code>TIMEOUT</code> error. Defaults to indefinite wait.</li> </ol> <p>The shy result <code>R</code> is <code>Y</code>. To unlock the file, this value should subsequently be supplied in the right argument to <code>0 \u2395NLOCK</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nlock/#examples","title":"Examples:","text":"<pre><code>    2 \u2395NLOCK \u00af1        \u235d write-lock whole file\n    0 \u2395NLOCK \u00af1        \u235d unlock whole file.\n    1 \u2395NLOCK \u00af1        \u235d read (share) lock whole file.\n    2 \u2395NLOCK\u00a8\u2395NNUMS    \u235d write-lock all files.\n    0 \u2395NLOCK\u00a8\u2395NNUMS    \u235d unlock all files.\n\n    1 \u2395NLOCK \u00af1 12 1   \u235d read-lock byte 12.\n    1 \u2395NLOCK \u00af1 0 10   \u235d read-lock first 10 bytes.\n    2 \u2395NLOCK \u00af1 20     \u235d write-lock from byte 20 onwards.\n    2 \u2395NLOCK \u00af1 10 2   \u235d write-lock 2 bytes from byte 10\n    0 \u2395NLOCK \u00af1 12 1   \u235d remove lock from byte 12.\n</code></pre> <p>To lock the region immediately beyond the end of the file prior extending it:</p> <pre><code>   \u2395\u2190region\u21902 \u2395NLOCK \u00af1, \u2395NSIZE \u00af1 \u235d write-lock from EOF.\n\u00af1 1000   \n   ... \u2395NAPPEND \u00af1                 \u235d append bytes to file\n   ... \u2395NAPPEND \u00af1                 \u235d append bytes to file\n\n   0 \u2395NLOCK region                 \u235d release lock.\n</code></pre> <p>The left argument may have a second optional item that specifies a timeout value. If a lock has not been acquired within this number of seconds, the acquisition is abandoned and a <code>TIMEOUT</code> error reported.</p> <pre><code>    2 10 \u2395nlock \u00af1      \u235d wait up to 10 seconds for lock.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nlock/#notes","title":"Notes:","text":"<ul> <li>There is no per-byte cost associated with region locking. It takes the same time to lock/unlock a region, irrespective of that region's size.</li> <li>Different file servers implement locks in slightly different ways. For example on some systems, locks are advisory. This means that a write lock on a region precludes other locks intersecting that region, but doesn't stop reads or writes across the region. On the other hand, mandatory locks block both other locks and read/write operations. <code>\u2395NLOCK</code> will just pass the server's functionality along to the APL programmer without trying to standardise it across different systems.</li> <li>All locks on a file will be removed by <code>\u2395NUNTIE</code>.</li> <li>Blocked locking requests can be freed by a strong interrupt. Under Windows, this operation is performed from the Dyalog APL pop-up menu in the system tray.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nlock/#errors","title":"Errors","text":"<ul> <li>In this release, an attempt to unlock a region that contains bytes that have not been locked results in a <code>DOMAIN ERROR</code>.</li> <li>A <code>LIMIT ERROR</code> results if the operating system lock daemon has insufficient resources to honour the locking request.</li> <li>Some systems support only write locks. In this case an attempt to set a read lock will generate a <code>DOMAIN ERROR</code>, and it may be appropriate for the APL programmer to trap the error and apply a write lock.</li> <li>No attempt will be made to detect deadlock. Some servers do this and if such a condition is detected, a <code>DEADLOCK</code> error (1008) will be reported.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nmove/","title":"Native File Move","text":"Native File Move {R}\u2190X \u2395NMOVE Y <p>This function moves native files and directories from one or more sources specified by <code>Y</code> to a destination specified by  <code>X</code>. <code>\u2395NMOVE</code> is similar to <code>\u2395NCOPY</code> (see Native File Copy  on page 1).</p> <p>When possible <code>\u2395NMOVE</code> renames files and directories, which effects a fast move when the source and destination are on the same file system. By default (see RenameOnly option below), if <code>\u2395NMOVE</code> is unable to rename files or directories, it instead copies them and deletes the originals.</p> <p><code>X</code> is a character vector that specifies the name of the destination.</p> <p><code>Y</code> is a character vector that specifies the name of the source, or a vector of character vectors containing zero or more sources.</p> <p>Sources and destinations may be full or relative (to the current working directory) path names adhering to the operating system convention.</p> <p>If <code>Y</code> specifies more than one source, <code>X</code> must be a character vector  that specifies an existent directory to which each of the sources in <code>Y</code> is to be moved.</p> <p>The shy result <code>R</code> contains count(s) of top-level items moved. If <code>Y</code> is a single source name, <code>R</code> is a scalar otherwise it is a vector of the same length as <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nmove/#variant-options","title":"Variant Options","text":"<p><code>\u2395NMOVE</code> may be applied using the  Variant operator with the options Wildcard (the Principal option), IfExists, RenameOnly and ProcessCallback.</p> <p>Note that when Wildcard is 1, element(s) of <code>R</code> can  be 0 or <code>&gt;1</code>. If Wildcard is 0, elements of <code>R</code> are always 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nmove/#ifexists-option","title":"IfExists Option","text":"<p>The IfExists variant option determines what happens when a source file is to be copied to a target file that already exists. It does not apply to directories, only to the files within them.</p> Value Description 'Error' Existing files will not be overwritten and an error will be signalled. <code>'Skip'</code> Existing files will not be overwritten but the corresponding copy operation will be skipped (ignored). <p>The following cases cause an error to be signalled  regardless of the value of the IfExists variant.</p> <ul> <li>If the source specifies a directory and the destination specifies an existing file.</li> <li>If the source specifies a file and the same base name exists as a sub-directory in the destination.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nmove/#renameonly-option-boolean","title":"RenameOnly Option (Boolean)","text":"<p>The RenameOnly option  determines what happens when it is not possible to rename the source.</p> 0 The source will be copied and the original deleted <code>1</code> The move will fail"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nmove/#examples","title":"Examples","text":"<p>A number of possibilities exist, illustrated by the following examples. In all cases, if the source is a file, the file is moved. If the source is a directory, the directory and all of its contents are moved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nmove/#examples-single-source-wildcard-is-0","title":"Examples (single source, Wildcard is 0)","text":"<ul> <li>The source name must be an existent file or directory.</li> <li>If the destination name does not exist but its path name does exist, the source is moved to the destination name.</li> <li>If the destination name is an existing directory the source name is moved to that directory.```apl        \u22831 \u2395NPARTS '' i:/Documents/Dyalog APL-64 17.0 Unicode Files/</li> </ul> <p>\u235d Rename the Session file       \u22a2'session.dlf' \u2395NMOVE 'default.dlf'</p> <pre><code>\n```apl\n\n1\n      \u22a2 \u2395MKDIR 'backups' \u235d Make a backups directory\n1\n \u235d Move the Session file to backups directory\n      \u22a2'backups'\u2395NMOVE'default.dlf'\n1\n      \u2191\u22830 (\u2395NINFO\u23601) 'backups\\*'\nbackups/default.dlf  \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nmove/#examples-single-source-wildcard-is-1","title":"Examples (single source, Wildcard is 1)","text":"<ul> <li>The source name may include wildcard characters which matches a number of existing files and/or directories. The destination name must be an existing directory.</li> <li> <p>The files and/or directories that match the pattern specified by the source name are moved into the destination directory. If there are no matches, zero copies are made.```apl        \u22831 \u2395NPARTS '' i:/Documents/Dyalog APL-64 17.0 Unicode Files/</p> <p>\u22a2 \u2395MKDIR 'backups' \u235d Make a backups directory 1 \u235d Move all files to backups directory   \u22a2'backups'(\u2395NMOVE\u2360'Wildcard' 1)'.' 3   \u2191\u22830 (\u2395NINFO\u23601) 'backups*' backups/default.dlf       backups/def_uk.dse        backups/UserCommand20.cache</p> </li> </ul> <pre><code>\n## Examples (multiple sources, Wildcard is 0)\n\n- Each source name must specify a single file or directory which must exist. The destination name must be an existing directory.\n- Each of the files and/or directories specified by the source base names are moved to the destination directory.```apl\n       \u22831 \u2395NPARTS ''\ni:/Documents/Dyalog APL-64 17.0 Unicode Files/\n\n      \u22a2 \u2395MKDIR 'backups' \u235d Make a backups directory\n1\n</code></pre> <pre><code>\n\u235d Move 2 files to backups directory\n      \u22a2'backups'\u2395NMOVE'default.dlf' 'def_uk.dse'\n1 1\n      \u2191\u22830 (\u2395NINFO\u23601) 'backups\\*'\nbackups/default.dlf\nbackups/def_uk.dse \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nmove/#examples-multiple-sources-wildcard-is-1","title":"Examples (multiple sources, Wildcard is 1)","text":"<ul> <li>The destination name must be an existing directory.</li> <li> <p>Each of the files and/or directories that match the patterns specified by the source names (if any) are moved to the destination directory.```apl       \u22831 \u2395NPARTS '' i:/Documents/Dyalog APL-64 17.0 Unicode Files/</p> <p>\u22a2 \u2395MKDIR 'backups' \u235d Make a backups directory 1 \u235d Move files to backups directory   \u22a2'backups'(\u2395NMOVE\u23601)'d*' 'UserCommand20.cache' 2 1   \u2191\u22830 (\u2395NINFO\u23601) 'backups*' backups/default.dlf backups/def_uk.dse backups/UserCommand20.cache ```</p> </li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nmove/#note","title":"Note","text":"<p>When <code>\u2395NMOVE</code> copies and deletes files:</p> <ul> <li>The operation will take longer to complete.</li> <li>File modification times will be preserved but other attributes such as file ownership may be changed.</li> <li>Read permissions will be needed on all files within a directory which is moved.</li> <li>If the operation fails at any point and an error is signalled it is possible that there may be files and/or directories left duplicated in both the source and destination. It is not possible that a file or directory may be removed from the source without having been copied to the destination.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nnames/","title":"Nnames","text":"Native File Names R\u2190\u2395NNAMES <p>This niladic function reports the names of all currently open native files.  <code>R</code> is a character matrix.  Each row contains the name of a tied native file padded if necessary with blanks.  The names are identical to those that were given when opening the files with <code>\u2395NCREATE</code> or <code>\u2395NTIE</code>. The rows of the result are in the order in which the files were tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nnums/","title":"Nnums","text":"Native File Numbers R\u2190\u2395NNUMS <p>This niladic function reports the tie numbers associated with all currently open native files.  <code>R</code> is an integer vector of negative tie numbers. The elements of the result are in the order in which the files were tied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nparts/","title":"Nparts","text":"File Name Parts R\u2190{X} \u2395NPARTS Y <p>Splits a file or directory name into its constituent parts.</p> <p><code>Y</code> is a character vector or scalar containing a single name, or a vector of character vectors containing zero or more names. Names must conform to the file-naming rules of the host Operating System.</p> <p>The file(s) need not exist; indeed this system function makes no attempt to identify or locate it/them.</p> <p>The optional left-argument <code>X</code> specifies whether or not the name or names specified by <code>Y</code> are normalised before being processed. The default value 0 means no normalisation; 1 means normalise as follows:</p> <ul> <li>Pathnames are made absolute.</li> <li>On Windows, all \"\\\" directory separators are changed to \"/\".</li> <li>The resultant name is simplified by removing extraneous directory separators etc. On Windows, this includes resolving occurrences of \".\" and \"..\"  within the name. On non-Windows platforms single \".\" are removed. Note that \"..\" and symbolic links interact differently on Windows to other platforms; on other platforms they cannot be removed without reference to the file system itself and are left in place. </li> </ul> <p>If <code>Y</code> is a scalar or vector, the result <code>R</code> is a 3-element vector of character vectors as follows:</p> <code>[1]</code> path <code>[2]</code> base name <code>[3]</code> extension <p>The path identifies the directory in which the file exists.</p> <p>The base name is the name of the file stripped of its path and extension, if any.</p> <p>The extension is the file extension including the leading \".\".</p> <p>If <code>Y</code> is a vector of character vectors, <code>R</code> is a vector of 3-element character vectors and is the same length as <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nparts/#examples","title":"Examples","text":"<pre><code>  \u2395CMD 'CD'\u235d Current working directory\n</code></pre> <p>c:\\Users\\Pete</p> <pre><code>  1 \u2395NPARTS '\u03b1'\n</code></pre> <p>\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2510 \u250c\u2296\u2510 \u2502 \u2502 \u2502c:/Users/Pete/\u2502 \u2502\u03b1\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       1 \u2395NPARTS '\\Users\\Pete\\Documents\\dyalog.zip' \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502C:/Users/Pete/Documents/\u2502 \u2502dyalog\u2502 \u2502.zip\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <pre><code>  \u2283'.'\u2395wg'APLVersion'\n</code></pre> <p>AIX-64       1 \u2395nparts'/home/andys/./..' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2510 \u2502/home/andys/\u2502..\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2518</p> <pre><code>  1 \u2395NPARTS '.' '..'\n</code></pre> <p>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u252c\u2510\u2502 \u2502\u2502i:/\u2502Documents\u2502\u2502\u2502\u2502i:/\u2502\u2502\u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2534\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      </p> <p>Note that <code>\u22831 \u2395NPARTS ''</code> returns the current working directory.</p> <pre><code>      \u22831 \u2395NPARTS ''\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502c:/Users/Pete/\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nput/","title":"Nput","text":"Write Text File {R}\u2190X \u2395NPUT Y <p>This function writes character data to a text file. See also Read Text File on page 1.</p> <p><code>Y</code> is either a simple character vector or scalar containing the name of the file to be written, or a 2-item vector whose first item is the file name and whose second is an integer scalar specifying <code>flags</code> for the operation.</p> <p>If <code>flags</code> is 0 (the default value if omitted) the file will not be overwritten if it already exists and <code>\u2395NPUT</code> will signal an error. If <code>flags</code> is 1 the file will be overwritten. If flags is 2 the file will be appended to; i.e.</p> flags file does not exist file exists <code>0</code> data is written to new file error signalled, file is unchanged <code>1</code> data is written to new file file is overwritten <code>2</code> data is written to new file data is appended to file <p>The left-argument <code>X</code> is comprised of 1, 2 or 3 items which identify <code>(content) (encoding) (newline)</code> respectively.</p> <p><code>content</code> is either a vector of character vectors, each of which represents a line in the file to be written, or a simple character vector.</p> <p>If specified, <code>encoding</code> is either:</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nput/#-a-character-vector-from-the-first-column-in-the-table-file-encodings-on-page-1-if-encoding-specifies-a-utf-format-it-may-be-qualified-with-bom-eg-utf-8-bom-which-causes-a-byte-order-mark-bom-to-be-written-at-the-beginning-of-the-file-or-nobom-which-does-not-if-the-bom-or-nobom-suffix-is-omitted-utf-8-defaults-to-utf-8-nobom-while-the-other-utf-formats-default-to-bom","title":"- a character vector from the first column in the table File Encodings on page 1.  If <code>encoding</code> specifies a UTF format, it may be qualified with -BOM  (e.g. UTF-8-BOM), which causes a Byte Order Mark (BOM) to be written at the beginning of the file or -NOBOM which does not. If the -BOM or -NOBOM suffix is omitted, UTF-8 defaults to UTF-8-NOBOM, while the other UTF formats default to -BOM.","text":"<p>If  omitted, <code>encoding</code> defaults to UTF-8-NOBOM.</p> <p>Note: If a non-empty file is appended to:</p> <ul> <li>No BOM will be written, even if encoding specifies it.</li> <li>No check is made that the existing file content is text in the same encoding format.</li> </ul> <p>If specified, <code>newline</code> is numeric and is either  <code>\u236c</code> or a scalar or vector  from the  column labelled Value in the newline characters section of the table Line separators: on page 1. Any other value causes <code>DOMAIN ERROR</code>. If <code>newline</code> is omitted it defaults to <code>(13 10)</code> on Windows and <code>10</code> on other platforms.</p> <p>In all cases, <code>newline</code> is appended if required to a simple vector or to each vector in a vector of vectors.</p> <p>If content contains anything other than a character vector or scalar (or these, nested) then a <code>DOMAIN ERROR</code> is signalled.</p> <p>If both <code>encoding</code> and <code>newline</code> are omitted <code>X</code> specifies only <code>content</code> and may be a simple character vector or a vector of character vectors.</p> <p>The shy result <code>R</code> is the number of bytes written to the file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nput/#examples","title":"Examples:","text":"<pre><code>      txt\u2190'mene' 'mene' 'tekel' 'upharsin'\n\n      \u2395\u2190(\u2282txt) \u2395NPUT 'writing.txt'\n25\n      \u22a2(\u2282'adding' '3' 'lines')\u2395NPUT'writing.txt' 2\n18\n</code></pre> <pre><code>      LF\u2190\u2395UCS 10\n</code></pre> <pre><code>\n      t\u2190'adding',LF,'3',LF,'lines',LF\n      \u22a2t \u2395NPUT'writing.txt' 2\n18                                         \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nput/#neol-option","title":"NEOL Option","text":"<p>The NEOL variant option specifies how embedded line separators are treated.</p> <code>0</code> embedded line separator characters are preserved as is,and a <code>newline</code> is added to the last line if required. 1 every embedded LF is replaced by <code>newline</code> <code>2</code> every embedded line separator character is replaced by <code>newline</code> <code>\u00af1</code> same as 0 except that a <code>newline</code> is not added to the last line"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nput/#embedded-line-separator-examples","title":"Embedded line-separator examples","text":"<pre><code>      LF CR\u2190\u2395UCS 10 13\n      t\u2190'adding',LF,'3',CR,'lines',CR,LF\n\n      \u22a2t \u2395NPUT'writing.txt' 2                             \n17\n      \u22a2t(\u2395NPUT\u2360'NEOL' 0)'writing.txt' 2                   \n16\n      \u22a2t(\u2395NPUT\u2360'NEOL' 2)'writing.txt' 2                   \n18\n</code></pre> <p><code>t</code> contains three lines each with different line endings: LF, CR and CRLF.</p> <p>In the first example (NEOL is by default 1), only the LF is normalised so the written file contains lines ending with CRLF, CR and CRLF.</p> <p>In the second example, none of the line endings are normalised so the written file contains lines ending with LF, CR and CRLF.</p> <p>In the third example, all of the line endings are normalised so the written file contains lines ending with CRLF, CRLF and CRLF.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nput/#note","title":"Note:","text":"<p>If two or more APL processes separately write to a file using <code>\u2395NPUT</code> the behaviour is undefined. In particular, if multiple APLs use<code>\u2395NPUT</code> with flags set to 2 (append), it is not guaranteed that each  <code>\u2395NPUT</code> operation will be atomic and all the text written to the file will be complete and/or contiguous.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nread/","title":"Nread","text":"Native File Read R\u2190\u2395NREAD Y <p>This monadic function reads data from a native file. <code>Y</code> is a 3- or 4-element integer vector whose elements are as follows:</p> <code>[1]</code> negative tie number, <code>[2]</code> conversion code (see below), <code>[3]</code> count. If this value is <code>\u00af1</code> , all of the elements defined by <code>Y[2]</code> are read from the position specified by <code>Y[4]</code> to the end of the file. This may result in the last few bytes in the file being ignored if they do not form a complete element. <code>[4]</code> start byte, counting from 0. If this value omitted or is <code>\u00af1</code> , data is read starting from the current position in the file (initially <code>0</code> )."},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nread/#notes","title":"Notes:","text":"<p><code>8 \u2395NINFO \u2283Y</code> can be used to report the current position of the file pointer.</p> <p><code>Y[2]</code> specifies conversion to an APL internal form as follows. Note that the internal formats for character arrays differ between the Unicode and Classic Editions.</p> <p>If both <code>Y[3]</code> and <code>Y[4]</code> have the value <code>\u00af1</code>, then <code>\u2395NREAD</code> reads data from the current position in the file to the end of the file.</p> <p><code>\u2395NREAD</code> can be used with any file. However, calling <code>\u2395NREAD</code> with at least one of <code>Y[3 4]</code> set to <code>\u00af1</code> is intended for regular files only; using on pipes, FIFOs or other special types of file is not recommended.</p> <p>Unicode Edition: Conversion Codes</p> Value Number of bytes read Result Type Result shape 11 count 1 bit Boolean 8 <code>\u00d7</code> count 80 count 8 bits character count 82 Conversion code 82 is permitted in the Unicode Edition for compatibility and causes 1-byte data on file to be translated (according to <code>\u2395NXLATE</code>) from <code>\u2395AV</code> indices into normal (Unicode) characters of type 80, 160 or 320. count 8 bits character count 83 count 8 bits integer count 160 2 <code>\u00d7</code> count 16-bits character count 163 2 <code>\u00d7</code> count 16 bits integer count 320 4 <code>\u00d7</code> count 32-bits character count 323 4 <code>\u00d7</code> count 32 bits integer count 645 8 <code>\u00d7</code> count 64 bits floating count <p>Classic Edition: Conversion Codes</p> Value Number of bytes read Result Type Result shape 11 count 1 bit Boolean 8 <code>\u00d7</code> count 82 count 8 bits character count 83 count 8 bits integer count 163 2 <code>\u00d7</code> count 16 bits integer count 323 4 <code>\u00d7</code> count 32 bits integer count 645 8 <code>\u00d7</code> count 64 bits floating count <p>Note that types 80, 160 and 320 and 83 and 163 are exclusive to Dyalog APL.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nread/#example","title":"Example","text":"<pre><code>\n      DATA\u2190\u2395NREAD \u00af1 160 (0.5\u00d7\u2395NSIZE \u00af1) 0 \u235d Unicode\n      DATA\u2190\u2395NREAD \u00af1 82 (\u2395NSIZE \u00af1) 0      \u235d Classic\n      DATA\u2190\u2395NREAD \u00af1 82 \u00af1 0       \u235d Shorter version\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nrename/","title":"Nrename","text":"Native File Rename {R}\u2190X \u2395NRENAME Y <p><code>\u2395NRENAME</code> is used to rename a native file.</p> <p><code>Y</code> is a negative integer tie number associated with a tied native file.  <code>X</code> is a simple character vector or scalar containing a valid (and unused) file name.</p> <p>The shy result of <code>\u2395NRENAME</code> is the tie number of the renamed file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nreplace/","title":"Nreplace","text":"Native File Replace {R}\u2190X \u2395NREPLACE Y <p><code>\u2395NREPLACE</code> is used to write data to a native file, replacing data which is already there.</p> <p><code>X</code> must be a simple homogeneous APL array containing the data to be written.</p> <p><code>Y</code> is a 2- or 3-element integer vector whose elements are as follows:</p> <code>[1]</code> negative tie number, <code>[2]</code> start byte, counting from 0, at which the data is to be written; the value <code>\u00af1</code> causes the data to be written from the current position in the file (initially, 0). <code>[3]</code> conversion code (optional). <p>See \"Native File Read: \" on page 1 for a list of valid conversion codes.</p> <p>The shy result is the location of the internal file pointer which will be pointing to the end of the newly written data. Used, for example, in:</p> <pre><code>\n      \u235d Replace sequentially from indx.\n      {\u237a \u2395NREPLACE tie \u2375}/vec,indx \n</code></pre> <p>Note that <code>8 \u2395NINFO \u2283Y</code>  can be used to report the current position of the file pointer.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nreplace/#unicode-edition","title":"Unicode Edition","text":"<p>Unless you specify the data type in <code>Y[3]</code>, a character array will by default be written using type 80.</p> <p>If the data will not fit into the specified character width (bytes) <code>\u2395NREPLACE</code> will fail with a <code>DOMAIN ERROR</code>.</p> <p>As a consequence of these two rules, you must specify the data type (either 160 or 320) in order to write Unicode characters whose code-point is in the range 256-65535 and &gt;65535 respectively.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nreplace/#example","title":"Example","text":"<pre><code>\n      n\u2190'test'\u2395NTIE 0 \u235d See [\"Example\" on page 1](/nappend.md#Example)\n\n      \u2395NREAD n 80 3 0\nabc\n      \u2395NREAD n 160 7\n\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1\n\n      \u2395\u2190'\u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03cc\u03c1\u03b9\u03bf'\u2395NREPLACE n 3\nDOMAIN ERROR\n      \u2395\u2190'\u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03cc\u03c1\u03b9\u03bf'\u2395NREPLACE n 3\n     \u2227\n\n      \u2395\u2190'\u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03cc\u03c1\u03b9\u03bf'\u2395NREPLACE n 3 160\n23\n      \u2395NREAD n 80 3 0\nabc\n      \u2395NREAD n 160 10\n\u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03cc\u03c1\u03b9\u03bf\n</code></pre> <p>For compatibility with old files, you may specify that the data be converted to type 82 on output. The conversion (to <code>\u2395AV</code> indices) will be determined by the local value of <code>\u2395AVU</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nresize/","title":"Nresize","text":"Native File Resize {R}\u2190X \u2395NRESIZE Y <p>This function changes the size of a native file.</p> <p><code>Y</code> is a negative integer tie number associated with a tied native file.</p> <p><code>X</code> is a single integer value that specifies the new size of the file in bytes.  If <code>X</code> is smaller than the current file size, the file is truncated.  If <code>X</code> is larger than the current file size, the file is extended and the value of additional bytes is undefined.</p> <p>The shy result of <code>\u2395NRESIZE</code> is the tie number of the resized file.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nsize/","title":"Nsize","text":"Native File Size R\u2190\u2395NSIZE Y <p>This reports the size of a native file.</p> <p><code>Y</code> is a negative integer tie number associated with a tied native file.  The result <code>R</code> is the size of the file in bytes.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ntie/","title":"Ntie","text":"Native File Tie {R}\u2190X \u2395NTIE Y <p><code>\u2395NTIE</code> opens a native file.</p> <p><code>X</code> is a simple character vector or scalar containing a valid pathname for an existing native file.</p> <p><code>Y</code> is a 1- or 2-element vector.</p> <p><code>Y[1]</code> is a negative integer value that specifies an (unused) tie number by which the file may subsequently be referred.</p> <p><code>Y[2]</code> is optional and specifies the mode in which the file is to be opened.  This is an integer value calculated as the sum of 2 codes.  The first code refers to the type of access needed from users who have already tied the native file.  The second code refers to the type of access you wish to grant to users who subsequently try to open the file while you have it open.</p> <p>If <code>Y[2]</code> is omitted, the system tries to open the file with the default value of 66 (read and write access for this process and for any subsequent processes that attempt to access the file). If this fails, the system attempts to open the file with the value 64 (read access for this process, read and write for subsequent processes).</p> Needed from existing users Granted to subsequent users 0 read access 1 write access 2 read and write access <p>On UNIX systems, the second column has no meaning and only the first code (<code>16|mode</code>) is passed to the open(2) call as the access parameter. See include file fcntl.h for details. See also Native File Lock on page 1 which is not platform dependent.</p> <p><code>R</code> is the tie number by which the file may subsequently be referred. If <code>Y[1]</code> is a negative integer, then <code>R</code> is a shy result; if <code>Y[1]</code> is 0, <code>R</code> is an explicit result.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ntie/#automatic-tie-number-allocation","title":"Automatic Tie Number Allocation","text":"<p>A tie number of 0 as argument to a create or tie operation, allocates, and returns as an explicit result, the first (closest to zero) available tie number. This allows you to simplify code. For example:</p> <p>from:</p> <pre><code>      tie\u2190\u00af1+\u230a/0,\u2395NNUMS    \u235d With next available number,\n      file \u2395NTIE tie       \u235d ... tie file.\n</code></pre> <p>to:</p> <pre><code>      tie\u2190file \u2395NTIE 0     \u235d Tie with first available no.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ntie/#example","title":"Example","text":"<pre><code>ntie\u2190{                  \u235d tie file and return tie no.\n    \u237a\u21902+64              \u235d default all access.\n    \u2375 \u2395ntie 0 \u237a         \u235d return new tie no.\n}\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/ntie/#note","title":"Note:","text":"<p>If the native file is already tied, executing <code>\u2395NTIE</code> with the same or a different tie number simply re-ties it with the same or the new tie number. Re-tying a file with a tie number of 0, re-ties it with the same tie number. This feature may be used to re--tie the file using a different mode.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nuntie/","title":"Nuntie","text":"Native File Untie {R}\u2190\u2395NUNTIE Y <p>This closes one or more native files.  <code>Y</code> is a scalar or vector of negative integer tie numbers.  The files associated with elements of <code>Y</code> are closed.  Native file untie with a zero length argument (<code>\u2395NUNTIE \u236c</code>) flushes all file buffers to disk - see \"File Untie: \" on page 1 for more explanation.</p> <p>The shy result of <code>\u2395NUNTIE</code> is a vector of tie numbers of the files actually untied.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nxlate/","title":"Nxlate","text":"Native File Translate {R}\u2190{X}\u2395NXLATE Y <p>This associates a character translation vector with a native file or, if <code>Y</code> is 0, with the use by <code>\u2395DR</code>.</p> <p>A translate vector is a 256-element vector of integers from 0-255. Each element maps the corresponding <code>\u2395AV</code> position onto an ANSI character code.</p> <p>For example, to map <code>\u2395AV[17+\u2395IO]</code> onto ANSI 'a' (code 97), element 17 of the translate vector is set to 97.</p> <p><code>\u2395NXLATE</code> is a non-Unicode (Classic Edition) feature and is retained in the Unicode Edition only for compatibility.</p> <p><code>Y</code> is either a negative integer tie number associated with a tied native file or 0.  If <code>Y</code> is negative, monadic <code>\u2395NXLATE</code> returns the current translation vector associated with the corresponding native file. If specified, the left argument <code>X</code> is a 256-element vector of integers that specifies a new translate vector.  In this case, the old translate vector is returned as a shy result.  If <code>Y</code> is 0, it refers to the translate vector used by <code>\u2395DR</code> to convert to and from character data.</p> <p>The system treats a translate vector with value <code>(\u2373256)-\u2395IO</code> as meaning no translation and thus provides raw input/output bypassing the whole translation process.</p> <p>The default translation vector established at <code>\u2395NTIE</code> or <code>\u2395NCREATE</code> time  is derived from the mapping defined in the current output translation table (normally WIN.DOT) and maps alphabetic, numeric and most other characters in <code>\u2395AV</code>  to their corresponding ANSI positions. However, some characters are not resolved  by this process and it is recommended that users define translate vectors to cover all cases.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/native-files/native-files/nxlate/#unicode-edition","title":"Unicode Edition","text":"<p><code>\u2395NXLATE</code> is relevant in the Unicode Edition only to process Native Files that contain characters expressed as indices into <code>\u2395AV</code>, such as files written by the Classic Edition.</p> <p>In the Unicode Edition, when reading data from a Native File using conversion code 82, incoming bytes are translated first to <code>\u2395AV</code> indices using the translation table specified by <code>\u2395NXLATE</code>, and then to type 80, 160 or 320 using <code>\u2395AVU</code>. When writing data to a Native File using conversion code 82, characters are converted using these two translation tables in reverse.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/","title":"Session Information and Management","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/ai/","title":"Ai","text":"Account Information R\u2190\u2395AI <p>This is a simple integer vector, whose four elements are:</p> <code>\u2395AI[1]</code> user identification. Under Windows, this is the aplnid (network ID from configuration dialog box). Under UNIX and Linux this is the effective UID of the account whereas <code>\u2395AN</code> returns the real name. <code>\u2395AI[2]</code> compute time for the APL session in milliseconds. <code>\u2395AI[3]</code> connect time for the APL session in milliseconds. <code>\u2395AI[4]</code> keying time for the APL session in milliseconds. <p>Elements beyond 4 are not defined but reserved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/ai/#example","title":"Example","text":"<pre><code>\n     \u2395AI\n52 7396 2924216 2814831\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/an/","title":"An","text":"Account Name R\u2190\u2395AN <p>This is a simple character vector containing the user (login) name. Under UNIX and Linux this is the real user name, whereas <code>\u2395AI</code> returns the effective user id.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/an/#example","title":"Example","text":"<pre><code>      \u2395AN\nPete\n\n      \u2374\u2395AN\n4\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/clear/","title":"Clear","text":"Clear Workspace \u2395CLEAR <p>A clear workspace is activated, having the name <code>CLEAR WS</code>.  The active workspace is lost.  All system variables assume their default values.  The maximum size of workspace is available.</p> <p>Apart from .NET objects, the contents of the session namespace <code>\u2395SE</code> are not affected. .NET objects in <code>\u2395SE</code> are disconnected from .NET because <code>\u2395CLEAR</code> closes the current .NET AppDomain.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/clear/#example","title":"Example","text":"<pre><code>\n      \u2395CLEAR\n      \u2395WSID\nCLEAR WS\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/cy/","title":"Cy","text":"Copy Workspace {R}\u2190{X}\u2395CY Y <p><code>Y</code> must be a simple character scalar or vector identifying a saved workspace (or Session file).  <code>X</code> is optional.  If present, it must be a simple character scalar, vector or matrix or a vector of character vectors that specifies one or more APL names.</p> <p>Each name in <code>X</code> is taken to be the name of an active object in the workspace identified by <code>Y</code>.  If <code>X</code> is omitted, the names of all defined active objects in that workspace are implied (defined functions and operators, variables, labels and namespaces).</p> <p>Each object named in <code>X</code> (or implied) is copied from the workspace identified by <code>Y</code> to become the active object referenced by that name in the active workspace if the object can be copied.  A copied label is re-defined to be a variable of numeric type.  If the name of the copied object has an active referent in the active workspace, the name is disassociated from its value and the copied object becomes the active referent to that name.  In particular, a function in the state indicator which is disassociated may be executed whilst it remains in the state indicator, but it ceases to exist for other purposes, such as editing.</p> <p>The shy result <code>R</code> is <code>0\u2374\u2282''</code>.</p> <p>You may copy an object from a namespace by specifying its full pathname.  The object will be copied to the current namespace in the active workspace, losing its original parent and gaining a new one in the process.  You may only copy a GUI object into a namespace that is a suitable parent for that object.  For example, you could only copy a Group object from a saved workspace if the current namespace in the active workspace is itself a Form, SubForm or Group.</p> <p>See \"Copy Workspace: \" on page 1 for further information and, in particular, the manner in which dependent and referenced objects are copied, and copying objects from Session (.dse) files.</p> <p>A <code>DOMAIN ERROR</code> is reported in any of the following cases:</p> <ul> <li><code>Y</code> is ill-formed, or is not the name of a workspace with access authorised for the active user account.</li> <li>Any name in <code>X</code> is ill-formed.</li> <li>An object named in <code>X</code> does not exist as an active object in workspace named in <code>Y</code>.</li> </ul> <p>An object being copied has the same name as an active label.</p> <p>When copying data between Classic and Unicode Editions, <code>\u2395</code>CY will fail and a <code>TRANSLATION ERROR</code> will be reported if any object in workspace <code>Y</code> fails conversion between Unicode and <code>\u2395AV</code> indices, whether or not that object is specified by <code>X</code>. See \"Note\" on page 1 for further details.</p> <p>A <code>WS FULL</code> is reported if the active workspace becomes full during the copying process.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/cy/#example","title":"Example","text":"<pre><code>      \u2395VR'FOO'\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n      'FOO' \u2395CY 'BACKUP'\n      \u2395VR'FOO'\n     \u2207 R\u2190FOO X\n[1]    R\u219010\u00d7X\n     \u2207\n</code></pre> <p>System variables are copied if explicitly included in the left argument, but not if the left argument is omitted.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/cy/#example_1","title":"Example","text":"<pre><code>      \u2395LX\n\n      ('\u2395LX' 'X')\u2395CY'WS/CRASH'\n      \u2395LX\n\u2192RESTART\n</code></pre> <p>A copied object may have the same name as an object being executed.  If so, the name is disassociated from the existing object, but the existing object remains defined in the workspace until its execution is completed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/cy/#example_2","title":"Example","text":"<pre><code>      )SI\n#.FOO[1]*\n\n      \u2395VR'FOO'\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n\n      'FOO'\u2395CY'WS/MYWORK'\n\n      FOO\n1 2 3\n      )SI\n#.FOO[1]*\n      \u2192\u2395LC\n10\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/dl/","title":"Dl","text":"Delay {R}\u2190\u2395DL Y <p><code>Y</code> must be a simple non-negative single numeric value (of any rank).  A pause of approximately <code>Y</code> seconds is caused.</p> <p>The shy result <code>R</code> is a scalar numeric value indicating the length of the pause in seconds.</p> <p>The pause may be interrupted by a weak or strong interrupt.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/load/","title":"Load","text":"Load Workspace \u2395LOAD Y <p><code>Y</code> must be a simple character scalar or vector containing the name of a file that contains a saved workspace. . If no file extension is given it is implied. See WSEXT configuration parameterWSEXT on page 1.</p> <p>If <code>Y</code> is ill-formed or does not identify a saved workspace or the user account does not have access permission to the workspace, a <code>DOMAIN ERROR</code> is reported.</p> <p>Otherwise, the active workspace is replaced by the workspace identified in <code>Y</code>.  The active workspace is lost.  If the loaded workspace was saved by the <code>)SAVE</code> system command, the latent expression (<code>\u2395LX</code>) is immediately executed, unless APL was invoked with the -x option.  If the loaded workspace was saved by the <code>\u2395SAVE</code> system function, execution resumes from the point of exit from the <code>\u2395SAVE</code> function, with the result of the <code>\u2395SAVE</code> function being 0, running in the same namespace in which the <code>\u2395SAVE</code> was executed.</p> <p>The workspace identification and time-stamp when saved is not displayed.</p> <p>If the workspace contains any GUI objects whose <code>Visible</code> property is 1, these objects will be displayed.  If the workspace contains a non-empty <code>\u2395SM</code> but does not contain an SM GUI object, the form defined by <code>\u2395SM</code> will be displayed in a window on the screen.</p> <p>The system switches to the namespace that was the current namespace when the workspace was saved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/off/","title":"Off","text":"Sign Off APL \u2395OFF <p>This niladic system function terminates the APL session, returning to the shell command level.  The active workspace does not replace the last continuation workspace.</p> <p>Although <code>\u2395OFF</code> is niladic, you may specify an optional integer <code>I</code> to the right of the system function which will be reported to the Operating System as the exit code. If <code>I</code> is an expression generating an integer, you should put the expression in parentheses. <code>I</code> must be in the range 0..255, but note that on UNIX processes use values greater than 127 to indicate the signal number which was used to terminate a process, and that currently APL itself generates values 0..8; this list may be extended in future. This list is documented in the Dyalog for Microsoft Windows Installation and Configuration Guide: APL Exit Codes.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/path/","title":"Path","text":"Search Path \u2395PATH <p><code>\u2395PATH</code> is a simple character vector representing a blank-separated list of namespaces.  It is approximately analogous to the PATH variable in Windows or UNIX.</p> <p>The <code>\u2395PATH</code> variable can be used to identify a namespace in which commonly used utility functions reside.  Functions or operators (NOT variables) which are copied into this namespace and exported (see \"Export Object\" on page 1) can then be used directly from anywhere in the workspace without giving their full path names. <code>\u2395PATH</code> has Session scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/path/#example","title":"Example","text":"<p>To make the <code>DISPLAY</code> function available directly from within any namespace.</p> <pre><code>      \u235d Create and reference utility namespace.\n      \u2395PATH\u2190'\u2395se.util'\u2395ns''\n      \u235d Copy DISPLAY function from UTIL into it.\n      'DISPLAY'\u2395se.util.\u2395cy'UTIL'\n      \u235d (Remember to save the session to file).  \n</code></pre> <p>In detail, <code>\u2395PATH</code> works as follows:</p> <p>When a reference to a name cannot be found in the current namespace, the system searches for it from left to right in the list of namespaces indicated by <code>\u2395PATH</code>.  In each namespace, if the name references a defined function (or operator) and the export type of that function is non-zero (see \"Export Object:\" on page 1 ), then it is used to satisfy the reference.  If the search exhausts all the namespaces in <code>\u2395PATH</code> without finding a qualifying reference, the system issues a <code>VALUE ERROR</code> in the normal manner.</p> <p>The special character <code>\u2191</code> stands for the list of namespace ancestors:</p> <pre><code>       ## ##.## ##.##.## ...\n</code></pre> <p>In other words, the search is conducted upwards through enclosing namespaces, emulating the static scope rule inherent in modern block-structured languages.</p> <p>Note that the <code>\u2395PATH</code> mechanism is used ONLY if the function reference cannot be satisfied in the current namespace.  This is analogous to the case when the Windows or UNIX PATH variable begins with a <code>'.'</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/path/#examples","title":"Examples","text":"<pre><code>   \u2395PATH               Search in ...\n\n</code></pre> <pre><code>1. '\u2395se.util'          Current space,   then\n                       \u2395se.util,        then\n                       VALUE ERROR\n\n2. '\u2191'                 Current space\n                       Parent space: ##\n                       Parent's parent space:  ##.##\n                       ...\n                       Root: # (or \u2395se if current space\n                                was inside \u2395se)\n                       VALUE ERROR\n\n3. 'util \u2191 \u2395se.util'   Current space\n                       util (relative to current space)\n                       Parent space: ##\n                       ...\n                       Root: # or \u2395se\n                       \u2395se.util\n                       VALUE ERROR\n</code></pre> <p>Note that <code>\u2395PATH</code> is a session variable.  This means that it is workspace-wide and survives <code>)LOAD</code> and <code>)CLEAR</code>. It can of course, be localised by a defined function or operator.</p> <p><code>\u2395PATH</code> does not support derived functions and will not be extended to support them; nor will it be extended to support other types of functions that may be developed in the future. <code>\u2395PATH</code> may therefore be considered an archaic feature.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/save/","title":"Save","text":"Save Workspace {R}\u2190{X}\u2395SAVE Y <p><code>Y</code> must be a simple character scalar or vector that identifies a  full or relative path name to the file in which the workspace will be written.</p> <p>Unless the path specified by <code>Y</code> is a full pathname, it is taken to be relative to the current working directory which may be obtained by the expression: <code>\u22831 \u2395NPARTS ''</code>.</p> <p>The active workspace is saved with the  file name specified by  <code>Y</code>, whether or not a workspace file of that name already exists.</p> <p>A <code>DOMAIN ERROR</code> is reported if the name in <code>Y</code> :</p> <ul> <li>is not a valid workspace name</li> <li>is not a valid  file name</li> <li>refers to an unauthorised directory</li> <li>specifies an existing file that does not already contain a Dyalog workspace or session file</li> </ul> <p>The shy result <code>R</code> is a simple Boolean scalar 1. However, when the  workspace is subsequently loaded using <code>\u2395LOAD</code> and execution restarts, the result is 0, as described below.</p> <p>The optional left argument <code>X</code> is either 0 or 1. If <code>X</code> is omitted or 1, the saved version of the workspace has execution suspended at the point of exit from the <code>\u2395SAVE</code> function.  If the saved workspace is subsequently loaded by <code>\u2395LOAD</code>, execution is resumed, and the value 0 is returned if the result is used or assigned, or otherwise the result is suppressed. In this case, the latent expression value (<code>\u2395LX</code>) is ignored.</p> <p>If <code>X</code> is 0, the workspace is saved without any state indicator in effect. The effect is the same as if you first executed <code>)RESET</code> and then <code>)SAVE</code>. In this case, when the workspace is subsequently loaded, the value of the latent expression (<code>\u2395LX</code>) is honoured if applicable.</p> <p>As is the case for <code>)SAVE</code> (see \"Save Workspace: \" on page 1), monadic <code>\u2395SAVE</code> will fail and issue <code>DOMAIN ERROR</code> if any threads (other than the root thread 0) are running or if there are any Edit or Trace windows open. However, neither of these restrictions apply if the left argument <code>X</code> is 0.</p> <p>Note that the values of all system variables (including <code>\u2395SM</code>) and all GUI objects are saved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/save/#example","title":"Example","text":"<pre><code>      (\u2283'SAVED' 'ACTIVE' [\u2395IO+\u2395SAVE'TEMP']),' WS'\nACTIVE WS\n      \u2395LOAD 'TEMP'\nSAVED WS\n</code></pre> <p>Additional operations may be performed before saving the workspace. For further information, see Set Workspace Save Options on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/ts/","title":"Ts","text":"Timestamp R\u2190\u2395TS <p>This is a seven element vector which identifies the clock time set on the particular installation as follows:</p> <code>\u2395TS[1]</code> Year <code>\u2395TS[2]</code> Month <code>\u2395TS[3]</code> Day <code>\u2395TS[4]</code> Hour <code>\u2395TS[5]</code> Minute <code>\u2395TS[6]</code> Second <code>\u2395TS[7]</code> Millisecond"},{"location":"language-reference-guide/system-functions/system-functions-categorised/session-information-and-management/session-information-and-management/ts/#example","title":"Example","text":"<pre><code>      \u2395TS\n1989 7 11 10 42 59 123\n</code></pre> <p>Note that on some systems, where time is maintained only to the nearest second, a zero is returned for the seventh (millisecond) field.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/","title":"Shared Variables","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/query-access-control/","title":"Query access control","text":"Query Access Control R\u2190\u2395SVC Y <p>This system function queries the access control on one or more shared variables.</p> <p><code>Y</code> is a character scalar, vector, or matrix containing names of shared variables.  Each name may optionally be paired with its surrogate.  If so, the surrogate must be separated from the name by at least one space.</p> <p>If <code>Y</code> specifies a single name, the result <code>R</code> is a Boolean vector containing the current effective access control vector.  If <code>Y</code> is a matrix of names, <code>R</code> is a Boolean matrix whose rows contain the current effective access control vectors for the corresponding row in <code>Y</code>.</p> <p>For further information, see the preceding section on setting the access control vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/query-access-control/#example","title":"Example","text":"<pre><code>      \u2395SVC 'X'\n0 0 0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/query-degree-of-coupling/","title":"Query degree of coupling","text":"Query Degree of Coupling R\u2190\u2395SVO Y <p>This system function returns the current degree of coupling for one or more shared variables.</p> <p><code>Y</code> is a character scalar, vector or matrix.  If it is a vector it contains a shared variable name and optionally its external name or surrogate separated from it by one of more blanks.</p> <p>If <code>Y</code> is a scalar, it specifies a single 1-character name.  If <code>Y</code> is a matrix, each row of <code>Y</code> specifies a name and an optional external name as for the vector case.</p> <p>If <code>Y</code> specifies a single name, the result <code>R</code> is a 1-element vector whose value 0, 1 or 2 indicates its current degree of coupling.  If <code>Y</code> specifies more than one name, <code>R</code> is a vector whose elements indicate the current degree of coupling of the variable specified by the corresponding row in <code>Y</code>.  A value of 2 indicates that the variable is fully coupled (via a warm or hot DDE link) with a shared variable in another APL workspace, or with a DDE item in another application.  A value of 1 indicates that you have offered the variable but there is no such connection, or that the second application rejected a warm link.  In this case, a transfer of data may have taken place (via a cold link) but the connection is no longer open.  A value of 0 indicates that the name is not a shared variable.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/query-degree-of-coupling/#examples","title":"Examples","text":"<pre><code>      \u2395SVO 'X'\n2\n      \u2395SVO \u2191'X SALES' 'Y' 'JUNK'\n2 1 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/set-access-control/","title":"Set access control","text":"Set Access Control R\u2190X \u2395SVC Y <p>This system function sets access control on one or more shared variables.</p> <p><code>Y</code> is a character scalar, vector, or matrix containing names of shared variables.  Each name may optionally be paired with its surrogate.  If so, the surrogate must be separated from the name by at least one space.</p> <p><code>X</code> may be a 4-element Boolean vector which specifies the access control to be applied to all of the shared variables named in <code>Y</code>.  Alternatively, <code>X</code> may be a 4-column Boolean matrix whose rows specify the access control for the corresponding name in <code>Y</code>.  <code>X</code> may also be a scalar or a 1-element vector.  If so, it treated as if it were a 4-element vector with the same value in each element.</p> <p>Each shared variable has a current access control vector which is a 4-element Boolean vector.  A 1 in each of the four positions has the following impact :</p> <code>[1]</code> You cannot set a new value for the shared variable until after an intervening use or set by your partner. <code>[2]</code> Your partner cannot set a new value for the shared variable until after an intervening use or set by you. <code>[3]</code> You cannot use the value of the shared variable until after an intervening set by your partner. <code>[4]</code> Your partner cannot use the value of the shared variable until after an intervening set by you. <p>The effect of <code>\u2395SVC</code> is to reset the access control vectors for each of the shared variables named in <code>Y</code> by OR-ing the values most recently specified by your partner with the values in <code>X</code>.  This means that you cannot reset elements of the control vector which your partner has set to 1.</p> <p>Note that the initial value of your partner's access control vector is normally 0 0 0 0.  However, if it is a non-APL client application that has established a hot DDE link, its access control vector is defined to be 1 0 0 1.  This inhibits either partner from setting the value of the shared variable twice, without an intervening use (or set) by the other.  This prevents loss of data which is deemed to be desirable from the nature of the link.  (An application that requests a hot link is assumed to require every value of the shared variable, and not to miss any).  Note that APL's way of inhibiting another application from setting the value twice (without an intervening use) is to delay the acknowledgement of the DDE message containing the second value until the variable has been used by the APL workspace.  An application that waits for an acknowledgement will therefore hang until this happens.  An application that does not wait will carry on obliviously.</p> <p>The result <code>R</code> is a Boolean vector or matrix, corresponding to the structure of <code>X</code>, which contains the new access control settings.  If <code>Y</code> refers to a name which is not a shared variable, or if the surrogate name is mis-spelt, the corresponding value in <code>R</code> is <code>4\u23740</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/set-access-control/#examples","title":"Examples","text":"<pre><code>      1 0 0 1 \u2395SVC 'X'\n1 0 0 1\n\n      1 \u2395SVC 'X EXTNAME'\n1 1 1 1\n\n      (2 4\u23741 0 0 1 0 1 1 0) \u2395SVC \u2191'ONE' 'TWO'\n1 1 1 1\n0 1 1 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/shared-variable-offer/","title":"Shared variable offer","text":"Shared Variable Offer R\u2190X \u2395SVO Y <p>This system function offers to share one or more variables with another APL workspace or with another application.  Shared variables are implemented using Dynamic Data Exchange (DDE) and may be used to communicate with any other application that supports this protocol.  See Interface Guide for further details.</p> <p><code>Y</code> is a character scalar, vector or matrix.  If it is a vector it contains a name and optionally an external name or surrogate.  The first name is the name used internally in the current workspace.  The external name is the name used to make the connection with the partner and, if specified, must be separated from the internal name by one or more blanks.  If the partner is another application, the external name corresponds to the DDE item specified by that application.  If the external name is omitted, the internal name is used instead.  The internal name must be a valid APL name and be either undefined or be the name of a variable.  There are no such restrictions on the content of the external name.</p> <p>Instead of an external name, <code>Y</code> may contain the special symbol <code>'\u234e'</code> separated from the (internal) name by a blank.  This is used to implement a mechanism for sending DDE_EXECUTE messages, and is described at the end of this section.</p> <p>If <code>Y</code> is a scalar, it specifies a single 1-character name.  If <code>Y</code> is a matrix, each row of <code>Y</code> specifies a name and an optional external name as for the vector case.</p> <p>The left argument <code>X</code> is a character vector or matrix.  If it is a vector, it contains a string that defines the protocol, the application to which the shared variable is to be connected, and the topic of the conversation.  These three components are separated by the characters <code>':'</code> and <code>'|'</code> respectively.  The protocol is currently always <code>'DDE'</code>, but future implementations of Dyalog APL may support additional communications protocols if applicable.  If <code>Y</code> specifies more than one name, <code>X</code> may be a vector or a matrix with one row per row in <code>Y</code>.</p> <p>If the shared variable offer is a general one (server), <code>X</code>, or the corresponding row of <code>X</code>, should just contain <code>'DDE:'</code>. In this case, Dyalog automatically defines the application name and topic to be dyalog and <code>\u2395WSID</code> respectively.</p> <p>The result <code>R</code> is a numeric scalar or vector with one element for each name in <code>Y</code> and indicates the \"degree of coupling\".  A value of 2 indicates that the variable is fully coupled (via a warm or hot DDE link) with a shared variable in another APL workspace, or with a DDE item in another application.  A value of 1 indicates that there is no connection, or that the second application rejected a warm link.  In this case, a transfer of data may have taken place (via a cold link) but the connection is no longer open.  Effectively, APL treats an application that insists on a cold link as if it immediately retracts the sharing after setting or using the value, whichever is appropriate.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/shared-variable-offer/#examples","title":"Examples","text":"<pre><code>      'DDE:' \u2395SVO 'X'\n1\n\n      'DDE:' \u2395SVO 'X SALES_92'\n1\n\n      'DDE:' \u2395SVO \u2191'X SALES_92' 'COSTS_92'\n1 1\n\n      'DDE:DYALOG|SERV_WS' \u2395SVO 'X'\n2\n\n      'DDE:EXCEL|SHEET1' \u2395SVO 'DATA R1C1:R10C12'\n2\n</code></pre> <p>A special syntax is used to provide a mechanism for sending DDE_EXECUTE messages to another application.  This case is identified by specifying the <code>'\u234e'</code> symbol in place of the external name.  The subsequent assignment of a character vector to a variable shared with the external name of <code>'\u234e'</code> causes the value of the variable to be transmitted in the form of a DDE_EXECUTE message.  The value of the variable is then reset to 1 or 0 corresponding to a positive or negative acknowledgement from the partner.  In most (if not all) applications, commands transmitted in DDE_EXECUTE messages must be enclosed in square brackets <code>[]</code>.  For details, see the relevant documentation for the external application.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/shared-variable-offer/#examples_1","title":"Examples:","text":"<pre><code>      'DDE:EXCEL|SYSTEM' \u2395SVO 'X \u234e'\n2\n\n      X\u2190'[OPEN(\"c:\\mydir\\mysheet.xls\")]'\n      X\n1\n\n      X\u2190'[SELECT(\"R1C1:R5C10\")]'\n      X\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/svo/","title":"Shared Variable Offer","text":"Shared Variable Offer \u2395SVO"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/svo/#dyadic-svo-means","title":"Dyadic \u2395SVO means","text":"<p>Shared Variable Offer</p> <pre><code>      DATA\u2190\u23739\n     'DDE:' \u2395SVO 'DATA'\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/svo/#monadic-svo-means","title":"Monadic \u2395SVO means","text":"<p>Query Degree of Coupling</p> <pre><code>      \u2395SVO 'DATA'\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/svq/","title":"Svq","text":"Shared Variable Query R\u2190\u2395SVQ Y <p>This system function is implemented for compatibility with other versions of APL but currently performs no useful function.  Its purpose is to obtain a list of outstanding shared variable offers made to you, to which you have not yet responded.</p> <p>Using DDE as the communication protocol, it is not possible to implement <code>\u2395SVQ</code> effectively.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/svr/","title":"Svr","text":"Shared Variable Retract Offer R\u2190\u2395SVR Y <p>This system function terminates communication via one or more shared variables, or aborts shared variable offers that have not yet been accepted.</p> <p><code>Y</code> is a character scalar, vector or matrix.  If it is a vector it contains a shared variable name and optionally its external name or surrogate separated from it by one of more blanks.  If <code>Y</code> is a scalar, it specifies a single 1-character name.  If <code>Y</code> is a matrix, each row of <code>Y</code> specifies a name and an optional external name as for the vector case.</p> <p>The result <code>R</code> is vector whose length corresponds to the number of names specified by Y, indicating the level of sharing of each variable after retraction.</p> <p>See \"Shared Variable State: \" on page 1 for further information on the possible states of a shared variable.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/svs/","title":"Svs","text":"Shared Variable State R\u2190\u2395SVS Y <p>This system function returns the current state of one or more shared variables.</p> <p><code>Y</code> is a character scalar, vector or matrix.  If it is a vector it contains a shared variable name and optionally its external name or surrogate separated from it by one of more blanks.  If <code>Y</code> is a scalar, it specifies a single 1-character name.  If <code>Y</code> is a matrix, each row of <code>Y</code> specifies a name and an optional external name as for the vector case.</p> <p>If <code>Y</code> specifies a single name, the result <code>R</code>is a 4-element vector indicating its current state.  If <code>Y</code> specifies more than one name, <code>R</code> is a matrix whose rows indicate the current state of the variable specified by the corresponding row in <code>Y</code>.</p> <p>There are four possible shared variable states:</p> <code>0 0 1 1</code> means that you and your partner are both aware of the current value, and neither has since reset it.  This is also the initial value of the state when the link is first established. <code>1 0 1 0</code> means that you have reset the shared variable and your partner has not yet used it.  This state can only occur if both partners are APL workspaces. <code>0 1 0 1</code> means that your partner has reset the shared variable but that you have not yet used it. <code>0 0 0 0</code> the name is not that of a shared variable"},{"location":"language-reference-guide/system-functions/system-functions-categorised/shared-variables/shared-variables/svs/#examples","title":"Examples","text":"<pre><code>      \u2395SVS 'X'\n0 1 0 1\n\n      \u2395SVS \u2191'X SALES' 'Y' 'JUNK'\n0 0 1 1\n1 0 1 0\n0 0 0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace/","title":"Stack and Workspace Information","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/lc/","title":"Lc","text":"Line Count R\u2190\u2395LC <p>This is a simple vector of line numbers drawn from the state indicator (See  The State Indicator\"The State Indicator\" on page 1).  The most recently activated line is shown first.  If a value corresponds to a defined function in the state indicator, it represents the current line number where the function is either suspended or pendent.</p> <p>The value of <code>\u2395LC</code> changes immediately upon completion of the most recently activated line, or upon completion of execution within <code>\u234e</code> or <code>\u2395</code>.  If a <code>\u2395STOP</code> control is set, <code>\u2395LC</code> identifies the line on which the stop control is effected.  In the case where a stop control is set on line 0 of a defined function, the first entry in <code>\u2395LC</code> is 0 when the control is effected.</p> <p>The value of <code>\u2395LC</code> in a clear workspace is the null vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/lc/#examples","title":"Examples","text":"<pre><code>      )SI\n#.TASK1[5]*\n\u234e\n#.BEGIN[3]\n\n      \u2395LC\n5 3\n</code></pre> <pre><code>\n      \u2192\u2395LC\n      \u2395LC\n\n      \u2374\u2395LC\n0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/lx/","title":"Lx","text":"Latent Expression \u2395LX <p>This may be a character vector or scalar representing an APL expression.  The expression is executed automatically when the workspace is loaded.  If APL is invoked using the  -x  flag, this execution is suppressed.</p> <p>The value of <code>\u2395LX</code> in a clear workspace is <code>''</code>. <code>\u2395LX</code> has workspace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/lx/#example","title":"Example","text":"<pre><code>      \u2395LX\u2190'''GOOD MORNING PETE'''\n\n      )SAVE GREETING\nGREETING saved Tue Sep 8 10:49:29 1998\n\n      )LOAD GREETING\n./GREETING saved Tue Sep 8 10:49:29 1998\nGOOD MORNING PETE\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/","title":"Nc","text":"Name Classification R\u2190\u2395NC Y <p><code>Y</code> must be a simple  character scalar, vector, matrix, or vector of vectors that specifies a list of names. <code>R</code> is a simple numeric vector containing one element per name in <code>Y</code>. Each element of <code>R</code> is the name class of the active referent to the object named in <code>Y</code>.</p> <p>If <code>Y</code> is simple, a name class may be:</p> Name Class Description <code>\u00af1</code> invalid name <code>0</code> undefined name <code>1</code> Label <code>2</code> Variable <code>3</code> Function <code>4</code> Operator <code>8</code> Event <code>9</code> Object (GUI, namespace, COM, .NET) <p>If <code>Y</code> is nested a more precise analysis of name class is obtained whereby different types  are identified by a decimal extension. For example, defined functions have name class 3.1, dfns have name class 3.2, and so forth. The complete set of name classification is as follows:</p> Array (2) Function (3) Operator (4) Namespace (9) n.1 Variable Traditional Traditional Created by <code>\u2395NS</code> , <code>)NS</code> or <code>:Namespace</code> n.2 Field dfn dop Instance n.3 Property Derived or Primitive Derived or Primitive n.4 Class n.5 Interface n.6 External Shared External External Class n.7 External Interface <p>In addition, values in <code>R</code> are negative to identify names of methods, properties and events that are inherited through the class hierarchy of the current class or instance.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#variable-name-class-21","title":"Variable (Name-Class 2.1)","text":"<p>Conventional APL arrays have name-class 2.1.</p> <pre><code>      NUM\u219088\n      CHAR\u2190'Hello World'\n\n      \u2395NC \u2191'NUM' 'CHAR'\n2 2\n\n      \u2395NC 'NUM' 'CHAR'\n2.1 2.1\n\n      'MYSPACE'\u2395NS ''\n      MYSPACE.VAR\u219010\n      MYSPACE.\u2395NC'VAR'\n2\n      MYSPACE.\u2395NC\u2282'VAR'\n2.1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#field-name-class-22","title":"Field (Name-Class 2.2)","text":"<p>Fields defined by APL Classes have name-class 2.2.</p> <pre><code>:Class nctest\n    :Field Public pubFld\n    :Field pvtFld\n\n    \u2207 r\u2190NameClass x \n      :Access Public \n      r\u2190\u2395NC x \n    \u2207 \n...\n:EndClass \u235d nctest       \n\n      ncinst\u2190\u2395NEW nctest\n</code></pre> <p>The name-class of a Field, whether Public or Private, viewed from a Method that is executing within the Instance Space, is 2.2.</p> <pre><code>      ncinst.NameClass'pubFld' 'pvtFld'\n2.2 2.2\n</code></pre> <p>Note that an internal Method sees both Public and Private Fields in the Class Instance. However, when viewed from outside the instance, only public fields are visible</p> <pre><code>      \u2395NC 'ncinst.pubFld' 'ncinst.pvtFld'\n\u00af2.2 0\n</code></pre> <p>In this case, the name-class is negative to indicate that the name has been exposed by the class hierarchy, rather than existing in the associated namespace which APL has created to contain the instance. The same result is returned if <code>\u2395NC</code> is executed inside this space:</p> <pre><code>      ncinst.\u2395NC'pubFld' 'pvtFld'\n\u00af2.2 0\n</code></pre> <p>Note that the names of Fields are reported as being unused if the argument to <code>\u2395NC</code> is simple.</p> <pre><code>      ncinst.\u2395NC 2 6\u2374'pubFldpvtFld'\n0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#property-name-class-23","title":"Property (Name-Class 2.3)","text":"<p>Properties defined by APL Classes have name-class 2.3.</p> <pre><code>:Class nctest\n    :Field pvtFld\u219099\n\n    :Property pubProp\n    :Access Public\n        \u2207 r\u2190get\n          r\u2190pvtFld\n        \u2207\n    :EndProperty\n\n    :Property pvtProp\n        \u2207 r\u2190get\n          r\u2190pvtFld\n        \u2207\n    :EndProperty\n\n    \u2207 r\u2190NameClass x\n      :Access Public\n      r\u2190\u2395NC x\n    \u2207\n...\n:EndClass \u235d nctest       \n\n      ncinst\u2190\u2395NEW nctest\n</code></pre> <p>The name-class of a Property, whether Public or Private, viewed from a Method that is executing within the Instance Space, is 2.3.</p> <pre><code>      ncinst.NameClass'pubProp' 'pvtProp'\n2.3 2.3\n\n</code></pre> <p>Note that an internal Method sees both Public and Private Properties in the Class Instance. However, when viewed from outside the instance, only Public Properties are visible</p> <pre><code>      \u2395NC 'ncinst.pubProp' 'ncinst.pvtProp'\n\u00af2.3 0\n</code></pre> <p>In this case, the name-class is negative to indicate that the name has been exposed by the class hierarchy, rather than existing in the associated namespace which APL has created to contain the instance. The same result is returned if <code>\u2395NC</code> is executed inside this space:</p> <pre><code>      ncinst.\u2395NC 'pubProp' 'pvtProp'\n\u00af2.3 0\n</code></pre> <p>Note that the names of Properties are reported as being unused if the argument to <code>\u2395NC</code> is simple.</p> <pre><code>      ncinst.\u2395NC 2 6\u2374'pubProppvtProp'\n0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#external-property-name-class-26","title":"External Property (Name-Class 2.6)","text":"<p>Properties exposed by external objects (.NET and COM and the APL GUI) have name-class <code>\u00af2.6</code>.</p> <pre><code>      \u2395USING\u2190'System'\n      dt\u2190\u2395NEW DateTime (2006 1 1)\n      dt.\u2395NC 'Day' 'Month' 'Year'\n\u00af2.6 \u00af2.6 \u00af2.6\n\n      'ex' \u2395WC 'OLEClient' 'Excel.Application'\n      ex.\u2395NC 'Caption' 'Version' 'Visible'\n\u00af2.6 \u00af2.6 \u00af2.6\n\n     'f'\u2395WC'Form'\n      f.\u2395NC'Caption' 'Size'\n\u00af2.6 \u00af2.6\n</code></pre> <p>Note that the names of such Properties are reported as being unused if the argument to <code>\u2395NC</code> is simple.</p> <pre><code>      f.\u2395NC 2 7\u2374'CaptionSize   '\n0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#defined-function-name-class-31","title":"Defined Function (Name-Class 3.1)","text":"<p>Traditional APL defined functions have name-class 3.1.</p> <pre><code>     \u2207 R\u2190AVG X\n[1]    R\u2190(+/X)\u00f7\u2374X\n     \u2207\n      AVG \u2373100\n50.5\n\n      \u2395NC'AVG'\n3\n      \u2395NC\u2282'AVG'\n3.1\n\n      'MYSPACE'\u2395NS 'AVG'\n       MYSPACE.AVG \u2373100\n50.5\n\n      MYSPACE.\u2395NC'AVG'\n3\n      \u2395NC\u2282'MYSPACE.AVG'\n3.1\n</code></pre> <p>Note that a function that is simply cloned from a defined function by assignment retains its name-class.</p> <pre><code>      MEAN\u2190AVG\n      \u2395NC'AVG' 'MEAN'\n3.1 3.1\n</code></pre> <p>Whereas, the name of a function that amalgamates a defined function with any other functions has the name-class of a Derived Function, i.e. 3.3.</p> <pre><code>      VMEAN\u2190AVG\u2218,\n      \u2395NC'AVG' 'VMEAN'\n3.1 3.3\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#dfn-name-class-32","title":"Dfn (Name-Class 3.2)","text":"<p>Dfns have name-class 3.2</p> <pre><code>      Avg\u2190{(+/\u2375)\u00f7\u2374\u2375}\n\n      \u2395NC'Avg'\n3\n      \u2395NC\u2282'Avg'\n3.2\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#derived-function-name-class-33","title":"Derived Function (Name-Class 3.3)","text":"<p>Names that reference a primitive or derived function have a name-class of 3.3.</p> <pre><code>      PLUS\u2190+\n      SUM\u2190+/\n      CUM\u2190PLUS\\\n      \u2395NC'PLUS' 'SUM' 'CUM'\n3.3 3.3 3.3\n      \u2395NC 3 4\u2374'PLUSSUM CUM '\n3 3 3\n</code></pre> <p>Note the difference between the name-class of a name referring to a defined function (3.1) and that of a name referring to a defined function bound with an operator to form a derived function (3.3). Trains, being derived functions, also have  nameclass 3.3.</p> <pre><code>     \u2207 R\u2190AVG X\n[1]    R\u2190(+/X)\u00f7\u2374X\n     \u2207\n\n      MEAN\u2190AVG\n      VMEAN\u2190AVG\u2218,\n\n      negrec\u2190-,\u00f7 \n\n      \u2395NC'AVG' 'MEAN' 'VMEAN' 'negrec'\n3.1 3.1 3.3 3.3\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#external-function-name-class-36","title":"External Function (Name-Class 3.6)","text":"<p>Methods exposed by the Dyalog APL GUI and COM and .NET objects have name-class <code>\u00af3.6</code>. Methods exposed by External Functions created using <code>\u2395NA</code> and <code>\u2395SH</code> all have name-class <code>3.6</code>.</p> <pre><code>      'F'\u2395WC'Form'\n\n      F.\u2395NC'GetTextSize' 'GetFocus'\n\u00af3.6 \u00af3.6\n\n      'EX'\u2395WC'OLEClient' 'Excel.Application'\n      EX.\u2395NC 'Wait' 'Save' 'Quit'\n\u00af3.6 \u00af3.6 \u00af3.6\n\n      \u2395USING\u2190'System'\n      dt\u2190\u2395NEW DateTime (2006 1 1)\n      dt.\u2395NC 'AddDays' 'AddHours'\n\u00af3.6 \u00af3.6\n\n\n</code></pre> <pre><code>      'beep'\u2395NA'user32|MessageBeep i'\n\n      \u2395NC'beep'\n3\n      \u2395NC\u2282'beep'\n3.6\n      'xutils'\u2395SH''\n      )FNS\navx     box     dbr     getenv  hex     ltom    ltov    mtol    ss      vtol\n      \u2395NC'hex' 'ss'\n3.6 3.6 \n</code></pre> <p>Note that the names of such Methods are reported as being unused if the argument to <code>\u2395NC</code> is simple.</p> <pre><code>      'F'\u2395WC'Form'\n      F.\u2395NC\u2191'GetTextSize' 'GetFocus'\n0 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#operator-name-class-41","title":"Operator (Name-Class 4.1)","text":"<p>Traditional Defined Operators have name-class 4.1.</p> <pre><code>      \u2207FILTER\u2207\n     \u2207 VEC\u2190(P FILTER)VEC  \u235d Select from VEC those elts ..\n[1]    VEC\u2190(P\u00a8VEC)/VEC    \u235d for which BOOL fn P is true.\n     \u2207\n\n      \u2395NC'FILTER'\n4\n      \u2395NC\u2282'FILTER'\n4.1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#dop-name-class-42","title":"Dop (Name-Class 4.2)","text":"<p>Dops have name-class 4.2.</p> <pre><code>     pred\u2190{\u2395IO \u2395ML\u21901 3   \u235d Partitioned reduction.\n     \u2283\u237a\u237a/\u00a8(\u237a/\u2373\u2374\u237a)\u2282\u2375\n     }\n\n      2 3 3 2 +pred \u237310\n3 12 21 19\n\n      \u2395NC'pred'\n4\n      \u2395NC\u2282'pred'\n4.2\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#derived-operator-name-class-43","title":"Derived Operator (Name-Class 4.3)","text":"<p>Derived operators include:</p> <ul> <li>A name referring to a monadic operator.</li> <li>A dyadic operator curried with its right-operand. </li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#example","title":"Example:","text":"<pre><code>       each\u2190\u00a8\n       each\n\u00a8\n       \u2395NC \u2282'each'\n4.3 \n</code></pre> <pre><code>       inv\u2190\u2363\u00af1\n       inv\n\u2363 \u00af1\n       \u2395NC \u2282'inv'\n4.3\n       c2f\u2190(32\u2218+)\u2218(\u00d7\u22181.8) \u235d Centigrade to Fahrenheit\n       f2c 0 100\n32 212\n       f2c inv 32 212     \u235d Fahrenheit to Centigrade\n0 100\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#external-event-name-class-86","title":"External Event (Name-Class 8.6)","text":"<p>Events exposed by Dyalog APL GUI objects, COM and .NET objects have name-class <code>\u00af8.6</code>.</p> <pre><code>      f\u2190\u2395NEW'Form'('Caption' 'Dyalog GUI Form')\n      f.\u2395NC'Close' 'Configure' 'MouseDown'\n\u00af8.6 \u00af8.6 \u00af8.6\n\n      xl\u2190\u2395NEW'OLEClient'(\u2282'ClassName' 'Excel.Application')\n      xl.\u2395NL -8\n NewWorkbook  SheetActivate  SheetBeforeDoubleClick ...\n\n      xl.\u2395NC 'SheetActivate' 'SheetCalculate'\n\u00af8.6 \u00af8.6\n\n    \u2395USING\u2190'System.Windows.Forms,system.windows.forms.dll'\n    \u2395NC,\u2282'Form'\n9.6\n    Form.\u2395NL -8\n Activated  BackgroundImageChanged  BackColorChanged ...\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#namespace-name-class-91","title":"Namespace (Name-Class 9.1)","text":"<p>Plain namespaces created using <code>\u2395</code>NS, or fixed from a <code>:Namespace</code> script, have name-class 9.1.</p> <pre><code>      'MYSPACE' \u2395NS ''\n      \u2395NC'MYSPACE'\n9\n      \u2395NC\u2282'MYSPACE'\n9.1\n</code></pre> <p>Note however that a namespace created by cloning, where the right argument to <code>\u2395NS</code> is a <code>\u2395OR</code> of a namespace, retains the name-class of the original space.</p> <pre><code>      'CopyMYSPACE'\u2395NS \u2395OR 'MYSPACE'\n      'CopyF'\u2395NS \u2395OR 'F'\u2395WC'Form'\n\n      \u2395NC'MYSPACE' 'F'\n9.1 9.2\n      \u2395NC'CopyMYSPACE' 'CopyF'\n9.1 9.2\n</code></pre> <p>The Name-Class of .NET namespaces (visible through <code>\u2395USING</code>) is also 9.1</p> <pre><code>      \u2395USING\u2190''\n      \u2395NC 'System' 'System.IO'\n9.1 9.1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#instance-name-class-92","title":"Instance (Name-Class 9.2)","text":"<p>Instances of Classes created using <code>\u2395NEW</code>, and GUI objects created using <code>\u2395WC</code> all have name-class 9.2.</p> <pre><code>      MyInst\u2190\u2395NEW MyClass\n      \u2395NC'MyInst'\n9\n      \u2395NC\u2282'MyInst'\n9.2\n      UrInst\u2190\u2395NEW \u2395FIX ':Class'  ':EndClass'\n      \u2395NC 'MyInst' 'UrInst'\n9.2 9.2\n\n      'F'\u2395WC 'Form'\n      'F.B' \u2395WC 'Button'\n      \u2395NC 2 3\u2374'F  F.B'\n9 9\n      \u2395NC'F' 'F.B'\n9.2 9.2\n\n</code></pre> <pre><code>      F.\u2395NC'B'\n9\n      F.\u2395NC\u2282,'B'\n9.2\n</code></pre> <p>Instances of COM Objects whether created using <code>\u2395WC</code> or <code>\u2395NEW</code> also have name-class 9.2.</p> <pre><code>      xl\u2190\u2395NEW'OLEClient'(\u2282'ClassName' 'Excel.Application')\n      'XL'\u2395WC'OLEClient' 'Excel.Application'\n      \u2395NC'xl' 'XL'\n9.2 9.2\n</code></pre> <p>The same is true of Instances of .NET Classes (Types) whether created using <code>\u2395NEW</code> or <code>.New</code>.</p> <pre><code>      \u2395USING\u2190'System'\n      dt\u2190\u2395NEW DateTime (3\u2191\u2395TS)\n      DT\u2190DateTime.New 3\u2191\u2395TS\n      \u2395NC 'dt' 'DT'\n9.2 9.2\n</code></pre> <p>Note that if you remove the GUI component of a GUI object, using the Detach method, it reverts to a plain namespace.</p> <pre><code>      F.Detach\n      \u2395NC\u2282,'F'\n9.1\n</code></pre> <p>Correspondingly, if you attach a GUI component to a plain namespace using the monadic form of <code>\u2395WC</code>, it morphs into a GUI object</p> <pre><code>      F.\u2395WC 'PropertySheet'\n      \u2395NC\u2282,'F'\n9.2\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#class-name-class-94","title":"Class (Name-Class 9.4)","text":"<p>Classes created using the editor or <code>\u2395FIX</code> have name-class 9.4.</p> <pre><code>      )ED \u25cbMyClass\n\n:Class MyClass\n    \u2207 r\u2190NameClass x\n      :Access Public Shared\n      r\u2190\u2395NC x\n    \u2207\n:EndClass \u235d MyClass\n\n      \u2395NC 'MyClass'\n9\n      \u2395NC\u2282'MyClass'\n9.4\n\n</code></pre> <pre><code>      \u2395FIX ':Class UrClass'  ':EndClass'\n      \u2395NC 'MyClass' 'UrClass'\n9.4 9.4\n</code></pre> <p>Note that the name of the Class is visible to a Public Method in that Class, or an Instance of that Class.</p> <pre><code>      MyClass.NameClass'MyClass'\n9\n      MyClass.NameClass\u2282'MyClass'\n9.4\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#interface-name-class-95","title":"Interface (Name-Class 9.5)","text":"<p>Interfaces, defined by <code>:Interface ... :EndInterface</code> clauses, have name-class 9.5.</p> <pre><code>:Interface IGolfClub\n:Property Club\n    \u2207 r\u2190get\n    \u2207\n    \u2207 set\n    \u2207\n:EndProperty\n\n\u2207 Shank\u2190Swing Params\n\u2207\n\n:EndInterface \u235d IGolfClub\n\n      \u2395NC 'IGolfClub'\n9\n      \u2395NC \u2282'IGolfClub'\n9.5\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#external-class-name-class-96","title":"External Class (Name-Class 9.6)","text":"<p>External Classes (Types) exposed by .NET have name-class 9.6.</p> <pre><code>      \u2395USING\u2190'System' 'System.IO'\n\n      \u2395NC 'DateTime' 'File' 'DirectoryInfo'\n9.6 9.6 9.6\n</code></pre> <p>Note that referencing a .NET class (type) with <code>\u2395NC</code>, fixes the name of that class in the workspace and obviates the need for APL to repeat the task of searching for and loading the class when the name is next used.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nc/#external-interface-name-class-97","title":"External Interface (Name-Class 9.7)","text":"<p>External Interfaces exposed by .NET have name-class 9.7.</p> <pre><code>      \u2395USING\u2190'System.Web.UI,system.web.dll' \n\n      \u2395NC 'IPostBackDataHandler' 'IPostBackEventHandler' \n9.7 9.7\n</code></pre> <p>Note that referencing a .NET Interface with <code>\u2395NC</code>, fixes the name of that Interface in the workspace and obviates the need for APL to repeat the task of searching for and loading the Interface when the name is next used.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nl/","title":"Nl","text":"Name List R\u2190{X}\u2395NL Y <p><code>Y</code> must be a simple numeric scalar or vector containing one or more of the values for name-class.  See also \"Name Classification: \" on page 1.</p> <p><code>X</code> is optional. If present, it must be a simple character scalar or vector. <code>R</code> is a list of the names of active objects whose name-class is included in <code>Y</code> in standard sorted order.</p> <p>If any element of <code>Y</code> is negative, positive values in <code>Y</code> are treated as if they were negative, and R is a vector of character vectors. Otherwise, <code>R</code> is simple character matrix.</p> <p>Furthermore, if <code>\u2395NL</code> is being evaluated inside the namespace associated with a Class or an Instance of a Class, and any element of <code>Y</code> is negative, <code>R</code> includes the Public names exposed by the Base Class (if any) and all other Classes in the Class hierarchy.</p> <p>If <code>X</code> is supplied, <code>R</code> contains only those names which begin with any character of <code>X</code>. Standard sorted order is in Unicode point order for Unicode editions, and in the collation order of <code>\u2395AV</code> for Classic editions.</p> <p>If an element of <code>Y</code> is an integer, the names of all of the corresponding sub-name-classes are included in <code>R</code>. For example, if <code>Y</code> contains the value 2, the names of all variables (name-class 2.1), fields (2.2), properties (2.3) and external or shared variables (2.6) are obtained. Otherwise, only the names of members of the corresponding sub-name-class are obtained.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nl/#examples","title":"Examples:","text":"<pre><code>\n      \u2395NL 2 3\nA\nFAST\nFIND\nFOO\nV\n\n      'AV' \u2395NL 2 3\nA\nV\n\n      \u2395NL \u00af9\n Animal  Bird  BirdBehaviour  Coin  Cylinder  DomesticParrot  Eeyore  FishBehaviour  Nickel  Parrot  Penguin  Polly  Robin \n      \u2395NL \u00af9.3 \u235d Instances\n Eeyore  Nickel  Polly  Robin \n      \u2395NL \u00af9.4 \u235d Classes\n Animal  Bird  Coin  Cylinder  DomesticParrot  Parrot  Penguin\n      \u2395NL \u00af9.5 \u235d Interfaces\n BirdBehaviour  FishBehaviour\n</code></pre> <p><code>\u2395NL</code> can also be used to explore Dyalog GUI Objects, .NET types and COM objects.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nl/#dyalog-gui-objects","title":"Dyalog GUI Objects","text":"<p><code>\u2395NL</code> may be used to obtain lists of the Methods, Properties and Events provided by Dyalog APL GUI Objects.</p> <pre><code>\n      'F' \u2395WC 'Form'\n      F.\u2395NL -2 \u235d Properties\n Accelerator AcceptFiles  Active  AlphaBlend  AutoConf  Border  BCol  Caption ...\n\n      F.\u2395NL -3 \u235d Methods\n Animate  ChooseFont  Detach  GetFocus  GetTextSize  ShowSIP  Wait\n\n      F.\u2395NL -8 \u235d Events\nClose  Create  DragDrop  Configure  ContextMenu  DropFiles  DropObjects  Expose  Help ...\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nl/#net-classes-types","title":".NET Classes (Types)","text":"<p><code>\u2395NL</code> can be used to explore .NET types.</p> <p>When a reference is made to an undefined name, and <code>\u2395USING</code> is set, APL attempts to load the Type from the appropriate .NET Assemblies. If successful, the name is entered into the symbol table with name-class 9.6.</p> <pre><code>\n      \u2395USING\u2190'System'\n      DateTime\n(System.DateTime)\n      \u2395NL -9\n DateTime\n      \u2395NC,\u2282'DateTime'\n9.6\n</code></pre> <p>The names of the Properties and Methods of a .NET Type may then be obtained using <code>\u2395NL</code>.</p> <pre><code>\n      DateTime.\u2395NL -2 \u235d Properties\n MaxValue  MinValue  Now  Today  UtcNow \n\n      DateTime.\u2395NL -3 \u235d Methods\n get_Now  get_Today  get_UtcNow  op_Addition  op_Equality  ...\n</code></pre> <p>In fact it is not necessary to make a separate reference first, because the expression <code>Type.\u2395NL</code> (where <code>Type</code> is a .NET Type) is itself a reference to Type. So, (with <code>\u2395USING</code> still set to <code>'System'</code>):</p> <pre><code>\n      Array.\u2395NL -3\n BinarySearch  Clear  Copy  CreateInstance  IndexOf  LastIndexOf  Reverse  Sort\n\n      \u2395NL -9\n Array  DateTime\n</code></pre> <p>Another use for <code>\u2395NL</code> is to examine .NET enumerations. For example:</p> <pre><code>\n      \u2395USING\u2190'System.Windows.Forms,system.windows.forms.dll'\n\n      FormBorderStyle.\u2395NL -2\nFixed3D  FixedDialog  FixedSingle  FixedToolWindow  None  Sizable  SizableToolWindow \n\n      FormBorderStyle.FixedDialog.value__\n3\n\n      FormBorderStyle.({\u2375,[1.5]\u234e\u00a8\u2375,\u00a8\u2282'.value__'}\u2395NL -2)\n Fixed3D            2\n FixedDialog        3\n FixedSingle        1\n FixedToolWindow    5\n None               0\n Sizable            4\n SizableToolWindow  6\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nl/#com-objects","title":"COM Objects","text":"<p>Once a reference to a COM object has been obtained, <code>\u2395NL</code> may be used to obtain lists of its Methods, Properties and Events.</p> <pre><code>\n      xl\u2190\u2395NEW'OLEClient'(\u2282'ClassName' 'Excel.Application')\n\n      xl.\u2395NL -2 \u235d Properties\n _Default  ActiveCell  ActiveChart  ActiveDialog  ActiveMenuBar  ActivePrinter  ActiveSheet  ActiveWindow ...\n\n      xl.\u2395NL -3 \u235d Methods\n _Evaluate  _FindFile  _Run2  _Wait  _WSFunction  ActivateMicrosoftApp  AddChartAutoFormat  AddCustomList  Browse  Calculate ...\n\n      \u2395NL -9\n xl\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nsi/","title":"Nsi","text":"Namespace Indicator R\u2190\u2395NSI <p><code>R</code> is a nested vector of character vectors containing the names of the spaces from which functions in the state indicator were called (<code>\u2374\u2395NSI``\u2190\u2192\u2374 \u2395RSI``\u2190\u2192\u2374\u2395SI</code>).</p> <p><code>\u2395RSI</code> and <code>\u2395NSI</code> are identical except that <code>\u2395RSI</code> returns refs to the spaces whereas <code>\u2395NSI</code> returns their names. Put another way:  <code>\u2395NSI\u2190\u2192\u2355\u00a8 \u2395RSI``.</code></p> <p>Note that<code>\u2395NSI</code> contains the names of spaces from which functions were called not those in which they are currently running.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/nsi/#example","title":"Example","text":"<pre><code>      )OBJECTS\nxx      yy\n\n      \u2395VR 'yy.foo'\n     \u2207 r\u2190foo\n[1]    r\u2190\u2395SE.goo\n     \u2207                          \n      \u2395VR'\u2395SE.goo'\n     \u2207 r\u2190goo\n[1]    r\u2190\u2395SI,[1.5]\u2395NSI\n     \u2207\n\n      )CS xx\n#.xx\n      calling\u2190#.yy.foo\n      ]display calling\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502goo\u2502 \u2502#.yy\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502foo\u2502 \u2502#.xx\u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/rsi/","title":"Rsi","text":"Space Indicator R\u2190\u2395RSI <p><code>R</code> is a vector of refs to the spaces from which functions in the state indicator were called <code>(\u2374\u2395RSI\u2190\u2192\u2374 \u2395NSI \u2190\u2192\u2374\u2395SI)</code>.</p> <p><code>\u2395RSI</code> and <code>\u2395 NSI</code> are identical except that <code>\u2395RSI</code> returns refs to the spaces whereas <code>\u2395NSI</code> returns their names. Put another way: <code>\u2395NSI \u2190\u2192\u2355\u00a8\u2395RSI``.</code></p> <p>Note that<code>\u2395RSI</code> returns refs to the spaces from which functions were called not those in which they are currently running.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/rsi/#example","title":"Example","text":"<pre><code>      )OBJECTS\nxx      yy\n\n      \u2395VR 'yy.foo'\n     \u2207 r\u2190foo\n[1]    r\u2190\u2395SE.goo\n     \u2207                          \n      \u2395VR'\u2395SE.goo'\n     \u2207 r\u2190goo\n[1]    r\u2190\u2395SI,[1.5]\u2395RSI\n     \u2207\n\n      )CS xx\n#.xx\n      calling\u2190#.yy.foo\n      ]display calling\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193 \u250c\u2192\u2500\u2500\u2510      \u2502\n\u2502 \u2502goo\u2502 #.yy \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518      \u2502\n\u2502 \u250c\u2192\u2500\u2500\u2510      \u2502\n\u2502 \u2502foo\u2502 #.xx \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2518      \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/shadow/","title":"Shadow","text":"Shadow Name {R}\u2190\u2395SHADOW Y <p><code>Y</code> must be a simple character scalar, vector or matrix or a vector of nested scalar  of character vectors identifying one or more APL names.  For a simple vector <code>Y</code>, names are separated by one or more blanks.  For a matrix <code>Y</code>, each row is taken to be a single name.</p> <p>Each valid name in <code>Y</code> is shadowed in the most recently invoked defined function or operator, as though it were included in the list of local names in the function or operator header.  The class of the name becomes 0 (undefined).  The name ceases to be shadowed when execution of the shadowing function or operator is completed.  Shadow has no effect when the state indicator is empty.</p> <p>The shy result <code>R</code> is a Boolean vector of 1s with the same length as the number of names in <code>Y</code>.</p> <p>If a name is ill-formed, or if it is the name of a system constant or system function, <code>DOMAIN ERROR</code> is reported.</p> <p>If the name of a top-level GUI object is shadowed, it is made inactive.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/shadow/#example","title":"Example","text":"<pre><code>      \u2395VR'RUN'\n     \u2207 NAME RUN FN\n[1]   \u235d Runs function named &lt;NAME&gt; defined\n[2]   \u235d from representation form &lt;FN&gt;\n[3]    \u2395SHADOW NAME\n[4]    \u234e\u2395FX FN\n     \u2207\n\n      0 \u2395STOP 'RUN' \u235d stop prior RUN exiting\n\n      'FOO' RUN 'R\u2190FOO' 'R\u219010'\n10\n\nRUN[0]\n\n      )SINL\n#.RUN[0]*       FOO     FN      NAME\n\n      \u2192\u2395LC\n\n      FOO\nVALUE ERROR\n      FOO\n      ^\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/si/","title":"Si","text":"State Indicator R\u2190\u2395SI <p><code>R</code> is a nested vector of vectors giving the names of the functions or operators in the execution stack.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/si/#example","title":"Example","text":"<pre><code>\n      )SI\n#.PLUS[2]*\n.\n#.MATDIV[4]\n#.FOO[1]*\n\u234e\n\n      \u2395SI\n PLUS  MATDIV  FOO\n\n      (\u2374\u2395LC)=\u2374\u2395SI\n1\n</code></pre> <p>If execution stops in a callback function, <code>\u2395DQ</code> will appear on the stack, and may occur more than once</p> <pre><code>      )SI\n#.ERRFN[7]*\n\u2395DQ\n#.CALC\n\u2395DQ\n#.MAIN\n</code></pre> <p>To edit the function on the top of the stack:</p> <pre><code>      \u2395ED \u2283\u2395SI\n</code></pre> <p>The name of the function which called this one:</p> <pre><code>      \u22831\u2193\u2395SI\n</code></pre> <p>To check if the function <code>\u2206N</code> is pendent:</p> <pre><code>     ((\u2282\u2206N)\u220a1\u2193\u2395SI)/'Warning : ',\u2206N,' is pendent'\n</code></pre> <p>See also \"Extended State Indicator: \" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/size/","title":"Size","text":"Size of Object R\u2190\u2395SIZE Y <p><code>Y</code> must be a simple character scalar, vector or matrix, or a vector of character vectors containing a list of names. <code>R</code> is a simple integer vector of non-negative elements with the same length as the number of names in <code>Y</code>.</p> <p>If the name in <code>Y</code> identifies an object with an active referent, the workspace required in bytes by that object is returned in the corresponding element of <code>R</code>.  Otherwise, 0 is returned in that element of <code>R</code>.</p> <p>The result returned for an external variable is the space required to store the external array.  The result for a system constant, variable or function is 0.  The result returned for a GUI object gives the amount of workspace needed to store it, but excludes the space required for its children.</p> <p>Note: Wherever possible, Dyalog APL shares the whole or part of a workspace object rather than generates a separate copy; however <code>\u2395SIZE</code> reports the size as though nothing is shared. <code>\u2395SIZE</code> also includes the space required for the interpreter's internal information about the object in question.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/size/#examples","title":"Examples","text":"<pre><code>      \u2395VR 'FOO'\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n\n      A\u2190\u237310\n\n      'EXT/ARRAY' \u2395XT'E' \u22c4 E\u2190\u237320\n\n      \u2395SIZE 'A' 'FOO' 'E' 'UND'\n28 76 120 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/stack/","title":"Stack","text":"State Indicator Stack R\u2190\u2395STACK <p><code>R</code> is a two-column matrix, with one row per entry in the state indicator.</p> <p>Column 1 :<code>\u2395OR</code> form of user defined functions or operators on the state indicator.  Space (<code>\u2395UCS 32</code>) for entries that are not user defined functions or operators.</p> <p>Column 2 :Indication of the type of the item on the stack.</p> <code>space</code> user defined function or operator <code>\u234e</code> execute level <code>\u2395</code> evaluated input <code>*</code> desk calculator level <code>\u2395DQ</code> in callback function <code>other</code> primitive operator"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/stack/#example","title":"Example","text":"<pre><code>\n      )SI\n#.PLUS[2]*\n.\n#.MATDIV[4]\n#.FOO[1]*\n\u234e\n\n      \u2395STACK\n         *\n\u2207PLUS\n         .\n\u2207MATDIV\n         *\n\u2207FOO\n         \u234e\n         *\n\n      \u2374\u2395STACK\n8 2\n\n      (\u2374\u2395LC)=1\u2191\u2374\u2395STACK\n0\n</code></pre> <p>Pendent defined functions and operators may be edited in Dyalog APL with no resulting SI damage.  However, only the visible definition is changed; the pendent version on the stack is retained until its execution is complete.  When the function or operator is displayed, only the visible version is seen.  Hence <code>\u2395STACK</code> is a tool which allows the user to display the form of the actual function or operator being executed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/stack/#example_1","title":"Example","text":"<p>To display the version of <code>MATDIV</code> currently pendent on the stack:</p> <pre><code>\n      \u2283\u2395STACK[4;1]\n     \u2207 R\u2190A MATDIV B\n[1]   \u235d Divide matrix A by matrix B\n[2]    C\u2190A\u2339B\n[3]   \u235d Check accuracy\n[4]    D\u2190\u230a0.5+A PLUS.TIMES B\n     \u2207\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/state/","title":"State","text":"State of Object R\u2190\u2395STATE Y <p><code>Y</code> must be a simple character scalar or vector which is taken to be the name of an APL object or a system variable. The result returned is a nested vector of 4 elements as described below. <code>\u2395STATE</code> supplies information about shadowed or localised objects that is otherwise unobtainable.</p> <code>1\u2283R</code> Boolean vector, element set to 1 if and only if this level shadows <code>Y</code> . Note: <code>(\u23741\u2283R)=\u2374\u2395LC</code> <code>2\u2283R</code> Numeric vector giving the stack state of this name as it entered this level. Note: <code>(\u23742\u2283R)=\u2374\u2395LC</code> 0=not on stack 1=suspended 2=pendent (may also be suspended) 3=active (may also be pendent or suspended) <code>3\u2283R</code> Numeric vector giving the name classification of <code>Y</code> as it entered this level. Note: <code>(\u23743\u2283R)=+/1\u2283R</code> <code>4\u2283R</code> Vector giving the contents of <code>Y</code> before it was shadowed at this level. Note: <code>(\u23744\u2283R)=+/0\u22603\u2283R</code>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/state/#example","title":"Example","text":"<pre><code>\n      \u2395FMT\u2218\u2395OR\u00a8'FN1' 'FN2' 'FN3'\n    \u2207 FN1;A;B;C      \u2207 FN2;A;C               \u2207 FN3;A\n[1]   A\u21901        [1]   A\u2190'HELLO'         [1]   A\u2190100\n[2]   B\u21902        [2]   B\u2190'EVERYONE'      [2]   \u2218\n[3]   C\u21903        [3]   C\u2190'HOW ARE YOU?'      \u2207\n[4]   FN2        [4]  FN3\n    \u2207                \u2207\n\n      )SI\n#.FN3[2]*\n#.FN2[4]\n#.FN1[4]\n\n      \u2395STATE 'A'\n 1 1 1  0 0 0  2 2 0   HELLO  1\n\n       \u2395FMT\u2218\u2395OR\u00a8'foo' 'goo'\n      \u2207 foo;\u2395IO       \u2207 goo;\u2395IO     \n [1]    \u2395IO\u21900    [1]    \u2395IO\u21901       \n [2]    goo      [2]    \u2395STATE'\u2395IO' \n      \u2207               \u2207             \n\n       foo\n 1 1  0 0  \u00af1 \u00af1  0 1 \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/wa/","title":"Wa","text":"Workspace Available R\u2190\u2395WA <p>This is a simple integer scalar.  It identifies the total available space in the active workspace area given as the number of bytes it could hold.</p> <p>A side effect of using <code>\u2395WA</code> is an internal reorganisation of the workspace and process memory, as follows:</p> <ol> <li>Any un-referenced memory is discarded. This process, known as garbage collection, is required because whole cycles of refs can become un-referenced.</li> <li>Numeric arrays are demoted to their tightest form. For example, a simple numeric array that happens to contain only values 0 or 1, is demoted or squeezed to have a <code>\u2395DR</code> type of 11 (Boolean).</li> <li>All remaining used memory blocks are copied to the low-address end of the workspace, leaving a single free block at the high-address end. This process is known as compaction.</li> <li>All memory allocated is returned to the Operating System except the space required for the compacted workspace, plus a working overhead based on the configured maximum workspace size (MAXWS). If the compacted workspace occupies more than 1/16 of MAXWS then the overhead is 1/16 of MAXWS, otherwise it is 1/64 of MAXWS. On a Windows system, you can see the process size changing by using Task Manager.</li> </ol>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/wa/#example","title":"Example","text":"<pre><code>      \u2395WA\n261412\n</code></pre> <p>See also: Specify Workspace Available: on page 1</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/wsid/","title":"Wsid","text":"Workspace Identification \u2395WSID <p>This is a simple character vector.  It contains the identification name of the active workspace.  If a new name is assigned, that name becomes the identification name of the active workspace, provided that it is a correctly formed name.</p> <p>See Workspaces for workspace naming conventions.</p> <p>It is useful, though not essential, to associate workspaces with a specific directory in order to distinguish workspaces from other files.</p> <p>The value of <code>\u2395WSID</code> in a clear workspace is <code>'CLEAR WS'</code>. <code>\u2395WSID</code> has workspace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/wsid/#example","title":"Example","text":"<pre><code>\n      \u2395WSID\nCLEAR WS\n\n      \u2395WSID\u2190'ws/mywork       (UNIX)\n\n      \u2395WSID\u2190'B:\\WS\\MYWORK'   (Windows)\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/xsi/","title":"Xsi","text":"Extended State Indicator R\u2190\u2395XSI <p><code>R</code> is a nested vector of character vectors giving the full path names of the functions or operators in the execution stack. Note that if a function has changed space, its original (home) space is reported, rather than its current one.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/stack-and-workspace/stack-and-workspace-information/xsi/#example","title":"Example","text":"<p>In the following, function <code>foo</code> in namespace <code>x</code> has called <code>goo</code> in namespace <code>y</code>.  Function <code>goo</code> has then changed space (<code>\u2395CS</code>) to namespace <code>z</code> where it has been suspended:</p> <pre><code>\n      )si\n[z] y.goo[2]*\nx.foo[1]\n\n</code></pre> <p><code>\u2395XSI</code> reports the full path name of each function:</p> <pre><code>       \u2395xsi\n #.y.goo  #.x.foo\n</code></pre> <p>This can be used for example, to edit all functions in the stack, irrespective of the current namespace by typing:    <code>\u2395ed \u2395xsi</code></p> <p>See also \"State Indicator: \" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/synchronisation/synchronisation/","title":"Synchronisation","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/synchronisation/synchronisation/tget/","title":"Tget","text":"Get Tokens {R}\u2190{X} \u2395TGET Y <p><code>Y</code> must be a simple numeric scalar or vector that specifies one or more tokens, each with a specific non-zero token type, that are to be retrieved from the pool. Non-integer values in <code>Y</code> must fall within a range that has been allocated using <code>\u2395TALLOC</code>.</p> <p><code>X</code> is an optional time-out value in seconds.</p> <p>Shy result <code>R</code> is a scalar or vector containing the values of the tokens of type <code>Y</code> that have been retrieved from the token pool.</p> <p>Note that types of the tokens in the pool may be positive or negative, and the elements of <code>Y</code> may also be positive or negative.</p> <p>A request (<code>\u2395TGET</code>) for a positive token will be satisfied by the presence of a token in the pool with the same positive or negative type. If the pool token has a positive type, it will be removed from the pool. If the pool token has a negative type, it will remain in the pool. Negativelytyped tokens will therefore satisfy an infinite number of requests for their positive equivalents. Note that a request for a positive token will remove one if it is present, before resorting to its negative equivalent</p> <p>A request for a negative token type will only be satisfied by the presence of a negative token type in the pool, and that token will be removed.</p> <p>If, when a thread calls <code>\u2395TGET</code>, the token pool satisfies all of the tokens specified by <code>Y</code>, the function returns immediately with a (shy) result that contains the values associated with the pool tokens. Otherwise, the function will block (wait) until all of the requested tokens are present or until a time-out (as specified by <code>X</code>) or a weak interrupt occurs.</p> <p>For example, if the pool contains only tokens of type 2:</p> <pre><code>    \u2395TGET 2 4        \u235d blocks waiting for a 4-token ...\n</code></pre> <p>The <code>\u2395TGET</code> operation is atomic in the sense that no tokens are taken from the pool until all of the requested types are present. While this last example is waiting for a 4-token, other threads could take any of the remaining 2-tokens.</p> <p>Note also, that repeated items in the right argument are distinct. The following will block until there are at least 3 <code>\u00d7</code> 1.9-tokens in the pool:</p> <pre><code>    \u2395TGET 3/1.9       \u235d wait for 3 \u00d7 2-tokens ...\n</code></pre> <p>The pool is administered on a first-in-first-out basis. This is significant only if tokens of the same type are given distinct values. For example:</p> <pre><code>    \u2395TGET \u2395TPOOL             \u235d empty pool.\n\n    'ABCDE'\u2395TPUT\u00a82 2 3 2 3  \u235d pool some tokens.\n\n    \u22a2\u2395TGET 2 3\nAC\n\n    \u22a2\u2395TGET 2 3\nBE\n</code></pre> <p><code>R</code> is an empty numeric vector <code>\u236c</code> (zilde) if a timeout or a weak interrupt occurs.</p> <p>Beware - the following statement will wait forever and can only be terminated by an interrupt.</p> <pre><code>    \u2395TGET 0       \u235d wait forever ...\n</code></pre> <p>Note too that if a thread waiting to <code>\u2395TGET</code> tokens is <code>\u2395TKILL</code>ed, the thread disappears without removing any tokens from the pool. Conversely, if a thread that has removed tokens from the pools is <code>\u2395TKILL</code>ed, the tokens are not returned to the pool.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/synchronisation/synchronisation/tkill/","title":"Tkill","text":"Kill Thread {R}\u2190{X}\u2395TKILL Y <p><code>Y</code> must be a simple array of integers representing thread numbers to be terminated. <code>X</code> is a Boolean single, defaulting to 1, which indicates that all descendant threads should also be terminated.</p> <p>The shy result <code>R</code> is a vector of the numbers of all threads that have been terminated.</p> <p>The base thread 0 is always excluded from the cull.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/synchronisation/synchronisation/tkill/#examples","title":"Examples","text":"<pre><code>      \u2395TKILL 0            \u235d Kill background threads.\n\n      \u2395TKILL \u2395TID         \u235d Kill self and descendants.\n\n      0 \u2395TKILL \u2395TID       \u235d Kill self only.\n\n      \u2395TKILL \u2395TCNUMS \u2395TID \u235d Kill descendants.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/synchronisation/synchronisation/tpool/","title":"Tpool","text":"Token Pool R\u2190\u2395TPOOL <p><code>R</code> is a simple scalar or vector containing the token types for each of the tokens that are currently in the token pool.</p> <p>The following (<code>\u2395ML=0</code>) function returns a 2-column snapshot of the contents of the pool. It does this by removing and replacing all of the tokens, restoring the state of the pool exactly as before. Coding it as a single expression guarantees that <code>snap</code> is atomic and cannot disturb running threads.</p> <pre><code>      snap\u2190{(\u2395TGET \u2375){(\u2349\u2191\u2375 \u237a) \u22a3 \u237a \u2395TPUT\u00a8\u2375}\u2375}\n\n      snap \u2395TPOOL   snap \u2395TPOOL\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021.1 \u25021.1      \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021.2 \u25021.2      \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021.3 \u25021.3      \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502\u00af1.9\u2502 no limit\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>See also: Querying  the Token Pool (Y is 2) on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/synchronisation/synchronisation/tput/","title":"Tput","text":"Put Tokens {R}\u2190{X} \u2395TPUT Y <p><code>Y</code> must be a simple numeric scalar or vector of non-zero token types. Non-integer values in <code>Y</code> must fall within a range that has been allocated using <code>\u2395TALLOC</code>.</p> <p><code>X</code> is an optional array of values to be stored in each of the tokens specified by <code>Y</code>.</p> <p>Shy result <code>R</code> is a vector of thread numbers (if any) unblocked by the <code>\u2395TPUT</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/synchronisation/synchronisation/tput/#examples","title":"Examples","text":"<pre><code>    \u2395TPUT 2 3 2       \u235d put a 2-token, a 3-token and\n                        another 2-token into the pool.\n\n    88 \u2395TPUT 2        \u235d put another 2-token into the pool\n                        this token has the value 88.\n\n    'Hello'\u2395TPUT \u00af1.9 \u235d put a \u00af1.9-token into the pool\n                        with the value 'Hello'.\n</code></pre> <p>If <code>X</code> is omitted, the value associated with each of the tokens added to the pool is the same as its type.</p> <p>Note that you cannot put a 0-token into the pool; 0-s are removed from <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/synchronisation/synchronisation/treq/","title":"Treq","text":"Token Requests R\u2190\u2395TREQ Y <p><code>Y</code> is a simple scalar or vector of thread numbers.</p> <p><code>R</code> is a vector containing the concatenated token requests for all the threads specified in <code>Y</code>. This is effectively the result of catenating all of the right arguments together for all threads in <code>Y</code> that are currently executing <code>\u2395TGET</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/synchronisation/synchronisation/treq/#example","title":"Example","text":"<pre><code>    \u2395TREQ \u2395TNUMS    \u235d tokens required by all threads.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-constants/constants/","title":"Constants","text":"Name Description <code>\u2395A</code> Alphabetic upper case characters <code>\u2395D</code> Digits <code>\u2395NULL</code> Null Item"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-constants/constants/a/","title":"A","text":"Alphabetic Characters R\u2190\u2395A <p>This is a simple character vector, composed of the letters of the alphabet.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-constants/constants/a/#example","title":"Example","text":"<pre><code>      \u2395A\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-constants/constants/d/","title":"D","text":"Digits R\u2190\u2395D <p>This is a simple character vector of the digits from 0 to 9.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-constants/constants/d/#example","title":"Example","text":"<pre><code>      \u2395D\n0123456789\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-constants/constants/null/","title":"Null","text":"Null Item R\u2190\u2395NULL <p>This is a reference to a null item, such as may be returned across the COM interface to represent a null value. A null might be returned as the result of a .NET method or as the value of an empty cell in a spreadsheet</p> <p><code>\u2395NULL</code> may be used in any context that accepts a namespace reference, in particular:</p> <ul> <li>As the argument to a defined function</li> <li>As an item of an array.</li> <li>As the argument to those primitive functions that take character data arguments, for example: <code>=, \u2260, \u2261, \u2262, ,, \u2374, \u2283, \u2282</code></li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-constants/constants/null/#example","title":"Example","text":"<pre><code>      'EX'\u2395WC'OLEClient' 'Excel.Application'\n      WB\u2190EX.Workbooks.Open 'simple.xls'\n\n      (WB.Sheets.Item 1).UsedRange.Value2\n [Null]  [Null]  [Null]  [Null]  [Null] \n [Null]    Year  [Null]  [Null]  [Null] \n [Null]    1999    2000    2001    2002 \n [Null]  [Null]  [Null]  [Null]  [Null] \n Sales      100      76     120     150 \n [Null]  [Null]  [Null]  [Null]  [Null] \n Costs       80      60     100     110 \n [Null]  [Null]  [Null]  [Null]  [Null] \n Margin      20      16      20      40 \n</code></pre> <p>To determine which of the cells are filled, you can compare the array with <code>\u2395NULL</code>.</p> <pre><code>      \u2395NULL\u2262\u00a8(WB.Sheets.Item 1).UsedRange.Value2\n0 0 0 0 0\n0 1 0 0 0\n0 1 1 1 1\n0 0 0 0 0\n1 1 1 1 1\n0 0 0 0 0\n1 1 1 1 1\n0 0 0 0 0\n1 1 1 1 1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/system-settings/","title":"System Settings","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/ct/","title":"Ct","text":"Comparison Tolerance \u2395CT <p>The value of <code>\u2395CT</code> determines the precision with which two numbers are judged to be equal.  Two numbers, <code>X</code> and <code>Y</code>, are judged to be equal if <code>(|X-Y)\u2264\u2395CT\u00d7(|X)\u2308|Y</code>where <code>\u2264</code> is applied without tolerance.</p> <p>Thus <code>\u2395CT</code> is not used as an absolute value in comparisons, but rather specifies a relative value that is dependent on the magnitude of the number with the greater magnitude. It then follows that <code>\u2395CT</code> has no effect when either of the numbers is zero.</p> <p><code>\u2395CT</code> may be assigned any value in the range from <code>0</code> to  <code>2*\u00af32</code>  (about <code>2.3E\u00af10</code>). A value of <code>0</code> ensures exact comparison.  The value in a clear workspace is <code>1E\u00af14</code>. <code>\u2395CT</code> has Namespace scope.</p> <p>If <code>\u2395FR</code> is 1287, the system uses <code>\u2395DCT</code>. See Decimal Comparison Tolerance  on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/ct/#examples","title":"Examples","text":"<pre><code>      \u2395CT\u21901E\u00af10\n      1.00000000001 1.0000001 = 1\n1 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/dct/","title":"Dct","text":"Decimal Comparison Tolerance \u2395DCT <p>The value of <code>\u2395DCT</code> determines the precision with which two numbers are judged to be equal when the value of <code>\u2395FR</code> is 1287. If <code>\u2395FR</code> is 645, the system uses <code>\u2395CT</code>.</p> <p><code>\u2395DCT</code> may be assigned any value in the range from <code>0</code> to <code>2*\u00af32</code> (about <code>2.3283064365386962890625E\u00af10</code>). A value of <code>0</code> ensures exact comparison. The value in a clear workspace is <code>1E\u00af28</code>. <code>\u2395DCT</code> has Namespace scope.</p> <p>For further information, see \"Comparison Tolerance: \" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/dct/#examples","title":"Examples","text":"<pre><code>      \u2395DCT\u21901E\u00af10\n      1.00000000001 1.0000001 = 1\n1 0\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/div/","title":"Div","text":"Division Method \u2395DIV <p>The value of <code>\u2395DIV</code> determines how division by zero is to be treated.  If <code>\u2395DIV=0</code>, division by 0 produces a <code>DOMAIN ERROR</code> except that the special case of <code>0\u00f70</code> returns 1.</p> <p>If <code>\u2395DIV=1</code>, division by 0 returns 0.</p> <p><code>\u2395DIV</code> may be assigned the value 0 or 1.  The value in a clear workspace is 0.</p> <p><code>\u2395DIV</code> is an implicit argument of the monadic function Reciprocal (<code>\u00f7</code>) and the dyadic function Divide (<code>\u00f7</code>). <code>\u2395DIV</code> has Namespace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/div/#examples","title":"Examples","text":"<pre><code>      \u2395DIV\u21900\n\n      1 0 2 \u00f7 2 0 1\n0.5 1 2\n\n      \u00f70 1\nDOMAIN ERROR\n      \u00f70 1\n      ^\n\n      \u2395DIV\u21901\n\n      \u00f70 2\n0 0.5\n\n      1 0 2 \u00f7 0 0 4\n0 0 0.5\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/fr/","title":"Fr","text":"Floating-Point Representation \u2395FR <p>The value of <code>\u2395FR</code> determines the way that floating-point operations are performed.</p> <p>If <code>\u2395FR</code> is 645, all floating-point calculations are performed using IEEE 754 64-bit floating-point operations and the results of these operations are represented internally using binary64http://en.wikipedia.org/wiki/Double_precision_floating-point_format floating-point format.</p> <p>If <code>\u2395FR</code> is 1287, all floating-point calculations are performed using IEEE 754-2008 128-bit decimal floating-point operations and the results of these operations are represented internally using decimal128http://en.wikipedia.org/wiki/Decimal128_floating-point_format format.</p> <p>Note that when you change <code>\u2395FR</code>, its new value only affects subsequent floating-point operations and results. Existing floating-point values stored in the workspace remain unchanged.</p> <p>The default value of <code>\u2395FR</code> (its value in a <code>clear ws</code>) is configurable.</p> <p><code>\u2395FR</code>  has namespace scope but may be localised. If so, like most other system variables, it inherits its initial value from the global environment.</p> <p>However: Although <code>\u2395FR</code> can vary, the system is not designed to allow \"seamless\" modification during the running of an application and the dynamic alteration of is not recommended.  Strange effects may occur. For example, the type of a constant contained in a line of code (in a function or class), will depend on the value of <code>\u2395FR</code> when the function is fixed.</p> <p>Also note:</p> <pre><code>      \u2395FR\u21901287\n      x\u21901\u00f73\n\n      \u2395FR\u2190645\n      x=1\u00f73\n1\n</code></pre> <p>The decimal number has 17 more 3's. Using the tolerance which applies to binary floats (type 645), the numbers are equal. However, the \"reverse\" experiment yields 0, as tolerance is much narrower in the decimal universe:</p> <pre><code>      \u2395FR\u2190645\n      x\u21901\u00f73\n      \u2395FR\u21901287\n      x=1\u00f73\n0\n</code></pre> <p>Since <code>\u2395FR</code> can vary, it will be possible for a single workspace to contain floating-point values of both types (existing variables are not converted when <code>\u2395FR</code> is changed). For example, an array that has just been brought into the workspace from external storage may have a different type from <code>\u2395FR</code> in the current namespace. Conversion (if necessary) will only take place when a new floating-point array is generated as the result of \"a calculation\". The result of a computation returning a floating-point result will not depend on the type of the arrays involved in the expression: <code>\u2395FR</code> at the time when a computation is performed decides the result type, alone.</p> <p>Structural functions generally do NOT change the type, for example:</p> <pre><code>      \u2395FR\u21901287\n      x\u21901.1 2.2 3.3\n\n      \u2395FR\u2190645\n      \u2395DR x\n1287\n      \u2395DR 2\u2191x\n1287\n</code></pre> <p>128-bit decimal numbers not only have greater precision (roughly 34 decimal digits); they also have significantly larger range \u2013 from <code>\u00af1E6145</code> to <code>1E6145</code>. Loss of precision is accepted on conversion from 645 to 1287, but the magnitude of a number may make the conversion impossible, in which case a <code>DOMAIN ERROR</code> is issued:</p> <pre><code>      \u2395FR\u21901287\n      x\u21901E1000\n      \u2395FR\u2190645 \u22c4 x+0\nDOMAIN ERROR\n</code></pre> <p>When experimenting with <code>\u2395FR</code> it is important to note that numeric constants entered into the Session are evaluated (and assigned a data type) before the line is actually executed. This means that constants are evaluated according to the value of <code>\u2395FR</code> that pertained before the line was entered. For example:</p> <pre><code>      \u2395FR\u2190645\n      \u2395FR\n645\n\n      \u2395FR\u21901287 \u22c4 \u2395DR 0.1\n645\n      \u2395DR 0.1\n1287\n</code></pre> <p>WARNING: The use of COMPLEX numbers when <code>\u2395FR</code> is 1287 is not recommended, because:</p> <ul> <li>any 128-bit decimal array into which a complex number is inserted or appended will be forced in its entirety into complex representation, potentially losing precision.</li> <li>All comparisons are done using <code>\u2395DCT</code> when <code>\u2395FR</code> is 1287, and the default value of <code>1E\u00af28</code> is equivalent to 0 for complex numbers.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/io/","title":"Io","text":"Index Origin \u2395IO <p><code>\u2395IO</code> determines the index of the first element of a non-empty vector.</p> <p><code>\u2395IO</code> may be assigned the value 0 or 1.  The value in a clear workspace is 1. <code>\u2395IO</code> has Namespace scope.</p> <p><code>\u2395IO</code> is an implicit argument of any function derived from the Axis operator (<code>[K]</code>), of the monadic functions Fix (<code>\u2395FX</code>), Grade Down (<code>\u2352</code>), Grade Up (<code>\u234b</code>), Index Generator (<code>\u2373</code>), Roll (<code>?</code>), and of the dyadic functions Deal (<code>?</code>), Grade Down (<code>\u2352</code>), Grade Up (<code>\u234b</code>), Index (<code>\u2337</code>), Index Of (<code>\u2373</code>), Indexed Assignment, Indexing, Pick (<code>\u2283</code>) and Transpose (<code>\u2349</code>).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/io/#examples","title":"Examples","text":"<pre><code>        \u2395IO\u21901\n        \u23735\n1 2 3 4 5\n\n        \u2395IO\u21900\n        \u23735\n0 1 2 3 4\n\n        +/[0]2 3\u2374\u23736\n3 5 7\n\n        'ABC',[\u00af.5]'='\nABC\n===\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/ml/","title":"Ml","text":"Migration Level \u2395ML <p><code>\u2395ML</code> determines the degree of migration of the Dyalog APL language towards IBM's APL2.  Setting this variable to other than its default value of <code>1</code> changes the interpretation of certain symbols and language constructs. <code>\u2395ML</code> has Namespace scope.</p> <code>\u2395ML\u21900</code> `` Original Native Dyalog <code>\u2395ML\u21901</code> <code>Z\u2190\u220aR</code> Monadic <code>'\u220a'</code> is interpreted as 'enlist' rather than 'type'. <code>\u2395ML\u21902</code> <code>Z\u2190\u2191R</code> Monadic <code>'\u2191'</code> is interpreted as 'first' rather than 'mix'. `` <code>Z\u2190\u2283R</code> Monadic <code>'\u2283'</code> is interpreted as 'mix' rather than 'first'. `` <code>Z\u2190\u2261R</code> Monadic <code>'\u2261'</code> returns a positive rather than a negative value, if its argument has non-uniform depth. <code>\u2395ML\u21903</code> <code>R\u2190X\u2282[K]Y</code> Dyadic <code>'\u2282'</code> follows the APL2 (rather than the original Dyalog APL) convention. `` <code>\u2395TC</code> The order of the elements of <code>\u2395TC</code> is the same as in APL2. <p>Subsequent versions of Dyalog APL may provide further migration levels.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/ml/#examples","title":"Examples","text":"<pre><code>      X\u21902(3 4)\n\n      \u2395ML\u21900\n      \u220aX\n0  0 0\n      \u2191X\n2 0\n3 4\n      \u2283X\n2\n      \u2261X\n\u00af2\n\n</code></pre> <pre><code>\n      \u2395ML\u21901\n      \u220aX\n2 3 4\n      \u2191X\n2 0\n3 4\n      \u2283X\n2\n      \u2261X\n\u00af2\n\n</code></pre> <pre><code>\n      \u2395ML\u21902\n      \u220aX\n2 3 4\n      \u2191X\n2\n      \u2283X\n2 0\n3 4\n      \u2261X\n2\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/pp/","title":"Pp","text":"Print Precision \u2395PP <p><code>\u2395PP</code> is the number of significant digits in the display of numeric output. <code>\u2395PP</code> may be assigned any integer value in the range 1 to 34. <code>\u2395PP</code> has Namespace scope.</p> <p><code>\u2395PP</code> is used to format numbers displayed directly. It is an implicit argument of monadic function Format (<code>\u2355</code>), monadic <code>\u2395FMT</code> and for display of numbers via <code>\u2395</code> and <code>\u235e</code> output. <code>\u2395PP</code> is ignored for the display of integers.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/pp/#examples","title":"Examples:","text":"<pre><code>\n      \u2395PP\u219010\n\n      \u00f73 6\n0.3333333333 0.1666666667\n\n      \u2395PP\u21903\n\n      \u00f73 6\n0.333 0.167\n</code></pre> <p>If <code>\u2395PP</code> is set to a value <code>\u226517</code> (when <code>\u2395FR</code> is 645) or 34 (when <code>\u2395FR</code> is 1287), floating-point numbers may be converted between binary and character representation without loss of precision. Then, if  <code>\u2395CT</code> is 0 (to ensure exact comparison), for any floating-point number <code>N</code> the expression <code>N=\u234e\u2355N</code> is true.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/rl/","title":"Rl","text":"Random Link \u2395RL <p><code>\u2395RL</code> is a 2-element vector. Its first element contains the  base or random number seed and its second element is an integer that identifies the random number generator that is currently  in use. Together these items define how the system generates random numbers using Roll and Deal.</p> <p>In a <code>clear ws</code> <code>\u2395RL</code> is <code>(\u236c 1)</code>. <code>\u2395RL</code> has Namespace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/rl/#random-number-seed","title":"Random Number Seed","text":"<p>The facility to set the seed to a specific value provides the means to generate a repeatable sequence of random numbers, such as might be required by certain types of simulation modelling. This capability is not provided by RNG2.</p> <p>If the seed is set to 0, the seed is set randomly but may be retrieved and subsequently re-assigned to create a repeatable sequence.</p> <p>If the seed is set to <code>\u236c</code>, Dyalog is able to take advantage of certain optimisations which deliver maximum performance. In this case, the actual seed in use is intentionally hidden and <code>\u2395RL[1]</code> always reports <code>\u236c</code>, regardless of the Random Number Generator in use.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/rl/#random-number-generators","title":"Random Number Generators","text":"<p>The 3 random number generators are listed in the table below. The 4th column of the table contains the values of seeds that may be assigned to them.</p> Id Name Algorithm Valid Seed Values 0 RNG0 Lehmer linear congruential generator. <code>0</code> , <code>\u236c</code> , or an integer in the range 1 to <code>\u00af2+2*31</code> 1 RNG1 Mersenne Twister. <code>0</code> , <code>\u236c</code> , an integer in the range 1 to <code>\u00af1+2*63</code> or a 625-element integer vector 2 RNG2 Operating System random number generator. <code>\u236c</code> <p>Note that assigning an invalid value to the seed will cause <code>DOMAIN ERROR</code>.</p> <p>The default random number generator in a <code>CLEAR WS</code> is 1 (Mersenne Twister). This algorithm RNG1 produces 64-bit values with good distribution.</p> <p>The Lehmer linear congruential generator RNG0 was the only random number generator provided in versions of Dyalog APL prior to Version 13.1. The implementation of this algorithm has several limitations including limited value range <code>(2*31)</code>, short period and non-uniform distribution (some values may appear more frequently than others). It is retained for backwards compatibility.</p> <p>Under Windows, the Operating System random number generator algorithm RNG2 uses the rand_s() function. Under UNIX/Linux it uses /dev/urandom.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/rl/#random-number-sequences","title":"Random Number Sequences","text":"<p>Random number sequences may be predictable or not and  repeatable or not. A predictable and repeatable sequence is obtained by starting with the same specific value for the seed. A non-predictable sequence is obtained by starting with a seed which is itself chosen at random, but such a sequence is repeatable if the value of the seed (chosen at random) is visible. A non-predictable and non-repeatable sequence of random numbers is obtained where the initial seed is chosen completely at random and is unknown.</p> <p>Using RNG0 or RNG1:</p> <ul> <li>To obtain  an entirely predictable random sequence, set the seed to a non-zero value</li> <li>To obtain a non-predictable, but repeatable sequence, set the seed to <code>0</code></li> <li>To obtain a non-predictable, non-repeatable series of random numbers, set the seed to <code>\u236c</code></li> </ul> <p>RNG2 does not support a user modifiable random number seed, so when using this scheme, it is not possible to obtain a repeatable random number series and the seed must always be <code>\u236c</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/rl/#implementation-note","title":"Implementation Note:","text":"<p><code>\u2395RL</code> does not behave quite like a regular 2-element variable; it has its own rules relating to assignment and reference.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/rl/#reference","title":"Reference","text":"<p><code>\u2395RL</code> returns a 2-element vector whose second element identifies the scheme in use (0, 1 or 2).</p> <p>If  <code>\u2395RL[1]</code> is set to <code>\u236c</code>,  <code>\u2395RL[1]</code>always reports <code>\u236c</code>.</p> <p>Otherwise if the seed <code>\u2395RL[1]</code> is set to a value other than <code>\u236c</code>:</p> <ul> <li>using RNG0, <code>\u2395RL[1]</code> is an integer which  represents the seed for the next random number in the sequence.</li> <li>using RNG1, the system internally retains a block of 312 64-bit numbers which are used one by one to generate the results of roll and deal. When the first block of 312 have been used up, the system generates a second block. In this case, <code>\u2395RL[1]</code> is an integer vector of 32-bit numbers of length 625 (the first is an index into the block of 312) which represents the internal state of the random number generator. This means that, as with RNG0, you may save the value of  <code>\u2395RL</code> in a variable and reassign it later.</li> <li>Using RNG2, the seed is purely internal and <code>\u2395RL[1]</code> is always zilde.</li> <li>using RNG0, <code>\u2395RL[1]</code> is an integer which  represents the seed for the next random number in the sequence.</li> <li>using RNG1, the system internally retains a block of 312 64-bit numbers which are used one by one to generate the results of roll and deal. When the first block of 312 have been used up, the system generates a second block. In this case, <code>\u2395RL[1]</code> is an integer vector of 32-bit numbers of length 625 (the first is an index into the block of 312) which represents the internal state of the random number generator. This means that, as with RNG0, you may save the value of  <code>\u2395RL</code> in a variable and reassign it later.</li> <li>Using RNG2, the seed is purely internal and <code>\u2395RL[1]</code> is always zilde.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/rl/#assignment","title":"Assignment","text":"<p><code>\u2395RL</code> may only be assigned in its entirety. Indexed and selective assignment may not be used to assign values to individual elements.</p> <p>To preserve compatibility with Versions of Dyalog prior to Version 15.0 (in which <code>\u2395RL</code> specifies just the seed) if the value assigned to <code>\u2395RL</code> represents a valid seed for the random number generator in use, it is taken to be the new seed. Otherwise, the value assigned to <code>\u2395RL</code> must be a 2-element vector, whose first item is the seed and whose second item is 0, 1 or 2 and specifies the random number generator to be used subsequently.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/rl/#examples-specific-seeds-for-repeatable-sequences","title":"Examples (specific seeds for repeatable sequences)","text":"<pre><code>\n      )CLEAR\nclear ws\n      \u2395RL\u219016807 \n      10?10      \n4 1 6 5 2 9 7 10 3 8\n      5\u2191\u2283\u2395RL       \n10 0 16807 1819658750 \u00af355441828\n      X\u2190?1000\u23741000 \n      5\u2191\u2283\u2395RL       \n100 \u00af465541037 \u00af1790786136 \u00af205462449 996695303\n</code></pre> <pre><code>\n      \u2395RL\u219016807\n      10?10      \n4 1 6 5 2 9 7 10 3 8\n      Y\u2190?1000\u23741000 \n      X\u2261Y\n1\n      5\u2191\u2283\u2395RL       \n100 \u00af465541037 \u00af1790786136 \u00af205462449 996695303  \n</code></pre> <pre><code>\n      \u2395RL\u219016807 0 \u235d Select RNG0\n      \u2395RL\n16807 0\n      ?9 9 9\n2 7 5\n      ?9\n7\n      \u2395RL\n984943658 0\n\n      \u2395RL\u219016807\n      ?9 9 9\n2 7 5\n      ?9\n7\n      \u2395RL\n984943658 0\n</code></pre> <pre><code>\n      \u2395RL\u219016807 1 \u235d Select RNG1\n      5\u2191\u2283\u2395RL\n100 \u00af465541037 \u00af1790786136 \u00af205462449 996695303\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/rl/#examples-0-seed","title":"Examples (0 seed)","text":"<p>When you set the seed to 0, a random seed is created for you:</p> <pre><code>      \u2395RL\u21900 0\n      \u2395RL\n865618822 0\n      \u2395RL\u21900\n      \u2395RL\n1100783275 0\n</code></pre> <p>Setting the seed to 0 gives you a new, unpredictable random sequence yet it is repeatable because you can retrieve (and subsequently re-use) the actual seed after you set it:</p> <pre><code>      ?10\u2374100\n14 22 18 30 42 22 71 32 32 12\n      \u2395RL\u21901100783275\n      ?10\u2374100\n14 22 18 30 42 22 71 32 32 12\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/system-settings/state-settings/rl/#example-zilde","title":"Example (zilde)","text":"<p>When you set the seed to zilde, you get the same random initialisation as setting it to 0 but you can't retrieve the actual value of the seed. When it is  set to <code>\u236c</code> it is subsequently reported as <code>\u236c</code> and the internal value of the seed is hidden.</p> <pre><code>      \u2395RL\u2190\u236c\n      \u2395RL\n\u250c\u252c\u2500\u2510\n\u2502\u25020\u2502\n\u2514\u2534\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/","title":"Threads","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tcnums/","title":"Tcnums","text":"Thread Child Numbers R\u2190\u2395TCNUMS Y <p><code>Y</code> must be a simple array of integers representing thread numbers.</p> <p>The result <code>R</code> is a simple integer vector of the child threads of each thread of <code>Y</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tcnums/#examples","title":"Examples","text":"<pre><code>      \u2395TCNUMS 0\n2 3\n\n      \u2395TCNUMS 2 3\n4 5 6 7 8 9\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tid/","title":"Tid","text":"Current Thread Identity R\u2190\u2395TID <p><code>R</code> is a simple integer scalar whose value is the number of the current thread.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tid/#examples","title":"Examples","text":"<pre><code>      \u2395TID     \u235d Base thread number\n0\n\n      \u234e&amp;'\u2395TID' \u235d Thread number of async \u234e.\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tkill/","title":"Tkill","text":"Kill Thread {R}\u2190{X}\u2395TKILL Y <p><code>Y</code> must be a simple array of integers representing thread numbers to be terminated. <code>X</code> is a Boolean single, defaulting to 1, which indicates that all descendant threads should also be terminated.</p> <p>The shy result <code>R</code> is a vector of the numbers of all threads that have been terminated.</p> <p>The base thread 0 is always excluded from the cull.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tkill/#examples","title":"Examples","text":"<pre><code>      \u2395TKILL 0            \u235d Kill background threads.\n\n      \u2395TKILL \u2395TID         \u235d Kill self and descendants.\n\n      0 \u2395TKILL \u2395TID       \u235d Kill self only.\n\n      \u2395TKILL \u2395TCNUMS \u2395TID \u235d Kill descendants.\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tname/","title":"Tname","text":"Current Thread Name \u2395TNAME <p>The system variable <code>\u2395TNAME</code> reports and sets the name of the current APL thread. This name is used to identify the thread in the Tracer.</p> <p>The default value of <code>\u2395TNAME</code> is an empty character vector. <code>\u2395TNAME</code> has workspace scope.</p> <p>You may set <code>\u2395TNAME</code> to any valid character vector, but it is recommended that control characters (such as <code>\u2395AV[\u2395IO]</code> ) be avoided.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tname/#example","title":"Example:","text":"<pre><code>      \u2395TNAME\u2190'Dylan'\n      \u2395TNAME\nDylan\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tnums/","title":"Tnums","text":"Thread Numbers R\u2190\u2395TNUMS <p><code>\u2395TNUMS</code> reports the numbers of all current threads.</p> <p><code>R</code> is a simple integer vector of the base thread and all its living descendants.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tnums/#example","title":"Example","text":"<pre><code>      \u2395TNUMS\n0 2 4 5 6 3 7 8 9\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tsync/","title":"Tsync","text":"Wait for Threads to Terminate R\u2190\u2395TSYNC Y <p><code>Y</code> must be a simple array of thread numbers.</p> <p>If <code>Y</code> is a simple scalar, <code>R</code> is an array, the result (if any) of the thread.</p> <p>If <code>Y</code> is a simple non-scalar, <code>R</code> has the same shape as <code>Y</code>, and result is an array of enclosed thread results.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tsync/#examples","title":"Examples","text":"<pre><code>      dup\u2190{\u2375 \u2375}        \u235d Duplicate\n\n      \u2395\u2190dup&amp;88         \u235d Show thread number\n11\n88 88\n\n      \u2395TSYNC dup&amp;88    \u235d Wait for result\n88 88\n\n      \u2395TSYNC,dup&amp;88\n 88 88 \n\n      \u2395TSYNC dup&amp;1 2 3\n 1 2 3  1 2 3 \n\n      \u2395TSYNC dup&amp;\u00a81 2 3\n 1 1  2 2  3 3 \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tsync/#deadlock","title":"Deadlock","text":"<p>The interpreter detects a potential deadlock if a number of threads wait for each other in a cyclic dependency. In this case, the thread that attempts to cause the deadlock issues error number <code>1008: DEADLOCK</code>.</p> <pre><code>     \u2395TSYNC \u2395TID      \u235d Wait for self\nDEADLOCK\n      \u2395TSYNC \u2395TID\n      ^\n\n      \u2395EN\n1008\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/threads/threads/tsync/#potential-value-error","title":"Potential Value Error","text":"<p>If any item of <code>Y</code> does not correspond to the thread number of an active thread, or if any subject thread terminates without returning a result, then <code>\u2395TSYNC</code> does not return a result. This means that, if the calling context of the <code>\u2395TSYNC</code> requires a result, for example: <code>rslt\u2190\u2395TSYNC tnums</code>, a <code>VALUE ERROR</code> will be generated. This situation can occur if threads have completed before <code>\u2395TSYNC</code> is called.</p> <pre><code>      \u2395\u2190\u00f7&amp;4          \u235d thread (3) runs and terminates.\n3\n0.25\n      \u2395TSYNC 3       \u235d no result required: no prob\n      \u2395\u2190\u2395tsync 3     \u235d context requires result\nVALUE ERROR\n\n      \u2395\u2190\u2395tsync {}&amp;0  \u235d non-result-returning fn: no result.\nVALUE ERROR\n</code></pre> <p>Coding would normally avoid such an inconvenient <code>VALUE ERROR</code> either by arranging that the thread-spawning and <code>\u2395TSYNC</code> were on the same line:</p> <pre><code>      rslt \u2190 \u2395TSYNC myfn&amp;\u00a8 argvec\n</code></pre> <p>or</p> <pre><code>      tnums\u2190myfn&amp;\u00a8 argvec \u22c4 rslt\u2190\u2395TSYNC tnums\n</code></pre> <p>or by error-trapping the <code>VALUE ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-external-access/","title":"Tools and Access to External Utilities","text":""},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/data-representation-dyadic/","title":"Data representation dyadic","text":"Data Representation (Dyadic) R\u2190X \u2395DR Y <p>Dyadic <code>\u2395DR</code> converts the data type of its argument <code>Y</code> according to the type specification <code>X</code>. See \"Data Representation (Monadic)\" above for a list of data types but note that 1287 is not a permitted value in <code>X</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/data-representation-dyadic/#case-1","title":"Case 1:","text":"<p><code>X</code> is a single integer value. The bits in the right argument are interpreted as elements of an array of type <code>X</code>. The shape of the resulting new array will typically be changed along the last axis. For example, a character array interpreted as Boolean will have 8 times as many elements along the last axis.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/data-representation-dyadic/#case-2","title":"Case 2:","text":"<p><code>X</code> is a 2-element integer value. <code>Y</code> is any array.</p> <p><code>X[1]</code> is either 0 or a data type. If <code>X[1]</code> is 0, <code>Y</code> is converted to data type <code>X[2]</code>. If <code>X[1]</code> is non-zero, the bits in <code>Y</code> are first interpreted as being of type <code>X[1]</code> before being converted to type <code>X[2]</code>. If <code>Y</code> is a scalar it is ravelled. Conversion of <code>Y</code> from one internal data type to another is performed so as to preserve its values without loss of precision.</p> <p>The result <code>R</code> is a two element nested array comprised of:</p> <ol> <li>The converted elements or a fill element (0 or blank) where the conversion failed</li> <li>A Boolean array of the same shape indicating which elements were successfully converted.</li> </ol>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/data-representation-dyadic/#examples","title":"Examples","text":"<pre><code>      bits\u2190 0 1 0 0 1 0 0 0 , 0 1 0 0 1 0 1 1\n      80 \u2395DR bits\nHK\n      83 \u2395DR bits\n72 75\n      163 \u2395DR bits\n19272\n\n      0 645 \u2395DR 72 75\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u250272 75\u25021 1\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n      163 645 \u2395DR 72 75\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510\n\u250219272\u25021\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/data-representation-dyadic/#case-3-classic-edition-only","title":"Case 3: Classic Edition Only","text":"<p><code>X</code> is a 3-element integer value and <code>X[2 3]</code> is <code>163 82</code>. The bits in the right argument are interpreted as elements of an array of type <code>X[1]</code>. The system then converts them to the character representation of the corresponding 16 bit integers. This case is provided primarily for compatibility with APL*PLUS. For new applications, the use of the [conv] field with <code>\u2395NAPPEND</code> and <code>\u2395NREPLACE</code> is recommended.</p> <p>Conversion to and from character (data type 82) uses the translate vector given by <code>\u2395NXLATE 0</code>. By default this is the mapping defined by the current output translate table (usually WIN.DOT).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/data-representation-dyadic/#notes","title":"Notes:","text":"<ul> <li>The internal representation of data may be modified during workspace compaction. For example, numeric arrays and (in the Unicode Edition) character arrays will, if possible, be squeezed to occupy the least possible amount of memory. However, the internal representation of the result <code>R</code> is guaranteed to remain unmodified until it is re-assigned (or partially re-assigned) with the result of any function.</li> <li>The precise operation of dyadic <code>\u2395DR</code> depends upon the byte-ordering scheme of the computer system.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/data-representation-monadic/","title":"Data representation monadic","text":"Data Representation (Monadic) R\u2190\u2395DR Y <p>Monadic <code>\u2395DR</code> returns the type of its argument <code>Y</code>.  The result <code>R</code> is an integer scalar containing one of the following values. Note that the internal representation and data types for character data differ between the Unicode and Classic Editions.</p> <p>Unicode Edition</p> Value Data Type 11 1 bit Boolean 80 8 bits character 83 8 bits signed integer 160 16 bits character 163 16 bits signed integer 320 32 bits character 323 32 bits signed  integer 326 Pointer (32-bit or 64-bit as appropriate) 645 64 bits Floating 1287 128 bits Decimal 1289 128 bits Complex <p>Classic Edition</p> Value Data Type 11 1 bit Boolean 82 8 bits character 83 8 bits signed integer 163 16 bits signed integer 323 32 bits signed integer 326 Pointer  (32-bit or 64-bit as appropriate) 645 64 bits Floating 1287 128 bits Decimal 1289 128 bits Complex"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-unix-command/","title":"Execute unix command","text":"Execute (UNIX) Command {R}\u2190\u2395SH Y <p><code>\u2395SH</code> executes a UNIX shell or a Windows Command Processor.  <code>\u2395SH</code> is a synonym of <code>\u2395CMD</code>.  Either function may be used in either environment (UNIX or Windows) with exactly the same effect.  <code>\u2395SH</code> is probably more natural for the UNIX user.  This section describes the behaviour of <code>\u2395SH</code> and <code>\u2395CMD</code> under UNIX.  See \"Execute Windows Command: \" on page 1 for a discussion of the behaviour of these system functions under Windows.</p> <p><code>Y</code> must be a simple character scalar or vector representing a UNIX shell command.  <code>R</code> is a nested vector of character vectors.</p> <p><code>Y</code> may be any acceptable UNIX command. If the command does not produce any output, <code>R</code> is <code>0\u2374\u2282''</code> but the result is suppressed if not explicitly used or assigned.  If the command has a non-zero exit code, then APL will signal a <code>DOMAIN ERROR</code>.  If the command returns a result and has a zero exit code, then each element of <code>R</code> will be a line from the standard output (stdout) of the command.  Output from standard error (stderr) is not captured unless redirected to stdout.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-unix-command/#examples","title":"Examples","text":"<pre><code>      \u2395SH'ls'\nFILES WS temp\n\n      \u2395SH 'rm WS/TEST'\n\n      \u2395SH 'grep bin /etc/passwd ; exit 0'\nbin:!:2:2::/bin:\n\n      \u2395SH 'apl MYWS &lt;inputfile &gt;out1 2&gt;out2 &amp;'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-windows-command/","title":"Execute windows command","text":"Execute Windows Command {R}\u2190\u2395CMD Y <p><code>\u2395CMD</code> executes the Windows Command Processor or UNIX shell or starts another Windows application program.  <code>\u2395CMD</code> is a synonym of <code>\u2395SH</code>.  Either system function may be used in either environment (Windows or UNIX) with exactly the same effect.  <code>\u2395CMD</code> is probably more natural for the Windows user.  This section describes the behaviour of <code>\u2395CMD</code> and <code>\u2395SH</code> under Windows. See \"Execute (UNIX) Command: \" on page 1 for a discussion of the behaviour of these system functions under UNIX.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-windows-command/#executing-the-windows-command-processor","title":"Executing the Windows Command Processor","text":"<p>If <code>Y</code> is a simple character vector, <code>\u2395CMD</code> invokes the Windows Command Processor (normally <code>cmd.exe</code>) and passes the command specified by character vector <code>Y</code> to it for execution. The term command means here an instruction recognised by the Command Processor, or the pathname of a program (with optional parameters) to be executed by it. In either case, APL waits for the command to finish and then returns the result <code>R</code>,  a vector of character vectors containing its result. Each element in <code>R</code> corresponds to a line of output produced by the command.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-windows-command/#example","title":"Example","text":"<pre><code>      Z\u2190\u2395CMD'dir'\n      \u2374Z\n12\n      \u2191Z\n Volume in drive C is OS\n Volume Serial Number is B438-9B76\n\n Directory of C:\\Users\\Pete\\Documents\\Dyalog APL-64 17.0 Unicode Files\n\n23/06/2018  15:59    &lt;DIR&gt;          .\n23/06/2018  15:59    &lt;DIR&gt;          ..\n23/06/2018  14:53           181,488 default.dlf\n13/06/2018  20:13         1,262,296 def_uk.dse\n14/06/2018  14:36           108,976 UserCommand20.cache\n               3 File(s)      1,552,760 bytes\n               2 Dir(s)  101,371,097,088 bytes free\n\n</code></pre> <p>If the command specified in <code>Y</code> already contains the redirection symbol (<code>&gt;</code>) the capture of output through a pipe is avoided and the result <code>R</code> is empty.  If the command specified by <code>Y</code> issues prompts and expects user input, it is ESSENTIAL to explicitly redirect input and output to the console.</p> <p>If this is done, APL detects the presence of a \"<code>&gt;</code>\" in the command line, runs the command processor in a visible window, and does not direct output to the pipe.  If you fail to do this your system will appear to hang because there is no mechanism for you to receive or respond to the prompt.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-windows-command/#example_1","title":"Example","text":"<pre><code>      \u2395CMD 'DATE &lt;CON &gt;CON'\n</code></pre> <p>(Command Prompt window appears)</p> <p>Current date is Wed 19-07-1995</p> <p>Enter new date (dd-mm-yy): 20-07-95</p> <p>(COMMAND PROMPT window disappears)</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-windows-command/#spaces-in-pathnames","title":"Spaces in pathnames","text":"<p>If <code>Y</code> specifies a program (with or without parameters) and the pathname to the program  contains spaces, you must enclose the string in double-quotes.</p> <p>For example, to start a version of Excel to which the pathname is:    C:\\Program Files\\Microsoft Office\\OFFICE11\\excel.exe</p> <p>the argument to <code>\u2395CMD</code> should be: \u2395CMD '\"c:\\program files\\microsoft office\\office11\\excel.exe\"'</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-windows-command/#double-quote-restriction","title":"Double-Quote Restriction","text":"<p>The Windows Command Processor does not permit more than one set of double-quotes in a command string.</p> <p>The following statements are all valid: \u2395CMD 'c:\\windows\\system32\\notepad.exe c:\\myfile.txt' \u2395CMD 'c:\\windows\\system32\\notepad.exe \"c:\\myfile.txt\"' \u2395CMD '\"c:\\windows\\system32\\notepad.exe\" c:\\myfile.txt'</p> <p>Whereas the next statement, which contains two sets of double-quotes, will fail: \u2395CMD '\"c:\\windows\\system32\\notepad.exe\" \"c:\\myfile.txt\"'</p> <p>Such a statement can however be executed using the second form of <code>\u2395CMD</code>(where the argument is a 2-element vector of character vectors) which does not use the Windows Command Processor and is not subject to this restriction. However, the call to <code>\u2395CMD</code> will return immediately, and no output from the command will be returned. \u2395CMD'\"c:\\windows\\system32\\notepad.exe\" \"c:\\myfile.txt\"' ''</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-windows-command/#implementation-notes","title":"Implementation Notes","text":"<p>The right argument of <code>\u2395CMD</code> is simply passed to the appropriate command processor for execution and its output is received using an unnamed pipe.</p> <p>By default, <code>\u2395CMD</code> will execute the string <code>('cmd.exe /c',Y)</code>; where <code>Y</code> is the argument given to <code>\u2395CMD</code>.  However, the implementation permits the use of alternative command processors as follows:</p> <p>Before execution, the argument is prefixed and postfixed with strings defined by the APL parameters CMD_PREFIX and CMD_POSTFIX.  The former specifies the name of your command processor and any parameters that it requires.  The latter specifies a string which may be required.  If CMD_PREFIX is not defined, it defaults to the name defined by the environment variable COMSPEC followed by  \"/c\".  If COMSPEC is not defined, it defaults to cmd.exe.  If CMD_POSTFIX is not defined, it defaults to an empty vector.</p> <p><code>\u2395CMD</code> treats certain characters as having special meaning as follows:</p> <code>#</code> marks the start of a trailing comment, <code>;</code> divides the command into sub-commands, <code>&gt;</code> if found within the last sub-command, causes <code>\u2395CMD</code> to use a visible window. <p>If you simply wish to open a Command Prompt window, you may execute the command as a Windows Program (see below).  For example:</p> <pre><code>      \u2395CMD 'cmd.exe' ''\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-windows-command/#starting-a-windows-program","title":"Starting a Windows Program","text":"<p>If <code>Y</code> is a 2-element vector of character vectors, <code>\u2395CMD</code> starts the executable program named by <code>Y[1]</code> with the initial window parameter specified by <code>Y[2]</code>.  The shy result is an integer scalar containing the window handle allocated by the window manager. Note that in this case APL does not wait for the program specified by <code>Y</code> to finish, but returns immediately. The shy result <code>R</code> is the process identifier (PID).</p> <p><code>Y[1]</code> must specify the name or complete pathname of an executable program.  If the name alone is specified, Windows will search the following directories:</p> <ol> <li>the current directory,</li> <li>the Windows directory,</li> <li>the Windows system directory,</li> <li>the directories specified by the PATH variable,</li> <li>the list of directories mapped in a network.</li> </ol> <p>Note that <code>Y[1]</code> may contain the complete command line, including any suitable parameters for starting the program.  If Windows fails to find the executable program, <code>\u2395CMD</code> will fail and report <code>FILE ERROR 2</code>.</p> <p><code>Y[2]</code> specifies the window parameter and may be one of the following.  If not, a <code>DOMAIN ERROR</code> is reported.</p> <code>'Normal' ''</code> Application is started in a normal window, which is given the input focus <code>'Unfocused'</code> Application is started in a normal window, which is NOT given the input focus <code>'Hidden'</code> Application is run in an invisible window <code>'Minimized' 'Minimised'</code> Application is started as an icon which is NOT given the input focus <code>'Maximized' 'Maximised'</code> Application is started maximized (full screen) and is given the input focus <p>There is no way to terminate an application started by <code>\u2395CMD</code> from APL; it will run until it completes or is terminated by an external mechanism. Furthermore, if the window parameter is HIDDEN, the user is unaware of the application (unless it makes itself visible) and has no means to close it.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-windows-command/#examples","title":"Examples","text":"<pre><code>      Path\u2190'c:\\Program Files\\Microsoft Office\\Office\\'\n      \u2395\u2190\u2395CMD (Path,'excel.exe') ''\n33\n      \u2395CMD (Path,'winword /mMyMacro') 'Minimized'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/execute-windows-command/#executing-programs","title":"Executing Programs","text":"<p>Either form of <code>\u2395CMD</code> may be used to execute a program. The difference is that when the program is executed via the Command Processor, APL waits for it to complete and returns any result that the program would have displayed in the Command Window had it been executed from a Command Window. In the second case, APL starts the program (in parallel).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-dyadic/","title":"Format dyadic","text":"Format (Dyadic) R\u2190X \u2395FMT Y <p><code>Y</code> must be a simple array of rank not exceeding two, or a non-simple scalar or vector whose items are simple arrays of rank not exceeding two.  The simple arrays in <code>Y</code> must be homogeneous, either character or numeric. All numeric values in <code>Y</code> must be simple; if <code>Y</code> contains any complex numbers, dyadic <code>\u2395FMT</code> will generate a <code>DOMAIN ERROR</code>. <code>X</code> must be a simple character vector.  <code>R</code> is a simple character matrix.</p> <p><code>X</code> is a format specification that defines how columns of the simple arrays in <code>Y</code> are to appear.  A simple scalar in <code>Y</code> is treated as a one-element matrix.  A simple vector in <code>Y</code> is treated as a one-column matrix.  Each column of the simple arrays in <code>Y</code> is formatted in left-to-right order according to the format specification in <code>X</code> taken in left-to-right order and used cyclically if necessary.</p> <p><code>R</code> has the same number of rows as the longest column (or implied column) in <code>Y</code>, and the number of columns is determined from the format specification.</p> <p>The format specification consists of a series of control phrases, with adjacent phrases separated by a single comma, selected from the following:</p> <code>rAw</code> Alphanumeric format <code>rEw.s</code> Scaled format <code>rqFw.d</code> Decimal format <code>rqG\u235epattern\u235e</code> Pattern <code>rqIw</code> Integer format <code>Tn</code> Absolute tabulation <code>Xn</code> Relative tabulation <code>\u235et\u235e</code> Text insertion <p>(Alternative surrounding pairs for Pattern or Text insertion are   <code>&lt; &gt;, \u2282 \u2283, \u2395 \u2395</code>  or<code>\u00a8 \u00a8</code>.)</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-dyadic/#where","title":"where:","text":"r is an optional repetition factor indicating that the format phrase is to be applied to r columns of <code>Y</code> q is an optional usage of qualifiers or affixtures from those described below. w is an integer value specifying the total field width per column of <code>Y</code> , including any affixtures. s is an integer value specifying the number of significant digits in Scaled format; <code>s</code> must be less than <code>w-1</code> d is an integer value specifying the number of places of decimal in Decimal format; <code>d</code> must be less than <code>w</code> . n is an integer value specifying a tab position relative to the notional left margin (for <code>T</code> -format) or relative to the last formatted position (for <code>X</code> -format) at which to begin the next format. t is any arbitrary text excluding the surrounding character pair.  Double quotes imply a single quote in the result. pattern see following section G format"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-dyadic/#qualifiers-q-are-as-follows","title":"Qualifiers q are as follows:","text":"B leaves the field blank if the result would otherwise be zero. C inserts commas between triads of digits starting from the rightmost digit of the integer part of the result. Km scales numeric values by <code>1Em</code> where m is an integer; negation may be indicated by <code>\u00af</code> or - preceding the number. L left justifies the result in the field width. Ov\u235et\u235e replaces specific numeric value <code>v</code> with the text <code>t</code> . S\u235ep\u235e substitutes standard characters.  p is a string of pairs of symbols enclosed between any of the Text Insertion delimiters.  The first of each pair is the standard symbol and the second is the symbol to be substituted.  Standard symbols are: <code>*</code> overflow fill character <code>.</code> decimal point <code>,</code> triad separator for <code>C</code> qualifier <code>0</code> fill character for <code>Z</code> qualifier <code>_</code> loss of precision character <code>\u00af</code> high minus symbol Z fills unused leading positions in the result with zeros (and commas if <code>C</code> is also specified). 9 digit selector"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-dyadic/#affixtures-are-as-follows","title":"Affixtures are as follows:","text":"M\u235et\u235e prefixes negative results with the text t instead of the negative sign. N\u235et\u235e post-fixes negative results with the text <code>t</code> P\u235et\u235e prefixes positive or zero results with the text <code>t</code> . Q\u235et\u235e post-fixes positive or zero results with the text <code>t</code> . R\u235et\u235e presets the field with the text <code>t</code> which is repeated as necessary to fill the field.  The text will be replaced in parts of the field filled by the result, including the effects of other qualifiers and affixtures except the <code>B</code> qualifier <p>The surrounding affixture delimiters may be replaced by the alternative pairs described for Text Insertion.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-dyadic/#examples","title":"Examples","text":"<p>A vector is treated as a column:</p> <pre><code>      'I5' \u2395FMT 10 20 30\n   10\n   20\n   30\n</code></pre> <p>The format specification is used cyclically to format the columns of the right argument:</p> <pre><code>      'I3,F5.2' \u2395FMT 2 4\u2374\u23738\n  1 2.00  3 4.00\n  5 6.00  7 8.00\n</code></pre> <p>The columns of the separate arrays in the items of a non-simple right argument are formatted in order.  Rows in a formatted column beyond the length of the column are left blank:</p> <pre><code>      '2I4,F7.1' \u2395FMT (\u23734)(2 2\u2374 0.1\u00d7\u23734)\n   1   0    0.2\n   1   0    0.4\n   3\n   4\n</code></pre> <p>Characters are right justified within the specified field width, unless the <code>L</code> qualifier is specified:</p> <pre><code>      'A2' \u2395FMT 1 6\u2374'SPACED'\n S P A C E D\n</code></pre> <p>If the result is too wide to fit within the specified width, the field is filled with asterisks:</p> <pre><code>      'F5.2' \u2395FMT 0.1\u00d75 1000 \u00af100\n  0.50\n*****\n*****\n</code></pre> <p>Relative tabulation (<code>X</code>-format) identifies the starting position for the next format phrase relative to the finishing position for the previous format, or the notional left margin if none.  Negative values are permitted providing that the starting position is not brought back beyond the left margin.  Blanks are inserted in the result, if necessary:</p> <pre><code>      'I2,X3,3A1' \u2395FMT (\u23733)(2 3\u2374'TOPCAT')\n 1   TOP\n 2   CAT\n 3\n</code></pre> <p>Absolute tabulation (<code>T</code>-format) specifies the starting position for the next format relative to the notional left margin.  If position 0 is specified, the next format starts at the next free position as viewed so far.  Blanks are inserted into the result as required.  Over-written columns in the result contain the most recently formatted array columns taken in left-to-right order:</p> <pre><code>      X\u2190'6I1,T5,A1,T1,3A1,T7,F5.1'\n\n      X \u2395FMT (1 6\u2374\u23736)('*')(1 3\u2374'ABC')(22.2)\nABC4*6 22.2\n</code></pre> <p>If the number of specified significant digits exceeds the internal precision, low order digits are replaced by the symbol _:</p> <pre><code>      'F20.1' \u2395FMT 1E18\u00f73\n3333333333333333__._\n</code></pre> <p>The Text Insertion format phrase inserts the given text repeatedly in all rows of the result:</p> <pre><code>      MEN\u21903 5\u2374'FRED BILL JAMES'\n      WOMEN\u21902 5\u2374'MARY JUNE '\n\n      '5A1,&lt;|&gt;' \u2395FMT MEN WOMEN\nFRED |MARY |\nBILL |JUNE |\nJAMES|     |\n</code></pre> <p>The last example also illustrates that a Text Insertion phrase is used even though the data is exhausted.</p> <p>The following example illustrates effects of the various qualifiers:</p> <pre><code>      X\u2190'F5.1,BF6.1,X1,ZF5.1,X1,LF5.1,K3CS&lt;.,,.&gt;F10.1'\n\n      X \u2395FMT \u23495 3\u2374\u00af1.5 0 25\n \u00af1.5  \u00af1.5 \u00af01.5 \u00af1.5   \u00af1.500,0\n  0.0       000.0 0.0         0,0\n 25.0  25.0 025.0 25.0   25.000,0\n</code></pre> <p>Affixtures allow text to be included within a field.  The field width is not extended by the inclusion of affixtures.  <code>N</code> and <code>Q</code> affixtures shift the result to the left by the number of characters in the text specification.  Affixtures may be used to enclose negative results in parentheses in accordance with common accounting practice:</p> <pre><code>      'M&lt;(&gt;N&lt;)&gt;Q&lt; &gt;F9.2' \u2395FMT 150.3 \u00af50.25 0 1114.9\n  150.30\n  (50.25)\n    0.00\n 1114.90\n</code></pre> <p>One or more format phrases may be surrounded by parentheses and preceded by an optional repetition factor.  The format phrases within parentheses will be re-used the given number of times before the next format phrase is used.  A Text Insertion  phrase will not be re-used if the last data format phrase is preceded by a closing parenthesis:</p> <pre><code>      'I2,2(&lt;/&gt;,ZI2)' \u2395FMT 1 3\u2374\u233d100|3\u2191\u2395TS\n20/07/89\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-dyadic/#g-format","title":"G  Format","text":"<p>Only the <code>B</code>, <code>K</code>, <code>S</code> and <code>O</code> qualifiers are valid with the <code>G</code> option</p> <p><code>\u235epattern\u235e</code> is an arbitrary string of characters, excluding the delimiter characters.  Characters '9' and '<code>Z</code>' (unless altered with the <code>S</code> qualifier) are special and are known as digit selectors.</p> <p>The result of a <code>G</code> format will have length equal to the length of the pattern.</p> <p>The data is rounded to the nearest integer (after possible scaling). Each digit of the rounded data replaces one digit selector in the result.  If there are fewer data digits than digit selectors, the data digits are padded with leading zeros.  If there are more data digits than digit selectors, the result will be filled with asterisks.</p> <p>A '9' digit selector causes a data digit to be copied to the result.</p> <p>A 'Z' digit selector causes a non-zero data digit to be copied to the result.  A zero data digit is copied if and only if digits appear on each side of it.  Otherwise a blank appears.  Similarly text between digit selectors appears only if digits appear on each side of the text.  Text appearing before the first digit selector or after the last will always appear in the result.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-dyadic/#examples_1","title":"Examples","text":"<pre><code>      'G\u228299/99/99\u2283'\u2395FMT 0 100 100 \u22a58 7 89\n08/07/89\n\n      'G\u2282ZZ/ZZ/ZZ\u2283'\u2395FMT 80789 + 0 1\n 8/07/89\n 8/07/9\n\n      'G\u2282Andy ZZ Pauline ZZ\u2283' \u2395FMT 2721.499 2699.5\nAndy 27 Pauline 21\nAndy 27\n\n      \u2374\u2395\u2190'K2G\u2282DM Z.ZZZ.ZZ9,99\u2283' \u2395FMT 1234567.89 1234.56\nDM 1.234.567,89\nDM     1.234,56\n2 15\n</code></pre> <p>An error will be reported if:</p> <ul> <li>Numeric data is matched against an <code>A</code> control phrase.</li> <li>Character data is matched against other than an <code>A</code> control phrase.</li> <li>The format specification is ill-formed.</li> <li>For an F control phrase, <code>d&gt;w-2</code></li> <li>For an E control phrase, <code>s&gt;w-2</code></li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-dyadic/#o-format-qualifier","title":"O  Format Qualifier","text":"<p>The O format qualifier replaces a specific numeric value with a text string and may be used in conjunction with the E, F, I and G format phrases.</p> <p>An O-qualifier consists of the letter \"O\" followed by the optional numeric value which is to be substituted (if omitted, the default is 0) and then the text string within pairs of symbols such as \"<code>&lt;&gt;</code>\". For example:</p> O - qualifier Description O Replaces the value 0 with the text \"nil\" O42 Replaces the value 42 with the text \"N/A\" O0.001&lt;1/1000&gt; Replaces the value 0.001 with the text \"1/1000\" <p>The replacement text is inserted into the field in place of the numeric value. The text is normally right-aligned in the field, but will be left-aligned if the L qualifier is also specified.</p> <p>It is permitted to specify more than one O-qualifier within a single phrase.</p> <p>The O-qualifier is <code>\u2395CT</code> sensitive.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-dyadic/#examples_2","title":"Examples","text":"<pre><code>      'O&lt;NIL&gt;F7.2'\u2395FMT 12.3 0 42.5\n  12.30\n    NIL\n  42.50\n\n      'O&lt;NIL&gt;LF7.2'\u2395FMT 12.3 0 42.5\n12.30 \nNIL \n42.50 \n\n      'O&lt;NIL&gt;O42&lt;N/A&gt;I6'\u2395FMT 12 0 42 13\n    12\n   NIL\n   N/A\n    13\n\n      'O99&lt;replace&gt;F20.2'\u2395fmt 99 100 101\n             replace\n              100.00\n              101.00\n</code></pre> <p><code>\u2395CT</code> and <code>\u2395DCT</code> are  implicit arguments of <code>\u2395FMT</code> with the O format qualifier.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-monadic/","title":"Format monadic","text":"Format (Monadic) R\u2190\u2395FMT Y <p><code>Y</code> may be any array.  <code>R</code> is a simple character matrix which appears the same as the default display of <code>Y</code>.  If <code>Y</code> contains control characters from <code>\u2395TC</code>, they will be resolved.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/format-monadic/#examples","title":"Examples","text":"<pre><code>      A\u2190\u2395FMT '\u2229' ,\u2395TC[1],'\u2218'\n\n      \u2374A\n1 1\n      A\n\u235d\n\n      A\u2190\u2395VR 'FOO'\n\n      A\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n\n      \u2374A\n31\n      B\u2190\u2395FMT A\n\n      B\n     \u2207 R\u2190FOO\n[1]    R\u219010\n     \u2207\n\n      \u2374B\n3 12\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/","title":"Json","text":"JSON Convert R\u2190{X}\u2395JSON Y <p>This function imports and exports data in JavaScript Object Notation (JSON) Data Interchange FormatIETF RFC 7159. The JavaScript Object Notation (JSON) Data Interchange Format is a widely supported, text based data interchange format for the portable representation of structured data; any application which conforms to the standard may exchange data with any other..</p> <p>JSON supports a limited number of data types and there is not a direct correspondence between JSON and APL data structures. In particular:</p> <ul> <li>JSON does not support arrays with rank &gt;1.</li> <li>The JSON standard includes Boolean values true and false which are distinct from numeric values 1 and 0, and have no direct APL equivalent.</li> <li>The JSON5 standard includes numeric constants Infinity, -Infinity, NaN and -NaN which have no direct APL equivalent.</li> <li>JSON object members are named and these names might not be valid names in APL.</li> </ul> <p>These differences are catered for in various ways as discussed below.</p> <p>If specified, <code>X</code> must be a numeric scalar with the value <code>0</code> (import JSON) or  <code>1</code> (export JSON). If <code>X</code> is not specified and <code>Y</code> is a character array, <code>X</code> is assumed to be <code>0</code> (import); otherwise it is assumed to be 1 (export).</p> <p>Although this system function was designed with an optional left argument, it is strongly recommended that the argument should always be used.</p> <p>Other options for <code>\u2395JSON</code> are Format, Compact, Null, HighRank, Charset and Dialect which are specified using the Variant operator <code>\u2360</code>. See Variant on page 1. The  Principal Option is Format.</p> <p>The Dialect Variant option is either <code>'JSON'</code> (the default) or <code>'JSON5'</code>. The latter enables JSON5 extensions on import and export JSON5 (\"JSON5 Data Interchange Format\") is an extension of JSON that extends the subset of JavaScript syntax to include optional trailing commas, unquoted object keys, single quoted and multiline strings, additional number formats, and comments..</p> <p>See also: JSON Name Mangling on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#json-import-x-is-0","title":"JSON Import (X is 0)","text":"<p><code>Y</code> is a character vector or matrix in JSON format. There is an implied newline character between each row of a matrix.</p> <p>The content of the result <code>R</code> depends upon the Format variant which may be <code>'D'</code> (the default) or <code>'M'</code>.</p> <p>If Format is <code>'D'</code> (which stands for \"data\") the JSON described by <code>Y</code> is converted to APL object(s) and <code>R</code> is an array or a namespace containing arrays and sub-namespaces.</p> <ul> <li>JSON objects are created as APL namespaces.</li> <li>JSON null is converted to  the value specified by the Null variant, which may be either <code>\u2282'null'</code> (the default) or <code>\u2395NULL</code>.</li> <li>JSON true and false and the JSON5 numeric constants Infinity, -Infinity, NaN and -NaN are converted to enclosed character vectors  <code>\u2282'true'</code>, <code>\u2282'false'</code> and so forth.</li> <li>If the JSON source contains object names which are not valid APL names they are converted to APL objects with mangled names. See JSON Name Mangling on page 1. <code>7162\u2336</code> can be used to obtain the original name. See JSON Translate Name on page 1.</li> </ul> <p>If Format is <code>'M'</code> (which stands for \"matrix\") the result <code>R</code> is a matrix whose columns contain the following:</p> <code>[;1]</code> depth <code>[;2]</code> name (for JSON object members) <code>[;3]</code> value <code>[;4]</code> JSON type (integer: see below) <ul> <li>The representation of null, true and false are the same as for <code>Format 'D'</code>.</li> <li>Object names are reported as specified in the JSON text; they are not mangled as they are for <code>Format 'D'</code>.</li> </ul> <p>JSON data types are as follows:</p> Type Description 1 Object 2 Array 3 Numeric 4 String 5 Null 6 No APL equivalent (represented by character string) 7 JavaScript Object (export only)"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#duplicate-names","title":"Duplicate Names","text":"<p>The JSON standard says that members of a JSON object should have unique names and that different implementations behave differently when there are duplicates. Dyalog handles duplicate names as follows:</p> <ul> <li>No error is generated.</li> <li>For <code>Format 'D'</code>, the last member encountered is used and  all previous members with the same name are discarded.</li> <li>For <code>Format 'M'</code> all duplicate members are recorded in the result matrix.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#examples","title":"Examples","text":"<pre><code>      \u2374JSON\n18 19\n      JSON\n{                  \n  \"a\": {           \n    \"b\": [         \n      \"string 1\",  \n      \"string 2\"   \n    ],             \n    \"c\": true,     \n    \"d\": {         \n      \"e\": false,  \n      \"f\u237a\": [       \n        \"string 3\",\n        123,       \n        1000.2,    \n        null       \n      ]            \n    }              \n  }                \n}                  \n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#import-as-data-format-d","title":"Import as Data (Format 'D')","text":"<pre><code>      j\u21900 \u2395JSON JSON\n      j\n#.[JSON object]\n      j.\u2395NL 9\na\n      j.a.\u2395NL 2\nb\nc\n      j.a.b\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502string 1\u2502string 2\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      j.a.c\n\u250c\u2500\u2500\u2500\u2500\u2510\n\u2502true\u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n      j.a.\u2395NL 9\nd\n      j.a.d.\u2395NL 2 \u235d Note that f\u237a is an invalid APL name\ne       \n\u2359f\u23599082\u2359\n      j.a.d.e\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502false\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n      j.a.d.\u2359f\u23599082\u2359\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502string 3\u2502123\u25021000.2\u2502\u250c\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502        \u2502   \u2502      \u2502\u2502null\u2502\u2502\n\u2502        \u2502   \u2502      \u2502\u2514\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#performance-warning","title":"Performance Warning","text":"<p>Extracting part of a namespace created by <code>\u2395JSON)</code> can lead to poor application performance. For example, if you are only interested in an array of records contained as child namespaces that are nested within data that you receive via <code>\u2395JSON</code>, you might write something like:</p> <pre><code>     data\u2190(0 \u2395JSON \u2283\u2395NGET filename).records\n</code></pre> <p>This expression actually creates a temporary namespace <code>(0 \u2395JSON \u2283\u2395NGET filename)</code> (lets call it <code>temp</code> for now), extracts the sub-namespace <code>records</code>, and then discards its parent namespace <code>temp</code>. The result <code>data</code> however contains pointers to <code>temp</code>, so although it is not visible (it is unnamed), it is retained internally in the workspace. This  can lead to poor performance due to  the behaviour of the memory manager in this situation. This issue will be resolved in the next release of Dyalog. In the meantime, the situation can  be avoided by assigning a name to the  top-level namespace. Instead of the expression above, you could write:</p> <pre><code>      dataset\u21900 \u2395JSON \u2283\u2395NGET filename\n      data\u2190dataset.records\n</code></pre> <p>Giving a name to the top-level namespace effectively avoids the performance issue.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#import-as-matrix-format-m","title":"Import as Matrix (Format 'M')","text":"<pre><code>      (\u2395JSON\u2360'M')JSON\n\u250c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510\n\u25020\u2502  \u2502        \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502a \u2502        \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502b \u2502        \u25022\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25023\u2502  \u2502string 1\u25024\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25023\u2502  \u2502string 2\u25024\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502c \u2502\u250c\u2500\u2500\u2500\u2500\u2510  \u25026\u2502\n\u2502 \u2502  \u2502\u2502true\u2502  \u2502 \u2502\n\u2502 \u2502  \u2502\u2514\u2500\u2500\u2500\u2500\u2518  \u2502 \u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502d \u2502        \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25023\u2502e \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u25026\u2502\n\u2502 \u2502  \u2502\u2502false\u2502 \u2502 \u2502\n\u2502 \u2502  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25023\u2502f\u237a\u2502        \u25022\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25024\u2502  \u2502string 3\u25024\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25024\u2502  \u2502123     \u25023\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25024\u2502  \u25021000.2  \u25023\u2502\n\u251c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25024\u2502  \u2502\u250c\u2500\u2500\u2500\u2500\u2510  \u25025\u2502\n\u2502 \u2502  \u2502\u2502null\u2502  \u2502 \u2502\n\u2502 \u2502  \u2502\u2514\u2500\u2500\u2500\u2500\u2518  \u2502 \u2502\n\u2514\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#json-export-x-is-1","title":"JSON Export (X is 1)","text":"<p><code>Y</code> is the data to be exported as JSON and may be an array, a namespace or a matrix representation of JSON such as would have been produced by JSON Import with <code>Format 'M'</code>. <code>Y</code> is interpreted according to the Format variant which may be <code>'D'</code> (the default) or <code>'M'</code>.</p> <p><code>\u2395JSON</code> will signal <code>DOMAIN ERROR</code> if <code>Y</code> is incompatible with the specified (or implied) value of Format.</p> <p>If Format is <code>M</code>, the data values in <code>Y[;3]</code> must correspond precisely with the JSON types specified in <code>Y[;4]</code>as specified in the following table.</p> <code>Y[;4]</code> (Type) <code>Y[;3]</code> (Value) 1 Empty array 2 Empty array 3 Numeric scalar 4 Character vector 5 Null 6 Enclosed character vector 7 Enclose character vector <p><code>R</code> is a character vector whose content depends upon the value of the Compact variant.</p> Compact Description <code>0</code> The JSON text is padded with spaces and new lines for readability. 1 The JSON text is compacted into its minimal form.. <p>The Charset variant option may be used to restrict the output to ASCII characters.</p> Charset Description 'Unicode' All Unicode characters in <code>Y</code> are passed unchanged in the result <code>R</code> . <code>'ASCII'</code> Non-ASCII characters are converted to an encoded string of the form \"\\uNNNN\" where \"NNNN\" is the upper-case hexadecimal value of the character in the Unicode system. For example, \u00e9 (e-acute) is converted to \"\\u00E9\". Furthermore, if the Dialect is JSON5, values less than hex 100 are converted to the form \\xNN. <p>The HighRank variant option may be used to instruct <code>\u2395JSON</code> to pre-process higher rank arrays into a form that can be represented by JSON. Note that if necessary, the transformation is applied recursively throughout the high-rank array(s) specified by <code>Y</code>.</p> HighRank Description <code>'Split'</code> High rank data is split into nested vectors. 'Error' Higher rank data is rejected ( <code>DOMAIN ERROR</code> ) <p>The name of any namespace member that begins with <code>\u2359</code> and otherwise conforms to the conversion format used for JSON object names will be demangled.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#example","title":"Example","text":"<pre><code>      j             \u235d See above\n#.[JSON object]\n      \u2374JS\u21901 \u2395JSON j\n94\n      JS\n{\"a\":{\"b\":[\"string 1\",\"string 2\"],\"c\":true,\"d\":{\"e\":false,\"f\u237a\":[\"string 3\",123,1000.2,null]}}}\n\n      1(\u2395JSON\u2360'Compact' 0) j\n{\n  \"a\": {\n    \"b\": [\n      \"string 1\",\n      \"string 2\"\n    ],\n    \"c\": true,\n    \"d\": {\n      \"e\": false,\n      \"f\u237a\": [\n        \"string 3\",\n        123,\n        1000.2,\n        null\n      ]\n    }\n  }\n}\n</code></pre> <p>If there are any mis-matches between the values in <code>Y[;3]</code> and the types in <code>Y[;4]</code>, <code>\u2395JSON</code> will signal <code>DOMAIN ERROR</code> and report the first row where there is a mis-match (<code>\u2395IO</code> sensitive) as illustrated in the following example.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#example_1","title":"Example","text":"<pre><code>      M\u2190(\u2395JSON\u2360'Format' 'M')'{\"values\": [ 75, 300 ]}'\n      M\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2510\n\u25020\u2502      \u2502   \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502values\u2502   \u25022\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502      \u250275 \u25023\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502      \u2502300\u25023\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2518\n\n      M[3;3]\u2190\u2282'75' \u235d character not numeric\n\n      M            \u235d but looks the same as before\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2510\n\u25020\u2502      \u2502   \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502values\u2502   \u25022\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502      \u250275 \u25023\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502      \u2502300\u25023\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2518\n      1 (\u2395JSON\u2360 'Format' 'M')M\nDOMAIN ERROR: Value does not match the specified type in row 3\n      1(\u2395JSON\u2360'Format' 'M')M\n     \u2227\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#charset-example","title":"Charset Example","text":"<pre><code>      ns\u2190\u2395NS ''\n      ns.d\u00e9\u2190'D\u00c9'\n      ns.d\u00e9\nD\u00c9\n      (\u2395JSON\u2360'Dialect' 'JSON5') ns\n{d\u00e9:\"D\u00c9\"}\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#high-rank-example","title":"High Rank Example","text":"<pre><code>      d\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2  \u2502ABC                      \u2502\n\u2502A B  \u2502DEF                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021 2 3\u25021            0.5         \u2502\n\u25024 5 6\u25020.3333333333 0.25        \u2502\n\u2502     \u2502                         \u2502\n\u2502     \u25020.2          0.1666666667\u2502\n\u2502     \u25020.1428571429 0.125       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      1 \u2395JSON d\nDOMAIN ERROR: JSON export: the right argument cannot be converted (\u2395IO=1)\n      1 \u2395JSON d\n        \u2227\n      1 (\u2395JSON\u2360'HighRank' 'Split') d\n[[[[1,2],\"AB\"],[\"ABC\",\"DEF\"]],[[[1,2,3],[4,5,6]],...\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#raw-text","title":"Raw Text","text":"<p>An enclosed character vector is inserted into the result of  JSON export as raw text. This feature may be used to export special JSON values such as null, true and false. Without the extra enclosure, the character vectors are exported as strings:</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#example_2","title":"Example","text":"<pre><code>      \u2395JSON 'null' 'true' 'false'\n[\"null\",\"true\",\"false\"]\n      \u2395JSON \u2282\u00a8'null' 'true' 'false'\n[null,true,false]\n</code></pre> <p>The same mechanism may be used to inject any raw text, although unless this is valid JSON it cannot then be re-imported.</p> <p>The following example illustrates how JavaScript objects may be exported. In the example, the object is a JavaScript function which is specified by the contents of an enclosed character vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#example_3","title":"Example","text":"<pre><code>\n     'Slider' \u2395NS ''\n      Slider.range\u2190\u2282'true'         \u235d Note the \u2282\n      Slider.min\u21900\n      Slider.max\u2190500\n      Slider.values\u219075 300\n\n      fn1\u2190' function( event, ui ) {'\n      fn2\u2190'$( \"#amount\" ).val( \"$\" + ui.values[ 0 ] +'\n      fn2,\u2190' \" - $\" + ui.values[ 1 ] );}'\n\n      Slider.slide\u2190,/fn1 fn2 \u235d Enclosed character vec\n</code></pre> <pre><code>      \u2374JS\u21901 \u2395JSON Slider\n159\n      JS\n{\"max\":500,\"min\":0,\"range\":true,\"slide\": function( event, ui ) {$( \\\"#amount\\\" ).val( \\\"$\\\" + ui.values[ 0 ] + \\\" - $\\\" + ui.values[ 1 ] );},\"values\":[75,300]}\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#wrappers","title":"Wrappers","text":"<p>A wrapper is an enclosed vector of the form:</p> <pre><code>     \u2282(code special)\n</code></pre> <p>The nature of the <code>special</code> data structure is identified within the wrapper by a leading numeric code. Code 1 is used to identify JSON values such as <code>null</code>, <code>true</code> and <code>false</code>. Codes 2, 3 and 4 are used to identify different forms of datasets.</p> <p>This wrapper mechanism has been chosen to identify special treatment because a scalar enclosure cannot be represented in JSON/JavaScript.</p> <p>A wrapper may be specified directly in the right argument to <code>\u2395JSON</code> and/or as part of the array structure specified by the right argument, as a sub-array or in a namespace. This allows a special array to be processed appropriately as part of a general data structure that is to be rendered in JSON notation.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#wrappers-for-special-json-values","title":"Wrappers for special JSON values","text":"<p>Wrappers may be used to export JSON special values such as null, true and false using code 1. This mechanism is supplementary to the use of enclosed character vectors. See Raw Text on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/json/#example_4","title":"Example","text":"<pre><code>      \u2395JSON\u2282\u00a8(1 'null')(1 'true')(1 'false')\n[null,true,false]\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/map/","title":"Map","text":"Map File R\u2190{X}\u2395MAP Y <p><code>\u2395MAP</code> function associates a mapped file with an APL array in the workspace.</p> <p>Two types of mapped files are supported; APL and raw. An APL mapped file contains the binary representation of a Dyalog APL array, including its header. A file of this type must be created using the  utility function <code>\u2206MPUT</code> (supplied in the util workspace). When you map an APL file, the rank, shape and data type of the array is obtained from the information on the file.</p> <p>A raw mapped file is an arbitrary collection of bytes. When you map a raw file, you must specify the characteristics of the APL array to be associated with this data. In particular, the data type and its shape.</p> <p>The type of mapping is determined by the presence (raw) or absence (APL) of the left argument to <code>\u2395MAP</code>.</p> <p>The right argument <code>Y</code> specifies the name of the file to be mapped and, optionally, the access type and a start byte in the file. <code>Y</code> may be a simple character vector, or a 2 or 3-element nested vector containing:</p> <ol> <li>file name (character scalar/vector)</li> <li>access code (character scalar/vector) : one of : <code>'R'</code> or <code>'r'</code> (read-only access), <code>'W'</code> or <code>'w'</code> (read-write access). If not specified, the file is mapped  read-only.</li> <li>start byte offset (integer scalar/vector). This is only applicable for read-only access and is not supported for read-write access. It must be a multiple of the word size (4 on 32-bit systems, 8 on 64-bit systems). The default is 0.</li> </ol> <p>If you map a file with read-only access you may modify the corresponding array in the workspace, however your changes are not written back to the file.</p> <p>If <code>X</code> is specified, it defines the type and shape to be associated with raw data on file. <code>X</code> must be an integer scalar or vector. The first item of <code>X</code> specifies the data type and must be one of the following values:</p> Classic Edition 11, 82, 83, 163, 323 or 645 Unicode Edition 11, 80, 83, 160, 163, 320, 323 or 645 <p>The values are more fully explained in \"Data Representation (Monadic)\" on page 1.</p> <p>Following items determine the shape of the mapped array. A value of <code>\u00af1</code> on any (but normally the first) axis in the shape is replaced by the system to mean: read as many complete records from the file as possible. Only one axis may be specified in this way. Note that if    <code>X</code> is a singleton, the data on the file is mapped as a scalar and only the first value on the file is accessible.</p> <p>If no left argument is given, file is assumed to contain a simple APL array, complete with header information (type, rank, shape, etc.). Such mapped files may only be updated by changing the associated array using indexed/pick assignment: <code>var[a]\u2190b</code>, the new values must be of the same type as the originals.</p> <p>Note that a raw mapped file may be updated only if its file offset is 0. Note also that Windows does not support mapped files of zero length.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/map/#examples","title":"Examples","text":"<p>Map raw file as a read-only vector of doubles:</p> <pre><code>      vec\u2190645 \u00af1 \u2395MAP'c:\\myfile'\n</code></pre> <p>Map raw file as a 20-column read-write matrix of 1-byte integers:</p> <pre><code>      mat\u219083 \u00af1 20 \u2395MAP'c:\\myfile' 'W' \n</code></pre> <p>Replace some items in mapped file:</p> <pre><code>      mat[2 3;4 5]\u21902 2\u2374\u23734\n</code></pre> <p>Map bytes 100-160 in raw file as a <code>5\u00d72</code> read-only matrix of doubles:</p> <pre><code>      dat\u2190645 5 2 \u2395MAP'c:\\myfile' 'R' 80\n</code></pre> <p>Put simple 4-byte integer array on disk ready for mapping:</p> <pre><code>      (\u228383 323 \u2395DR 2 3 4\u2374\u237324)\u2206MPUT'c:\\myvar'\n</code></pre> <p>Then, map a read-write variable:</p> <pre><code>      var\u2190\u2395MAP'c:\\myvar' 'w' \n</code></pre> <p>Note that a mapped array need not be named. In the following example, a 'raw' file is mapped, summed and released, all in a single expression:</p> <pre><code>      +/163 \u00af1 \u2395MAP'c:\\shorts.dat'\n42\n</code></pre> <p>If you fail to specify the shape of the data, the data on file will be mapped as a scalar and only the first value in the file will be accessible:</p> <pre><code>      83 \u2395MAP 'myfile'   \u235d map FIRST BYTE of file.\n\u00af86\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/map/#compatibility-between-editions","title":"Compatibility between Editions","text":"<p>In the Unicode Edition <code>\u2395MAP</code> will fail with a <code>TRANSLATION ERROR</code> (event number 92) if you attempt to map an APL file which contains character data type 82.</p> <p>In order for the Unicode Edition to correctly interpret data in a raw file that was written using data type 82, the file may be mapped with data type 83 and the characters extracted by indexing into <code>\u2395AVU</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/","title":"Na","text":"Name Association {R}\u2190{X}\u2395NA Y <p><code>\u2395NA</code> provides access from APL to compiled functions within a library. A library is implemented  according to the Operating System as follows:</p> <ul> <li>a Dynamic Link Library(DLL) under Windows</li> <li>a Shared Library (.so or .dylib) under Linux or macOS</li> <li>a static library (.a) under AIX</li> </ul> <p>A DLL The term DLL is used herein as a generic name for one of these libraries.  is a collection of functions typically written in C (or C++) each of which may take arguments and return a result.</p> <p>Instructional examples using <code>\u2395NA</code> can be found in the supplied workspace <code>quadna</code>.</p> <p>The DLL may be part of the standard operating system software, a library purchased from a third party supplier, or one that you have written yourself.</p> <p>The right argument <code>Y</code> is a character vector that identifies the name and syntax of the function to be associated. The left argument <code>X</code> is a character vector that contains the name to be associated with the external function. If the <code>\u2395NA</code> is successful, a function (name class 3) is established in the active workspace with name <code>X</code>. If <code>X</code> is omitted, the name of the external function itself is used for the association.</p> <p>The shy result <code>R</code> is a character vector containing the name of the external function that was fixed.</p> <p>For example, math.dll might be a library of mathematical functions containing a function divide.</p> <p>In a compiled language such as C, the types of arguments and results of functions must be declared explicitly. Typically, these types will be published with the documentation that accompanies the DLL. For example, function divide might be declared:  double divide(int32_t, int32_t);</p> <p>which means that it expects two long (4-byte) integer arguments and returns a double (8-byte) floating point result. Notice the correspondence between the C declaration and the right argument of <code>\u2395NA</code>:     C:             double    divide       (int32_t,  int32_t);    APL:  'div' \u2395NA 'F8    math|divide       I4        I4 '</p> <p>So to associate the APL name <code>div</code> with this external function:</p> <pre><code>      'div' \u2395NA 'F8 math|divide I4 I4'\n</code></pre> <p>where <code>F8</code> and <code>I4</code>, specify the types of the result and arguments expected by divide. The association has the effect of establishing a new function: <code>div</code> in the workspace, which when called, passes its arguments to divide and returns the result.</p> <pre><code>      )fns\ndiv\n      div 10 4\n2.5\n</code></pre> <p>It is imperative that care be taken when coding type declarations. A DLL cannot check types of data passed from APL. A wrong type declaration will lead to erroneous results or may even cause the workspace to become corrupted and crash. During development, you may wish to prevent this happening. See: ErrorOnExternalException parameter ErrorOnExternalException on page 1.</p> <p>The full syntax for the right argument of <code>\u2395NA</code> is:</p> <pre><code>    [result] library|function [arg1] [arg2] ...\n</code></pre> <p>Note that functions associated with DLLs are never dyadic. All arguments are passed as items of a (possibly nested) vector on the right of the function.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#locating-the-dll","title":"Locating the DLL","text":"<p>The DLL may be specified using a full pathname, file extension, and function type.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#be-aware","title":"Be aware","text":"<p>A 32-bit interpreter can only load 32-bit DLLs/shared libraries; a 64-bit interpreter can only load 64-bit DLLs/shared libraries.</p> <p>If a DLL/shared library has a missing dependency, the error generated by the operating system, and therefore reported by Dyalog will suggest that the DLL/shared library that was explicitly called in the <code>\u2395NA</code> call is missing.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#pathname","title":"Pathname:","text":"<p>APL uses the LoadLibrary() system function under Windows or dlopen() under UNIX, Linux and macOS to load the DLL. If a full or relative pathname is omitted, these functions search a list of directories determined by the operating system. This list always includes the directory which contains the Dyalog program, and on all non-Windows platforms, $DYALOG/lib. For further details, see the operating system documentation about these functions.</p> <p>Alternatively, a full or relative pathname may be supplied in the usual way:</p> <pre><code>      \u2395NA'... c:\\mydir\\mydll|foo ...'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#errors","title":"Errors:","text":"<p>If the specified DLL (or a dependent DLL) fails to load it will generate:</p> <pre><code>FILE ERROR 2 No such file or directory\n</code></pre> <p>It is frequently the case that this error is a result of a missing dependency; operating systems do not return error codes which allow the interpreter to generate a more specific error.</p> <p>If the DLL loads successfully, but the specified library function is not accessible, it will generate:</p> <pre><code>VALUE ERROR\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#file-extension","title":"File Extension:","text":"<p>Under Windows, if the file extension is omitted, .dll is assumed. Note that some DLLs are in fact .exe files, and in this case the extension must be specified explicitly:</p> <pre><code>      \u2395NA'... mydll.exe|foo ...'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#libca-on-non-windows-platforms","title":"libc.a on Non-Windows Platforms","text":"<p>On non-Windows platforms many of the most useful system library functions appear in <code>libc.a</code>. The <code>quadna</code> workspace includes the function <code>NonWindows.Setup</code> which has code which will locate <code>libc.a</code> on each platform.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#data-type-coding-scheme","title":"Data Type Coding Scheme","text":"<p>The type coding scheme introduced above is of the form:</p> <p>[direction] [special] type [width] [array][[count]]</p> <p>The options are summarised in the following table and their functions detailed below.</p> Description Symbol Meaning Direction <code>&lt;</code> Pointer to array input to DLL function. <code>&gt;</code> Pointer to array output from DLL function <code>=</code> Pointer to input/output array. Special <code>0</code> Null-terminated string. <code>#</code> Byte-counted string Type <code>I</code> int <code>U</code> unsigned int <code>C</code> char <code>T</code> char Classic Edition:  - translated to/from ANSI <code>F</code> float <code>D</code> decimal <code>J</code> complex <code>P</code> uintptr-t equivalent to U4 on 32-bit versions and U8 on 64-bit versions <code>A</code> APL array <code>Z</code> APL array with header (as passed to a TCP/IP socket) Width <code>1</code> 1-byte <code>2</code> 2-byte <code>4</code> 4-byte <code>8</code> 8-byte <code>16</code> 16-byte (128-bit) Array <code>[n]</code> Array of length n elements <code>[]</code> Array, length determined at call-time Structure <code>{...}</code> Structure. Count <code>[int]</code> Rather than explicitly declaring multiple adjacent occurrences of the same the count option may be used <p>In the Classic Edition, <code>C</code> specifies untranslated character, whereas <code>T</code> specifies that the character data will be translated to/from <code>\u2395AV</code>.</p> <p>In the Unicode Edition, C and T are identical (no translation of character data is performed) except that for C the default width is 1 and for T the default width is \"wide\" (2 bytes under Windows, 4 bytes under UNIX, Linux or macOS).</p> <p>The use of T with default width is recommended to ensure portability between Editions.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#direction","title":"Direction","text":"<p>C functions accept data arguments either by value or by address. This distinction is indicated by the presence of a '' or '[]' in the argument declaration: int  num1;       // value of num1 passed. int num2;       // Address of num2 passed. int num3[];      // Address of num3 passed.</p> <p>An argument (or result) of an external function of type pointer, must be matched in the <code>\u2395NA</code> call by a declaration starting with one of the characters: <code>&lt;</code>, <code>&gt;</code>, or <code>=</code>.</p> <p>In C, when an address is passed, the corresponding value can be used as either an input or an output variable. An output variable means that the C function overwrites values at the supplied address. Because APL is a call-by-value language, and doesn't have pointer types, we accommodate this mechanism by distinguishing output variables, and having them returned explicitly as part of the result of the call.</p> <p>This means that where the C function indicates a pointer type, we must code this as starting with one of the characters: <code>&lt;</code>, <code>&gt;</code> or <code>=</code>.</p> &lt; indicates that the address of the argument will be used by C as an input variable and values at the address will not be over-written. &gt; indicates that C will use the address as an output variable. In this case, APL must allocate an output array over which C can write values. After the call, this array will be included in the nested result of the call to the external function. = indicates that C will use the address for both input and output. In this case, APL duplicates the argument array into an output buffer whose address is passed to the external function. As in the case of an output only array, the newly modified copy will be included in the nested result of the call to the external function."},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#examples","title":"Examples","text":"&lt;I2 Pointer to 2-byte integer - input to external function &gt;C Pointer to character output from external function. =T Pointer to character input to and output from function. =A Pointer to APL array modified by function."},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#special","title":"Special","text":"<p>In C it is common to represent character strings as null-terminated or byte counted arrays. These special data types are indicated by inserting the symbol <code>0</code> (null-terminated) or <code>#</code> (byte counted) between the direction indicator (<code>&lt;</code>, <code>&gt;</code>, <code>=</code>) and the type (<code>T</code> or <code>C)</code> specification. For example, a pointer to a null-terminated input character string is coded as <code>&lt;0T[]</code>, and an output one coded as <code>&gt;0T[]</code>.</p> <p>Note that while appending the array specifier '<code>[]</code>' is formally correct, because the presence of the special qualifier (<code>0</code> or <code>#</code>) implies an array, the '<code>[]</code>' may be omitted: <code>&lt;0T</code>, <code>&gt;0T</code>, <code>=#C</code>, etc.</p> <p>Note also that the 0 and # specifiers may be used with data of all types (excluding <code>A</code> and <code>Z</code>) and widths. For example, in the Classic Edition, <code>&lt;0U2</code> may be useful for dealing with Unicode.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#type","title":"Type","text":"<p>The data type of the argument may be one of the following characters and  may be specified in lower or upper case:</p> Code Type Description <code>I</code> Integer The value is interpreted as a 2s complement signed integer <code>U</code> Unsigned integer The value is interpreted as an unsigned integer <code>C</code> Character The value is interpreted as a character. In the Unicode Edition, the value maps directly onto a Unicode code point. In the Classic Edition, the value is interpreted as an index into <code>\u2395AV</code> . This means that <code>\u2395AV</code> positions map onto corresponding ANSI positions . For example, with <code>\u2395IO=0</code> : <code>\u2395AV[35] = 's'</code> , maps to ANSI[35] = ' <code>T</code> Translated character The value is interpreted as a character. In the Unicode Edition, the value maps directly onto a Unicode code point. In the Classic Edition, the value is translated using standard Dyalog <code>\u2395AV</code> to ANSI translation. This means that <code>\u2395AV</code> characters map onto corresponding ANSI characters . For example, with <code>\u2395IO=0</code> : <code>\u2395AV[35] = 's'</code> maps to ANSI[115] = 's' <code>UTF</code> Unicode encoded <code>&gt;0UTF8[]</code> will translate to a UTF-8 encoded string <code>&lt;0UTF16[]</code> will translate from a UTF-16LE encoded string <code>F</code> Float The value is interpreted as an IEEE 754-2008 binary64 floating point number <code>D</code> Decimal The value is interpreted as an IEEE 754-2008 decimal128 floating point number (DPD format on AIX, BID format on other platforms) <code>J</code> Complex <code>P</code> uintptr-t This is equivalent to U4 on 32-bit versions and U8 on 64-bit versions <code>\u2207</code> Function pointer This allows the passing of an APL function for the function to call <code>A</code> APL array This is the same format as is used to transmit APL arrays to an Auxiliary Processor (AP) <code>Z</code> APL array with header This is the same format as is used to transmit APL arrays over TCP/IP Sockets"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#width","title":"Width","text":"<p>The type specifier may be followed by the width of the value in bytes. For example:</p> I4 4-byte signed integer. U2 2-byte unsigned integer. F8 8-byte floating point number. F4 4-byte floating point number. D16 16-byte decimal floating-point number Type Possible values for Width Default value for Width <code>I</code> 1, 2, 4, 8 4 <code>U</code> 1, 2, 4, 8 4 <code>C</code> 1,2,4 1 <code>T</code> 1,2,4 wide character(see below) <code>UTF</code> 8,16 none <code>F</code> 4, 8 8 <code>D</code> 16 16 <code>J</code> 16 16 <code>P</code> Not applicable <code>\u2207</code> Not applicable <code>A</code> Not applicable <code>Z</code> Not applicable <p>In the Unicode Edition, the default width is the width of a wide characteraccording to the convention of the host operating system. This translates to T2 under Windows and T4 under UNIX, Linux or macOS.</p> <p>Note that 32-bit versions can support 64-bit integer arguments, but not 64-bit integer results.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#examples_1","title":"Examples","text":"I2 16-bit integer &lt;I4 Pointer to input 4-byte integer U Default width unsigned integer =F4 Pointer to input/output 4-byte floating point number."},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#arrays","title":"Arrays","text":"<p>Arrays are specified by following the basic data type with <code>[n]</code> or <code>[]</code>, where <code>n</code> indicates the number of elements in the array. In the C declaration, the number of elements in an array may be specified explicitly at compile time, or determined dynamically at runtime. In the latter case, the size of the array is often passed along with the array, in a separate argument. In this case, <code>n</code>, the number of elements is omitted from the specification. Note that C deals only in scalars and rank 1 (vector) arrays. int vec[10];               // explicit vector length. unsigned size, list[];     // undetermined length. </p> <p>could be coded as:</p> I[10] vector of 10 ints. U U[] unsigned integer followed by an array of unsigned integers. <p>Confusion sometimes arises over a difference in the declaration syntax between C and <code>\u2395NA</code>. In C, an argument declaration may be given to receive a pointer to either a single scalar item, or to the first element of an array. This is because in C, the address of an array is deemed to be the address of its first element.    void foo (char *string);    char ch = 'a', ptr = \"abc\";    foo(&amp;ch);// call with address of scalar.    foo(ptr);// call with address of array.</p> <p>However, from APL's point of view, these two cases are distinct and if the function is to be called with the address of (pointer to) a scalar, it must be declared: <code>'&lt;T'</code>. Otherwise, to be called with the address of an array, it must be declared: <code>'&lt;T[]'</code>. Note that it is perfectly acceptable in such circumstances to define more than one name association to the same DLL function specifying different argument types:</p> <pre><code>      'FooScalar'\u2395NA'mydll|foo &lt;T'   \u22c4 FooScalar'a'\n      'FooVector'\u2395NA'mydll|foo &lt;T[]' \u22c4 FooVector'abc'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#structures","title":"Structures","text":"<p>Arbitrary data structures, which are akin to nested arrays, are specified using the symbols <code>{}</code>. For example, the code <code>{F8 I2}</code> indicates a structure comprised of an 8-byte floatfollowed by a 2-byte int. Furthermore, the code <code>&lt;{F8 I2}[3]</code> means an input pointer to an array of 3 such structures.</p> <p>For example, this structure might be defined in C thus: typedef struct {     double  f;     short   i; } mystruct;</p> <p>A function defined to receive a count followed by an input pointer to an array of such structures: void foo(unsigned count, mystruct *str);</p> <p>An appropriate <code>\u2395NA</code> declaration would be:</p> <pre><code>      \u2395NA'mydll.foo U &lt;{F8 I2}[]' \n</code></pre> <p>A call on the function with two arguments - a count followed by a vector of structures:</p> <pre><code>      foo 4,\u2282(1.4 3)(5.9 1)(6.5 2)(0 0)\n</code></pre> <p>Notice that for the above call, APL converts the two Boolean <code>(0 0)</code> elements to an 8-byte float and a 2-byte int, respectively.</p> <p>Note that if the C compiler would add extra space for alignment within a structure the <code>\u2395NA</code> syntax will need to code that explicitly. For example: typedef struct {     short i;     / most C compilers would add 6 bytes of alignment here /     double d; } mystruct;</p> <p>An appropriate <code>\u2395NA</code> declaration would be:</p> <pre><code>      \u2395NA'mydll.foo U &lt;{I2  {I1[6]} F8}[]'\n</code></pre> <p>A call on the function with two arguments - a count followed by a vector of structures:</p> <pre><code>      pad\u2190\u22826\u23740\n      foo 4,\u2282(3 pad 1.4)(1 pad 5.9 )(2 pad 6.5 )(0 pad 0)\n\n</code></pre> <p>A library designer tries to avoid defining structures that induce padding.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#count","title":"Count","text":"<p>If a definition includes multiple adjacent occurrences of the same item, the count syntax may be used rather than explicitly repeating the same definition.</p> <p>For example:</p> <p><code>&gt;I8[3]</code> rather than <code>&gt;I8 &gt;I8 &gt;I8</code></p> <p><code>{I8 U8 I8 P}[2]</code> rather than <code>{I8 U8 I8 P} {I8 U8 I8 P}</code></p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#using-a-function","title":"Using a Function","text":"<p>A DLL function may or may not return a result, and may take zero or more arguments. This syntax is reflected in the coding of the right argument of <code>\u2395NA</code>. However, notice that the corresponding associated APL function is a result-returning niladic (if it takes no arguments) or monadic function. It cannot be dyadic and it must always return a vector result - a null one if there is no output from the DLL function. See Result Vector section below. Examples of the various combinations are:</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#dll-function-non-result-returning","title":"DLL function Non-result-returning:","text":"<pre><code>\u2395NA    'mydll|fn1'          \u235d Niladic\n\u2395NA    'mydll|fn2 &lt;0T'      \u235d Monadic - 1-element arg\n\u2395NA    'mydll|fn3 =0T &lt;0T'  \u235d Monadic - 2-element arg\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#dll-function-result-returning","title":"DLL function Result-returning:","text":"<pre><code>\u2395NA 'I4 mydll|fn4'          \u235d Niladic\n\u2395NA 'I4 mydll|fn5 F8'       \u235d Monadic - 1-element arg\n\u2395NA 'I4 mydll|fn6 &gt;I4[] &lt;0T'\u235d Monadic - 2-element arg\n</code></pre> <p>When the external function is called, the number of elements in the argument must match the number defined in the <code>\u2395NA</code> definition. Using the examples above:</p> <pre><code>      fn1                   \u235d Niladic Function.\n      fn2, \u2282'Single String' \u235d 1-element arg\n      fn3 'This' 'That'     \u235d 2-element arg\n</code></pre> <p>Note in the second example, that you must enclose the argument string to produce a single item (nested) array in order to match the declaration. Dyalog converts the type of a numeric argument if necessary, so for example in <code>fn5</code> defined above, a Boolean value would be converted to double floating point (F8) prior to being passed to the DLL function.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#multi-threading","title":"Multi-Threading","text":"<p>Appending the '<code>&amp;</code>' character to the function name causes the external function to be run in its own system thread. For example:</p> <pre><code>      \u2395NA'... mydll|foo&amp; ...'\n</code></pre> <p>This means that other APL threads can run concurrently with the one that is calling the <code>\u2395NA</code> function.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#name-mangling","title":"Name Mangling","text":"<p>C++ and some other languages will by default mangle (or decorate) function names which are exported from a DLL file. The given external function name must exactly match the exported name, either by matching the name mangling or by ensuring the names exported from the library are not mangled.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#call-by-ordinal-number","title":"Call by Ordinal Number","text":"<p>Under Windows, a DLL may associate an ordinal number with any of its functions. This number may then be used to call the function as an alternative to calling it by name. Using <code>\u2395NA</code> to call by ordinal number uses the same syntax but with the function name replaced with its ordinal number. For example:</p> <pre><code>      \u2395NA'... mydll|57 ...'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#pointer-arguments","title":"Pointer Arguments","text":"<p>When passing pointer arguments there are three cases to consider.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#input-pointer","title":"&lt; Input pointer:","text":"<p>In this case you must supply the data array itself as argument to the function. A pointer to its first element is then passed to the DLL function.</p> <pre><code>      fn2 \u2282'hello'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#output-pointer","title":"&gt; Output pointer:","text":"<p>Here, you must supply the number of elements that the output will need in order for APL to allocate memory to accommodate the resulting array.</p> <pre><code>      fn6 10 'world'  \u235d 1st arg needs space for 10 ints.\n</code></pre> <p>Note that if you were to reserve fewer elements than the DLL function actually used, the DLL function would write beyond the end of the reserved array and may cause the interpreter to crash with a System Error (syserror 999 on Windows or SIGSEGV on UNIX, Linux or macOS).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#inputoutput","title":"=  Input/Output:","text":"<p>As with the input-only case, a pointer to the first element of the argument is passed to the DLL function. The DLL function then overwrites some or all of the elements of the array, and the new value is passed back as part of the result of the call. As with the output pointer case, if the input array were too short, so that the DLL wrote beyond the end of the array, the interpreter would almost certainly crash.</p> <pre><code>      fn3 '.....' 'hello'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#specifying-pointers-explicitly","title":"Specifying Pointers Explicitly","text":"<p><code>\u2395NA</code> syntax enables APL to pass arguments to DLL functions by value or address as appropriate. For example if a function requires an integer followed by a pointer to an integer: void fun(int valu, int *addr);</p> <p>You might declare and call it:</p> <pre><code>      \u2395NA'mydll|fun I &lt;I' \u22c4 fun 42 42\n</code></pre> <p>The interpreter passes the value of the first argument and the address of the second one.</p> <p>Two common cases occur where it is necessary to pass a pointer explicitly. The first is if the DLL function requires a null pointer, and the second is where you want to pass on a pointer which itself is a result from a DLL function.</p> <p>In both cases, the pointer argument should be coded as <code>P</code>. This causes APL to pass the pointer unchanged, by value, to the DLL function.</p> <p>In the previous example, to pass a null pointer, (or one returned from another DLL function), you must code a separate <code>\u2395NA</code> definition.</p> <pre><code>      'fun_null'\u2395NA'mydll|fun I P' \u22c4 fun_null 42 0\n</code></pre> <p>Now APL passes the value of the second argument (in this case 0 - the null pointer), rather than its address.</p> <p>Note that by using P, which is 4-byte for 32-bit processes and 8-byte for 64-bit processes, you will ensure that the code will run unchanged under both 32-bit and 64-bit versions of Dyalog APL.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#result-vector","title":"Result Vector","text":"<p>In APL, a function cannot overwrite its arguments. This means that any output from a DLL function must be returned as part of the explicit result, and this includes output via 'output' or 'input/output' pointer arguments.</p> <p>The general form of the result from calling a DLL function is a nested vector. The first item of the result is the defined explicit result of the external function, and subsequent items are implicit results from output, or input/output pointer arguments.</p> <p>The length of the result vector is therefore: 1 (if the function was declared to return an explicit result) + the number of output or input/output arguments.</p> <code>\u2395NA</code> Declaration Result Output Arguments Result Length <code>mydll|fn1</code> <code>0</code> `` <code>0</code> <code>mydll|fn2 &lt;0T</code> <code>0</code> <code>0</code> <code>0</code> <code>mydll|fn3 =0T &lt;0T</code> <code>0</code> <code>1 0</code> <code>1</code> <code>I4 mydll|fn4</code> <code>1</code> `` <code>1</code> <code>I4 mydll|fn5 F8</code> <code>1</code> <code>0</code> <code>1</code> <code>I4 mydll|fn6 &gt;I4[] &lt;0T</code> <code>1</code> <code>1 0</code> <code>2</code> <p>Note that the result vector from a function that is declared void() and has no output parameters is <code>\u236c</code> (zilde).</p> <p>As a convenience, if the result would otherwise be a 1-item vector, it is disclosed. Using the third example above:</p> <pre><code>      \u2374fn3 '.....' 'abc'\n5\n</code></pre> <p><code>fn3</code> has no explicit result; its first argument is input/output pointer; and its second argument is input pointer. Therefore as the length of the result would be 1, it has been disclosed.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#64-bit-integer-results","title":"64 bit integer results","text":"<p>When a 64 bit integer result is returned it is converted into 128 bit decimal floating point, because this is the only APL data type that can fully preserve all 64 bits of the result. If you wish to perform arithmetic with this value, you must set  <code>\u2395FR</code>  to 1287 in order to preserve the same precision. If this is not done then the precision will be 53 bits which might not be enough.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#callbacks","title":"Callbacks (\u2207)","text":"<p>Currently, support for a <code>\u2395NA</code> function to call an APL function is limited to the use of the NAG (National Algorithms Group) library of functions. This library is a FORTRAN library and FORTRAN passes arguments by reference (address) rather than by value. The expression:</p> <pre><code>   \u2207f8\u2190(P P P P)\n</code></pre> <p>declares a callback function that returns a double and takes 4 pointer arguments. The result can be any of the normal results. It is not possible to return a pointer. The arguments can be from 0 to 16 P values.</p> <p>The argument when passed can be the name of an APL function or the <code>\u2395OR</code> of a function.</p> <p>The function when called can then decode the pointer arguments appropriately using a <code>\u2395NA</code> of MEMCPY().</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#ansi-unicode-versions-of-library-calls","title":"ANSI /Unicode Versions of Library Calls","text":"<p>Under Windows, most library functions that take character arguments, or return character results have two forms: one Unicode (Wide) and one ANSI. For example, a function such as MessageBox(), has two forms MessageBoxA() and MessageBoxW(). The A stands for ANSI (1-byte) characters, and the W for wide (2-byte Unicode) characters.</p> <p>It is essential that you associate the form of the library function that is appropriate for the Dyalog Edition you are using, i.e. MessageBoxA() for the Classic Edition, but MessageBoxW() for the Unicode Edition.</p> <p>Whilst this is convenient it is not complete. It is adequate for character arrays that consist of characters from UCS-2 (i.e. those that will fit in an array with a <code>\u2395DR</code> of 80 or 160). If a more complete support is required then the W form of the function would be required and explicit use of UTF16 specified.</p> <p>To simplify writing portable code for both Editions, you may specify the character <code>*</code> instead of <code>A</code> or <code>W</code> at the end of a function name. This will be replaced by <code>A</code> in the Classic Edition and <code>W</code> in the Unicode Edition.</p> <p>The default name of the associated function (if no left argument is given to <code>\u2395NA</code>), will be without the trailing letter (<code>MessageBox</code>).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#type-definitions","title":"Type Definitions","text":"<p>The C language encourages the assignment of defined names to primitive and complex data types using its #define and typedef mechanisms. Using such abstractions enables the C programmer to write code that will be portable across many operating systems and hardware platforms.</p> <p>Windows software uses many such names and Microsoft documentation will normally refer to the type of function arguments using defined names such as HANDLE or LPSTR rather than their equivalent C primitive types: int or char*.</p> <p>It is beyond the scope of this manual to list all the Microsoft definitions and their C primitive equivalents, and indeed, DLLs from sources other than Microsoft may well employ their own distinct naming conventions.</p> <p>In general, you should consult the documentation that accompanies the DLL in order to convert typedefs to primitive C types and thence to <code>\u2395NA</code> declarations. The documentation may well refer you to the 'include' files which are part of the Software Development Kit, and in which the types are defined.</p> <p>The following table of some commonly encountered Windows typedefs and their <code>\u2395NA</code> equivalents might prove useful.</p> Windows typedef <code>\u2395NA</code> equivalent HWND <code>P</code> HANDLE <code>P</code> GLOBALHANDLE <code>P</code> LOCALHANDLE <code>P</code> DWORD <code>U4</code> WORD <code>U2</code> BYTE <code>U1</code> LPSTR <code>=0T[] (note 1)</code> LPCSTR <code>&lt;0T[] (note 2)</code> WPARAM <code>U (note 3)</code> LPARAM <code>U4 (note 3)</code> LRESULT <code>I4</code> BOOL <code>I</code> UINT <code>U</code> ULONG <code>U4</code> ATOM <code>U2</code> HDC <code>P</code> HBITMAP <code>P</code> HBRUSH <code>P</code> HFONT <code>P</code> HICON <code>P</code> HMENU <code>P</code> HPALETTE <code>P</code> HMETAFILE <code>P</code> HMODULE <code>P</code> HINSTANCE <code>P</code> COLORREF <code>{U1[4]}</code> POINT <code>{I I}</code> POINTS <code>{I2 I2}</code> RECT <code>{I I I I}</code> CHAR <code>T or C</code>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#notes","title":"Notes","text":"<ol> <li>LPSTR is a pointer to a null-terminated string. The definition does not indicate whether this is input or output, so the safest coding would be <code>=0T[]</code> (providing the vector you supply for input is long enough to accommodate the result). You may be able to improve simplicity or performance if the documentation indicates that the pointer is 'input only' (&lt;<code>0T[]</code>) or 'output only' (&gt;<code>0T[]</code>). See Direction above.</li> <li>LPCSTR is a pointer to a constant null-terminated string and therefore coding <code>&lt;0T[]</code> is safe.</li> <li> <p>WPARAM is an unsigned value, LPARAM is signed. They are 32 bit values in a 32-bit APL, and 64-bit in a 64 bit APL. You should consult the documentation for the specific function that you intend to call to determine what type they represent</p> </li> <li> <p>The use of type T with default width ensures portability of code between Classic and Unicode Editions. In the Classic Edition, T (with no width specifier) implies 1-byte characters which are translated between <code>\u2395AV</code> and ASCII, while in the Unicode Edition, T (with no width specifier) implies 2-byte (Unicode) characters.</p> </li> </ol>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#the-dyalog-dll","title":"The Dyalog DLL","text":"<p>The Dyalog DLL (see  Run-Time Applications and ComponentsRun-Time Applications and Components on page 1) contains three functions: MEMCPY, STRNCPY and STRLEN.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#memcpy","title":"MEMCPY","text":"<p><code>MEMCPY</code> is an extremely versatile function used for moving arbitrary data between memory buffers.</p> <p>Its C definition is: void MEMCPY(       // copy memory       void to,     // target address       void *fm,     // source address       size_t size   // number of bytes to copy       );</p> <p><code>MEMCPY</code> copies size bytes starting from source address fm, to destination address to. The source and destination areas should not overlap; if they do the behaviour is undefined and the result is the first argument.</p> <p><code>MEMCPY</code>'s versatility stems from being able to associate to it using many different type declarations.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example","title":"Example","text":"<p>Suppose a global buffer (at address: <code>addr</code>) contains (<code>numb</code>) double floating point numbers. To copy these to an APL array, we could define the association:</p> <pre><code>      'doubles' \u2395NA 'dyalog32|MEMCPY &gt;F8[] I4 U4'\n      doubles numb addr (numb\u00d78)\n</code></pre> <p>Notice that:</p> <ul> <li>As the first argument to <code>doubles</code> is an output argument, we must supply the number of elements to reserve for the output data.</li> <li><code>MEMCPY</code> is defined to take the number of bytes to copy, so we must multiply the number of elements by the element size in bytes.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example_1","title":"Example","text":"<p>Suppose that a database application requires that we construct a record in global memory prior to writing it to file. The record structure might look like this: typedef struct {         int empno;// employee number.         float salary;// salary.         char name[20];// name.         } person;</p> <p>Then, having previously allocated memory (<code>addr</code>) to receive the record, we can define:</p> <pre><code>      'prec' \u2395NA 'dyalog64|MEMCPY P &lt;{P F4 T[20]} P'\n      prec addr(99 12345.60 'Charlie Brown')(4+4+20)\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#strncpy","title":"STRNCPY","text":"<p><code>STRNCPY</code> is used to copy null-terminated strings between memory buffers.</p> <p>Its C definition is: void STRNCPY(// copy null-terminated string         char to,// target address         char *fm,// source address         size_t size// MAX number of chars to copy         );</p> <p><code>STRNCPY</code> copies a maximum of size characters from the null-terminated source string at address fm, to the destination address to. If the source and destination strings overlap, the result is the first argument.</p> <p>If the source string is shorter than size, a null character is appended to the destination string.</p> <p>If the source string (including its terminating null) is longer than size, only size characters are copied and the resulting destination string is not null-terminated</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example_2","title":"Example","text":"<p>Suppose that a database application returns a pointer (<code>addr</code>) to a structure that contains two (max 20-char) null-terminated strings. typedef struct {  // null-terminated strings:         char first[20];  // first name (max 19 chars + 1 null).         char last[20];   // last name. (max 19 chars + 1 null).         } name;</p> <p>To copy the names from the structure:</p> <pre><code>      'get'\u2395NA'dyalog64|STRNCPY &gt;0T1[] P U4'\n      get 20 addr 20\nCharlie\n      get 20 (addr+20) 20\nBrown\n</code></pre> <p>Note that (as this is a 64-bit example), <code>\u2395FR</code> must be 1287 for the addition to be reliable.</p> <p>To copy data from the workspace into an already allocated (<code>new</code>) structure:</p> <pre><code>      'put'\u2395NA'dyalog32|STRNCPY I4 &lt;0T[] U4'\n      put new 'Bo' 20\n      put (new+4) 'Peep' 20\n</code></pre> <p>Notice in this example that you must ensure that names no longer than 19 characters are passed to <code>put</code>. More than 19 characters would not leave STRNCPY enough space to include the trailing null, which would probably cause the application to fail.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#strncpya","title":"STRNCPYA","text":"<p>This is a synonym for STRNCPY. It is there so that STRNCPY* (on Windows) selects between STRNCPYA and STRNCPYW.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#strncpyw","title":"STRNCPYW","text":"<p>This is a cover for the C standard function wcsncpy(). It is named this way so that (on Windows) STRNCPY* will behave helpfully.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#strlen","title":"STRLEN","text":"<p><code>STRLEN</code> calculates the length of a C string (a 0-terminated string of bytes in memory). Its C declaration is: size_t STRLEN(         // calculate length of string         const char *s    // address of string         );</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example_3","title":"Example","text":"<p>Suppose that a database application returns a pointer (<code>addr</code>) to a null-terminated string and you do not know the upper bound on the length of the string.</p> <p>To copy the string into the workspace:</p> <pre><code>\n      'len'\u2395NA'P dyalog32|STRLEN P'\n      'cpy'\u2395NA'dyalog32|MEMCPY &gt;T[] P P'\n      cpy l addr (l\u2190len addr)\nBartholemew\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#examples_2","title":"Examples","text":"<p>The following examples all use functions from the Microsoft Windows user32.dll.</p> <p>This DLL should be located in a standard Windows directory, so you should not normally need to give the full path name of the library. However if trying these examples results in the error message <code>FILE ERROR 1 No such file or directory</code>, you must locate the DLL and supply the full path name (and possibly extension).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example-1-getcaretblinktime","title":"Example 1: GetCaretBlinkTime()","text":"<p>The Windows function GetCaretBlinkTime retrieves the caret blink rate.  It takes no arguments and returns an unsigned int and is declared as follows:</p> <p>UINT GetCaretBlinkTime(void);</p> <p>The following statements would provide access to this routine through an APL function of the same name.</p> <pre><code>      \u2395NA 'U user32|GetCaretBlinkTime'\n      GetCaretBlinkTime\n530\n</code></pre> <p>The following statement would achieve the same thing, but using an APL function called <code>BLINK</code>.</p> <pre><code>\n      'BLINK' \u2395NA 'U user32|GetCaretBlinkTime'\n      BLINK\n530\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example-2-setcaretblinktime","title":"Example 2: SetCaretBlinkTime()","text":"<p>The Windows function SetCaretBlinkTime sets the caret blink rate.  It takes a single unsigned int argument, does not return a result and is declared as follows:</p> <p>void SetCaretBlinkTime(UINT);</p> <p>The following statements would provide access to this routine through an APL function of the same name:</p> <pre><code>\n      \u2395NA 'user32|SetCaretBlinkTime U'\n      SetCaretBlinkTime 1000\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example-3-messagebox","title":"Example 3: MessageBox()","text":"<p>The Windows function MessageBox displays a standard dialog box on the screen and awaits a response from the user.  It takes 4 arguments.  The first is the window handle for the window that owns the message box.  This is declared as an unsigned int.  The second and third arguments are both pointers to null-terminated strings containing the message to be displayed in the Message Box and the caption to be used in the window title bar.  The 4th argument is an unsigned int that specifies the Message Box type.  The result is an int which indicates which of the buttons in the message box the user has pressed.  The function is declared as follows: int MessageBox(HWND, LPCSTR, LPCSTR, UINT);</p> <p>The following statements provide access to this routine through an APL function of the same name. Note that the 2nd and 3rd arguments are both coded as input pointers to type T null-terminated character arrays which ensures portability between Editions.</p> <pre><code>      \u2395NA 'I user32|MessageBox* P &lt;0T &lt;0T U'\n</code></pre> <p>The following statement displays a Message Box with a stop sign icon together with 2 push buttons labelled OK and Cancel (this is specified by the value 19).</p> <pre><code>      MessageBox 0 'Message' 'Title' 19\n</code></pre> <p>The function works equally well in the Unicode Edition because the &lt;0T specification is portable.</p> <pre><code>      MessageBox 0 '\u03a4\u03bf \u039c\u03ae\u03bd\u03c5\u03bc\u03b1' '\u039f \u03a4\u03af\u03c4\u03bb\u03bf\u03c2' 19\n</code></pre> <p>Note that a simpler, portable (and safer) method for displaying a Message Box is to use Dyalog APL's primitive <code>MsgBox</code> object.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example-4-findwindow","title":"Example 4: FindWindow()","text":"<p>The Windows function FindWindow obtains the window handle of a window which has a given character string in its title bar.  The function takes two arguments.  The first is a pointer to a null-terminated character string that specifies the window's class name. However, if you are not interested in the class name, this argument should be a NULL pointer.  The second is a pointer to a character string that specifies the title that identifies the window in question.  This is an example of a case described above where two instances of the function must be defined to cater for the two different types of argument.  However, in practice this function is most often used without specifying the class name.  The function is declared as follows:</p> <p>HWND FindWindow(LPCSTR, LPCSTR);</p> <p>The following statement associates the APL function <code>FW</code> with the second variant of the FindWindow call, where the class name is specified as a NULL pointer.  To indicate that APL is to pass the value of the NULL pointer, rather than its address, we need to code this argument as <code>I4</code>.</p> <pre><code>      'FW' \u2395NA 'P user32|FindWindow* P &lt;0T'\n</code></pre> <p>To obtain the handle of the window entitled \"CLEAR WS - Dyalog APL/W\":</p> <pre><code>      \u2395\u2190HNDL\u2190FW 0 'CLEAR WS - Dyalog APL/W'\n59245156\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example-5-getwindowtext","title":"Example 5: GetWindowText()","text":"<p>The Windows function GetWindowText retrieves the caption displayed in a window's title bar.  It takes 3 arguments.  The first is an unsigned int containing the window handle.  The second is a pointer to a buffer to receive the caption as a null-terminated character string.  This is an example of an output array.  The third argument is an int which specifies the maximum number of characters to be copied into the output buffer.  The function returns an int containing the actual number of characters copied into the buffer and is declared as follows:</p> <p>int GetWindowText(HWND, LPSTR, int);</p> <p>The following associates the \"GetWindowText\" DLL function with an APL function of the same name.  Note that the second argument is coded as \"<code>&gt;0T</code>\" indicating that it is a pointer to a character output array.</p> <pre><code>      \u2395NA 'I user32|GetWindowText* P &gt;0T I'\n</code></pre> <p>Now change the Session caption using <code>)WSID</code> :</p> <pre><code>      )WSID MYWS\nwas CLEAR WS\n</code></pre> <p>Then retrieve the new caption (max length 255) using window handle <code>HNDL</code> from the previous example:</p> <pre><code>      ]display GetWindowText HNDL 255 255\n.\u2192-------------------------.\n|    .\u2192------------------. |\n| 19 |MYWS - Dyalog APL/W| |\n|    '-------------------' |\n'\u220a-------------------------'\n</code></pre> <p>There are three points to note.</p> <ol> <li>Firstly, the number 255 is supplied as the second argument.  This instructs APL to allocate a buffer large enough for a 255-element character vector into which the DLL routine will write.</li> <li>Secondly, the result of the APL function is a nested vector of 2 elements.  The first element is the result of the DLL function.  The second element is the output character array. </li> <li>Finally, notice that although we reserved space for 255 elements, the result reflects the length of the actual text (19).</li> </ol> <p>An alternative way of coding and using this function is to treat the second argument as an input/output array.</p> <p>e.g.</p> <pre><code>      \u2395NA 'I User32|GetWindowText* P =0T I'\n\n      ]display GetWindowText HNDL (255\u2374' ') 255\n.\u2192-------------------------.\n|    .\u2192------------------. |\n| 19 |MYWS - Dyalog APL/W| |\n|    '-------------------' |\n'\u220a-------------------------'\n</code></pre> <p>In this case, the second argument is coded as <code>=0T</code>, so when the function is called an array of the appropriate size must be supplied.  This method uses more space in the workspace, although for small arrays (as in this case) the real impact of doing so is negligible.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example-6-getcharwidth","title":"Example 6: GetCharWidth()","text":"<p>The function GetCharWidth returns the width of each character in a given range. Its first argument is a device context (handle).  Its second and third arguments specify font positions (start and end).  The third argument is the resulting integer vector that contains the character widths (this is an example of an output array).  The function returns a Boolean value to indicate success or failure.  The function is defined as follows.  Note that this function is provided in the library: gdi32.dll.</p> <p>BOOL GetCharWidth(HDC, UINT, UINT, LPINT);</p> <p>The following statements provide access to this routine through an APL function of the same name:</p> <pre><code>      \u2395NA 'U4 gdi32|GetCharWidth* P U U &gt;I[]'\n\n     'Prin'\u2395WC'Printer'\n\n      ]display GetCharWidth ('Prin' \u2395WG 'Handle') 65 67 3 \n.\u2192-------------.\n|   .\u2192-------. |\n| 1 |50 50 50| |\n|   '~-------' |\n'\u220a-------------'\n</code></pre> <p>Note: <code>'Prin'\u2395WG'Handle'</code> returns a handle which is represented as a number. The number will be in the range (0 - 232] on a 32-bit version and (0 - 264] on a 64-bit version. These can be passed to a P type parameter. Older versions used a 32-bit signed integer.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#example-7-quadna-workspace","title":"Example 7: quadna workspace","text":"<p>The following example from the supplied workspace: quadna.dws. <code>quadna</code> illustrates several techniques which are important in advanced <code>\u2395NA</code> programming. Function <code>DllVersion</code> returns the major and minor version number for a given DLL. Note that this example assumes that the computer is running the 64-bit version of Dyalog.</p> <p>In advanced DLL programming, it is often necessary to administer memory outside APL's workspace. In general, the procedure for such use is:</p> <ol> <li>Allocate global memory.</li> <li>Lock the memory.</li> <li>Copy any DLL input information from workspace into memory.</li> <li>Call the DLL function.</li> <li>Copy any DLL output information from memory to workspace.</li> <li>Unlock the memory.</li> <li>Free the memory.</li> </ol> <p>Notice that steps 1 and 7 and steps 2 and 6 complement each other. That is, if you allocate global system memory, you must free it after you have finished using it. If you continue to use global memory without freeing it, your system will gradually run out of resources. Similarly, if you lock memory (which you must do before using it), then you should unlock it before freeing it. Although on some versions of Windows, freeing the memory will include unlocking it, in the interests of good style, maintaining the symmetry is probably a good thing.     \u2207 version\u2190DllVersion file;Alloc;Free;Lock;Unlock;Size                   ;Info;Value;Copy;size;hndl;addr;buff;ok [1] [2]  'Alloc'\u2395NA'P kernel32|GlobalAlloc U4 P' [3]   'Free'\u2395NA'P kernel32|GlobalFree P' [4]   'Lock'\u2395NA'P kernel32|GlobalLock P' [5] 'Unlock'\u2395NA'U4 kernel32|GlobalUnlock P' [6] [7]  'Size'\u2395NA'U4 version|GetFileVersionInfoSize &lt;0T &gt;U4' [8]  'Info'\u2395NA'U4 version|GetFileVersionInfo&lt;0T U4 U4 P' [9] 'Value'\u2395NA'U4 version|VerQueryValue P &lt;0T &gt;P &gt;U4' [10] [11] 'Copy'\u2395NA'dyalog64|MEMCPY &gt;U4[] P P' [12] [13]  :If \u00d7size\u2190\u2283Size file 0               \u235d Size of info [14]  :AndIf \u00d7hndl\u2190Alloc 0 size            \u235d Alloc memory [15]    :If \u00d7addr\u2190Lock hndl                \u235d Lock memory [16]      :If \u00d7Info file 0 size addr       \u235d Version info [17]        ok buff size\u2190Value addr'\\' 0 0 \u235d Version value [18]        :If ok [19]          buff\u2190Copy(size\u00f74)buff size   \u235d Copy info [20]          version\u2190(2/216)\u22a4\u22832\u2193buff     \u235d Split version [21]        :EndIf [22]      :EndIf [23]      ok\u2190Unlock hndl                   \u235d Unlock memory [24]    :EndIf [25]    ok\u2190Free hndl                       \u235d Free memory [26]  :EndIf     \u2207</p> <p>Lines [2-11] associate APL function names with the DLL functions that will be used.</p> <p>Lines [2-5] associate functions to administer global memory.</p> <p>Lines [7-9] associate functions to extract version information from a DLL.</p> <p>Line[11] associates <code>Copy</code> with <code>MEMCPY</code> function from dyalog64.dll.</p> <p>Lines [13-26] call the DLL functions.</p> <p>Line [13] requests the size of buffer required to receive version information for the DLL. A size of 0 will be returned if the DLL does not contain version information.</p> <p>Notice that care is taken to balance memory allocation and release:</p> <p>On line [14], the :If clause is taken only if the global memory allocation is successful, in which case (and only then) a corresponding Free is called on line [25].</p> <p>Unlock on line[23] is called if  and only if the call to Lock on line [15] succeeds.</p> <p>A result is returned from the function only if all the calls are successful Otherwise, the calling environment will sustain a <code>VALUE ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/na/#more-examples","title":"More Examples","text":"<p>\u2395NA'I4 advapi32 |RegCloseKey          P' \u2395NA'I4 advapi32 |RegCreateKeyEx      P &lt;0T U4 &lt;0T U4 U4 P &gt;P &gt;U4' \u2395NA'I4 advapi32 |RegEnumValue        P U4 &gt;0T =U4 =U4 &gt;U4 &gt;0T =U4' \u2395NA'I4 advapi32 |RegOpenKey          P &lt;0T &gt;P' \u2395NA'I4 advapi32 |RegOpenKeyEx        P &lt;0T U4 U4 &gt;P' \u2395NA'I4 advapi32 |RegQueryValueEx     P &lt;0T =U4 &gt;U4 &gt;0T =U4' \u2395NA'I4 advapi32 |RegSetValueEx       P &lt;0T =U4 U4 &lt;0T U4' \u2395NA'P  dyalog32 |STRNCPY              P P P' \u2395NA'P  dyalog32 |STRNCPYA             P P P' \u2395NA'P  dyalog32 |STRNCPYW             P P P' \u2395NA'P  dyalog32 |MEMCPY               P P P' \u2395NA'I4 gdi32    |AddFontResource     &lt;0T' \u2395NA'I4 gdi32    |BitBlt               P I4 I4 I4 I4 P I4 I4 U4' \u2395NA'U4 gdi32    |GetPixel             P I4 I4' \u2395NA'P  gdi32    |GetStockObject       I4' \u2395NA'I4 gdi32    |RemoveFontResource  &lt;0T' \u2395NA'U4 gdi32    |SetPixel             P I4 I4 U4' \u2395NA'   glu32    |gluPerspective       F8 F8 F8 F8' \u2395NA'I4 kernel32 |CopyFile            &lt;0T &lt;0T I4' \u2395NA'P  kernel32 |GetEnvironmentStrings' \u2395NA'U4 kernel32 |GetLastError' \u2395NA'U4 kernel32 |GetTempPath         U4 &gt;0T' \u2395NA'P  kernel32 |GetProcessHeap' \u2395NA'I4 kernel32 |GlobalMemoryStatusEx ={U4 U4 U8 U8 U8 U8 U8 U8}' \u2395NA'P  kernel32 |HeapAlloc            P U4 P' \u2395NA'I4 kernel32 |HeapFree             P U4 P' \u2395NA'   opengl32 |glClearColor         F4 F4 F4 F4' \u2395NA'   opengl32 |glClearDepth         F8' \u2395NA'   opengl32 |glEnable             U4' \u2395NA'   opengl32 |glMatrixMode         U4' \u2395NA'I4 user32   |ClientToScreen       P ={I4 I4}' \u2395NA'P  user32   |FindWindow          &lt;0T &lt;0T' \u2395NA'I4 user32   |ShowWindow           P I4' \u2395NA'I2 user32   |GetAsyncKeyState     I4' \u2395NA'P  user32   |GetDC                P' \u2395NA'I4 User32   |GetDialogBaseUnits' \u2395NA'P  user32   |GetFocus' \u2395NA'U4 user32   |GetSysColor          I4' \u2395NA'I4 user32   |GetSystemMetrics     I4' \u2395NA'I4 user32    |InvalidateRgn        P P I4' \u2395NA'I4 user32   |MessageBox          P &lt;0T &lt;0T U4' \u2395NA'I4 user32   |ReleaseDC            P P' \u2395NA'P  user32   |SendMessage         P U4 P P' \u2395NA'P  user32   |SetFocus             P' \u2395NA'I4 user32   |WinHelp             P &lt;0T U4 P' \u2395NA'I4 winnm    |sndPlaySound         &lt;0T U4'</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/","title":"R","text":"Replace R\u2190{X}(A \u2395R B) Y <p><code>\u2395R</code> (Replace) and <code>\u2395S</code> (Search) are system operators which take search pattern(s) as their left arguments and transformation rule(s) as their right arguments; the derived function operates on text data to perform either a search, or a search and replace operation.</p> <p>The search patterns may include Regular Expressions so that complex searches may be performed. <code>\u2395R</code> and <code>\u2395S</code> utilise the open-source regular-expression search engine PCRE, which is built into Dyalog APL and distributed according to the PCRE licence which is published separately.</p> <p>The transformation rules are applied to the text which matches the search patterns; they may be given as a simple character vector, numeric codes, or  a function.</p> <p>The two system operators, <code>\u2395R</code> for replace and <code>\u2395S</code> for search, are syntactically identical. With <code>\u2395R</code>, the input document is examined; text which matches the search pattern is amended and the remainder is left unchanged. With <code>\u2395S</code>, each match in the input document results in an item in the result whose type is dependent on the transformation specified. The operators use the Variant operator to set options.</p> <p><code>A</code> specifies one or more search patterns, being given as a single character, a character vector, a vector of character vectors or a vector of both characters and character vectors. See search pattern following.</p> <p><code>B</code> is the transformation to be performed on matches within the input document; it may be either one or more transformation patterns (specified as a character, a character vector, a vector of character vectors, or a vector of both characters and character vectors), one or more transformation codes (specified as a numeric scalar or a numeric vector) or a function; see  transformation pattern, transformation codes and transformation function following.</p> <p><code>Y</code> specifies the input document; see input document below.</p> <p><code>X</code> optionally specifies an output stream; see output below.</p> <p><code>R</code> is the result value; see output below.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#examples-of-replace-operations","title":"Examples of replace operations","text":"<pre><code>      ('.at' \u2395R '\\u0') 'The cat sat on the mat'     \nThe CAT SAT on the MAT\n</code></pre> <p>In the search pattern the dot matches any character, so the pattern as a whole matches sequences of three characters ending 'at'. The transformation is given as a character string, and causes the entire matching text to be folded to upper case.</p> <pre><code>      ('\\w+' \u2395R {\u233d\u2375.Match}) 'The cat sat on the mat'\nehT tac tas no eht tam\n</code></pre> <p>The search pattern matches each word. The transformation is given as a function, which receives a namespace containing various variables describing the match, and it returns the match in reverse, which in turn replaces the matched text.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#examples-of-search-operations","title":"Examples of search operations","text":"<pre><code>      STR\u2190'The cat sat on the mat'\n      ('.at' \u2395S '\\u0') STR\nCAT  SAT  MAT \n</code></pre> <p>The example is identical to the first, above, except that after the transformation is applied to the matches the results are returned in a vector, not substituted into the source text.</p> <pre><code>      ('.at' \u2395S {\u2375.((1\u2191Offsets),1\u2191Lengths)}) STR\n4 3  8 3  19 3\n</code></pre> <p>When searching, the result vector need not contain only text and in this example the function returns the numeric position and length of the match given to it; the resultant vector contains these values for each of the three matches.</p> <pre><code>      ('.at' \u2395S 0 1) STR       \n4 3  8 3  19 3\n</code></pre> <p>Here the transformation is given as a vector of numeric codes which are a short-hand for the position and length of each match; the overall result is therefore identical to the previous example.</p> <p>These examples all operate on a simple character vector containing text, but the text may be given in several forms - character vectors, vectors of character vectors, and external data streams. These various forms constitute a 'document'. When the result also takes the form of a document it may be directed to a stream.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#input-document","title":"Input Document","text":"<p>The input document may be an array or a data stream.</p> <p>When it is an array it may be given in one of two forms:</p> <ol> <li>A character scalar or vector</li> <li>A vector of character vectors</li> </ol> <p>Currently, the only supported data stream is a native file, specified as tie number, which is read from the current position to the end. If the file is read from the start, and there is a valid Byte Order Mark (BOM) at the start of it, the data encoding is determined by this BOM. Otherwise, data in the file is assumed to be encoded as specified by the InEnc option.</p> <p>Hint: once a native file has been read to the end by <code>\u2395R</code> or <code>\u2395S</code> it is possible to reset the file position to the start so that it may be read again using:</p> <pre><code>      {} \u2395NREAD tienum 82 0 0\n</code></pre> <p>The input document is comprised of lines of text. Line breaks may be included in the data:</p> <p>Implicitly</p> <ul> <li>Between each item in the outer vector (type 2, above)</li> </ul> <p>Explicitly, as</p> <ul> <li>carriage return</li> <li>line feed</li> <li>carriage return and line feed together, in that order</li> <li>vertical tab (U+000B)</li> <li>newline (U+0085)</li> <li>form Feed (U+000C)</li> <li>line Separator (U+2028)</li> <li>paragraph Separator (U+2029)</li> </ul> <p>The implicit line ending character may be set using the EOL option. Explicit line ending characters may also be replaced by this character - so that all line endings are normalised - using the NEOL option.</p> <p>The input document may be processed in line mode, document mode or mixed mode. In document mode and mixed mode, the entire input document, line ending characters included, is passed to the search engine; in line mode the document is split on line endings and passed to the search engine in sections without the line ending characters. The choice of mode affects both memory usage and behaviour, as documented in the section 'Line, document and mixed modes'.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#output","title":"Output","text":"<p>The format of the output is dependent on whether <code>\u2395S</code> or <code>\u2395R</code> are in use, whether an output stream is specified and, for <code>\u2395R</code>, the form of the input and whether the ResultText option is specified.</p> <p>An output data stream may optionally be specified. Currently, the only supported data stream is a native file, specified as tie number, and all output will be appended to it. Data in the stream is encoded as specified by the OutEnc option. If this encoding specifies a Byte Order Mark and the file is initially empty then the Byte Order Mark will be written at the start. Appending to existing data using a different encoding is permitted but unlikely to produce desirable results. If an input stream is also used, care must be taken to ensure the input and output streams are not the same.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#r","title":"\u2395R","text":"<p>With no output stream specified and unless overridden by the ResultText option, the derived function result will be a document which closely matches the format of the input document, as follows:</p> <p>A character scalar or vector input will result in a character vector output. Any and all line endings in the output will be represented by line ending characters within the character vector.</p> <p>A vector of character vectors as input will result in a vector of character vectors as document output. Any and all line endings in the output document will be implied at the end of each character vector.</p> <p>A stream as input will result in a vector of character vectors document output. Any and all line endings in the output document will be implied at the end of each character vector.</p> <p>Note that the shape of the output document may be significantly different to that of the input document.</p> <p>If the ResultText option is specified, the output type may be forced to be a character vector or vector of character vectors as described above, regardless of the input document.</p> <p>With an output stream specified the text is appended to the stream. If the appended text does not end with a line ending character then the line ending character specified by the EOL option is also appended. The resulting length of the file  is returned as a shy result.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#s","title":"\u2395S","text":"<p>With no output stream specified, the result will be a vector containing one item for each match in the input document, of types determined by the transformation performed on each match.</p> <p>With an output stream specified each match is appended to the stream. If any match does not end with a line ending character then the line ending character specified by the EOL option is also appended.  The resulting length of the file  is returned as a shy result. Only text may be written to the stream, which means:</p> <ul> <li>When a transformation function is used, the function may only generate a character vector result.</li> <li>Transformation codes may not be used.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#search-pattern","title":"Search pattern","text":"<p>A summary of the syntax of the search pattern is reproduced from the PCRE documentation. See Appendix A - PCRE Syntax Summary on page 1PCRE Regular Expression Syntax Summary.</p> <p>A full description is provided in Appendix B - PCRE Regular Expression Details          on page 1PCRE Regular Expression Details.</p> <p>There may be multiple search patterns. If more than one search pattern is specified and more than one pattern matches the same part of the input document then priority is given to the pattern specified first.</p> <p>Note that when anchoring a search to the beginning of a line, it is essential to use <code>^</code> (<code>\u2395UCS 94</code>), not <code>\u2227</code> (<code>\u2395UCS 8743</code>).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#transformation-pattern","title":"Transformation pattern","text":"<p>For each match in the input document, the transformation pattern causes the creation of text which, for <code>\u2395R</code>, replaces the matching text and, for <code>\u2395S</code>, generates one item in the result.</p> <p>There may be either one transformation pattern, or the same number of transformation patterns as search patterns. If there are multiple search patterns and multiple transformation patterns then the transformation pattern used corresponds to the search pattern which matched the input text.</p> <p>Transformation patterns may not be mixed with transformation codes or functions.</p> <p>The following characters have special meaning:</p> Character Meaning % acts as a placeholder for the entire line (line mode) or document (document mode or mixed mode) which contained the match &amp; acts as a placeholder for the entire portion of text which matched \\n represents a line feed character \\r represents a carriage return \\0 equivalent to &amp; \\ n acts as a placeholder for the text which matched the first to ninth subpattern; n may be any single digit value from 1 to 9 ( n ) acts as a placeholder for the text which matched the numbered subpattern; n may have an integer value from 0 to 63. \\&lt; name &gt; acts as a placeholder for the text which matched the named subpattern \\ represents the backslash character \\% represents the percent character \\&amp; represents the ampersand character \\x{ nnnn } represents a Unicode code point; nnnn is a hexadecimal sequence of characters yielding a value between 0x1 and 0x10FFFF. <p>The above may be qualified so that matching text is folded, or mapped to upper- or lower-case, by using the f, u, and l modifiers respectively; the effect is as if the text was processed by <code>\u2395C</code>. See Case Convert on page 1.</p> <p>Character sequences beginning with the backslash place the modifier after the backslash; character sequences with no leading backslash add both a backslash and the modifier to the start of the sequence, for example:</p> \\u&amp; acts as a placeholder for the entire portion of text which matched, folded to upper case \\l0 equivalent to \\l&amp; <p>Character sequences beginning with the backslash other that those shown are invalid. All characters other than those shown are literal values and are included in the text without modification.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#transformation-codes","title":"Transformation codes","text":"<p>The transformation codes are a numeric scalar or vector. Transformation codes may only be used with <code>\u2395S</code>. For each match in the input document, a numeric scalar or vector of the same shape as the transformation codes is created, with the codes replaced with values as follows:</p> 0 The offset from the start of the line (line mode) or document (document mode or mixed mode) of the start of the match. 1 The length of the match. 2 In line mode, the block number in the source document of the start of the match. The value is origin zero. In document mode or mixed mode this value is always zero. 3 The pattern number which matched the input document, origin zero."},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#transformation-function","title":"Transformation Function","text":"<p>The transformation function is called for each match within the input document.  The function is monadic and is passed a namespace, containing the following variables:</p> <code>Block</code> The entire line (line mode) or document (document mode or mixed mode) in which the match was found. <code>BlockNum</code> With line mode, the block (line) number in the source document of the start of the match. The value is origin zero. With document mode or mixed mode the entire document is contained within one block and this value is always zero. <code>Pattern</code> The search pattern which matched. <code>PatternNum</code> The index-zero pattern number which matched. <code>Match</code> The text within Block which matched Pattern. <code>Offsets</code> A vector of one or more offsets relative to the start of Block. The first value is the offset of the entire match; any and all additional values are the offsets of the portions of the text which matched the subpatterns, in the order of the subpatterns within Pattern. <code>\u00af1</code> indicates no match, see below. <code>Lengths</code> A vector of one or more lengths, corresponding to each value in Offset. <code>\u00af1</code> indicates no match, see below. <code>Names</code> A vector of one or more character vectors corresponding to each of the values in Offsets, specifying the names given to the subpatterns within Pattern. The first entry (corresponding to the match) and all subpatterns with no name are included as length zero character vectors. <code>ReplaceMode</code> A Boolean indicating whether the function was called by <code>\u2395R</code> (value 1) or <code>\u2395S</code> (value 0). <code>TextOnly</code> A Boolean indicating whether the return value from the function must be a character vector (value 1) or any value (value 0). <p>The return value from the function is used as follows:</p> <p>With <code>\u2395R</code> the function must return a character vector. The contents of this vector are used to replace the matching text.</p> <p>With <code>\u2395S</code> the function may return no value. If it does return a value:</p> <ul> <li>When output is being directed to a stream it must be a character vector.</li> <li>Otherwise, it may be any value. The overall result of the derived function is the catenation of the enclosure of each returned value into a single vector.</li> </ul> <p>The passed namespace exists over the lifetime of <code>\u2395R</code> or <code>\u2395S</code>; the function may therefore preserve state by creating variables in the namespace.</p> <p>The function may itself call <code>\u2395R</code> or <code>\u2395S</code>.</p> <p>There may be only one transformation function, regardless of the number of search patterns.</p> <p>The locations of the match within Block and subpatterns within Match are given as offsets rather than positions, i.e. the values are the number of characters preceding the data, and are not affected by the Index Origin.</p> <p>The value of <code>\u00af1</code> may appear in both the Offsets and Fields items (in corresponding positions). They indicate that the subpattern to which they refer did not appear in the match at all.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#example","title":"Example","text":"<pre><code>      {}('(A)|(B)'\u2395R{\u2395\u2190\u2375.(Offsets Lengths)\u22c4'x'})'ABC'\n 0 0  1 1 \n 1 \u00af1 1  1 \u00af1 1 \n\n</code></pre> <p>The pattern has two subpatterns - (<code>A</code>) and (<code>B</code>). Therefore Offsets and Lengths would be expected to have three elements each - one for the entire match, one for the first subpattern and one for the second subpattern. But these subpatterns have a <code>|</code> between them which means they are alternates - only one can match.</p> <p>When <code>ABC</code> is searched the first match is the <code>A</code> in the first subpattern. The second subpattern does not feature. Offsets is <code>0 0</code> and Lengths is <code>1 1</code>: the entire pattern matched from offset 0 length 1 and the first subpattern also matched from offset 0 length 1. The second subpattern did not feature in the match.</p> <p>Note that <code>\u00af1</code> is only used as a \"filler\" when there are higher-numbered subpatterns that did match.</p> <p>The second match is the B in the second subpattern. Offsets is <code>1 \u00af1 1</code> and Lengths is <code>1 \u00af1 1</code>: the entire pattern matched from offset 1 length 1 and the second subpattern also matched from offset 1 length 1. The first subpattern did not feature in the match and this is indicated by the <code>\u00af1</code>s. There has to be something between the offset/length for the entire pattern and the second subpattern.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#options","title":"Options","text":"<p>Options are specified using the Variant operator. The Principal option is IC.</p> <p>Default values are highlighted thus.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#ic-option","title":"IC Option","text":"<p>When set, case is ignored in searches.</p> <code>1</code> Matches are not case sensitive. 0 Matches are case sensitive."},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#example_1","title":"Example:","text":"<pre><code>      ('[AEIOU]' \u2395R 'X' \u2360 'IC' 1) 'ABCDE abcde'\nXBCDX XbcdX\n      ('[AEIOU]' \u2395R 'X' \u2360 1)'ABCDE abcde'\nXBCDX XbcdX\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#mode-option","title":"Mode Option","text":"<p>Specifies whether the input document is interpreted in line mode, document mode or mixed mode.</p> L When line mode is set, the input document is split into separate lines (discarding the line ending characters themselves), and each line is processed separately. This means that the ML option applies per line, and the '^' and '$' anchors match the start and end respectively of each line. Because the document is split, searches can never match across multiple lines, nor can searches for line ending characters ever succeed. Setting line mode can result in significantly reduced memory requirements compared with the other modes. <code>D</code> When document mode is set, the entire input document is processed as a single block. The ML option applies to this entire block, and the '^' and '$' anchors match the start and end respectively of the block - not the lines within it. Searches can match across lines, and can match line ending characters. <code>M</code> When mixed mode is set, the '^' and '$' anchors match the start and end respectively of each line, as if line mode is set, but in all other respects behaviour is as if document mode is set - the entire input document is processed in a single block."},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#examples","title":"Examples:","text":"<pre><code>      ('$' \u2395R '[Endline]' \u2360 'Mode' 'L') 'ABC' 'DEF'\n ABC[Endline]  DEF[Endline] \n\n      ('$' \u2395R '[Endline]' \u2360 'Mode' 'D') 'ABC' 'DEF'\n ABC  DEF[Endline]\n\n      ('$' \u2395R '[Endline]' \u2360 'Mode' 'M') 'ABC' 'DEF'\n ABC[Endline]  DEF[Endline]\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#dotall-option","title":"DotAll Option","text":"<p>Specifies whether the dot ('.') character in search patterns matches line ending characters.</p> 0 The '.' character in search patterns matches most characters, but not line endings. <code>1</code> The '.' character in search patterns matches all characters. <p>This option is invalid in line mode, because line endings are stripped from the input document.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#example_2","title":"Example:","text":"<pre><code>      ('.' \u2395R 'X' \u2360'Mode' 'D') 'ABC' 'DEF'\n XXX  XXX \n      ('.' \u2395R 'X' \u2360('Mode' 'D')('DotAll' 1)) 'ABC' 'DEF'\n XXXXXXXX\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#eol-option","title":"EOL Option","text":"<p>Sets the line ending character which is implicitly present between character vectors, when the input document is a vector of character vectors.</p> CR Carriage Return (U+000D) LF Line Feed (U+000A) CRLF Carriage Return followed by Line Feed VT Vertical Tab (U+000B) NEL New Line (U+0085) FF Form Feed (U+000C) LS Line Separator (U+2028) PS Paragraph Separator (U+2029) <p>In the Classic Edition, setting a value which is not in <code>\u2395AVU</code> may result in a <code>TRANSLATION ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#example_3","title":"Example:","text":"<pre><code>      ('\\n' \u2395R'X' \u2360('Mode' 'D')('EOL' 'LF')) 'ABC' 'DEF'\n ABCXDEF\n\n</code></pre> <p>Here, the implied line ending between 'ABC' and 'DEF' is '\\n', not the default '\\r\\n'.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#neol-option","title":"NEOL Option","text":"<p>Specifies whether explicit line ending sequences in the input document are normalised by replacing them with the character specified using the EOL option.</p> 0 Line endings are not normalised. 1 Line endings are normalised."},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#example_4","title":"Example:","text":"<pre><code>      a\u2190'ABC',(1\u21912\u2193\u2395AV),'DEF',(1\u21913\u2193\u2395AV),'GHI'\n      ('\\n'\u2395S 0 \u2360 'Mode' 'D' \u2360 'NEOL' 1 \u2360 'EOL' 'LF') a\n3 7\n\n</code></pre> <p>'\\n' has matched both explicit line ending characters in the input, even though they are different.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#ml-option","title":"ML Option","text":"<p>Sets a limit to the number of processed pattern matches per line (line mode) or document (document mode and mixed mode).</p> Positive value n Sets the limit to the first n matches. 0 Sets no limit. Negative value <code>\u00af</code> n Sets the limit to exactly the nth match."},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#examples_1","title":"Examples:","text":"<pre><code>      ('.' \u2395R 'x' \u2360 'ML' 2) 'ABC' 'DEF'\n xxC  xxF \n      ('.' \u2395R 'x' \u2360 'ML' \u00af2) 'ABC' 'DEF'\n AxC  DxF \n      ('.' \u2395R 'x' \u2360 'ML' \u00af4 \u2360 'Mode' 'D') 'ABC' 'DEF'\n ABC  xEF\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#greedy-option","title":"Greedy Option","text":"<p>Controls whether patterns are \"greedy\" (and match the maximum input possible) or are not (and match the minimum). Within the pattern itself it is possible to specify greediness for individual elements of the pattern; this option sets the default.</p> 1 Greedy by default. 0 Not greedy by default."},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#examples_2","title":"Examples:","text":"<pre><code>      ('[A-Z].*[0-9]' \u2395R 'X' \u2360 'Greedy' 1)'ABC123 DEF456'\nX\n      ('[A-Z].*[0-9]' \u2395R 'X' \u2360 'Greedy' 0)'ABC123 DEF456'\nX23 X56\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#om-option","title":"OM Option","text":"<p>Specifies whether matches may overlap.</p> 1 Searching continues for all patterns and then from the character following the start of the match, thus permitting overlapping matches. 0 Searching continues from the character following the end of the match. <p>This option may only be used with <code>\u2395S</code>. With <code>\u2395R</code> searching always continues from the character following the end of the match (the characters following the start of the match will have been changed).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#examples_3","title":"Examples:","text":"<pre><code>      ('[0-9]+' \u2395S '\\0' \u2360 'OM' 0) 'A 1234 5678 B'\n 1234  5678 \n      ('[0-9]+' \u2395S '\\0' \u2360 'OM' 1) 'A 1234 5678 B'\n 1234  234  34  4  5678  678  78  8\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#inenc-option","title":"InEnc Option","text":"<p>This option specifies the encoding of the input stream when it cannot be determined automatically. It is either:</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#-a-character-vector-that-specifies-the-file-encoding-as-shown-in-the-table-below","title":"- a character vector that specifies the file-encoding as shown in the table below.","text":"<p>When the stream is read from its start, and the start of the stream contains a recognised Byte Order Mark (BOM), the encoding is taken as that specified by the BOM and this option is ignored. Otherwise, the encoding is assumed to be as specified by this option.</p> UTF-8 The stream is processed as UTF-8 data. Note that ASCII is a subset of UTF-8, so this default is also suitable for ASCII data. UTF-16 The stream is processed as UTF16 little-endian data on little-ended systems, or as UTF16 big-endian data on big-endian systems. UTF-16LE The stream is processed as UTF16 little-endian data. UTF-16BE The stream is processed as UTF16 big-endian data. UTF-32 The stream is processed as UTF32 little-endian data on little-ended systems, or as UTF32 big-endian data on big-endian systems. UTF-32LE The stream is processed as UTF32 little-endian data. UTF-32BE The stream is processed as UTF32 big-endian data. ASCII The stream is processed as ASCII data. If the stream contains any characters outside of the ASCII range then an error is produced. Windows-1252 The stream is processed as Windows-1252 (ANSI) data. ANSI Same as Windows-1252 <p>For compatibility with the OutEnc option, the above UTF formats may be qualified with -BOM (e.g. UTF-8-BOM) or -NOBOM. For input streams, the qualified and unqualified options are equivalent.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#outenc-option","title":"OutEnc Option","text":"<p>When the output is written to a stream, this option specifies how the data is to be encoded.  It is either:</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#-a-character-vector-that-specifies-the-file-encoding-as-shown-in-the-table-below_1","title":"- a character vector that specifies the file-encoding as shown in the table below.","text":"Implied If input came from a stream then the encoding format is the same as the input stream, otherwise UTF-8 UTF-8 The data is written in UTF-8 format. UTF-16 The data is written in UTF16 little-endian format on little-ended systems, or in UTF16 big-endian format on big-endian systems. UTF-16LE The data is written in UTF-16 little-endian format. UTF-16BE The data is written in UTF-16 big-endian format. UTF-32 The data is written in UTF32 little-endian format on little-ended systems, or in UTF32 big-endian format on big-endian systems. UTF-32LE The data is written in UTF-32 little-endian format. UTF-32BE The data is written in UTF-32 big-endian format. ASCII The data is written in ASCII format. Windows-1252 The data is written in Windows-1252 (ANSI) format. ANSI Same as Windows-1252 <p>The above UTF formats may be qualified with -BOM (e.g. UTF-8-BOM) to specify that a Byte Order Mark should be written at the start of the stream or, -NOBOM that it should not. For files, this is ignored if the file already contains any data.  If the -BOM or -NOBOM suffix is omitted, UTF-8 defaults to UTF-8-NOBOM, while the other UTF formats default to -BOM.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#enc-option","title":"Enc Option","text":"<p>This option sets both InEnc and OutEnc simultaneously, with the same given value. Any option value accepted by those options except Implied may be given.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#resulttext-option","title":"ResultText Option","text":"<p>For <code>\u2395R</code>, this option determines the format of the result.</p> Implied The output will either be a character vector or a vector of character vectors , dependent on the input document type Simple The output will be a character vector . Any and all line endings in the output will be represented by line ending characters within the character vector. Nested The output will be a vector of character vectors . Any and all line endings in the output document will be implied at the end of each character vector. <p>This option may only be used with <code>\u2395R</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#examples_4","title":"Examples:","text":"<pre><code>      \u2395UCS \u00a8 ('A' \u2395R 'x') 'AB' 'CD'                \n  120 66  67 68                    \n      \u2395UCS ('A' \u2395R 'x' \u2360 'ResultText' 'Simple') 'AB' 'CD'\n 120 66 13 10 67 68\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#ucp-option","title":"UCP Option","text":"<p>This affects the way PCRE that processes \\B, \\b, \\D, \\d, \\S, \\s,  \\W, \\w,  and  some  of  the POSIX character classes.</p> 1 Unicode  properties are  used to classify characters. 0 Only ASCII characters are recognized. <p>Implementation Note: this option is implemented by setting or not setting the PCRE_UCP option when calling pcre_compile(). More information can be found in the PCRE documentation.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#examples_5","title":"Examples","text":"<p>By default, the character \u00f8 (which is not an ASCII character) is considered to be a \"non-word\" character, so:</p> <pre><code>      ('\\w'\u2395S'\\0')'Bj\u00f8rn'  \u235d identify \"word\" characters\n B  j  r  n\n      ('\\W'\u2395S'\\0')'Bj\u00f8rn'  \u235d non-word\" characters\n \u00f8\n\n</code></pre> <p>When UCP is set to 1, Unicode characters are matched as \"word\" characters (\\w) too.</p> <pre><code>\n      ('\\w'\u2395S'\\0' \u2360'UCP' 1)'Bj\u00f8rn'\n B  j  \u00f8  r  n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#line-document-and-mixed-modes","title":"Line, document and mixed modes","text":"<p>The Mode setting determines how the input document is packaged as a block and passed to the search engine. In line mode each line is processed separately; in document mode and mixed mode the entire document is presented to the search engine. This affects both the semantics of the search expression, and memory usage.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#semantic-differences","title":"Semantic differences","text":"<ul> <li>The ML option applies per block of data.</li> <li>In line mode, search patterns cannot be constructed to span multiple lines. Specifically, patterns that include line ending characters (such as '\\r') will never match because the line endings are never presented to the search engine.</li> <li>By default the search pattern metacharacters '^' and '$' match the start and end of the block of data. In line mode this is always the start and end of each line. In document mode this is the start and end of the document. In mixed mode the behaviour of '^' and '$' are amended by setting the PCRE option 'MULTILINE' so that they match the start and end of each line within the document.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#memory-usage-differences","title":"Memory usage differences","text":"<p>Blocks of data passed to the search engine are processed and stored in the workspace. Processing the input document in line mode limits the total memory requirements; in particular this means that large streams can be processed without holding all the data in the workspace at the same time.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#technical-considerations","title":"Technical Considerations","text":"<p><code>\u2395R</code> and <code>\u2395S</code> utilise the open-source regular-expression search engine PCRE, which is built into the Dyalog software and distributed according to the PCRE licence which is published separately.</p> <p>Before data is passed to PCRE it is converted to UTF-8 format. This converted data is buffered in the workspace; processing large documents may have significant memory requirements. In line mode, the data is broken into individual lines and each is processed separately, potentially reducing memory demands.</p> <p>It is possible to save a workspace with an active <code>\u2395R</code> or <code>\u2395S</code> on the stack and execution can continue when the workspace is reloaded with the same interpreter version. Later versions of the interpreter may not remain compatible and may signal a <code>DOMAIN ERROR</code> with explanatory message in the status window if it is unable to continue execution.</p> <p>PCRE has a buffer length limit of 231 bytes (2GB). UTF-8 encodes each character using between 1 and 6 bytes (typically 1 or 3). In the very worst case, where every character is encoded in 6 bytes, the maximum block length which can be searched would be 357,913,940 characters.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#further-examples","title":"Further Examples","text":"<p>Several of the examples use the following vector as the input document:</p> <pre><code>      text\nTo be or not to be- that is the question:\nWhether 'tis nobler in the mind to suffer\nThe slings and arrows of outrageous fortune,\nOr to take arms against a sea of troubles\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#replace-all-upper-and-lower-case-vowels-by-x","title":"Replace all upper and lower-case vowels by 'X':","text":"<pre><code>       ('[aeiou]' \u2395R 'X' \u2360 'IC' 1) text\nTX bX Xr nXt tX bX- thXt Xs thX qXXstXXn:   \nWhXthXr 'tXs nXblXr Xn thX mXnd tX sXffXr   \nThX slXngs Xnd XrrXws Xf XXtrXgXXXs fXrtXnX,\nXr tX tXkX Xrms XgXXnst X sXX Xf trXXblXs   \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#replace-only-the-second-vowel-on-each-line-by-vowel","title":"Replace only the second vowel on each line by '\\VOWEL\\':","text":"<pre><code>       ('[aeiou]' \u2395R '\\\\VOWEL\\\\'\u2360('IC' 1)('ML' \u00af2)) text\nTo b\\VOWEL\\ or not to be- that is the question:   \nWheth\\VOWEL\\r 'tis nobler in the mind to suffer   \nThe sl\\VOWEL\\ngs and arrows of outrageous fortune,\nOr t\\VOWEL\\ take arms against a sea of troubles\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#case-fold-each-word","title":"Case fold each word:","text":"<pre><code>      ('(?&lt;first&gt;\\w)(?&lt;remainder&gt;\\w*)' \u2395R '\\u&lt;first&gt;\\l&lt;remainder&gt;') text\nTo Be Or Not To Be- That Is The Question:   \nWhether 'Tis Nobler In The Mind To Suffer   \nThe Slings And Arrows Of Outrageous Fortune,\nOr To Take Arms Against A Sea Of Troubles   \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#extract-only-the-lines-with-characters-or-in-upper-or-lower-case-on-them","title":"Extract only the lines with characters 'or' (in upper or lower case) on them:","text":"<pre><code>      \u2191('or' \u2395S '%' \u2360 ('IC' 1)('ML' 1)) text\nTo be or not to be\u2013 that is the question:   \nThe slings and arrows of outrageous fortune,\nOr to take arms against a sea of troubles \n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#identify-which-lines-contain-the-word-or-in-upper-or-lower-case-on-them","title":"Identify which lines contain the word 'or' (in upper or lower case) on them:","text":"<pre><code>      ('\\bor\\b'\u2395S 2\u2360('IC' 1)('ML' 1))text\n0 3\n\n</code></pre> <p>Note the difference between the characters 'or' (which appear in 'fortune') and the word 'or'.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#place-every-non-space-sequence-of-characters-in-brackets","title":"Place every non-space sequence of characters in brackets:","text":"<pre><code>      ('[^\\s]+' \u2395R '(&amp;)' ) 'To be or not to be, that is the question'\n(To) (be) (or) (not) (to) (be,) (that) (is) (the) (question)\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#replace-all-sequences-of-one-or-more-spaces-by-newline-note-that-the-effect-of-this-is-dependent-on-the-input-format","title":"Replace all sequences of one or more spaces by newline. Note that the effect of this is dependent on the input format:","text":"<p>Character vector input results in a single character vector output with embedded newlines:</p> <pre><code>      ]display ('\\s+' \u2395R '\\r') 'To be or not to be, that is the question'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502To      \u2502\n\u2502be      \u2502\n\u2502or      \u2502\n\u2502not     \u2502\n\u2502to      \u2502\n\u2502be,     \u2502\n\u2502that    \u2502\n\u2502is      \u2502\n\u2502the     \u2502\n\u2502question\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <p>A vector of two character vectors as input results in a vector of 10 character vectors output:       ]display ('\\s+' \u2395R '\\r') 'To be or not to be,' 'that is the question' \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502To\u2502 \u2502be\u2502 \u2502or\u2502 \u2502not\u2502 \u2502to\u2502 \u2502be,\u2502 \u2502that\u2502 \u2502is\u2502 \u2502the\u2502 \u2502question\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#change-numerals-to-their-expanded-names-using-a-function","title":"Change numerals to their expanded names, using a function:","text":"<pre><code>\n     \u2207r\u2190f a;n\n[1]   n\u2190'zero' 'one' 'two' 'three' 'four'\n[2]   n,\u2190'five' 'six' 'seven' 'eight' 'nine'\n[3]   r\u2190' ',\u2283(\u234ea.Match)\u2193n\n     \u2207\n      verbose\u2190('[0-9]' \u2395R f)\n      verbose \u235527\u00d756\u00d787\n one three one five four four\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#swap-red-and-blue","title":"Swap 'red' and 'blue':","text":"<pre><code>      ('red' 'blue' \u2395R 'blue' 'red') 'red hat blue coat'\nblue hat red coat\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#convert-a-comma-separated-values-csv-file-so-that","title":"Convert a comma separated values (CSV) file so that","text":"<ul> <li>dates in the first field are converted from European format to ISO, and</li> <li>currency values are converted from Deutsche Marks (DEM) to Euros (DEM 1.95583 to \u20ac1).</li> </ul> <p>The currency conversion requires the use of a function. Note the nested use of <code>\u2395R</code>.</p> <p>Input file:</p> 01/03/1980,Widgets,DEM 10.20 02/04/1980,Bolts,DEM 61.75 17/06/1980,Nuts; special rate DEM 17.00,DEM 17.00 18/07/1980,Hammer,DEM 1.25 <p>Output file:</p> 1980-03-01,Widgets,\u20ac 5.21 1980-04-02,Bolts,\u20ac 31.57 1980-06-17,Nuts; special rate DEM 17.00,\u20ac 8.69 1980-07-18,Hammer,\u20ac 0.63 <pre><code>     \u2207 ret\u2190f a;d;m;y;v\n[1]    \u2395IO\u21900\n[2]    :Select a.PatternNum\n[3]    :Case 0\n[4]        d m y\u2190{a.Match[a.Offsets[\u2375+1]+\u2373a.Lengths[\u2375+1]]}\u00a8\u23733\n[5]        ret\u2190y,'-',m,'-',d,','\n[6]    :Else\n[7]        v\u2190\u234ea.Block[a.Offsets[1]+\u2373a.Lengths[1]]\n[8]        v\u00f7\u21901.95583\n[9]        ret\u2190',\u20ac ',('(\\d+\\.\\d\\d).*'\u2395R'\\1')\u2355v\n[10]   :EndSelect\n     \u2207\n</code></pre> <pre><code>      in \u2190 'x.csv' \u2395NTIE 0\n      out \u2190 'new.csv' \u2395NCREATE 0\n      dateptn\u2190'(\\d{2})/(\\d{2})/(\\d{4}),'\n      valptn\u2190',DEM ([0-9.]+)'\n      out (dateptn valptn \u2395R f) in\n      \u2395nuntie\u00a8in out\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#create-a-simple-profanity-filter-for-the-list-of-objectionable-words","title":"Create a simple profanity filter. For the list of objectionable words:","text":"<pre><code>       profanity\u2190'bleeding' 'heck'\n</code></pre> <p>first construct a pattern which will match the words:</p> <pre><code>      ptn\u2190(('^' '$' '\\r\\n') \u2395R '\\\\b(' ')\\\\b' '|'\n                           \u2395OPT 'Mode' 'D') profanity\n      ptn\n\\b(bleeding|heck)\\b\n</code></pre> <p>then a function that uses this pattern:</p> <pre><code>      sanitise\u2190ptn \u2395R '****' \u2395opt 1\n      sanitise '\"Heck\", I said'\n\"****\", I said\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/r/#replace-the-characters-or-with-u0-without-having-to-escape-the-backslash","title":"Replace the characters 'or' with '\\u0' without having to escape the backslash:","text":"<p>Escaping transformation strings can be a daunting task. To avoid doing so, one can simply enclose the string in braces. This is not a special feature, but just a consequence of how transformation functions are used.</p> <pre><code>      ('to' \u2395R {'\\u0'})text\nTo be or not \\u0 be\u2013 that is the question:\nWhether 'tis nobler in the mind \\u0 suffer\nThe slings and arrows of outrageous fortune,\nOr \\u0 take arms against a sea of troubles\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/s/","title":"S","text":"Search R\u2190{X}(A \u2395S B) Y <p>See \"Replace: \" on page 1.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/start-unix-auxiliary-processor/","title":"Start unix auxiliary processor","text":"Start UNIX Auxiliary Processor {R}\u2190X \u2395SH Y <p>Used dyadically, <code>\u2395SH</code> starts an Auxiliary Processor. The effect, as far as the APL user is concerned, is identical under both Windows and UNIX although there are differences in the method of implementation. <code>\u2395SH</code> is a synonym of <code>\u2395CMD</code> Either function may be used in either environment (UNIX or Windows) with exactly the same effect. This section describes the behaviour of <code>\u2395SH</code> and <code>\u2395CMD</code> under UNIX. See \"Start Windows Auxiliary Processor: \" on page 1 for a discussion of the behaviour of these system functions under Windows.</p> <p>Although it is still possible for users to create their own APs, Dyalog strongly recommends creating shared libraries/DLLs instead.</p> <p><code>X</code> must be a simple character vector. <code>Y</code> may be a simple character scalar or vector, or a nested character vector.</p> <p><code>\u2395SH</code> loads the Auxiliary Processor from the file named by <code>X</code> using a search-path defined by the environment variable WSPATH.</p> <p>The shy result <code>R</code> is the process id of the Auxiliary Processor task.</p> <p>The effect of starting an AP is that one or more external functions are defined in the workspace. These appear as locked functions and may be used in exactly the same way as regular defined functions.</p> <p>When an external function is used in an expression, the argument(s) (if any) are piped to the AP for processing. If the function returns a result, APL halts while the AP is processing and waits for the result. If not it continues processing in parallel.</p> <p>The syntax of dyadic <code>\u2395SH</code> is similar to the UNIX execl(2) system call, where '<code>taskname</code>' is the name of the auxiliary processor to be executed and <code>arg0</code> through <code>argn</code> are the parameters of the calling line to be passed to the task, viz.</p> <pre><code>\n      'taskname' \u2395SH 'arg0' 'arg1' ... 'argn'\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/start-unix-auxiliary-processor/#examples","title":"Examples","text":"<pre><code>\n      'xutils' \u2395SH 'xutils' 'ss' 'dbr'\n      '/bin/sh' \u2395SH 'sh' '-c' 'adb test'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/start-windows-auxiliary-processor/","title":"Start windows auxiliary processor","text":"Start Windows Auxiliary Processor {R}\u2190X \u2395CMD Y <p>Used dyadically, <code>\u2395CMD</code> starts an Auxiliary Processor.  The effect, as far as the APL workspace is concerned, is identical under both Windows and UNIX, although the method of implementation differs.  <code>\u2395CMD</code> is a synonym of <code>\u2395SH</code>.  Either function may be used in either environment (Windows or UNIX) with exactly the same effect.  <code>\u2395CMD</code> is probably more natural for the Windows user.  This section describes the behaviour of <code>\u2395CMD</code> and <code>\u2395SH</code> under Windows.  See \"Examples\" on page 1 for a discussion of the behaviour of these system functions under UNIX.</p> <p><code>X</code> must be a simple character vector containing the name (or pathname) of a Dyalog APL Auxiliary Processor (AP). Although it is possible for users to create their own APs, Dyalog recommends that user write their own DLLs/shared libraries instead.</p> <p><code>Y</code> may be a simple character scalar or vector, or a vector of character vectors.  Under Windows the contents of <code>Y</code> are ignored.</p> <p><code>\u2395CMD</code> loads the Auxiliary Processor into memory.  If no other APs are currently running, <code>\u2395CMD</code> also allocates an area of memory for communication between APL and its APs.</p> <p>The shy result <code>R</code> is the process id of the Auxiliary Processor task.</p> <p>The effect of starting an AP is that one or more external functions are defined in the workspace.  These appear as locked functions and may be used in exactly the same way as regular defined functions.</p> <p>When an external function is used in an expression, the argument(s) (if any) are passed to the AP for processing via the communications area described above.  APL halts whilst the AP is processing, and waits for a result.  Under Windows, unlike under UNIX, it is not possible for external functions to run in parallel with APL.</p> <p>Although it is still possible for users to create their own APs, Dyalog strongly recommends creating shared libraries/DLLs instead.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/ucs/","title":"Ucs","text":"Unicode Convert R\u2190{X} \u2395UCS Y <p><code>\u2395UCS</code> converts (Unicode) characters into integers and vice versa.</p> <p>The optional left argument <code>X</code> is a character vector containing the name of a variable-length Unicode encoding scheme which must be one of:</p> <ul> <li>'UTF-8'</li> <li>'UTF-16'</li> <li>'UTF-32'</li> </ul> <p>If not, a <code>DOMAIN ERROR</code> is issued.</p> <p>If <code>X</code> is omitted, <code>Y</code> is a simple character or integer array, and the result <code>R</code> is a simple integer or character array with the same rank and shape as <code>Y</code>.</p> <p>If <code>X</code> is specified, <code>Y</code> must be a simple character or integer vector, and the result <code>R</code> is a simple integer or character vector.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/ucs/#monadic-ucs","title":"Monadic \u2395UCS","text":"<p>Used monadically, <code>\u2395UCS</code> simply converts characters to Unicode code points and vice-versa.</p> <p>With a few exceptions, the first 256 Unicode code points correspond to the ANSI character set.</p> <pre><code>\n      \u2395UCS 'Hello World'\n72 101 108 108 111 32 87 111 114 108 100\n\n      \u2395UCS 2 11\u237472 101 108 108 111 32 87 111 114 108 100\nHello World\nHello World\n</code></pre> <p>The code points for the Greek alphabet are situated in the 900's:</p> <pre><code>\n      \u2395UCS '\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1'\n954 945 955 951 956 941 961 945\n\n</code></pre> <p>Unicode also contains the APL character set. For example:</p> <pre><code>\n      \u2395UCS 123 40 43 47 9077 41 247 9076 9077 125\n{(+/\u2375)\u00f7\u2374\u2375}\n\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/ucs/#dyadic-ucs","title":"Dyadic \u2395UCS","text":"<p>Dyadic <code>\u2395UCS</code> is used to translate between Unicode characters and one of three standard variable-length Unicode encoding schemes, UTF-8, UTF-16 and UTF-32. These represent a Unicode character string as a vector of 1-byte (UTF-8), 2-byte (UTF-16) and 4-byte (UTF-32) signed integer values respectively.</p> <pre><code>\n      'UTF-8' \u2395UCS 'ABC'\n65 66 67\n      'UTF-8' \u2395UCS 'ABC\u00c6\u00d8\u00c5'\n65 66 67 195 134 195 152 195 133\n      'UTF-8' \u2395UCS 195 134, 195 152, 195 133\n\u00c6\u00d8\u00c5\n      'UTF-8' \u2395UCS '\u03b3\u03b5\u03b9\u03b1 \u03c3\u03bf\u03c5'\n206 179 206 181 206 185 206 177 32 207 131 206 191 207 133\n      'UTF-16' \u2395UCS '\u03b3\u03b5\u03b9\u03b1 \u03c3\u03bf\u03c5'\n947 949 953 945 32 963 959 965\n      'UTF-32' \u2395UCS '\u03b3\u03b5\u03b9\u03b1 \u03c3\u03bf\u03c5'\n947 949 953 945 32 963 959 965\n</code></pre> <p>Because integers are signed, numbers greater than 127 will be represented as 2-byte integers (type 163), and are thus not suitable for writing directly to a native file. To write the above data to file, the easiest solution is to use  <code>\u2395UCS</code> to convert the data to 1-byte characters and append this data to the file:</p> <pre><code>\n      (\u2395UCS 'UTF-8' \u2395UCS 'ABC\u00c6\u00d8\u00c5') \u2395NAPPEND tn\n</code></pre> <p>Note regarding UTF-16: For most characters in the first plane of Unicode (0000-FFFF), UTF-16 and UCS-2 are identical. However, UTF-16 has the potential to encode all Unicode characters, by using more than 2 bytes for characters outside plane 1.</p> <pre><code>\n      'UTF-16' \u2395UCS 'ABC\u00c6\u00d8\u00c5\u2352\u234b'\n65 66 67 198 216 197 9042 9035\n      \u2395\u2190unihan\u2190\u2395UCS (2\u00d72*16)+\u23733 \u235d x20001-x20003\n\n      'UTF-16' \u2395UCS unihan\n55360 56321 55360 56322 55360 56323\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/ucs/#translation-error","title":"Translation Error","text":"<p><code>\u2395UCS</code> will generate a <code>DOMAIN ERROR</code> if the argument cannot be converted. Additionally, in the Classic Edition, a <code>TRANSLATION ERROR</code> is generated if the result is not in <code>\u2395AV</code> or the numeric argument is not in <code>\u2395AVU</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/using/","title":"Using","text":"Using (Microsoft .NET Search Path) \u2395USING <p><code>\u2395USING</code> specifies a list of Microsoft .NET Namespaces that are to be searched for a reference to a .NET class. <code>\u2395USING</code> has Namespace scope.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/using/#examples","title":"Examples:","text":"<pre><code>  \u2395USING\u2190'System'\n  ]display \u2395USING\n.\u2192---------.\n| .\u2192-----. |\n| |System| |\n| '------' |\n'\u220a---------'\n\n\u2395USING,\u2190\u2282'System.Windows.Forms,System.Windows.Forms.dll'\n\u2395USING,\u2190\u2282'System.Drawing,System.Drawing.dll'\n</code></pre> <p>An Assembly may contain top-level classes which are not packaged into .NET Namespaces. In this case, you omit the Namespace name. For example:</p> <pre><code>  \u2395USING\u2190,\u2282',.\\LoanService.dll'\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/vfi/","title":"Vfi","text":"Verify &amp; Fix Input R\u2190{X}\u2395VFI Y <p><code>Y</code>must be a simple character scalar or vector. <code>X</code> is optional.  If present, <code>X</code> must be a simple character scalar or vector.  <code>R</code> is a nested vector of length two whose first item is a simple logical vector and whose second item is a simple numeric vector of the same length as the first item of <code>R</code>.</p> <p><code>Y</code> is the character representation of a series of numeric constants.  If <code>X</code> is omitted, adjacent numeric strings are separated by one or more blanks.  Leading and trailing blanks and separating blanks in excess of one are redundant and ignored.  If <code>X</code> is present, <code>X</code> specifies one or more alternative separating characters.  Blanks in leading and trailing positions in <code>Y</code> and between numeric strings separated also by the character(s) in <code>X</code> are redundant and ignored.  Leading, trailing and adjacent occurrences of the character(s) in <code>X</code> are not redundant.  The character 0 is implied in <code>Y</code> before a leading character, after a trailing character, and between each adjacent pair of characters specified by <code>X</code>.</p> <p>The length of the items of <code>R</code> is the same as the number of identifiable strings (or implied strings) in <code>Y</code> separated by blank or the value of <code>X</code>.  An element of the first item of <code>R</code> is 1 where the corresponding string in <code>Y</code> is a valid numeric representation, or 0 otherwise.  An element of the second item of <code>R</code> is the numeric value of the corresponding string in <code>Y</code> if it is a valid numeric representation, or 0 otherwise.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/vfi/#examples","title":"Examples","text":"<pre><code>\n      \u2395VFI '2 -2 \u00af2'\n 1 0 1  2 0 \u00af2\n\n      \u2395VFI '12.1 1E1 1A1 \u00af10'\n 1 1 0 1  12.1 10 0 \u00af10\n\n      \u2283(//\u2395VFI'12.1 1E1 1A1 \u00af10')\n12.1 10 \u00af10\n\n      ','\u2395VFI'3.9,2.4,,76,'\n 1 1 1 1 1  3.9 2.4 0 76 0\n\n      '\u22c4'\u2395VFI'1 \u22c4 2 3 \u22c4 4 '\n 1 0 1  1 0 4\n      (\u236c \u236c)\u2261\u2395VFI''\n1\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/","title":"Xml","text":"XML Convert R\u2190{X} \u2395XML Y <p><code>\u2395XML</code> converts an XML string into an APL array or converts an APL array into an XML string.</p> <p>Options for <code>\u2395XML</code> are specified using the Variant operator <code>\u2360</code> or by the optional left argument <code>X</code>. The former is recommended but the older mechanism using the left argument is still supported.</p> <p>For conversion from XML, <code>Y</code> is a character vector containing an XML string. The result <code>R</code> is a 5 column matrix whose columns are made up as follows:</p> Column Description 1 Numeric value which indicates the level of nesting 2 Element name, other markup text, or empty character vector when empty 3 Character data or empty character vector when empty 4 Attribute name and value pairs, ( <code>0 2\u2374\u2282''</code> ) when empty 5 A numeric value which indicates what the row contains <p>The values in column 5  have the following meanings:</p> Value Description 1 Element 2 Child element 4 Character data 8 Markup not otherwise defined 16 Comment markup 32 Processing instruction markup <p>These values are additive. For example, a value of 5 in column 5 means that the row contains both an element (value 1) and character data (value 4).</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#example","title":"Example","text":"<pre><code>      x\u2190'&lt;xml&gt;&lt;document id=\"001\"&gt;An introduction to XML'\n      x,\u2190'&lt;/document&gt;&lt;/xml&gt;'\n</code></pre> <pre><code>  ]display v\u2190\u2395XML x\n</code></pre> <p>\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2193   \u250c\u2192\u2500\u2500\u2510      \u250c\u2296\u2510                      \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502 \u2502 0 \u2502xml\u2502      \u2502 \u2502                      \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502    3 \u2502 \u2502   \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2518                      \u2502 \u2502 \u2502 \u2502 \u2502 \u2502      \u2502 \u2502                                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502      \u2502 \u2502                                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502 \u2502   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502 \u2502 1 \u2502document\u2502 \u2502An introduction to XML\u2502 \u2193 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 5 \u2502 \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502id\u2502 \u2502001\u2502 \u2502   \u2502 \u2502                                       \u2502 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502   \u2502 \u2502                                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>For conversion to XML, <code>Y</code> is a 3, 4 or 5 column matrix and the result <code>R</code> is a character vector. The columns of <code>Y</code> have the same meaning as those described above for the result of converting from XML.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#example_1","title":"Example","text":"<pre><code>      \u2395XML v\n&lt;xml&gt; \n  &lt;document id=\"001\"&gt;An introduction to XML&lt;/document&gt;\n&lt;/xml&gt;\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#introduction-to-xml-and-glossary-of-terms","title":"Introduction to XML and Glossary of Terms","text":"<p>XML is an open standard, designed to allow exchange of data between applications. The full specification http://www.w3.org/TR/2008/REC-xml-20081126/ describes functionality, including processing directives and other directives, which can transform XML data as it is read, and which a full XML processor would be expected to handle.</p> <p>The <code>\u2395XML</code> function is designed to handle XML to the extent required to import and export APL data. It favours speed over complexity - some markup is tolerated but largely ignored, and there are no XML query or validation features. APL applications which require processing, querying or validation will need to call external tools for this, and finally call <code>\u2395XML</code> on the resulting XML to perform the transformation into APL arrays.</p> <p>XML grammar such as processing instructions, document type declarations etc. may optionally be stored in the APL array, but will not be processed or validated. This is principally to allow regeneration of XML from XML input which contains such structures, but an APL application could process the data if it chose to do so.</p> <p>The XML definition uses specific terminology to describe its component parts. The following is a summary of the terms used in this section:</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#character-data","title":"Character Data","text":"<p>Character data consists of free-form text. The free-form text should not include the characters '&gt;', '&lt;' or '&amp;', so these must be represented by their entity references ('&gt;', '&lt;' and '&amp;' respectively), or numeric character references.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#entity-references-and-character-references","title":"Entity References and Character References","text":"<p>Entity references are named representations of single characters which cannot normally be used in character data because they are used to delimit markup, such as &gt; for '&gt;'. Character references are numeric representations of any character, such as  for space. Note that character references always take values in the Unicode code space, regardless of the encoding of the XML text itself.</p> <p><code>\u2395XML</code> converts entity references and all character references which the APL character set is able to represent into their character equivalent when generating APL array data; when generating XML it converts any or all characters to entity references as needed.</p> <p>There is a predefined set of entity references, and the XML specification allows others to be defined within the XML using the &lt;!ENTITY &gt; markup. <code>\u2395XML</code> does not process these additional declarations and therefore will only convert the predefined types.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#whitespace","title":"Whitespace","text":"<p>Whitespace sequences consist of one or more spaces, tabs or line-endings. Within character data, sequences of one or more whitespace characters are replaced with a single space when this is enabled by the whitespace option. Line endings are represented differently on different systems (0x0D 0x0A, 0x0A and 0x0D are all used) but are normalized by converting them all to 0x0A before the XML is parsed, regardless of the setting of the whitespace option.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#elements","title":"Elements","text":"<p>An element consists of a balanced pair of tags or a single empty element tag. Tags are given names, and start and end tag names must match.</p> <p>An example pair of tags, named TagName is</p> <p></p> <p>This pair is shown with no content between the tags; this may be abbreviated as an empty element tag as</p> <p></p> <p>Tags may be given zero or more attributes, which are specified as name/value pairs; for example</p> <p> <p>Attribute values may be delimited by either double quotes as shown or single quotes (apostrophes); they may not contain certain characters (the delimiting quote, '&amp;' or '&lt;') and these must be represented by entity or character references.</p> <p>The content of elements may be zero or more mixed occurrences of character data and nested elements. Tags and attribute names describe data, attribute values and the content within tags contain the data itself. Nesting of elements allows structure to be defined.</p> <p>Because certain markup which describes the format of allowable data (such as element type declarations and attribute-list declarations) is not processed, no error will be reported if element contents and attributes do not conform to their restricted declarations, nor are attributes automatically added to tags if not explicitly given.</p> <p>Attributes with names beginning xml: are reserved. Only xml:space is treated specially by <code>\u2395XML</code>. When converting both from and to XML, the value for this attribute has the following effects on space normalization for the character data within this element and child elements within it (unless subsequently overridden):</p> <ul> <li>default \u2013 space normalization is as determined by the whitespace option. </li> <li>preserve - space normalization is disabled \u2013 all whitespace is preserved as given.</li> <li>any other value \u2013 rejected.</li> </ul> <p>Regardless of whether the attribute name and value have a recognised meaning, the attribute will be included in the APL array / generated XML. Note that when the names and values of attributes are examined, the comparisons are case-sensitive and take place after entity references and character references have been expanded.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#comments","title":"Comments","text":"<p>Comments are fully supported markup. They are delimited by '' and all text between these delimiters is ignored. This text is included in the APL array if markup is being preserved, or discarded otherwise.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#cdata-sections","title":"CDATA Sections","text":"<p>CDATA Sections are fully supported markup. They are used to delimit text within character data which has, or may have, markup text in it which is not to be processed as such. They and are delimited by '&lt;![CDATA[' and ']]&gt;'. CDATA sections are never recorded in the APL array as markup when XML is processed \u2013 instead, that data appears as character data. Note that this means that if you convert XML to an APL array and then convert this back to XML, CDATA sections will not be regenerated. It is, however, possible to generate CDATA sections in XML by presenting them as markup.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#processing-instructions","title":"Processing Instructions","text":"<p>Processing Instructions are delimited by '&lt;&amp;' and '&amp;&gt;' but are otherwise treated as other markup, below.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#other-markup","title":"Other markup","text":"<p>The remainder of XML markup, including document type declarations,  XML declarations and text declarations are all delimited by '&lt;!' and '&gt;', and may contain nested markup. If markup is being preserved the text, including nested markup, will appear as a single row in the APL array.  <code>\u2395XML</code> does not process the contents of such markup. This has varying effects, including but not limited to the following:</p> <ul> <li>No validation is performed.</li> <li>Constraints specified in markup such element type declarations will be ignored and therefore syntactically correct elements which fall outside their constraint will not be rejected.</li> <li>Default attributes in attribute-list declarations will not be automatically added to elements.</li> <li>Conditional sections will always be ignored.</li> <li>Only standard, predefined, entity references will be recognized; entity declarations which define others entity references will have no effect.</li> <li>External entities are not processed.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#conversion-from-xml","title":"Conversion from XML","text":"<ul> <li>The level number in the first column of the result <code>R</code> is 0 for the outermost level and subsequent levels are represented by an increase of 1 for each level. Thus, for</li> <li>An introduction to XML </li> <li>The xml element is at level 0 and the document id element is at level 1. The text within the document id element is at level 2.</li> <li>Each tag in the XML contains an element name and zero or more attribute name and value pairs, delimited by '&lt;' and '&gt;' characters. The delimiters are not included in the result matrix. The element name of a tag is stored in column 2 and the attribute(s) in column 4.</li> <li>All XML markup other than tags are delimited by either '&lt;!' and '&gt;', or '&lt;?' and '&gt;' characters. By default these are not stored in the result matrix but the markup option may be used to specify that they are. The elements are stored in their entirety, except for the leading and trailing '&lt;' and '&gt;' characters, in column 2. Nested constructs are treated as a single block. Because the leading and trailing '&lt;' and '&gt;' characters are stripped, such entries will always have either '!' or '&amp;' as the first character.</li> <li>Character data itself has no tag name or attributes. As an optimisation, when character data is the sole content of an element, it is included with its parent rather than as a separate row in the result. Note that when this happens, the level number stored is that of the parent; the data itself implicitly has a level number one greater.</li> <li>Attribute name and value pairs associated with the element name are stored in the fourth column, in an (n x 2) matrix of character values, for the n (including zero) pairs.</li> <li>Each row is further described in the fifth column as a convenience to simplify processing of the array (although this information could be deduced). Any given row may contain an entry for an element, character data, markup not otherwise defined, a comment or a processing instruction. Furthermore, an element will have zero or more of these as children. For all types except elements, the value in the fifth column is as shown above. For elements, the value is computed by adding together the value of the row itself (1) and those of its children. For example, the value for a row for an element which contains one or more sub-elements and character data is 7 \u2013 that is 1 (element) + 2 (child element) + 4 (character data). It should be noted that:</li> <li>Odd values always represent elements. Odd values other than 1 indicate that there are children.</li> <li>Elements which contain just character data (5) are combined into a single row as noted previously.</li> <li>Only immediate children are considered when computing the value. For example, an element which contains a sub-element which in turn contains character data does not itself contain the character data.</li> <li>The computed value is derived from what is actually preserved in the array. For example, if the source XML contains an element which contains a comment, but comments are being discarded, there will be no entry for the comment in the array and the fifth column for the element will not indicate that it has a child comment.</li> </ul>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#conversion-to-xml","title":"Conversion to XML","text":"<p>Conversion to XML takes an array with the format described above and generates XML text from it. There are some simplifications to the array which are accepted:</p> <ul> <li>The fifth column is not needed for XML generation and is effectively ignored. Any numeric values are accepted, or the column may be omitted altogether. If the fifth column is omitted then the fourth column may also be omitted.</li> <li>For the fourth column, if there are no attributes in a particular row then the <code>(0 2\u2374\u2282'')</code> may be abbreviated as <code>\u236c</code> (zilde). If there is only one attribute then a 2-element vector can be specified.</li> <li>Data in the third column and attribute values in the fourth column (if present) may be provided as either character vectors or numeric values. Numeric values are implicitly formatted as if <code>\u2395PP</code> was set to 17.</li> </ul> <p>The following validations are performed on the data in the array:</p> <ul> <li>All elements within the array are checked for type.</li> <li>Values in column 1 must be non-negative and start from level 0, and the increment from one row to the next must be <code>\u2264</code> +1. </li> <li>Tag names in column 2 and attribute names in column 4 (if present) must conform to the XML name definition.</li> </ul> <p>Then, character references and entity references are emitted in place of characters where necessary, to ensure that valid XML is generated. However, markup, if present, is not validated and it is possible to generate invalid XML if care in not taken with markup constructs.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#options","title":"Options","text":"<p>There are 3 options which may be specified using the Variant operator <code>\u2360</code> (recommended) or by the optional left argument <code>X</code> (retained for backwards compatibility). The names are different and are case-sensitive; they must be spelled exactly as shown below.</p> Option names for Variant Option names for left argument Whitespace whitespace Markup markup UnknownEntity unknown-entity <p>The values of each option are tabulated below. In each case the value of the option for Variant is given first, followed by its equivalent for the optional left argument in brackets; e.g. UnknownEntity (unknown-entity).</p> <p>Note that the default value is shown first, and that the option names and values are case-sensitive.</p> <p>If options are specified using the optional left argument,  <code>X</code> specifies a set of option/value pairs, each of which is a character vector. <code>X</code> may be a 2-element vector, or a vector of 2-element character vectors. In the examples below, this method is illustrated by the equivalent expression written as a comment, following the recommended approach using the Variant operator <code>\u2360</code>. i.e.</p> <pre><code>\n      ]display (\u2395XML\u2360'Whitespace' 'Strip')eg\n      \u235d      'whitespace' 'strip' \u2395XML eg\n</code></pre> <p>Errors detected in the input arrays or options will all cause <code>DOMAIN ERROR</code>.</p>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#whitespace-whitespace","title":"Whitespace (whitespace)","text":"<p>When converting from XML <code>Whitespace</code> specifies the default handling of white space surrounding and within character data. When converting to XML <code>Whitespace</code> specifies the default formatting of the XML. Note that attribute values are not comprised of character data so white space in attribute values is always preserved.</p> Converting from XML Strip (strip) <code>Trim (trim)</code> <code>Preserve (preserve)</code> Converting to XML Strip (strip) <code>Trim (trim)</code> <code>Preserve (preserve)</code> <pre><code>\n      ]display eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502&lt;xml&gt;               \u2502\n\u2502  &lt;a&gt;               \u2502\n\u2502    Data1           \u2502\n\u2502    &lt;!-- Comment --&gt;\u2502\n\u2502    Data2           \u2502\n\u2502    &lt;b&gt; Data3 &lt;/b&gt;  \u2502\n\u2502    Data4           \u2502\n\u2502    &lt;c att=\"val\"/&gt;  \u2502\n\u2502  &lt;/a&gt;              \u2502\n\u2502&lt;/xml&gt;              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ]display (\u2395XML\u2360'Whitespace' 'Strip')eg\n      \u235d      'whitespace' 'strip' \u2395XML eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193   \u250c\u2192\u2500\u2500\u2510 \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 0 \u2502xml\u2502 \u2502 \u2502           \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     3 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2518           \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 1 \u2502a\u2502   \u2502 \u2502           \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     7 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518           \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502Data1 Data2\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2510       \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502b\u2502   \u2502Data3\u2502       \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     5 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2510       \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502Data4\u2502       \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502 2 \u2502c\u2502   \u2502 \u2502           \u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 1 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518           \u2502 \u2502att\u2502 \u2502val\u2502 \u2502   \u2502\n\u2502                       \u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502   \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n</code></pre> <pre><code>      ]display (\u2395XML\u2360'Whitespace' 'Preserve')eg\n      \u235d         'whitespace' 'preserve' \u2395XML eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193   \u250c\u2192\u2500\u2500\u2510 \u250c\u2296\u2510         \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 0 \u2502xml\u2502 \u2502 \u2502         \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     7 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2518         \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                     \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2510        \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 1 \u2502 \u2502   \u2502  \u2502        \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2502  \u2502        \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502         \u2514\u2500\u2500\u2518        \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510         \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 1 \u2502a\u2502   \u2502 \u2502         \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     7 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518         \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                     \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502         \u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2502    Data1\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502         \u2502         \u2502 \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502         \u2502    Data2\u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502         \u2502         \u2502                   \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502b\u2502   \u2502 Data3 \u2502   \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     5 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                     \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502         \u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2502    Data4\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502         \u2502         \u2502 \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510         \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502 2 \u2502c\u2502   \u2502 \u2502         \u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 1 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518         \u2502 \u2502att\u2502 \u2502val\u2502 \u2502   \u2502\n\u2502                     \u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502   \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2510        \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502  \u2502        \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2502  \u2502        \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502         \u2514\u2500\u2500\u2518        \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2510         \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 1 \u2502 \u2502   \u2502 \u2502         \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2502 \u2502         \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502         \u2514\u2500\u2518         \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                     \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#markup-markup","title":"Markup (markup)","text":"<p>When converting from XML, <code>Markup</code> determines whether markup (other than entity tags) appears in the output array or not. When converting to XML <code>Markup</code> has no effect.</p> Converting from XML Strip (strip) <code>Preserve (preserve)</code> <pre><code>\n      ]display eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502&lt;xml&gt;               \u2502\n\u2502  &lt;a&gt;               \u2502\n\u2502    Data1           \u2502\n\u2502    &lt;!-- Comment --&gt;\u2502\n\u2502    Data2           \u2502\n\u2502    &lt;b&gt; Data3 &lt;/b&gt;  \u2502\n\u2502    Data4           \u2502\n\u2502    &lt;c att=\"val\"/&gt;  \u2502\n\u2502  &lt;/a&gt;              \u2502\n\u2502&lt;/xml&gt;              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ]display (\u2395XML\u2360'Markup' 'Strip')eg\n      \u235d      'markup' 'strip' \u2395XML eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193   \u250c\u2192\u2500\u2500\u2510 \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 0 \u2502xml\u2502 \u2502 \u2502           \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     3 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2518           \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 1 \u2502a\u2502   \u2502 \u2502           \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     7 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518           \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502Data1 Data2\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2510       \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502b\u2502   \u2502Data3\u2502       \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     5 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2296\u2510   \u250c\u2192\u2500\u2500\u2500\u2500\u2510       \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502 2 \u2502 \u2502   \u2502Data4\u2502       \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 \u2502 \u2502 \u2502 \u2502 \u2502       \u2502\n\u2502                       \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502       \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502   \u250c\u2192\u2510   \u250c\u2296\u2510           \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502 2 \u2502c\u2502   \u2502 \u2502           \u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 1 \u2502\n\u2502   \u2514\u2500\u2518   \u2514\u2500\u2518           \u2502 \u2502att\u2502 \u2502val\u2502 \u2502   \u2502\n\u2502                       \u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502   \u2502\n\u2502                       \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      ]display (\u2395XML\u2360'Markup' 'Preserve')eg\n      \u235d         'markup' 'preserve' \u2395XML eg\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193   \u250c\u2192\u2500\u2500\u2510            \u250c\u2296\u2510     \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 0 \u2502xml\u2502            \u2502 \u2502     \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     3  \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2518            \u2514\u2500\u2518     \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2192\u2510              \u250c\u2296\u2510     \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 1 \u2502a\u2502              \u2502 \u2502     \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     23 \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2518     \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2296\u2510              \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 2 \u2502 \u2502              \u2502Data1\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4  \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2296\u2510     \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 2 \u2502!-- Comment --\u2502 \u2502 \u2502     \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     16 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2518     \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2296\u2510              \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 2 \u2502 \u2502              \u2502Data2\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4  \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2192\u2510              \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 2 \u2502b\u2502              \u2502Data3\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     5  \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2296\u2510              \u250c\u2192\u2500\u2500\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 2 \u2502 \u2502              \u2502Data4\u2502 \u233d \u250c\u2296\u2510 \u250c\u2296\u2510 \u2502     4  \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502        \u2502\n\u2502                            \u2502 \u2514\u2500\u2518 \u2514\u2500\u2518 \u2502        \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502   \u250c\u2192\u2510              \u250c\u2296\u2510     \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502 2 \u2502c\u2502              \u2502 \u2502     \u2193 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 1  \u2502\n\u2502   \u2514\u2500\u2518              \u2514\u2500\u2518     \u2502 \u2502att\u2502 \u2502val\u2502 \u2502    \u2502\n\u2502                            \u2502 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502    \u2502\n\u2502                            \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"language-reference-guide/system-functions/system-functions-categorised/tools-and-access-to-external-facilities/tools-and-access-to-external-utilities/xml/#unknownentity-unknown-entity","title":"UnknownEntity (unknown-entity)","text":"<p>When converting from XML, this option determines what happens when an unknown entity reference, or a character reference for a Unicode character which cannot be represented as an APL character, is encountered. In Classic versions of Dyalog APL that is any Unicode character which does not appear in <code>\u2395AVU</code>. When converting to XML, this option determines what happens to Esc characters (<code>\u2395UCS 27</code>) in data.</p> Converting from XML Replace (replace) <code>Preserve (preserve)</code> Converting to XML Replace (replace) <code>Preserve (preserve)</code>"},{"location":"language-reference-guide/the-i-beam-operator/i-beam/","title":"I-Beam","text":"I-Beam R\u2190{X}(A\u2336)Y <p>I-Beam is a monadic operator that provides a range of system related services.</p> <p>WARNING: Although documentation is provided for I-Beam functions, any service provided using I-Beam should be considered as \"experimental\" and subject to change \u2013 without notice - from one release to the next. Any use of I-Beams in applications should therefore be carefully isolated in cover-functions that can be adjusted if necessary. See also: RIDE and Experimental Features-related I-Beams on page 1.</p> <p><code>A</code> is an integer that specifies the type of operation to be performed  as shown in the table below. <code>Y</code> is an array that supplies further information about what is to be done.</p> <p><code>X</code> may or may not be required depending on <code>A</code>.</p> <p><code>R</code> is the result of the derived function.</p> <p>When attempting to use  I-Beam with an unsupported operation value, <code>A</code>, one of three different error messages will be reported:</p> <ul> <li>Invalid I-Beam function selection</li> <li>I-Beam function xxx has been withdrawn</li> <li>I-Beam function xxx is not supported by this interpreter</li> </ul> <p>This allows the user to distinguish between operation values that have never been used, those that have been used in earlier versions but are no longer included in the current version, and those that are valid in other editions or on other platforms other than the current interpreter.</p> <p>The column labelled O/S indicates if a function applies only on Windows (W), only on Windows .NET Framework, (WF), only under IBM AIX (AIX), or only on non-Windows (X) platforms.</p> A Derived Function O/S <code>8</code> Inverted Table Index-of <code>85</code> Execute Expression <code>127</code> Overwrite Free Pockets <code>180</code> Canonical Representation <code>181</code> Unsqueezed Type <code>200</code> Syntax Colouring <code>201</code> Syntax Colour Tokens <code>219</code> Compress/Decompress Vector of Short Integers <code>220</code> Serialise/Deserialise Array <code>400</code> Compiler Control <code>600</code> Trap Control <code>739</code> Temporary Directory <code>819</code> Case Convert <code>900</code> Called Monadically <code>950</code> Loaded Libraries <code>1010</code> Set Shell Script Debug Options <code>1111</code> Number of Threads <code>1112</code> Parallel Execution Threshold <code>1159</code> Update Function Time and User Stamp <code>1200</code> Format Date-time <code>1302</code> Set aplcore Parameters <code>1500</code> Hash Array <code>2000</code> Memory Manager Statistics <code>2002</code> Specify Workspace Available <code>2007</code> Disable Global Triggers <code>2010</code> Update DataTable WF <code>2011</code> Read DataTable WF <code>2014</code> Remove Data Binding WF <code>2015</code> Create Data Binding Source WF <code>2016</code> Create .NET Delegate WF <code>2017</code> Identify .NET Type WF <code>2022</code> Flush Session Caption W <code>2023</code> Close all Windows <code>2035</code> Set Dyalog Pixel Type W <code>2041</code> Override COM Default Value W <code>2100</code> Export to Memory W <code>2101</code> Close .NET AppDomain WF <code>2250</code> Verify .NET Interface <code>2400</code> Set Workspace Save Options <code>2401</code> Expose Root Properties <code>2501</code> Discard thread on exit W <code>2502</code> Discard parked threads W <code>2503</code> Mark Thread as Uninterruptible <code>2520</code> Use Separate Thread For .NET WF <code>2704</code> Continue Autosave <code>3002</code> Disable Component Checksum Validation <code>3012</code> Enable Compression of Large Components <code>3500</code> Send Text to RIDE-embedded Browser <code>3501</code> Connected to the RIDE <code>3502</code> Manage RIDE Connections <code>4000</code> Fork New Task AIX <code>4001</code> Change User X <code>4002</code> Reap Forked Tasks AIX <code>4007</code> Signal Counts X <code>5171</code> Discard Source Information <code>5172</code> Discard Source Code <code>5176</code> List Loaded Files <code>5177</code> List Loaded File Objects <code>5178</code> Remove Loaded File Object Info <code>5179</code> Loaded File Object Info <code>7162</code> JSON Translate Name <code>8415</code> Singular Value Decomposition <code>8674</code> Externalise Array <code>9468</code> Hash Table Size <code>9469</code> Lookup Table Size <code>16808</code> Sample Probability Distribution <code>50100</code> Line Count"},{"location":"language-reference-guide/the-i-beam-operator/a-z/called-monadically/","title":"Called Monadically","text":"Called Monadically R\u2190900\u2336Y <p>Identifies how the current function was called. <code>900\u2336</code> applies only when called from within a variadic defined function (not a dfn).</p> <p><code>Y</code> may be any array.</p> <p>The result <code>R</code> is Boolean. 1 means that the current function was called monadically; 0 means that it wasn't. If there is no function on the stack, the result is 0.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/called-monadically/#example","title":"Example","text":"<pre><code>     \u2207 r\u2190{left}foo right\n[1]    r\u2190900\u2336\u236c\n     \u2207\n      foo 10\n1\n      0 foo 10\n0\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/canonical-representation/","title":"Canonical Representation","text":"Canonical Representation R\u2190180\u2336Y <p>This function is the same as the system function <code>\u2395CR</code> except that it can be used to obtain the canonical representation of methods in classes. <code>180\u2336</code> is used by <code>]PROFILE</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/canonical-representation/#example","title":"Example","text":"<pre><code>\n      )load ComponentFile\nC:\\Program Files\\Dyalog\\Dyalog APL-64 15.0 Unicode\\...\n\n      180\u2336'ComponentFile.Close'\n Close                          \n :Implements Destructor         \n :If tie\u220a\u2395FNUMS                 \n     :If temp \u22c4 Name \u2395FERASE tie\n     :Else \u22c4 \u2395FUNTIE tie        \n     :EndIf                     \n :EndIf                         \n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/case-convert/","title":"Case Convert","text":"Case Convert R\u2190{X}(819\u2336)Y"},{"location":"language-reference-guide/the-i-beam-operator/a-z/case-convert/#note","title":"Note:","text":"<p>This i-beam function has been replaced by a system function and is deprecated. See Case Convert on page 1.</p> <p>Converts character data in <code>Y</code> to upper or lower-case. This function is considerably faster than any comparable function coded in APL, especially on nested arrays.</p> <p><code>Y</code> may be any array of arbitrary depth so long as all the elements are characters.</p> <p>The optional left-argument <code>X</code> is 0 (convert to lower-case) or 1 (convert to upper-case). If omitted, the default is 0.</p> <p>The result <code>R</code> has the same structure as  <code>Y</code> but each character element is case folded to upper or lower case.</p> <p>Characters are converted per the default case mappings specified by The Unicode Consortium, described at:  ftp://ftp.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.html</p> <p>and using the table at:  http://unicode.org/Public/UNIDATA/UnicodeData.txt</p> <p>If conversion is being used to do case-insensitive character comparisons then converting everything to lower case is generally preferable to converting everything to upper. This is because converting to lower case can be faster.</p> <p>This I-beam is supported in Classic Edition  using the same code as the Unicode Edition. This means that any case-folding defined in the input translate tables is ignored, and that <code>TRANSLATION ERROR</code>s will be generated if the folded characters do not appear in <code>\u2395AV</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/case-convert/#examples","title":"Examples","text":"<pre><code>\n      (819\u2336) 'How many Roads must a man walk down'\nhow many roads must a man walk down\n      1 (819\u2336) 'How many Roads must a man walk down'\nHOW MANY ROADS MUST A MAN WALK DOWN\n\n      data\u21901000\u2374\u2282'Hello there.'\n      lc_data\u2190819\u2336 data\n      4\u2191lc_data\n hello there.  hello there.  hello there.  hello there.\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/change-user/","title":"Change User","text":"Change User R\u21904001\u2336Y <p><code>Y</code> is a character vector that specifies a valid UNIX user name. The function changes the userid (uid) and groupid (gid) of the process to values that correspond to the specified user name.</p> <p>Note that it is only possible to change the user name if the effective uid is 0 (that is, the process has root privileges).</p> <p>If the operation is successful, <code>R</code> is the user name specified in <code>Y</code>. Note that the value of <code>\u2395AN</code> will not be affected, but the value of <code>\u2283\u2395AI</code> will be.</p> <p>If the operation fails, the function generates a <code>FILE ERROR 1 Not Owner</code> error.</p> <p>If the argument to <code>4001\u2336</code> is other than a non-empty simple character vector, the function generates a <code>DOMAIN ERROR</code>.</p> <p>If the argument is not the name of a valid user the function generates a <code>FILE ERROR 3 No such process</code>.</p> <p>If the argument is the same name as the current effective user, then the function returns that name, but has no effect.</p> <p>If the argument is a valid name other than the name of the effective user id of the current process, and that effective user id is not root the function generates a <code>FILE ERROR 1 Not owner</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/close-all-windows/","title":"Close All Windows","text":"Close All Windows R\u21902023\u2336Y <p>Under Windows the option, Windows -&gt; Close All Windows allows the user to close all open Editor and Tracer Windows, but does not reset the state indicator.</p> <p>This I-beam mimics this behaviour, thus allowing the user to write code which can close all windows before attempting to save the workspace; with the exception of calling <code>0 \u2395SAVE</code> it is not possible to save a workspace if any editor or tracer windows are open.</p> <p>Under non-Windows operating systems this is the only mechanism for closing all such windows. This I-beam is effective in RIDE too.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/close-all-windows/#example","title":"Example","text":"<pre><code>\n      2023\u23360    \n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/close-net-appdomain/","title":"Close .NET AppDomain","text":"Close .NET AppDomain R\u21902101\u2336Y <p>This function closes the current .NET AppDomain.</p> <p><code>Y</code> may be any array and is ignored.</p> <p>The result <code>R</code> is 0 if the operation succeeded or a non-zero integer if it failed.</p> <p>This I-Beam is very likely to be changed in future.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compiler-control/","title":"Compiler Control","text":"Compiler Control R\u2190{X}(400\u2336)Y <p>Controls the actions of the Compiler. For further information, see .</p> <p>The optional left-argument <code>X</code> must be one of the following:</p> <code>X</code> Description <code>0</code> Set automatic compilation options (default) <code>1</code> Determine whether the function/operator <code>Y</code> has been successfully compiled <code>2</code> Compile the function/operator <code>Y</code> <code>3</code> Discard compiled form of the function/operator <code>Y</code> <code>4</code> Show bytecode for the compiled function/operator <code>Y</code> <code>nsref</code> Compile the function/operator <code>Y</code> using user-defined callbacks in this namespace to provide information about global names <p>The nature of <code>Y</code> and <code>R</code> depend on the value of <code>X</code> as follows:</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compiler-control/#x0-control-automatic-compilation-default","title":"X=0 : Control Automatic Compilation (default)","text":"<p><code>Y</code> must be an integer 0, 1, 2, or 3.</p> <code>Y</code> Description <code>0</code> disable automatic compilation (initial setting) <code>1</code> compile functions when they are fixed (with <code>\u2395FX</code> or from the function editor) <code>2</code> compile operators the first time they are executed <code>3</code> compile functions when they are fixed (with <code>\u2395FX</code> or from the function editor) and compile operators the first time they are executed <p>The result <code>R</code> is the previous value of <code>Y</code>.</p> <p>The automatic compilation setting is maintained within the workspace, and is saved and loaded with the workspace.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compiler-control/#x1-query-compilation-state","title":"X=1: Query Compilation State","text":"<p><code>Y</code> must be a character vector, matrix or vector of vectors specifying the name of a function or operator or a list of such names.</p> <p>The result <code>R</code> is a Boolean scalar or vector, with the value 1 if the corresponding function/operator has been successfully compiled or 0 if it has not.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compiler-control/#x2-compile","title":"X=2: Compile","text":"<p><code>Y</code> must be a character vector, matrix or vector of vectors specifying the name of a function or operator or a list of such names that should be compiled.</p> <p>The result <code>R</code> is a matrix of diagnostic information or, if <code>Y</code> was either a matrix or a vector of vectors, a vector of such matrices. Each row of the matrix describes a problem that caused the compilation to fail, with four columns corresponding to:</p> <ol> <li>the APL error number</li> <li>the line number in the function/operator</li> <li>the column number (currently always 0)</li> <li>the error message</li> </ol> <p>If the matrix <code>R</code> has zero rows then the compilation was successful.</p> <p>If this mechanism is used to compile operators, then the compiled bytecode will assume that the operator's operands are functions rather than arrays. At run time, the operands will be checked \u2013 if they are functions then the compiled bytecode will be used, otherwise the operator will be interpreted.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compiler-control/#x3-discard-compiled-form","title":"X=3: Discard Compiled Form","text":"<p>If <code>Y</code> is empty, discard any compiled bytecode for all functions and operators in the workspace. If <code>Y</code> is a character vector, matrix or vector of vectors specifying the name of a function or operator or a list of such names, discard any compiled bytecode for the name(s) specified by <code>Y</code>. <code>R</code> is always 0</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compiler-control/#x4-show-bytecode","title":"X=4: Show Bytecode","text":"<p><code>Y</code> must be a character vector, matrix or vector of vectors specifying the name of a function or operator or a list of such names.</p> <p>The result <code>R</code> is a multi-line string (that is, a character vector with embedded newlines) or, if <code>Y</code> was either a matrix or a vector of vectors, a vector of such strings. Each string is a human-readable representation of the bytecode of a compiled function or operator.</p> <p>This functionality is provided for information and diagnostic purposes only. The human-readable form of the bytecode is subject to change at any time.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compiler-control/#x-is-a-namespace-reference-compile-with-callbacks","title":"X is a namespace reference: Compile With Callbacks","text":"<p><code>Y</code> must be a character vector, matrix or vector of vectors specifying the name of a function or operator or a list of such names. The specified functions or operators are compiled in the same way as when <code>X</code> = 2  except that the compiler uses the user-defined callback functions in the namespace <code>X</code> to obtain information about global names. The namespace <code>X</code> can contain any or all of following callback functions:</p> Callback Description <code>quadNC</code> analogous to the system function <code>\u2395NC</code> . When applied monadically to an enclosed character vector it should return the detailed name class of that name. For example, given the name of a global dfn it should return the value 3.2. <code>quadAT</code> analogous to the system function <code>\u2395AT</code> . When applied monadically to an enclosed character vector it should return a 1 by 4 matrix whose first item is a vector of 3 integers describing (respectively) the result, function valence and operator valence of the name. <code>getValue</code> used to obtain the value of global constants. When applied monadically to a character vector that is a global constant it should return the enclose of the constant value, otherwise it returns <code>\u236c</code> . <p>Each of these callback functions returns information about names that should be guaranteed to exist when the compiled functions are executed. The compiler assumes that the information returned by the callbacks is correct, and generates bytecode accordingly. In the case of <code>quadNC</code> and <code>quadAT</code>, if the information returned by the callbacks turns out not to be correct when the compiled function is executed, then a runtime error is generated.</p> <p>The result <code>R</code> is a matrix of diagnostic information or, if <code>Y</code> was either a matrix or a vector of vectors, a vector of such matrices. Each row of the matrix describes a problem that caused the compilation to fail, with four columns corresponding to:</p> <ol> <li>the APL error number</li> <li>the line number in the function/operator</li> <li>the column number (currently always 0)</li> <li>the error message</li> </ol> <p>If the matrix <code>R</code> has zero rows then the compilation was successful.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compress-vector-of-short-integers/","title":"Compress Vector of Short Integers","text":"Compress Vector of Short Integers R\u2190X(219\u2336)Y <p>In most cases this I-Beam functionality will be used in conjunction with <code>220\u2336</code> (Serialise/Deserialise Array). However, it may be possible to pass the raw compressed data to and from other applications.</p> <p><code>X</code> specifies the operation to be performed, either compression or decompression, the compression library to be used, and any  optional parameters. <code>Y</code> contains the data to be operated on.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compress-vector-of-short-integers/#compression","title":"Compression","text":"<p><code>Y</code> must be a sint_vector.</p> <p><code>R</code> is a two item vector, each of which is a sint_vector. <code>R[1]</code> describes the compression, and <code>R[2]</code> contains the raw data which is the result of applying the compression library to the input data <code>Y</code>.</p> <p><code>X</code> is specified as follows:</p> <code>X[1]</code> <code>X[2]</code> Compression Library 1 n/a LZ4 2 0 .. 9 zlib 3 0 .. 9 gzip 4 n/a LZ4 with frames (compresses arrays &gt;2GB) <p>If LZ4 compression is required, then <code>X</code> must either be a scalar or a one element vector. Otherwise, <code>X[2]</code>, if present, specifies the compression level; higher numbers produce better compression, but take longer.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compress-vector-of-short-integers/#decompression","title":"Decompression","text":"<p><code>R</code> is a sint_vector, containing the output of applying the decompression library to the input data, <code>Y</code>.</p> <p>If <code>X</code> is a scalar or a one item vector, and has the value 0, then <code>Y</code> must be a vector of two items which is the result of previously calling <code>219\u2336</code> to compress a sint_vector.</p> <p>Otherwise, <code>X</code> is a scalar or one or two element vector and <code>Y</code> must be a sint_vector.</p> <p>The first element of <code>X</code> must be one of the following values.</p> <code>X[1]</code> Compression Library <code>\u00af1</code> LZ4 <code>\u00af2</code> zlib <code>\u00af3</code> gzip <p>The second, optional, element of <code>X</code> specifies the length of the uncompressed data. Its presence results in a more efficient use of the compression library.</p> <p><code>X</code> may not be a two item vector whose first item has the value 0.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/compress-vector-of-short-integers/#examples","title":"Examples","text":"<pre><code>\n      sint\u2190{\u2375-256\u00d7\u2375&gt;127}\n      utf8\u2190'UTF-8'\u2218\u2395ucs\n      str\u2190'empty\u2190\u236c'\n      \u22a3v\u2190sint utf8  str\n101 109 112 116 121 \u00af30 \u00af122 \u00af112 \u00af30 \u00af115 \u00af84          \n      \u22a3comp\u21901 (219\u2336) v\n8 \u00af55 1 0 0 0 0 11  \u00af80 101 109 112 116 121 \u00af30 \u00af122 \u00af112 \u00af30 \u00af115 \u00af84          \n\n      utf8 256| 0(219\u2336)comp\nempty\u2190\u236c\n      utf8 256| \u00af1(219\u2336)2\u2283comp\nempty\u2190\u236c                   \n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/connected-to-the-ride/","title":"Connected to the RIDE","text":"Connected to the RIDE R\u2190(3501\u2336)Y <p><code>Y</code> can be any value and is ignored.</p> <p>The result <code>R</code> identifies whether the Dyalog Session is running through the RIDE. Possible values are:</p> <ul> <li><code>0</code> : the Session is not running through the RIDE</li> <li><code>1</code> : the Session is running through the RIDE</li> </ul> <p>This I-Beam may be extended in future.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/","title":"Create Data Binding Source","text":"Create Data Binding Source R\u2190{X}2015\u2336Y <p>Creates an object that may be used as a data source for WPF data binding. It is beyond the scope of this document to fully explain the concepts of WPF data binding. See Microsoft Developer Network, Data Binding Overview.</p> <p>This function connects a Binding Target to a Binding Source. In WPF a Binding Target is a particular property of a user interface object; for example, the Text property of a TextBox object. A Binding Source is  a Path to a value in a data object (which may contain other values). The value of the Binding Source determines the value of the Binding Target. If two-way binding is in place, a change in a user-interface component causes the bound data value to change accordingly. In the example of the TextBox, the value in the Binding Source changes as the user types into the TextBox.</p> <p><code>Y</code> is a character vector containing one of the following:</p> <ul> <li>the name of a variable</li> <li>the name of a  namespace containing one or more variables</li> <li>the name of a variable containing a vector of refs to namespaces, each of which contains one or more variables.</li> </ul> <p>If the name specified by <code>Y</code> doesn't exist or represents neither a variable nor a namespace,  the function reports <code>DOMAIN ERROR</code>. Currently, no further validation of the structure and contents of <code>Y</code> is performed, but nothing other than the examples described herein is supported.</p> <p>If the optional left argument <code>X</code> is given and <code>Y</code> is a variable other than a ref, <code>X</code> specifies the binding type for that variable. If <code>Y</code> specifies one or more namespaces, <code>X</code> specifies the names and binding types of each of the variables which are to be bound, contained in the namespaces specified by  <code>Y</code>.</p> <p>The structure of <code>X</code> depends upon the structure of <code>Y</code> and is discussed later in this topic.</p> <p>If <code>X</code> is omitted, all of the variables specified by <code>Y</code> are bound with default binding types.</p> <p>Here the term bind variable refers to any variable specified by <code>X</code> and <code>Y</code> to be bound, and the term binding type means the .NET data type to which the value of the bind variable is converted before it is passed to the .NET interface.</p> <p><code>2015\u2336</code> creates a Binding Source object <code>R</code>. This is a .NET object which contains Path(s) to one or more bind variables. This object may then be assigned to a property of a WPF object or passed a s as a parameter to a WPF method that requires a Binding Source.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#bind-variables-and-bind-types","title":"Bind Variables and Bind Types","text":"<p>A bind variable should be of rank 2 or less. Higher rank arrays are not supported.</p> <p>If not specified by <code>X</code>, the  binding type of a bind variable is derived from its content  at the time <code>2015\u2336</code> is executed. The binding type is then stored with the variable in the workspace. There is no mechanism to change a variable's binding type without erasing the variable and re-executing <code>2015\u2336</code>. If you change the type or rank of a bind  variable while it is bound (for example from a variable to a namespace), the behaviour of the system is unpredictable.</p> <p>The default binding type is derived as follow:</p> <p>If the bind variable is a simple scalar number the default binding type is System.Object. At the point when the value of the variable is passed to the .NET interface this will be cast to a numeric type such as  System.Int16, System.Int32, System.Int64, or System.Double, depending upon the internal representation of the data. The .NET property to which it is bound will typically only accept a single Type (for example System.Int32), so to avoid unpredictable behaviour,  it is recommended that the left argument <code>X</code> be used to specify the binding type for numeric data.</p> <p>If the bind variable is a character scalar or vector, the default binding type is also System.Object, but at the point  when the value of the variable is passed to the .NET interface it will always be passed as System.String, which is suitable for binding to any property that accepts a System.String, such as the Text property of a TextBox.</p> <p>If the bind variable is a vector other than a simple character vector, such as a vector of character vectors,  a simple numeric vector, or a vector of .NET objects, the bind type will be a collection. This is suitable for binding to any property that  represents a collection (list) of items, for example the ItemsSource property of a ListBox.</p> <p>If the bind variable is a matrix, the default binding type is System.Object.</p> <p>All the examples that follow assume <code>\u2395USING\u2190'System'</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-single-variables","title":"Binding Single Variables","text":"<p>In this case, <code>Y</code> specifies the name of a variable which is one of the following:</p> <ul> <li>character vector (or scalar)</li> <li>numeric scalar</li> <li>scalar .NET object (not currently supported)</li> <li>vector of character vectors</li> <li>numeric vector</li> <li>vector of .NET objects</li> <li>matrix</li> </ul> <p><code>X</code> (if specified) defines the binding type for the bind variable named by <code>Y</code> and is a single .NET Type.</p> <p>Note that in the following examples, the reason for expunging the name first is discussed in the section headed Rebinding a Variable.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-a-character-vector","title":"Binding a Character Vector","text":"<p>This example illustrates how to bind a variable which contains a character vector.</p> <pre><code>      \u2395EX'txtSource'\n      txtSource\u2190HELLO WORLD'\n      bindsource\u21902015\u2336'txtSource'\n</code></pre> <p>In this example, the binding type of the variable <code>txtSource</code> will be System.String, suitable for binding to any property that accepts a String, such as the Text property of a <code>TextBox</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-a-numeric-scalar","title":"Binding a Numeric Scalar","text":"<p>This example illustrates how to bind a variable which contains a numeric scalar value.</p> <pre><code>      \u2395EX'sizeSource'\n      sizeSource\u219036\n      bindSource\u2190Int32(2015\u2336)'sizeSource'\n</code></pre> <p>In this example, the left argument <code>Int32</code> specifies that the binding type for the variable sizeSource is to be System.Int32. This means that whenever APL passes the value of <code>sizeSource</code> to the control, it will first be cast to an Int32. This makes it suitable, for example, for binding to the FontSize property of a TextBox.</p> <p>A number of controls have a Value property which must be expressed as a System.Double. The next example shows how to create a Binding Source for such a variable.</p> <pre><code>      \u2395EX'valSource'\n      valSource\u219042\n      bindSource\u2190Double(2015\u2336)'valSource'\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-a-scalar-net-object","title":"Binding a  Scalar .NET Object","text":"<p>This is currently not supported.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-a-vector-of-character-vectors","title":"Binding a Vector of Character Vectors","text":"<p>WPF data binding provides the means to bind controls that display lists of items, such as the ListBox, ListView, and TreeView controls, to collections of data. These controls are all based upon the ItemsControl class. To bind an ItemsControl to a collection object, you use its ItemsSource property.</p> <p>This example illustrates how to bind a variable which contains a vector of character vectors.</p> <pre><code>      \u2395EX'itemsSource'\n      itemsSource\u2190'beer' 'wine' 'water'\n      bindsource\u21902015\u2336'itemsSource'\n</code></pre> <p>In this example, the binding type of the variable <code>itemsSource</code> will be System.Collection, suitable for binding to the ItemSource property of an ItemsControl.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-a-numeric-vector","title":"Binding a Numeric Vector","text":"<p>By default, a numeric vector is bound in the same way as a vector of character vectors, i.e. as a System.Collection, suitable for binding to the ItemSource property of an ItemsControl.</p> <pre><code>      \u2395EX'yearsSource'\n      yearsSource\u21902000+\u237320\n      bindSource\u21902015\u2336'yearsSource'\n</code></pre> <p>In principle, a numeric vector may alternatively be bound to a WPF property that requires a 1-dimensional numeric array, by specifying the appropriate data type (e.g. Int32, Double) for the array as the left argument. For example:</p> <pre><code>      \u2395EX'arraySource'\n      arraySource\u219042 24\n      bindSource\u2190Int32 (2015\u2336)'arraySource'\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-a-vector-of-net-objects","title":"Binding a Vector of .NET Objects","text":"<p>A vector of .NET objects is bound in the same way as a vector of character vectors, i.e. as a System.Collection, suitable for binding to the ItemSource property of an ItemsControl.</p> <pre><code>      \u2191Easter\n2015 4 12\n2016 5  1\n2017 4 16\n2018 4  8\n2019 4 28\n2020 4 19\n2021 5  2\n2022 4 24\n2023 4 16\n2024 5  5\n      dt\u2190{\u2395NEW DateTime \u2375}\u00a8Easter\n      bindSource\u21902015\u2336'dt'\n\n</code></pre> <p>Note that, as a specific optimisation for binding DateTime data, it is not necessary to create <code>DateTime</code> objects in the workspace. Instead, the data may be represented by 7-element integer vectors (<code>\u2395TS</code> format) or character strings that can be parsed by the DateTime.Parse(String) method.  However, in both cases it is necessary to explicitly specify the binding type to force the data to be converted to <code>DateTime</code>, as illustrated by the following examples:</p> <pre><code>      TSEaster\u21907\u2191\u00a8Easter\n      bindSource\u2190DateTime (2015\u2336) 'TSEaster'\n\n</code></pre> <pre><code>      CharEaster\u2190'2015/4/12' '2016/5/1' '2017/4/16'\n      bindSource\u2190DateTime (2015\u2336) 'CharEaster'\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-a-matrix","title":"Binding a Matrix","text":"<p>If the bind variable is a matrix, it is bound in a similar way to a vector of namespaces and is discussed below.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#rebinding-a-variable","title":"Rebinding a Variable","text":"<p>As mentioned earlier, when a variable is bound its binding type is stored with it in the workspace. If you subsequently attempt to rebind the variable there is no mechanism in place to alter the binding type. If the current binding type (whether specified by the left argument <code>X</code>, or by being the default) differs from the saved one, the function will generate a <code>DOMAIN ERROR</code>.</p> <pre><code>      num\u219042\n      bs\u21902015\u2336'num'\n\n      bs\u2190'Int32'(2015\u2336)'num'\nDOMAIN ERROR: You cannot redefine the binding types\n      bs\u2190'Int32'(2015\u2336)'num'\n     \u2227\n\n</code></pre> <p>In this example, perhaps the programmer realised after binding <code>num</code> (with a default binding type of System.Object) that the binding type should really be System.Int32, and simply was trying to correct the error. To avoid this problem, it is recommended that you expunge the name before using it.</p> <pre><code>      \u2395EX 'num'\n      num\u219042\n      bs\u21902015\u2336'num'\u235d (default) binding type System.Object\n\n      \u2395EX 'num'\n      num\u219042\n      bs\u2190Int32(2015\u2336)'num'\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-a-namespace","title":"Binding A Namespace","text":"<p>In this case, <code>Y</code> specifies the name of a namespace that contains one or more variables. By default, each variable is bound using its default binding type as described above. Objects other than variables are ignored.</p> <p>If it is required to specify the binding type of any of the variables, or if certain variables are to be excluded, the left argument is a 2-column matrix. The first column contains the names of the variables to be bound, and the second column their binding types.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#example","title":"Example","text":"<p>The following code snippet binds a namespace containing two variables named <code>txtSource</code> and <code>sizeSource</code>. In this case, the name of each variable may be specified as the Path for a WPF property that requires a String or an Int32. For example, if bindSource were assigned to the DataContext property of a TextBox, its Text property could be bound to <code>txtSource</code> and its FontSize property to <code>sizeSource</code>.</p> <pre><code>      src\u2190\u2395NS''\n      src.txtSource\u2190'Hello World'\n      src.sizeSource\u219036\n      options\u21902 2\u2374'txtSource'String'sizeSource'Int32\n      bindSource\u2190options(2015\u2336)'src'\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-a-vector-of-namespaces","title":"Binding a Vector of Namespaces","text":"<p>In this case, <code>Y</code> specifies the name of a variable that contains a vector of refs to namespaces. In this case, the result <code>R</code> is of type Dyalog.Data.DataBoundCollectionHandler which is suitable for binding to a WPF property that requires  an IEnumerable implementation, such as the  ItemsSource property of the DataGrid.</p> <p>Each namespace in <code>Y</code> represents one of a collection of  instances of an object, which exports a particular set of properties for binding purposes. For example, <code>Y</code> could specify a wine database where each namespace represents a different wine, and each namespace contains the same set of variables that contain the name, price (and so forth) of each wine.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#example_1","title":"Example","text":"<pre><code> winelist\u2190\u2395NS\u00a8(\u2374Wines)\u2374\u2282''\n winelist.Name\u2190Wines\n winelist.Price\u21900.01\u00d710000+?(\u2374Wines)\u237410000\n\n bindSource\u21902015\u2336'winelist'\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#binding-a-matrix_1","title":"Binding a Matrix","text":"<p>Binding a matrix is like binding a vector of namespaces. Each row of <code>Y</code> represents one of a collection of  instances of an object, which exports a particular set of properties for binding purposes. Each column of  <code>Y</code> represents one of these properties.</p> <p>Every row in the datasource will be of the same type (which might not be the case with an array of namespaces), and so the collection is a collection of specific things. The specific thing is a .NET type that is created dynamically and has a unique name.</p> <p>Unlike variables in namespaces, the columns of an APL matrix do not have names which can be exported as properties, so this information must be provided in the left argument to <code>(2015\u2336)</code> which also specifies their data types. If the left argument is omitted, the default names are <code>Column1</code>, <code>Column2</code>, ... and so forth and the default data type is System.Object.</p> <p>So if the right argument  of <code>(2015\u2336)``Y</code> is the name of a matrix, the left argument <code>X</code> is a matrix with as many rows as there are columns in <code>Y</code>. <code>X[;1]</code> contains the names by which each of the columns of <code>Y</code> will be exported as a property, and <code>X[;2]</code> their data types.</p> <p>Values in the matrix may be scalar numbers, character scalars or vectors, or nested vectors, but each column in the matrix must be uniform.</p> <p>The result <code>R</code> is a specific type that is created dynamically and assigned a unique name of the form Dyalog.Data.DyalogCollectionNotifyHandler`1[Dyalog.Data.DataBoundRow_nnnnnnnn]. This is suitable for binding to a WPF property that requires  an IEnumerable implementation, such as the  ItemsSource property of the DataGrid.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#example_2","title":"Example","text":"<p><code>mat</code> is a matrix of numbers and is bound with default property/column names <code>Column1</code>, <code>Column2</code>, ... <code>Column10</code> and the default data type of System.Object.</p> <pre><code>      mat\u2190?20 10\u2374100\n      bindSource\u21902015\u2336'mat'\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#example_3","title":"Example","text":"<p><code>winelist</code> is a matrix whose first column contains a list of wines, and whose second column their prices. The left argument is a matrix. Its first column specifies the property names by which the columns will be exported (<code>'Name'</code> and <code>'Price'</code>) and its second column, their data types (System.Object)</p> <pre><code> winelist\u2190Wines,[1.5]0.01\u00d710000+?(\u2374Wines)\u237410000\n info\u2190(\u236a'Name' 'Price'),\u2282Object\n\n bindSource\u2190info(2015\u2336)'winelist'\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#example_4","title":"Example","text":"<p><code>emp</code> is a 3-column matrix which contains names,  numbers and  addresses. Each address is made up of two character vectors containing street and town       emp \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502John Smith         \u2502Mary White        \u2502T.W. Penk           \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25021                  \u25022                 \u25023                   \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u25022 East Rd\u2502Headley\u2502\u2502\u250242 High St\u2502Alton\u2502\u2502\u250223 West St\u2502Farnham\u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       schema \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Name   \u2502(System.Object)         \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Number \u2502(System.Object)         \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Address\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502       \u2502\u2502Street\u2502(System.Object)\u2502\u2502 \u2502       \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502       \u2502\u2502Town  \u2502(System.Object)\u2502\u2502 \u2502       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <pre><code>  bindSource\u2190schema(2015\u2336)'emp'\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-data-binding-source/#notification-events","title":"Notification Events","text":"<p>The object <code>R</code> generates notification events when the value(s) of the Binding Source are updated as the contents of the Binding Target are changed by the user. These events are generated after the data has changed and there is no mechanism to prevent the change from occurring.</p> <p>There are two types of event; ElementChanged and CellsChanged. The CellsChanged event applies only to a data bound matrix; the ElementChanged event applies to all other types of binding.</p> <p>The event message  supplied as the right argument to your callback function, is a 2-element vector as follows :</p> <code>[1]</code> Object ref <code>[2]</code> EventArgs ref <p>EventArgs is an instance of the internal class <code>Dyalog.Data.ElementChangedEventArgs</code> or <code>Dyalog.Data.CellsChangedEventArgs</code> whose fields are described below:</p> <p><code>Dyalog.Data.ElementChangedEventArgs</code> fields</p> <code>Indices</code> An indication of which member has changed. Typically this will either be <code>\u00af1</code> to indicate that the indices are unavailable or a scalar value indicating (origin 0), which element of an array has been modified or added. <code>Name</code> The name of the variable that has been modified. This is especially useful when the datasource corresponds to a namespace. <code>Path</code> A path used to locate the variable that has been modified. This is especially useful when the datasource corresponds to a deeply nested namespace, where the value changed is an element of an array inside a namespace which is itself an element of an array within the datasource. <p><code>Dyalog.Data.CellsChangedEventArgs</code> fields</p> <code>Path</code> Identifies the cell or row that was changed. See below. <code>SourceName</code> The name of the matrix that was specified as the right argument to <code>2015\u2336</code> . <code>Reason</code> A character vector that describes what in the matrix has changed is <code>'RowDeleted'</code> , <code>'CellChanged'</code> or <code>'RowInserted'</code> <code>Value</code> The new value in the cell or <code>\u2395NULL</code> <p>If Reason is <code>'CellChanged'</code>, Path is the row and column number (in origin 0) of the cell that was changed and Value is its new value.</p> <p>If Reason is <code>'RowDeleted'</code> or <code>'RowInserted'</code>, Path is the number of the row that has been added or removed (in origin 0) and Value is <code>\u2395NULL</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-net-delegate/","title":"Create .NET Delegate","text":"Create .NET Delegate R\u21902016\u2336Y <p>.NET methods (and properties) may specify a parameter to be a delegate. A delegate is a place holder for a function, normally with a particular signature and result type, that should be  supplied when the method is called. Sometimes the signature of a .NET method that takes a delegate as a parameter does not provide enough information for Dyalog to determine automatically what type of  delegate is required. <code>2016\u2336</code> allows you to specify the type so that Dyalog can perform the necessary conversion(s) at run-time.</p> <p><code>Y</code> is a 2-element array. The first element is a .NET type that inherits from the abstract .NET Class System.Delegate. The second item is either the name of or the <code>\u2395OR</code> of an APL function which is to be invoked via a .NET method or property.</p> <p>The result <code>R</code> is a ref to an instance of a .NET type specified by the first element of <code>Y</code>, which internally is associated with the function identified by the second element of <code>Y</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/create-net-delegate/#example","title":"Example","text":"<pre><code>      \u2207foo\u2207\n     \u2207 foo(ev arg)\n[1]    \u235d Callback for .NET method\n     \u2207\n      \u2395USING\u2190'System'\n      del\u21902016\u2336 EventHandler'foo'\n      del\nSystem.EventHandler\n\n</code></pre> <p>Then, when calling a .NET method that requires a Delegate of type System.Eventhandler, but whose signature is imprecise in this respect, the object <code>del</code> should be used instead.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/disable-component-checksum-validation/","title":"Disable Component Checksum Validation","text":"Disable Component Checksum Validation {R}\u21903002\u2336Y <p>Checksums allow component files to be validated and repaired using <code>\u2395FCHK</code>.</p> <p>From Version 13.1 onwards, components which contain checksums are also validated on every component read.</p> <p>Although not recommended, applications which favour performance over security may disable checksum validation by <code>\u2395FREAD</code> using this function.</p> <p><code>Y</code> is an integer defined as follows:</p> Value Description 0 <code>\u2395FREAD</code> will not validate checksums. 1 <code>\u2395FREAD</code> will validate checksums when they are present. This is the default. <p>The shy result <code>R</code> is the previous value of this setting.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/discard-parked-threads/","title":"Discard Parked Threads","text":"Discard Parked Threads R\u21902502\u2336Y <p><code>(2502\u23360)</code>  removes all parked threads from the workspace.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/discard-thread-on-exit/","title":"Discard Thread on Exit","text":"Discard Thread on Exit R\u21902501\u2336Y <p><code>(2501\u23360)</code>  must be called from WITHIN one of these threads and tells the interpreter NOT to park the thread on termination, but to discard the thread completely.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/execute-expression/","title":"Execute Expression","text":"Execute Expression R\u2190X(85\u2336)Y <p>Executes an expression.</p> <p><code>Y</code> is a character vector containing an APL expression.</p> <p>The function executes the expression in <code>Y</code> exactly as it would be executed by the monadic Execute primitive function <code>\u234e</code>, but handles shy results  of the execution rather differently.</p> <p>The left argument <code>X</code> determines how a shy result from the execution of <code>Y</code> is treated and is either 0 or 1.</p> <p>If <code>X</code> is 1, and the expression in <code>Y</code> returns an explicit result, <code>R</code> is that result. If the expression in <code>Y</code> returns no result or returns a shy result, the function signals <code>ERROR 85</code>. Effectively, a shy result is discarded.</p> <p>If <code>X</code> is 0, and the expression in <code>Y</code> returns an explicit result or a shy result, <code>R</code> is that result (but is no longer shy). If the expression in <code>Y</code> returns no result, the function signals <code>ERROR 85</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/execute-expression/#examples","title":"Examples","text":"<pre><code>      \u234e'a\u219042'\n      \u2395\u2190 \u234e'a\u219042'     \u235d shy result\n42\n      0 (85\u2336) 'a\u219042' \u235d not shy\n42\n      1 (85\u2336) 'a\u219042'\nERROR 85\n      1(85\u2336)'a\u219042'\n     \u2227\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/export-to-memory/","title":"Export To Memory","text":"Export To Memory R\u21902100\u2336Y <p>This function exports the current active workspace as an in-memory .NET Assembly.</p> <p><code>Y</code> may be any array and is ignored.</p> <p>The result <code>R</code> is 1 if the operation succeeded or 0 if it failed.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/expose-root-properties/","title":"Expose Root Properties","text":"Expose Root Properties R\u21902401\u2336Y <p>This function is used to expose or hide Root Properties, Event and Methods.</p> <p>If <code>Y</code> is 1, Root Properties, Events and Methods are exposed.</p> <p>If <code>Y</code> is 0, no further Root Properties, Events or Methods are exposed; however any that have already been exposed will remain so.</p> <p>This functionality is available in Windows versions by selecting or unselecting the Expose Root Properties MenuItem in the Options Menu in the Session. Note that deselecting this MenuItem only affects future references to Root Properties, Events or Methods.</p> <p>This function is the only mechanism available under non-Windows versions of Dyalog APL; the state of this setting is saved in the workspace, and therefore cannot be controlled by an environment variable.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/expose-root-properties/#example","title":"Example","text":"<pre><code>\n      #.GetEnvironment'MAXWS'\nVALUE ERROR\n      #.GetEnvironment'MAXWS'\n     \u2227\n\n      2401\u23361\n0\n      #.GetEnvironment'MAXWS'\n64M\n\n      2401\u23360\n1\n      #.GetEnvironment'MAXWS'\n64M\n      #.GetCommandLine\nVALUE ERROR\n      #.GetCommandLine\n     \u2227\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/externalise-array/","title":"Externalise Array","text":"Externalise Array R\u21908674\u2336Y <p>This function creates an externalised array.</p> <p><code>Y</code> may be any array.</p> <p>The result <code>R</code> is a copy of <code>Y</code> that has been created in a separate area of memory to that allocated to the active workspace.</p> <p>This is an experimental function that may  improve the overall performance of an application by reducing workspace management activity.</p> <p>Externalising an array isolates it from the dynamic workspace management process that occurs constantly as objects are created, modified and destroyed. Moving data around in memory consumes computing power. Removing a large nested constant from this  managed area guarantees that it will not be subjected to such movement and potentially reduces the amount of data shuffling entailed during a compaction which in turn may improve overall performance.</p> <p>There is no link between <code>Y</code> and the externalised copy of <code>Y</code>. If <code>Y</code> is erased, the copy of <code>Y</code> referenced via <code>R</code> still exists, but outside the workspace. Indeed, there is no benefit to be gained by using this function unless the original array <code>Y</code> is expunged from in the workspace.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/externalise-array/#notes","title":"Notes:","text":"<ul> <li>This function is experimental and its effect is likely to be application dependent. There is no guarantee that it will  improve performance in every application.</li> <li>Little or no benefit is obtained by externalising small or simple arrays as they will typically become part of the sediment, a collection of objects in the workspace that  remains relatively stable.</li> <li>There is no benefit obtained in externalising an array that is going to change; indeed there will probably be a dis-benefit. There is a cost associated with externalising an array and a cost associated with changing an externalised array.</li> </ul> <p>The externalised property of the array does survive <code>)SAVE</code>/<code>)LOAD</code> but not <code>0 \u2395SAVE</code>, <code>\u2395CY</code>, <code>)COPY</code> or <code>)PCOPY</code>. Nor does it survive writing to a component file and reading back again.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/flush-session-caption/","title":"Flush Session Caption","text":"Flush Session Caption R\u21902022\u2336Y <p>Under Windows, the Session Caption displays information such as the name of the current workspace. The contents of the Caption can be modified: see Window Captions in the Installation and Configuration Guide for more details.</p> <p>However, the Caption is updated only at the six-space prompt; calling <code>\u2395LOAD</code> for example from within a function will not result in the Caption being updated at the end of the <code>\u2395LOAD</code>.</p> <p>This I-Beam causes the Session Caption to be updated (flushed) when called. Note that this I-Beam does not alter the contents of the Caption.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/flush-session-caption/#example","title":"Example","text":"<pre><code>\n      2022\u23360    \n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/fork-new-task/","title":"Fork New Task","text":"Fork New Task R\u21904000\u2336Y <p>This applies to AIX only.</p> <p><code>Y</code> must be is a simple empty vector but is ignored.</p> <p>This function forks the current APL task. This means that it initiates a new separate copy of the APL program, with exactly the same APL state indicator.</p> <p>Following the execution of this function, there will be two identical APL processes running on the machine, each with the same state indicator and set of APL objects and values. However, none of the external interfaces and resources in the parent process will exist in the newly forked child process.</p> <p>The function will return a result in both processes.</p> <ul> <li>In the parent process, <code>R</code> is the process id of the child (forked) process.</li> <li>In the child process, <code>R</code> is a scalar zero.</li> </ul> <p>The following external interfaces and resources that may be present in the parent process are not replicated in the child process:</p> <ul> <li>Component file ties</li> <li>Native file ties</li> <li>Mapped file associations</li> <li>Auxiliary Processors</li> <li>.NET objects</li> <li>Edit windows</li> <li>Clipboard entries</li> <li>GUI objects (all children of <code>'.'</code>)</li> <li>I/O to the current terminal</li> </ul> <p>Note that External Functions established using <code>\u2395NA</code> are replicated in the child process.</p> <p>The function will fail with a <code>DOMAIN ERROR</code> if there is more than one APL thread running.</p> <p>The function will fail with a <code>FILE ERROR 11 Resource temporarily unavailable</code> if an attempt is made to exceed the maximum number of processes allowed per user.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/hash-array/","title":"Hash Array","text":"Hash Array R\u2190{X}1500\u2336Y <p>This function creates a hashed array, returns an unhashed copy of an array or reports the state of hashing of an array.</p> <p><code>Y</code> may be any array.</p> <p>If <code>X</code> is omitted, the result <code>R</code> is a copy of <code>Y</code> that has been invisibly marked as hashed. <code>R</code> behaves the same as <code>Y</code> in all respects. The only difference is that dyadic <code>\u2373</code> and related functions are expected to run faster when applied to a hashed array. The hash will be created the first time the array is used as an argument to <code>\u2373</code> or other set functions. The hashed property is preserved across assignments and argument passing, but in general is not preserved by any primitive functions.</p> <p>If <code>X</code> is 1, the result <code>R</code> returns an indication of whether <code>Y</code> has been marked for hashing or whether the hash has been created:</p> <code>R</code> State of <code>Y</code> <code>0</code> <code>Y</code> has not been marked for hashing <code>1</code> <code>Y</code> has been marked for hashing, but the hash tables has not yet been created <code>2</code> <code>Y</code> has a hash table <p>If <code>X</code> is 2, the result <code>R</code> is the unhashed form of <code>Y</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/hash-array/#examples","title":"Examples:","text":"<pre><code>\n      R\u21901500\u23361 2 3    \u235d R is marked for hashing\n\n      1 (1500\u2336)R\n1\n      S\u2190R             \u235d S is marked for hashing\n      {\u2375\u23732 3 5}R      \u235d R is now hashed\n      1 (1500\u2336)R\n2\n      U\u2190(\u2374R)\u2374R        \u235d U is not hashed\n      U\u2190\u2283\u2282R           \u235d   ditto\n      1 (1500\u2336)U\n0\n</code></pre> <p>If <code>R</code> is a hashed array then certain forms of modified assignment will preserve and efficiently update the hash table:</p> <pre><code>\n      R,\u2190Y    \u235d only for scalar or vector R\n      R\u236a\u2190Y\n      R\u2193\u2368\u2190Y   \u235d only for negative singleton Y\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/hash-array/#examples_1","title":"Examples:","text":"<pre><code>      R\u21901500\u23361 2 3 \u235d R is hashed\n\n      R,\u21905    \u235d ,\u2190 preserves and updates\n              \u235d the hash table\n      R\n1 2 3 5\n      R\u23732 4 6\n2 5 5\n\n      R\u2193\u2368\u2190\u00af2  \u235d \u2193\u2368\u2190 preserves and updates\n              \u235d the hash table\n      R\n1 2\n      R\u23732 4 6\n2 3 3\n</code></pre> <p>The hashed property survives <code>)SAVE</code>/<code>)LOAD</code> and <code>)SAVE</code>/<code>)COPY</code>. It does not currently survive writing to a component file and reading back again.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/identify-net-type/","title":"Identify .NET Type","text":"Identify .NET Type R\u21902017\u2336Y <p>Returns the .NET Type of a named .NET class that is loaded in the current AppDomain. Note that System.Type.GetType requires the fully qualified name, i.e. prefixed by the assembly name, whereas (<code>2017\u2336</code>) does not.</p> <p><code>Y</code> is a character string containing the name of a .NET object. Unless the fully qualified name is given, the namespaces in the current AppDomain are searched in the order they are specified by  <code>\u2395USING</code> or <code>:Using</code>.</p> <p>If the object is identified in the current AppDomain, the result <code>R</code> is its Type. If not, the function generates <code>DOMAIN ERROR</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/identify-net-type/#example","title":"Example","text":"<pre><code>      \u2395USING\u2190'System'\n      2017\u2336'DateTime'\nSystem.DateTime\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/inverted-table-index-of/","title":"Inverted Table Index Of","text":"Inverted Table Index Of R\u2190X(8\u2336)Y <p>This function computes <code>X</code> index-of <code>Y</code> (viz. <code>X\u2373Y</code>) where <code>X</code> and <code>Y</code> are compatible inverted tables. <code>R</code> is the indices of <code>Y</code> in <code>X</code>.</p> <p>An inverted table is a (nested) vector all of whose items have the same number of major cells. That is, <code>1=\u2374\u2374\u2375</code> and <code>(\u2262\u2283\u2375)=\u2262\u00a8\u2375</code>. An inverted table representation of relational data is more efficient in time and space than other representations.</p> <p>The following is an example of an inverted table:</p> <pre><code>      X\u2190(10 3\u2374\u2395a) (\u237310) 'metalepsis'\n      X\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502ABC\u25020 1 2 3 4 5 6 7 8 9\u2502metalepsis\u2502\n\u2502DEF\u2502                   \u2502          \u2502\n\u2502GHI\u2502                   \u2502          \u2502\n\u2502JKL\u2502                   \u2502          \u2502\n\u2502MNO\u2502                   \u2502          \u2502\n\u2502PQR\u2502                   \u2502          \u2502\n\u2502STU\u2502                   \u2502          \u2502\n\u2502VWX\u2502                   \u2502          \u2502\n\u2502YZA\u2502                   \u2502          \u2502\n\u2502BCD\u2502                   \u2502          \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Using inverted tables, it is often necessary to perform a table look-up to find the \"row\" indices of one in another. Suppose there is a second table <code>Y</code>:</p> <pre><code>\n      Y\u2190(\u2282\u22823 1 4 1 5 9)\u2337\u00a8X\n      Y\n GHI  3 1 4 1 5 9  tmamli \n ABC                      \n JKL                      \n ABC                      \n MNO                      \n YZA  \n</code></pre> <p>To compute the indices of   <code>Y</code> in <code>X</code>  using dyadic <code>\u2373</code>, it is necessary to first un-invert each of the tables in order to create nested matrices that <code>\u2373</code> can handle.</p> <pre><code>      unvert \u2190 {\u2349\u2191\u2282\u2364\u00af1\u00a8\u2375}\n      unvert X\n\u250c\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2510\n\u2502ABC\u25020\u2502m\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2524\n\u2502DEF\u25021\u2502e\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2524\n\u2502GHI\u25022\u2502t\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2524\n\u2502JKL\u25023\u2502a\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2524\n\u2502MNO\u25024\u2502l\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2524\n\u2502PQR\u25025\u2502e\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2524\n\u2502STU\u25026\u2502p\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2524\n\u2502VWX\u25027\u2502s\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2524\n\u2502YZA\u25028\u2502i\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2524\n\u2502BCD\u25029\u2502s\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2518\n\n      (unvert X) \u2373 (unvert Y)\n3 1 4 1 5 9\n</code></pre> <p>Each un-inverted table requires considerably more workspace than its inverted form, so if the inverted tables are large, this operation is potentially expensive in terms of both time and workspace.</p> <p><code>8\u2336</code> is an optimised version of the above expression.</p> <pre><code>      X (8\u2336) Y\n3 1 4 1 5 9\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/json-translate-name/","title":"JSON Translate Name","text":"JSON Translate Name R\u2190X(7162\u2336)Y <p>Converts between JSON names and APL names.</p> <p>When <code>\u2395JSON</code> imports an entity from JSON text whose name would be an invalid APL name, the function converts the invalid name into a valid APL name using a name mangling algorithm. When <code>\u2395JSON</code> exports an APL namespace as JSON text, the process is reversed.</p> <p>This function performs the same name mangling allowing the programmer to identify JSON entities as APL names, and vice-versa.</p> <p><code>Y</code> is a character vector or scalar.</p> <p><code>X</code> is a scalar numeric value which must be 1 or 0.</p> <p>When <code>X</code> is 0, <code>R</code> is the name in <code>Y</code> converted, if necessary, so that it is a valid APL name. It performs the same translation of JSON object names to APL names that is performed when importing JSON.</p> <p>When <code>X</code> is 1, <code>R</code> is the name in <code>Y</code> which, if mangled, is converted back to the original form.. It performs the same translation of APL names to JSON object names that is performed when exporting JSON.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/json-translate-name/#examples","title":"Examples:","text":"<pre><code>      0(7162\u2336)'2a'\n\u23592a\n      1(7162\u2336)'\u23592a'\n2a\n</code></pre> <pre><code>      0(7162\u2336)'foo'\nfoo\n      1(7162\u2336)'foo'\nfoo\n\n</code></pre> <p>Note that the algorithm can be applied, even when mangling is not required. So:</p> <pre><code>      1(7162\u2336)'\u235997'\na\n</code></pre> <p>For further details, see JSON Name Mangling on page 1.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/line-count/","title":"Line Count","text":"Line Count R\u219050100\u2336Y <p>This function is a compact version of the system function <code>\u2395LC</code>. If an expression requires only the  most recent line(s) in the function calling stack, this is a more efficient alternative to using <code>\u2395LC</code>.</p> <p><code>Y</code> may be an integer specifying the depth of the function calling stack that is required in the result.</p> <p>The result R is the same as <code>\u2395LC</code>, but truncated to the number of stack levels specified by <code>Y</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/line-count/#example","title":"Example","text":"<pre><code>          \u2207 Foo\n[1]    :If 4=\u2374\u2395LC\n[2]        50100\u23360\n[3]        50100\u23361\n[4]        50100\u23362\n[5]        50100\u23363\n[6]        50100\u23364\n[7]        50100\u23365\n[8]        \u2192\n[9]    :Else\n[10]       Foo\n[11]   :EndIf\n     \u2207\n\n      Foo\n\n3\n4 10\n5 10 10\n6 10 10 10\n7 10 10 10\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/list-loaded-file-objects/","title":"List Loaded File Objects","text":"List Loaded File Objects R\u21905177\u2336Y <p>The editor may be used to edit Dyalog script files (.dyalog files) and general text files and to save the contents in the workspace. Additionally <code>\u2395FIX</code> can be used to fix scripts held in files. This I-Beam returns details about all of the objects in the workspace that are associated with such files.</p> <p><code>Y</code> must be an empty array.</p> <p><code>R</code> is a vector of 8-element vectors, one vector per object in the workspace that is associated with a file.</p> Element Contains 1 Object name or ref (refs are returned for all types of namespace) 2 Parent namespace 3 Name class (see <code>\u2395NC</code> ) 4 File name 5 Start line (first line in file, 0 origin, of the object) 6 Line count (number of lines in file occupied by the object) 7 File Checksum 8 File modification time ( <code>\u2395TS</code> format) <p>If an object occupies a file in its entirety, both Start line and Line count will be 0.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/list-loaded-file-objects/#examples","title":"Examples:","text":"<pre><code>  )CLEAR\n</code></pre> <p>clear ws       \u22835177\u2336\u236c \u250c\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502[Null]\u25020\u2502\u25020\u25020\u2502        \u25020 0 0 0 0 0 0\u2502 \u2514\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <pre><code>  dyalog\u21902 \u2395NQ '.' 'GetEnvironment' 'DYALOG' \n  aedit\u2190'/SALT/spice/aedit.dyalog'\n  \u22a2\u2395FIX 'file://',dyalog,aedit\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/list-loaded-file-objects/#arrayeditor","title":".arrayeditor","text":"<pre><code>  1 1 1 0 1 1 1 1/\u21915177\u2336\u236c \u235dremove file names for brevity\n</code></pre> <p>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Run          \u2502#.arrayeditor\u25023\u250238\u25024 \u2502008fe4ed\u25022018 5 11 8 5 10 0\u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Help         \u2502#.arrayeditor\u25023\u250228\u25029 \u2502008fe4ed\u25022018 5 11 8 5 10 0\u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502List         \u2502#.arrayeditor\u25023\u250222\u25025 \u2502008fe4ed\u25022018 5 11 8 5 10 0\u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502DESC         \u2502#.arrayeditor\u25023\u250210\u250211\u2502008fe4ed\u25022018 5 11 8 5 10 0\u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502#.arrayeditor\u2502#            \u25029\u25020 \u25020 \u2502008fe4ed\u25022018 5 11 8 5 10 0\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/list-loaded-files/","title":"List Loaded Files","text":"List Loaded Files R\u21905176\u2336Y <p>The editor may be used to edit Dyalog script files (.dyalog files) and general text files and to save the contents in the workspace. Additionally <code>\u2395FIX</code> can be used to fix scripts held in files. This I-Beam returns a list of all of the files which are associated with objects in the workspace, together with information about each file.</p> <p><code>Y</code> may be any value.</p> <p><code>R</code> is a vector of vectors, one element per associated file. Each element is a 5 element vector:</p> Element Contains 1 File name 2 Encoding 3 Checksum 4 Newline 5 Flags <p>Encoding, newline and flags are defined the same as for <code>\u2395NGET</code>. See File Encodings on page 1. Checksum is an 8-character hexadecimal value, see GetBuildID MethodGetBuildID on page 1  for more information.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/list-loaded-files/#examples","title":"Examples:","text":"<pre><code>\n      )CLEAR\nclear ws\n      ('' '' (8\u2374' ') \u236c 0)\u2261\u22835176\u2336''\n1\n      dyalog\u21902 \u2395NQ '.' 'GetEnvironment' 'DYALOG' \n      aedit\u2190'/SALT/spice/aedit.dyalog'\n      \u2395FIX 'file:///',dyalog,aedit\n#.arrayeditor\n\n      1\u2193\u22835176\u2336\u236c      \u235d Ignore filename\n UTF-8-BOM  18507aa6  13 10  0\n\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/loaded-libraries/","title":"Loaded Libraries","text":"Loaded Libraries R\u2190950\u2336Y <p>Reports the names of the dynamic link libraries that are currently loaded as a result of executing <code>\u2395NA</code>.</p> <p><code>Y</code> is an empty vector.</p> <p>The result <code>R</code> is a vector of character vectors containing  the names of all the DLLs or shared libraries that have been explicitly loaded by <code>\u2395NA</code> and are still loaded by virtue of the presence of at least one external function reference.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/loaded-libraries/#examples","title":"Examples","text":"<pre><code>      )clear\nclear ws\n      'Aloc'\u2395NA'P kernel32\u2223GlobalAlloc U4 P'\n      'Free'\u2395NA'P kernel32\u2223GlobalFree P'\n      'Lock'\u2395NA'P kernel32\u2223GlobalLock P'\n      'Ulok'\u2395NA'U4 kernel32\u2223GlobalUnlock P'\n      'Valu'\u2395NA'U4 version\u2223VerQueryValue* P &lt;0T &gt;U4 &gt;U4'\n      'copy'\u2395NA'P msvcrt\u2223memcpy &gt;U4[] P U4'\n\n      950\u2336\u236c\n KERNEL32.DLL  VERSION.DLL  MSVCRT.DLL \n      )fns\nAloc    Free    Lock    Ulok    Valu    copy\n\n      )erase Aloc    Free    Lock    Valu \n      950\u2336\u236c\n KERNEL32.DLL  MSVCRT.DLL \n      )fns\nUlok    copy\n\n      )erase Ulok\n      950\u2336\u236c\n MSVCRT.DLL \n\n      )clear\nclear ws\n      950\u2336\u236c\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/manage-ride-connections/","title":"Manage RIDE Connections","text":"Manage RIDE Connections R\u21903502\u2336Y <p><code>3502\u2336</code> gives control over RIDE connections to the interpreter. More details about RIDE can be found in the RIDE User Guide.</p> <p><code>Y</code> may be either <code>0</code> or <code>1</code> or a simple character vector.</p> <p><code>R</code> has the value <code>0</code> if the call to <code>3502\u2336</code> was successful; if unsuccessful the value may be either a positive or negative integer.</p> <p>If <code>Y</code> is <code>0</code>, then any active RIDE connections are disconnected, and no future connections may be made.</p> <p>If <code>Y</code> is <code>1</code>, then the interpreter attempts to enable RIDE, using the value of the initialisation string to determine the connection details.  If the current initialisation string is ill-defined, <code>R</code> will be 64. If the Conga DLL/shared libraries are not available,  <code>R</code> will be 32. In previous versions of Dyalog there were separate RIDE and Conga DLLs/shared libraries; these have been merged into one set in 16.0.</p> <p>If <code>Y</code> is a character vector and RIDE is currently disabled, then the current initialisation string is unconditionally replaced by the contents of <code>Y</code>. If RIDE is currently enabled, the initialisation string is not replaced, and <code>R</code> will have the value <code>\u00af2</code>.</p> <p>The initialisation string has the same syntax as the value of the RIDE_INIT configuration parameter which is described in the RIDE User Guide</p> <p>If RIDE is currently disabled, and <code>3502\u23360</code> is called or if RIDE is currently enabled and <code>3502\u23361</code> is called, no action is taken and <code>R</code> will have the value <code>\u00af1</code>.</p> <p>The configuration parameter RIDE_INIT can still be used to establish the initial value of the RIDE initialisation string.</p> <p>The runtime interpreter has RIDE disabled by default, whether or not RIDE_INIT is set; the only method of enabling RIDE in a runtime interpreter is to  call <code>3502\u23361</code>.</p> <p>If RIDE_INIT is set when a development interpreter is called, RIDE will be enabled provided that the RIDE DLL/shared library is available and the RIDE_INIT variable is properly formed. If the connection is of type SERVE the port must not be in use.  If any of these conditions are not met, then the interpreter fails with a non-zero exit code.  If RIDE_INIT is not set then the development interpreter will start, but with RIDE disabled.</p> <p>It is therefore possible to override the RIDE_INIT variable in the development interpreter with code similar to:</p> <pre><code>\n      r\u21903502\u23360             \u235d Stop RIDE\n      r\u21903502\u2336'SERVE::4511' \u235d Update init string\n      r\u21903502\u23361             \u235d Start RIDE\n\n</code></pre> <p>And similarly for altering the RIDE settings in an active APL session.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/manage-ride-connections/#notes","title":"Notes:","text":"<p>In 14.1 and earlier <code>3502\u2336\u236c</code> was used to enable RIDE; this value is still valid, albeit deprecated: code should call <code>3502\u23361</code> instead.</p> <p>Enabling the RIDE to access applications that use the run-time interpreter means that the APL code of those applications can be accessed. The I-beam mechanism described above means that the APL code itself must grant the right for a RIDE client to connect to the run\u2011time interpreter. Although Dyalog Ltd might change the details of this mechanism, the APL code will always need to grant connection rights. In particular, no mechanism that is only dependent on configuration parameters will be implemented.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/mark-thread-as-uninterruptible/","title":"Mark Thread as Uninterruptible","text":"Mark Thread as Uninterruptible R\u21902503\u2336Y <p>This function marks the current thread (the thread in which it is called) as uninterruptible, and/or determines whether or not any child threads, subsequently created by the current thread, will be uninterruptible.</p> <p>The right argument <code>Y</code> is an integer whose value is the sum of the following (bit-wise) values:</p> <ul> <li>1 : mark thread as uninterruptible</li> <li>2 : mark its children as uninterruptible</li> </ul> <p>The result <code>R</code> is an integer value that indicates the previous state of the thread.</p> <p>In many multi-threaded applications a large proportion of the threads are used for communication mechanisms (<code>\u2395DQ</code> on TCPSockets, Conga, isolates); but most of the \"real work\" is done in thread zero.</p> <p>It is undesirable that a weak interrupt interrupts a seemingly random thread. The mechanism to prevent a thread from being (weak) interrupted allows an application to be configured so that only specific threads would respond to a weak interrupt.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/memory-manager-statistics/","title":"Memory Manager Statistics","text":"Memory Manager Statistics R\u2190{X}(2000\u2336)Y <p>This function returns information about the state of the workspace and provides a means to reset certain statistics and to control workspace allocation. This I-Beam is provided for performance tuning and is VERY LIKELY to change in the next release.</p> <p><code>Y</code> is a simple integer scalar or vector containing values listed in the table below.</p> <p>If <code>X</code> is omitted, the result <code>R</code> is an array with the same structure as <code>Y</code>, but with values in <code>Y</code> replaced by the following statistics.  For any value in <code>Y</code> outside those listed below, the result is undefined.</p> Value Description 0 Workspace available (a \"quick\" <code>\u2395WA</code> ) 1 Workspace used 2 Number of compactions since the workspace was loaded 3 Number of garbage collections that found garbage 4 Current number of garbage pockets in the workspace 9 Current number of free pockets in the workspace 10 Current number of used pockets in the workspace 12 Sediment size 13 Current workspace allocation, i.e. the amount of memory that is actually being used 14 Workspace allocation high-water mark, i.e. the maximum amount of memory that has been allocated since the workspace was loaded or since this count was reset. 15 Limit on minimum workspace allocation 16 Limit on maximum workspace allocation 19 The number of calls to <code>\u2395WA</code> or <code>2002\u2336</code> since the last time <code>2000\u2336</code> was called, or when the process started. 20 The requested size of the <code>WS Full Buffer</code> , i.e. the amount of workspace requested for handling <code>WS FULL</code> errors. 21 The actual size of the <code>WS Full Buffer</code> . 22 The number of <code>WS FULL</code> handlers that are currently running. 23 The total number of <code>WS FULL</code> errors that have occurred. 24 The total number of <code>WS FULL</code> errors that have been trapped. <p>Note: While all other operations are relatively fast, the operation to count the number of garbage pockets (4) may take a noticeable amount of time, depending upon the size and state of the workspace.</p> <p>See also Specify Workspace Available on page 1.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/memory-manager-statistics/#examples","title":"Examples","text":"<pre><code>      2000\u23360\n55414796\n      2000\u23360,\u237316   \u235d with MAXWS=95G\n1.02004292E11 1181312 1 1 0 \u00af1 \u00af1 \u00af1 \u00af1 78 13280 \u00af1 1180800 1595016496 1595042464 0 1.020054733E11\n</code></pre> <p>If <code>X</code> is specified, it must be either a simple integer scalar, or a vector of the same length as <code>Y</code>, and the result <code>R</code> is <code>\u236c</code>. In this case, the value in <code>Y</code> specifies the item to be set and <code>X</code> specifies its new value according to the table below.</p> Value Description 2 0 resets the compaction count; no other values allowed 3 0 resets the count of garbage collections that found garbage; no other values allowed 14 0 resets the workspace allocation high-water mark; no other values allowed. This should be called following a call to <code>\u2395WA</code> (which compacts the workspace and returns unused memory to the operating system). 15 Sets the minimum workspace allocation to the corresponding value in <code>X</code> ; must be between 0 and the current workspace allocation 16 Sets the maximum workspace allocation to the corresponding value in <code>X</code> ; 0 implies MAXWS otherwise must be between the current workspace allocation and MAXWS . 19 0 resets the compaction count; no other values allowed 20 Sets the requested size of the <code>WS Full Buffer</code> to the value specified by <code>X</code> . The actual space allocated may be less than that requested."},{"location":"language-reference-guide/the-i-beam-operator/a-z/memory-manager-statistics/#notes","title":"Notes:","text":"<ul> <li>The workspace allocation high-water mark indicates a minimum value for MAXWS.</li> <li>Limiting the maximum workspace allocation can be used to prevent code which grabs as much workspace as it can from skewing the peak usage result.</li> <li>Limiting the minimum workspace allocation can avoid repeatedly committing and releasing memory to the Operating System when memory usage is fluctuating.</li> </ul>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/memory-manager-statistics/#examples_1","title":"Examples","text":"<pre><code>      2000\u23362 3\n6 0 33216252\n      0 (2000\u2336)2 3 14 \u235d Reset compaction count\n\n      2000\u23362 3\n0 0\n      30000000 40000000(2000\u2336)15 16 \u235d Restrict min/max ws\n\n      (2000\u2336)15 16\n30000000 40000000\n\n      0 (2000\u2336)15 16 \u235d Reset min/max ws\n\n      (2000\u2336)15 16\n0 65536000\n\n</code></pre> <pre><code>      (2000\u2336)13 14 \u235d Current, peak WS allocation\n4072532 4072532\n\n      a\u219010e6\u2374'x' \u235d Increase WS allocation\n\n      (2000\u2336)13 14 \u235d Current, peak WS allocation\n15108580 15108580\n\n      \u2395ex 'a' \u22c4 {}\u2395wa \u235d Decrease current WS allocation\n\n      (2000\u2336)13 14 \u235d Current, peak WS allocation\n1962856 15108580\n\n      0 (2000\u2336) 14 \u235d Reset High-water mark\n\n      (2000\u2336)13 14 \u235d Current, peak WS allocation\n1962856 1962856\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/memory-manager-statistics/#ws-full-handling","title":"WS Full Handling","text":"<p>Potentially, a <code>WS FULL</code> error represents a terminal condition that would prevent a program from continuing because the process has, quite literally, run out of memory.</p> <p>To alleviate the problem,. Dyalog reserves a special WS Full Buffer for handling <code>WS FULL</code> errors. The default size of this buffer is <code>(1MB)\u230a(0.01\u00d7\u2395WA)</code>.</p> <p>In simple terms, when a <code>WS FULL</code> error occurs that triggers a handler, i.e. an expression executed via <code>\u2395TRAP</code> or <code>:Trap</code>,  the reserved workspace in the WS Full Buffer is released to provide additional memory space for that expression to execute. When the expression terminates, the system removes the memory that it had previously released, reserving it once more for another potential <code>WS FULL</code>.</p> <p>When a workspace is saved, the (empty) WS Full Buffer is not written to the file, but instead its size is recorded. When a saved workspace is loaded, the WS Full Buffer is allocated from the workspace available.</p> <p>Note that until a <code>WS FULL</code> handler starts, the memory allocated to the WS Full Buffer is unavailable and inaccessible for any any other purpose, thereby reducing the amount of active workspace available (<code>\u2395WA</code>).</p> <p>Further considerations are:</p> <ul> <li>Multiple <code>WS FULL</code> handlers can run concurrently as a result of muti-threading or nesting (when a <code>WS FULL</code> handler itself generates a <code>WS FULL</code> error).</li> <li>When the <code>WS Full Buffer</code> is restored when the handler (more accurately, the last handler) terminates, or when a saved workspace is re-loaded, there may be insufficient memory available. In these circumstances, the system allocates a reduced amount, without reporting an error. However, the system will later try to reclaim more (up to the desired amount), if more workspace has become free. The desired and actual sizes of the <code>WS Full Buffer</code> are reported by <code>(2000\u2336)20</code> and <code>(2000\u2336)21</code> respectively.</li> <li>When a <code>WS FULL</code> handler is activated and the <code>WS Full Buffer</code> is freed, <code>(2000\u2336)21</code> will return 0 until the handler terminates.</li> </ul>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/number-of-threads/","title":"Number of Threads","text":"Number of Threads R\u21901111\u2336Y <p>Specifies how many threads are to be used for parallel execution.</p> <p>If <code>Y</code> has the value <code>\u236c</code>, <code>R</code> is the number of virtual processors in the machine.</p> <p>Otherwise, <code>Y</code> is an integer that specifies the number of threads that are to be used henceforth for parallel execution. Prior to this call, the default number of threads is specified by the parameter  <code>APL_MAX_THREADS</code>. See APL_MAX_THREADS Parameter APL_MAX_THREADS on page 1.</p> <p>Note that whatever the value of <code>Y</code>, Dyalog limits the number of threads to 64. So the effective number of threads is <code>Y\u230a64</code>.</p> <p><code>R</code> is the previous value.</p> <p>To set the number of threads to be the same as the number of virtual processors, execute the stamement:</p> <pre><code>      {}1111\u2336 1111\u2336\u236c\n</code></pre> <p>See  Parallel ExecutionParallel Execution          on page 1 and Parallel Execution Threshold on page 1.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/override-com-default-value/","title":"Override COM Default Value","text":"Override COM Default Value R\u2190{X}(2041\u2336)Y <p>Certain COM objects, for example, VT_BLOBs, cannot be represented in APL or may be in error. By default Dyalog will generate a <code>DOMAIN ERROR</code> in these cases. For COM objects of type VT_EMPTY the interpreter by default returns <code>\u2395NULL</code>.</p> <p><code>2041\u2336</code> allows the APL programmer to specify what is returned by the interpreter in these cases.</p> <p><code>Y</code> may be <code>1</code> or <code>2</code>.</p> <p>If <code>Y</code> is <code>1</code>, then <code>X</code> specifies the value that is returned instead of <code>\u2395NULL</code> when the COM object is of type VT_EMPTY.</p> <p>If <code>Y</code> is <code>2</code>, then <code>X</code> specifies the value that is returned when the COM object is in error, or is of a type that cannot be represented in APL.</p> <p>In both cases, omitting <code>X</code> results in the default behaviour being restored.</p> <p><code>R</code> is the previous value specified; if there was no previous value then this function will perform its task but generate a <code>VALUE ERROR</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/overwrite-free-pockets/","title":"Overwrite Free Pockets","text":"Overwrite Free Pockets R\u2190127\u2336Y <p>Overwrites all free pockets in the workspace.</p> <p>Some applications (cryptography for example) make use of secure data during execution. The nature of the APL workspace is such that remnants of this secure data may persist in the workspace (and thus the process memory) even after the relevant APL variables have been expunged. This function overwrites all unused data pockets in the workspace so that any potentially secure data is removed.</p> <p><code>Y</code> is any empty array, preferably <code>\u236c</code>(zilde). <code>R</code> is always 1.</p> <p>It is the responsibility of the programmer to ensure that there are no USED pockets in the workspace that reference the data.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/overwrite-free-pockets/#example","title":"Example","text":"<pre><code>     \u2207 foo;a\n[1]    a\u2190'my secure data'\n[2]    \u2395EX'a'\n[3]    \u235d 'my secure data' is now in an\n[4]    \u235d UNUSED pocket in the workspace\n[5]    a\u2190127\u23360 \u235d all unused pockets are overwritten,\n[6]            \u235d 'my secure data' is no longer present\n     \u2207\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/overwrite-free-pockets/#whereas","title":"Whereas","text":"<pre><code>     \u2207 foo;a;b\n[1]    a\u2190'my secure data'\n[2]    b\u2190a\n[3]    \u2395EX'a'\n[4]    \u235d 'my secure data' is now in an\n[5]    \u235d UNUSED pocket in the workspace\n[6]    a\u2190127\u23360 \u235d all unused pockets are overwritten,\n[7]            \u235d but 'my secure data' is still present\n[8]            \u235d because it is referenced by b\n     \u2207\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/parallel-execution-threshold/","title":"Parallel Execution Threshold","text":"Parallel Execution Threshold R\u21901112\u2336Y <p><code>Y</code> is an integer that specifies the array size threshold at which parallel execution takes place. If a parallel-enabled function is invoked on an array whose number of elements is equal to or greater than this threshold, execution takes place in parallel. If not, it doesn't.</p> <p>Prior to this call, the default value of the threshold is specified by an environment variable named APL_MIN_PARALLEL. If this variable is not set, the default is 32768.</p> <p><code>R</code> is the previous value.</p> <p>See  Parallel ExecutionParallel Execution          on page 1 and Number of Threads on page 1.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/read-datatable/","title":"Read DataTable","text":"Read DataTable R\u2190{X}2011\u2336Y <p>This function performs a block read from an instance of the ADO.NET object System.Data.DataTable. This object may only be read using an explicit row-wise loop, which is slow at the APL level. <code>2011\u2336</code> implements an internal row-wise loop which is much faster on large arrays. Furthermore, the function handles NULL values and the conversion of .NET datatypes to the appropriate internal APL form in a more efficient manner than can otherwise be achieved. These 3 factors together mean that the function provides a significant improvement in performance compared to calling the row-wise programming interface directly at the APL level.</p> <p><code>Y</code> is a scalar or a 1 or 2-item array containing:</p> <ol> <li>A reference to an instance of System.Data.DataTable.</li> <li>An optional vector which specifies the values to which a System.DBNull should be mapped in the corresponding columns of the result </li> </ol> <p>The result <code>R</code> depends upon the value of the  Variant option Invert. This the primary option with a default value of 0.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/read-datatable/#invert-option-boolean","title":"Invert Option (Boolean)","text":"0 The result <code>R</code> is a matrix with the same shape as the DataTable referenced by <code>\u2283Y</code> . <code>1</code> The result <code>R</code> is vector whose length is the same as the number of columns in the DataTable referenced by <code>\u2283Y</code> . <p>The optional left argument <code>X</code> is a numeric vector with the same length as the number of columns in the result in the DataTable referenced by <code>\u2283Y</code>:</p> 1 Specifies that the corresponding column of the result  should be converted to a string using the <code>ToString</code> method of the data type of column in question. 2 Specifies that numbers of type System.Int64 in the corresponding column of the result  should be converted to DECFs (NOT into .NET objects, which is the default) 4 Specifies that if the type of the corresponding column is System.String the entire column should be returned as a character matrix rather than a vector of character vectors. Any nulls will be replaced with a row of spaces. This applies only when Invert is 1. 5 Combines 1 and 4."},{"location":"language-reference-guide/the-i-beam-operator/a-z/read-datatable/#examples","title":"Examples","text":"<pre><code>      \u2395USING\u2190'' 'System.Data,system.data.dll'\n\n      dt\u2190\u2395NEW DataTable\n\n      add_col\u2190{col\u2190\u237a.Columns.Add \u236c \u22c4 col.DataType\u2190\u2375}\n      dt add_col System.String          \n      dt add_col System.Int32            \n      dt add_col System.Int64             \n\n</code></pre> <pre><code>\n      in\u2190\u2349\u2191('One' 'Two')(1 2)(6401 6402)\n      2010\u2336 dt in\n\n      \u2395\u2190out\u21902011\u2336 dt                              \n\u250c\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502One\u25021\u2502 6401 \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Two\u25022\u2502 6402 \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      out[;3].GetType\nSystem.Int64  System.Int64\n</code></pre> <pre><code>      0 0 2(2011\u2336) dt \u235d Convert 3rd col to DECF\n\u250c\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502One\u25021\u25026401\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502Two\u25022\u25026402\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>      1 1 1(2011\u2336)dt \u235d Convert all values to text\n\u250c\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502One\u25021\u25026401\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502Two\u25022\u25026402\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>\n      ((2011\u2336)\u2360('Invert' 1)) dt\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u25021 2\u2502 6401  6402 \u2502\n\u2502\u2502One\u2502Two\u2502\u2502   \u2502            \u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502   \u2502            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>       4 0 0((2011\u2336)\u2360('Invert' 1))dt\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502One\u25021 2\u2502 6401  6402 \u2502\n\u2502Two\u2502   \u2502            \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre> <pre><code>       5 5 5((2011\u2336)\u2360('Invert' 1))dt \u235d Convert to cmats\n\u250c\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502One\u25021\u25026401\u2502\n\u2502Two\u25022\u25026402\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/read-datatable/#handling-nulls","title":"Handling Nulls","text":"<pre><code>      2010\u2336dt(1 3\u2374\u2395NULL) \u235d Add a row of nulls\n      \u2395\u2190out\u21902011\u2336 dt \n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502One\u25021 \u2502 6401 \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Two\u25022 \u2502 6402 \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   \u2502  \u2502      \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      out[3;].GetType\n System.DBNull  System.DBNull  System.DBNull\n</code></pre> <pre><code>\n      2011\u2336 dt ('this is null' 'this too' 'and this')\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502One         \u25021       \u2502 6401   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Two         \u25022       \u2502 6402   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502this is null\u2502this too\u2502and this\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/read-datatable/#performance-considerations","title":"Performance Considerations","text":"<p>First for comparison is shown the type of code that is required to read a DataTable by looping:</p> <pre><code>      t\u21903\u2283\u2395AI \u22c4 data1\u2190\u2191(\u2337dt.Rows).ItemArray \u22c4 (3\u2283\u2395AI)-t\n191\n</code></pre> <p>The above expression turns the <code>dt.Rows</code> collection into an array using <code>\u2337</code>, and mixes the ItemArray properties to produce the result. Although here there is no explicit loop, involved, there is an implicit loop required to reference each item of the collection in succession. This operation performs at about 200 rows/sec.</p> <p><code>2011\u2336</code> does the looping entirely in compiled code and is significantly faster:</p> <pre><code>      GetDT\u21902011\u2336\n      t\u21903\u2283\u2395AI \u22c4 data2\u2190GetDT dt \u22c4 (3\u2283\u2395AI)-t\n25\n</code></pre> <p>In the first case, <code>2011\u2336</code> created 365 instances of System.DateTime objects in the workspace. If we are willing to receive the timestamps in the form of strings, we can read the data almost an order of magnitude faster:</p> <pre><code>      t\u21903\u2283\u2395AI \u22c4 data3\u21900 0 0 1 GetDT dt \u22c4 (3\u2283\u2395AI)-t\n3\n</code></pre> <p>The left argument to <code>2011\u2336</code> allows you to flag columns which should be returned as the <code>ToString()</code> value of each object in the flagged columns. Although the resulting array looks identical to the original, it is not: The fourth column contains character vectors:</p> <pre><code>      \u00af2 4\u2191data3\n 364  even  4  18-01-2011 14:03:29\n 365  odd   5  19-01-2011 14:03:29\n</code></pre> <p>Depending on your application, you may need to process the text in the fourth column in some way \u2013 but the overall performance will probably still be very much better than it would be if DateTime objects were used.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/reap-forked-tasks/","title":"Reap Forked Tasks","text":"Reap Forked Tasks R\u21904002\u2336Y <p>This applies to AIX only.</p> <p>Under UNIX, when a child process terminates, it signals to its parent that it has terminated and waits for the parent to acknowledge that signal. <code>4002\u2336</code> is the mechanism to allow the APL programmer to issue such acknowledgements.</p> <p><code>Y</code> must be a simple empty vector but is ignored.</p> <p>The result <code>R</code> is a matrix containing the list of the newly-terminated processes which have been terminated as a result of receiving the acknowledgement, along with information about each of those processes as described below.</p> <p><code>R[;1]</code> is the process ID (PID) of the terminated child</p> <p><code>R[;2]</code> is <code>\u00af1</code> if the child process terminated normally, otherwise it is the signal number which caused the child process to terminate.</p> <p><code>R[;3]</code> is <code>\u00af1</code> if the child process terminated as the result of a signal, otherwise it is the exit code of the child process</p> <p>The remaining 15 columns are the contents of the <code>rusage</code> structure returned by the underlying <code>wait3()</code> system call. Note that the two timevalstructs are each returned as a floating point number.</p> <p>The current <code>rusage</code> structure contains: struct rusage {    struct timeval ru_utime; / user time used /    struct timeval ru_stime; / system time used /    long   ru_maxrss;        / maximum resident set size /    long   ru_ixrss;         / integral shared memory size /    long   ru_idrss;         / integral unshared data size /    long   ru_isrss;         / integral unshared stack size /    long   ru_minflt;        / page reclaims /    long   ru_majflt;        / page faults /    long   ru_nswap;         / swaps /    long   ru_inblock;       / block input operations /    long   ru_oublock;       / block output operations /    long   ru_msgsnd;        / messages sent /    long   ru_msgrcv;        / messages received /    long   ru_nsignals;      / signals received /    long   ru_nvcsw;         / voluntary context switches /    long   ru_nivcsw;        / involuntary context switches /};</p> <p><code>4002\u2336</code> may return the PID of an abnormally terminated Auxiliary Processor; APL code should check that the list of processes that have been reaped is a superset of the list of processes that have been started.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/reap-forked-tasks/#example","title":"Example","text":"<pre><code>     \u2207 tryforks;pid;fpid;rpid\n[1]    rpids\u2190fpids\u2190\u236c\n[2]    :For i :In \u23735\n[3]        fpid\u21904000\u2336'' \u235d fork() a process\n[4]   \u235d if the child, hang around for a while\n[5]        :If fpid=0\n[6]            \u2395DL 2\u00d7i\n[7]            \u2395OFF\n[8]        :Else\n[9]   \u235d if the parent, save child's pid\n[10]           +fpids,\u2190fpid\n[11]       :EndIf\n[12]   :EndFor\n[13]\n[14]   :For i :In \u237320\n[15]       \u2395DL 3\n[16]  \u235d get list of newly terminated child processes\n[17]       rpid\u21904002\u2336''\n[18]  \u235d and if not empty, make note of their pids\n[19]       :If 0\u2260\u2283\u2374rpid\n[20]           +rpids,\u2190rpid[;1]\n[21]       :EndIf\n[22]  \u235d if all fork()'d child processes accounted for\n[23]       :If fpids\u2261fpids\u2229rpids\n[24]           :Leave  \u235d quit\n[25]       :EndIf\n[26]   :EndFor\n     \u2207\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/remove-data-binding/","title":"Remove Data Binding","text":"Remove Data Binding R\u21902014\u2336Y <p>This function disassociates a data-bound variable from its data binding source.</p> <p><code>Y</code> is any array.</p> <p>If <code>Y</code> or an element of <code>Y</code> is a character vector that contains the name of a data-bound variable, that variable is dissociated from its data binding source.</p> <p>The result <code>R</code> is always 1.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/remove-data-binding/#example","title":"Example","text":"<pre><code>\n      2014\u2336'txtSource'\n1    \n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/sample-probability-distribution/","title":"Sample Probability Distribution","text":"Sample Probability Distribution R\u2190X(16808\u2336)Y <p>This function generates an array of random numbers from a named probability distribution.  Note that this is not currently implemented for AIX and macOS.</p> <p><code>Y</code> is a 2-item vector containing the name of the probability distribution from those listed in the table below, and the shape of the result.</p> <p><code>X</code> is a scalar or 1 or 2 element numeric vector that specifies parameters.</p> <p>For example to get an array with shape (3 5 7) of uniform random numbers for the interval from \u00af17.3 to 12.7, you\u2019d enter</p> <pre><code>      \u00af17.3 12.7 (16808 \u2336) 'Uniform' (3 5 7)\n</code></pre> <p>If you wanted a vector of 100,000 uniform random numbers for that interval, you\u2019d enter</p> <pre><code>      \u00af17.3 12.7 (16808 \u2336) 'Uniform' 100000\n</code></pre> <p>The domain rules for the distributions currently  implemented are as follows:</p> Distribution X[1] X[2] Domain Rules <code>'Uniform'</code> a b a &lt; b ; A numeric interval. Example: 1.0 7.6 <code>'Beta'</code> a b a &gt; 0  AND b &gt; 0 <code>'Bernoulli'</code> probability probability \u2265 0 AND probability \u2264 1 <code>'Binomial'</code> trials probability trials is an integer \u2265 0;  probability \u2265 0 AND probability \u2264 1 <code>'Cauchy'</code> location scale location unrestricted; scale &gt; 0 <code>'Chi Squared'</code> degree of freedom degree of freedom \u2265 0 <code>'Exponential'</code> rate rate  \u2265 0 <code>'F'</code> a b a \u2265  eps AND b \u2265 eps; where eps is smallest non-zero positive float number <code>'Gamma'</code> a b a \u2265 0 AND b \u2265eps; where eps is smallest non-zero positive float number <code>'Inverse Gamma'</code> a b a \u2265 0 AND b \u2265 0 <code>'Laplace'</code> location scale location unrestricted; scale \u2265 0 <code>'Logistic'</code> location scale location unrestricted; scale \u2265 0 <code>'Log Normal'</code> location scale location unrestricted; scale \u2265 0 <code>'Normal'</code> location scale location unrestricted; scale \u2265 0 <code>'Poisson'</code> rate rate \u2265 0 <code>'Student T'</code> degree of freedom degree of freedom \u2265eps where eps is smallest non-zero positive float number <code>'Weibull'</code> a b a \u2265  eps AND b \u2265 eps ; eps is smallest non-zero positive float number <p>Each of those distributions has a corresponding Wikipedia entry with a description of its theoretical foundation and usually graphs of the probability density functions and cumulative distribution functions for interesting sets of parameter values.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/sample-probability-distribution/#example","title":"Example","text":"<p>The probability density function for the Beta distribution (see https://en.wikipedia.org/wiki/Beta_distribution) with the parameter vector (2 5) has an interesting shape.</p> <p><code>BucketCount</code> counts random numbers that fall into a sequence of evenly distributed bucket intervals:</p> <pre><code>\n      BucketCounts\u2190{\n[1]        ir\u2190\u230a\u2375\u00f7\u00f7\u237a\n[2]        kir\u2190{\u237a(\u2262\u2375)}\u2338ir\n[3]        kir[;\u2395IO]\u00f7\u2190\u237a\n[4]        kir[\u234bkir[;\u2395IO];]\n[5]    }\n\n</code></pre> <p>So then we can create 100,000 samples and calculate values for a density graph with 1,000 evenly spaced buckets by:</p> <pre><code>\n      rv\u21902 5 (16808\u2336)'Beta' 100000\n      bc\u21901000 BucketCounts rv\n</code></pre> <p>Using the Chart Wizard  we can plot <code>(\u22822)\u2337\u2349bc</code> against <code>(\u22821)\u2337\u2349bc</code> to get the graph:</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/send-text-to-ride-embedded-browser/","title":"Send Text to RIDE-embedded Browser","text":"Send Text to RIDE-embedded Browser R\u2190{X}(3500\u2336)Y <p>Optionally, <code>X</code> is a simple character vector or scalar, the contents of which are used as the caption for the tab in the RIDE client that contains the embedded browser. If omitted, then the caption defaults to \"<code>3500\u2336</code>\".</p> <p><code>Y</code> is a simple character vector the contents of which are displayed in the embedded browser tab.</p> <p>To include SVG content, the HTML text in <code>Y</code> must include the following:</p> <p>.</p> <p>The result <code>R</code> identifies whether the write to the RIDE was successful. Possible values are:</p> <ul> <li><code>0</code> : the write to the RIDE client was successful</li> <li><code>\u00af1</code> : the write to the RIDE client was not successful</li> </ul>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/serialise-array/","title":"Serialise/Deserialise Array","text":"Serialise/Deserialise Array R\u2190X(220\u2336)Y <p>It is expected that in many cases this I-Beam functionality will be used in conjunction with <code>219\u2336</code> - Compress/Decompress vector of short integers. It would also be possible to encrypt the serialised form and write to a file (either component or native), and reverse the process at a later date.</p> <p><code>X</code> is a scalar which can take the value 0 or 1.</p> <p>When <code>X</code> is 1, <code>Y</code> can be any array. The result <code>R</code> is the serialised form of the array, presented as a sint_vector.</p> <p>When <code>X</code> is 0, <code>Y</code> must be a sint_vector. The result <code>R</code> is an array whose serialised form is represented by <code>Y</code>.</p> <p>Typically it is not possible to construct a vector which can be deserialised; it is expected that the only source of a vector which can be deserialised is the result of using <code>1(220\u2336)</code> to serialise an array.</p> <p>The result of <code>1(220\u2336)</code> will differ between interpreters of differing widths and editions, but the resulting vector can be deserialised in other interpreters, with the exception that, like arrays in component files, it may not be possible to deserialise an array which was serialised in a later interpreter</p> <p>The following identity holds true:</p> <pre><code>      A\u2261 0(220\u2336) 0(219\u2336) 1(219\u2336) 1(220\u2336) A\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/serialise-array/#example","title":"Example","text":"<pre><code>\n      a\u2190'ab'\n      b\u21901(220\u2336)a\n      b\n\u00af33 \u00af108 5 0 0 0 31 39 0 0 2 0 0 0 97 98 0 0\n      c\u21900(220\u2336)b\n      c\u2261a\n1    \n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/set-dyalog-pixel-type/","title":"Set Dyalog Pixel Type","text":"Set Dyalog Pixel Type R\u21902035\u2336Y <p>Determines how Coord <code>'Pixel'</code> is interpreted. This is determined initially by the value of the DYALOG_PIXEL_TYPE parameter and, when altered by this function,  applies to all subsequent GUI operations.</p> <p><code>Y</code> is a character vector that is either <code>'ScaledPixel'</code> or <code>'RealPixel'</code>. Any other value will cause a <code>DOMAIN ERROR</code>.</p> <p>The result <code>R</code> is the previous value.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/set-dyalog-pixel-type/#example","title":"Example","text":"<pre><code>      2035\u2336'ScaledPixel'\nRealPixel\n      2035\u2336'RealPixel'\nScaledPixel\n\n      2035\u2336'realpixel'\nDOMAIN ERROR\n      2035\u2336'realpixel'\n     \u2227\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/set-workspace-save-options/","title":"Set Workspace Save Options","text":"Set Workspace Save Options R\u21902400\u2336Y <p>This function sets a flag in the workspace that determines what happens when it is saved. The flag itself is part of the workspace and is saved with it.</p> <p>If the flag is set, all Trace, Stop and Monitor settings will be cleared whenever the workspace is saved, whether by <code>)SAVE</code>, <code>\u2395SAVE</code> or by File/Save from the Session menubar.</p> <p><code>Y</code> must be 1 (set the flag) or 0 (clear the flag).</p> <p>The result <code>R</code> is the previous value of the flag.</p> <p>This function may be extended in the future and a left-argument may be added.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/set-workspace-save-options/#example","title":"Example","text":"<pre><code>\n      (2400\u2336)1\n0\n      )SAVE\n0 Trace bits cleared.\n3 Stop bits cleared.\n0 Monitor bits cleared.\ntemp saved Sat Apr 05 17:01:30 2014\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/signal-counts/","title":"Signal Counts","text":"Signal Counts R\u21904007\u2336Y <p><code>Y</code> must be a simple empty vector but is ignored.</p> <p>The result <code>R</code> is an integer vector of signal counts. The length of the vector is system dependent. On AIX 32-bit it is 63 on AIX 64-bit it is 256 but code should not rely on the length.</p> <p>Each element is a count of the number of signals that have been generated since the last call to this function, or since the start of the process. <code>R[1]</code> is the number of occurrences of signal 1 (SIGHUP), <code>R[2]</code> the number of occurrences of signal 2, and so forth.</p> <p>Each time the function is called it zeros the counts; it is therefore inadvisable to call it in more than one APL thread.</p> <p>Currently, only SIGHUP, SIGINT, SIGQUIT, SIGTERM and SIGWINCH are counted and all other corresponding elements of <code>R</code> are 0.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/singular-value-decomposition/","title":"Singular Value Decomposition","text":"Singular Value Decomposition R\u2190(8415\u2336)Y <p><code>Y</code> is a simple numeric matrix. <code>\u2395FR</code> must be 645.</p> <p>The result <code>R</code> is a 4 element vector whose elements are as follows.</p> <code>[1]</code> <code>U</code> a unitary matrix <code>[2]</code> <code>S</code> a diagonal matrix <code>[3]</code> <code>V</code> a unitary matrix <code>[4]</code> <code>f</code> a Boolean flag indicating whether the algorithm converged (1)or not (0) <p>This function computes a factorisation of the matrix <code>Y</code> such that:</p> <pre><code>      Y \u2261 U +.\u00d7 S +.\u00d7 \u2349+V\n</code></pre> <p>This can be useful for analysing matrices for which <code>\u2339</code> cannot compute an inverse, because they are singular or nearly singular.</p> <p>For further information, see https://en.wikipedia.org/wiki/Singular_value_decomposition.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/singular-value-decomposition/#note","title":"Note:","text":"<p>This function signals <code>DOMAIN ERROR</code> if <code>\u2395FR</code> is 1287. See Floating-Point Representation  on page 1.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/specify-workspace-available/","title":"Specify Workspace Available","text":"Specify Workspace Available R\u21902002\u2336Y <p>This function is identical to the system function <code>\u2395WA</code> except that it provides the means to specify the amount of memory The term memory here means virtual memory which includes memory mapped to disk.  that is committed for the workspace rather than have it assigned by the internal algorithm. Committed memory is memory that is allocated to a specific process and thereby reduces the amount of memory available for other applications.</p> <p>Like <code>\u2395WA</code>,  <code>2002\u2336</code> compacts the workspace so that it occupies the minimum number of bytes possible, adds an extra amount, and then de-commits all the remaining memory that it is currently using, allowing it to be allocated by the operating system for use by other applications.</p> <p>The argument <code>Y</code> is an integer which specifies the size, in bytes, of this extra amount.</p> <p>The purpose of the extra amount is to reduce the likelihood that APL will immediately have to ask the operating system to re-commit memory that it has just de-committed, something that would have a deleterious effect on performance. At the same time, if the extra amount were to be excessively large, APL could  starve other applications of memory which itself could reduce the effective performance of the system. Whereas <code>\u2395WA</code> calculates the size of the extra amount using a simple internal algorithm,  <code>2002\u2336</code> uses a value specified by the programmer.</p> <p><code>R</code> is an integer which reports the size in bytes of the memory committed  for the workspace, and is the sum of the minimum amount required  by the workspace itself and the argument <code>Y</code>.</p> <p>If the size of the committed workspace would be smaller than the minimum value (specified by <code>2000\u2336</code>) or larger than the maximum value (which defaults to MAXWS), a <code>DOMAIN ERROR</code> is signalled.</p> <p>See also Memory Manager Statistics: on page 1.</p> <p>Note that this function does not change the size of the extra amount that will be applied subsequently by <code>\u2395WA</code> or by an automatic compaction.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/supplementary-i-beam-functions/","title":"Other I-Beams","text":"<p>Dyalog APL includes a number of  I-Beams which exist in order to support experimental features or features which are documented elsewhere.</p> <p>The following table lists those I-Beams, together with the document which contains a description of them:</p> <p>Experimental and other I-Beams</p> A Purpose Where documented <code>8659</code> Shared Code Files. These are supported only in 64-bit Unicode interpreters, and were previously known as External Workspaces Shared Code Files User Guide <code>8666</code> <code>8667</code>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/syntax-colouring/","title":"Syntax Colouring","text":"Syntax Colouring R\u2190200\u2336Y <p>This function obtains syntax colouring information for a function.</p> <p><code>Y</code> is a vector of character vectors containing the <code>\u2395NR</code> representation of a function or operator.</p> <p><code>R</code> is a vector of integer vectors with the same shape and structure of <code>Y</code> in which each number identifies the syntax colour element associated with the corresponding character in <code>Y</code>.</p> <pre><code>      \u2207foo\u2207\n     \u2207 foo;local\n[1]    global\n[2]    local\u2190\u2374\u2374'hello'\n     \u2207\n      \u2395NR 'foo'\n  foo;local   global   local\u2190\u2374\u2374'hello' \n\n     {(\u2191\u2375),\u2191200\u2336\u2375}\u2395NR 'foo'\n foo;local       3 21 21 21 19 34 34 34 34 34 0 0 0 0 0 0\n global          3  7  7  7  7  7  7  0  0  0 0 0 0 0 0 0\n local\u2190\u2374\u2374'hello' 3 34 34 34 34 34 19 23 23  4 4 4 4 4 4 4\n\n</code></pre> <p>In this example:</p> 21 is the syntax identifier for \"character constant\" 19 is the syntax identifier for \"primitive\" 3 is the syntax identifier for \"white space\" 34 is the syntax identifier for \"local name\" 7 is the syntax identifier for \"global name\" 23 is the syntax identifier for \"idiom\" <p>The list of syntax colour elements supported by the current interpreter is given by <code>201\u2336</code>. It is important to note that the values may change within a release, and are very likely to change across releases .. you should always call <code>201\u2336</code> rather than relying the results from a different interpreter. See Syntax Colour Tokens on page 1.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/trap-control/","title":"Trap Control","text":"Trap Control R\u2190600\u2336Y <p>This function is used to temporarily disable the error trapping mechanism used by <code>:Trap</code> and <code>\u2395TRAP</code>. This can be useful in debugging applications.</p> <p><code>Y</code> is an integer 0, 1 or 2 as shown in the following table.</p> <p><code>R</code> is the previous value (0, 1, or 2) of the trap state.</p> <code>Y</code> Effect <code>0</code> Enable all traps. <code>1</code> Disable all traps. <code>2</code> Disable traps in suspended functions from triggering when an error is generated in the Session. <p>Note that the Disable traps in session option of the SessionOptions menu performs the same tasks as <code>(600\u23360)</code> and <code>(600\u23362)</code>.</p> <p>For  error-guards in dfns <code>600\u23360</code> and <code>600\u23362</code> are equivalent; in neither case is an error generated in the session caught by an error guard in a suspended dfn.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/unsqueezed-type/","title":"Unsqueezed Type","text":"Unsqueezed Type R\u2190181\u2336Y <p><code>Y</code> is any array.</p> <p>The result <code>R</code> is an integer scalar containing an integer value which indicates the type of the array.</p> <p><code>181\u2336</code> is functionally identical to monadic <code>\u2395DR</code>, except that no attempt is made to squeeze the data into smaller data types. <code>\u2395DR</code> always attempts to squeeze the data; <code>181\u2336</code> does not, but if a workspace compaction occurs during execution of <code>181\u2336</code>, the data may still be squeezed before the type is identified.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/unsqueezed-type/#example","title":"Example","text":"<pre><code>\n      \u2395dr 1\u21911 1000\n11\n      (181\u2336) 1\u21911 1000\n163\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/update-datatable/","title":"Update DataTable","text":"Update DataTable R\u2190{X}2010\u2336Y <p>This function performs a block update of an instance of the ADO.NET object System.Data.DataTable. This object may only be updated using an explicit row-wise loop, which is slow at the APL level. <code>2010\u2336</code> implements an internal row-wise loop which is much faster on large arrays. Furthermore, the function handles NULL values and the conversion of internal APL data to the appropriate .NET datatype in a more efficient manner than can be otherwise achieved. These 3 factors together mean that the function provides a significant improvement in performance compared to calling the row-wise programming interface directly at the APL level.</p> <p><code>Y</code> is a 2, 3 or 4-item array containing:</p> <ol> <li>A reference to an instance of System.Data.DataTable.</li> <li>A matrix with the same number of columns as the table specified by <code>Y[1]</code>.</li> <li>An optional vector which specifies for each column in the DataTable the values in <code>Y[2]</code>which should be converted to a System.DBNull.</li> <li>An optional vector which specifies the indices (in zero origin) of the rows of the DataTable which are to be updated. If omitted, the matrix specified by <code>Y[2]</code> will be appended to the DataTable.</li> </ol> <p>The optional argument <code>X</code> is  Boolean vector, where a 1 indicates that the corresponding column of  <code>Y[2]</code> is a string from which the new values  should be converted according to that column's data type.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/update-datatable/#example","title":"Example","text":"<p>Shown firstly for comparison is the type of code that is required to update a DataTable by looping:</p> <pre><code>      \u2395USING\u2190'System' 'System.Data,system.data.dll'\n      dt\u2190\u2395NEW DataTable\n      ac\u2190{dt.Columns.Add \u237a \u2375}\n      'S1' 'S2' 'I1' 'D1' ac\u00a8String String Int32 DateTime\n S1  S2  I1  D1\n\n      NextYear\u2190DateTime.Now+{\u2395NEW TimeSpan (4\u2191\u2375)}\u00a8\u2373n\u2190365\n      data\u2190(\u2355\u00a8\u2373n),(n\u2374'odd' 'even'),(10|\u2373n),\u236aNextYear\n      \u00af2 4\u2191data\n 364  even  4  18-01-2011 14:03:29 \n 365  odd   5  19-01-2011 14:03:29 \n\n      ar\u2190{(row\u2190dt.NewRow).ItemArray\u2190\u2375 \u22c4 dt.Rows.Add row}\n      t\u21903\u2283\u2395ai \u22c4 ar\u00a8\u2193data \u22c4 (3\u2283\u2395ai)-t\n449\n</code></pre> <p>This result shows that this code can only insert roughly 800 rows per second (<code>3\u2283\u2395AI</code> returns elapsed time in milliseconds), because of the need to loop on each row and perform a noticeable amount of work each time around the loop.</p> <p><code>2010\u2336</code> does all the looping in compiled code:</p> <pre><code>      dt.Rows.Clear \u235d Delete the rows inserted above\n      SetDT\u21902010\u2336\n      t\u21903\u2283\u2395AI \u22c4 SetDT dt data \u22c4 (3\u2283\u2395AI)-t\n4\n</code></pre> <p>So in this case, using <code>2010\u2336</code> achieves over 90,000 rows per second.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/update-datatable/#datetime-columns","title":"DateTime columns","text":"<p>Creating large arrays of DateTime objects in the workspace takes additional resources, and unless the data is already stored that way, it is not necessary to convert it to .NET objects. Data in <code>\u2395TS</code> format (7-element integer vector) or in a suitable character format may be used directly. The former is a specific Dyalog optimisation; the latter a feature of .NET Version 4.0. The following examples use numeric and character data for the dates:</p> <pre><code>   months\u219012\u237431 \u22c4 months[2 4 6 9 11]\u219029 30 30 30 30\n   n\u2190\u2374NextYear\u21907\u2191\u00a8\u2283,/(\u237312){(\u22822016,\u237a),\u00a8\u2373\u2375}\u00a8months\n   data\u2190(\u2355\u00a8\u2373n),(n\u2374'odd' 'even'),(10|\u2373n),\u236aNextYear\n   SetDT dt data\n\n</code></pre> <pre><code>\n   n\u2190\u2374NextYear\u2190\u2283,/(\u237312){(\u2282'2016/',(\u2355\u237a),'/'),\u2218\u2355\u00a8\u2373\u2375}\u00a8months\n   data\u2190(\u2355\u00a8\u2373n),(n\u2374'odd' 'even'),(10|\u2373n),\u236aNextYear\n   SetDT dt data\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/update-datatable/#using-strings","title":"Using Strings","text":"<p>In circumstances where .NET fails to accept character data automatically, it is possible to force conversion from character format to the corresponding .NET type.</p> <p>If specified, the optional left argument <code>X</code> instructs the system to pass the corresponding columns of data to the Parse() method of the data type for those columns prior to performing the update.</p> <p>In the following example, the left argument is not strictly necessary using .NET Version 4.0, but  forces parsing for the data in the 4th column:</p> <pre><code>   months\u219012\u237431 \u22c4 months[2 4 6 9 11]\u219029 30 30 30 30\n   n\u2190\u2374NextYear\u2190\u2283,/(\u237312){(\u2282'2016/',(\u2355\u237a),'/'),\u2218\u2355\u00a8\u2373\u2375}\u00a8months\n   data\u2190(\u2355\u00a8\u2373n),(n\u2374'odd' 'even'),(10|\u2373n),\u236aNextYear\n   0 0 0 1 SetDT dt data\n\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/update-datatable/#handling-nulls","title":"Handling Nulls","text":"<p>If applicable, <code>Y[3]</code>  is a vector with as many elements as the DataTable has columns, indicating the value that should be converted to <code>System.DBNull</code> as data is written. For example, using the same DataTable as above:</p> <pre><code>      t\n &lt;null&gt;  odd    1  21-01-2010 14:50:19 \n two     even   2  22-01-2010 14:50:19 \n three   odd   99  23-01-2010 14:50:19\n\n      dt.Rows.Clear \u235d Clear the contents of dt\n      SetDT dt t ('&lt;null&gt;' 'even' 99 '')\n</code></pre> <p>Above, we have declared that the string <code>'&lt;null&gt;'</code> should be considered to be a null value in the first column, <code>'even'</code> in the second column, and the integer <code>99</code> in the third.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/update-datatable/#updating-selected-rows","title":"Updating Selected Rows","text":"<p>Sometimes, you may have read a very large number of rows from a DataTable, but only want to update a single row, or a very small number of rows. Row indices can be provided as the fourth element of the argument to <code>2010\u2336</code>. If you are not using <code>Y[3]</code> explicitly, you can just use an empty vector as a placeholder. Continuing from the example above, we could replace the first row in our DataTable using:</p> <pre><code>      SetDT\u21902010\u2336\n      SetDT dt (1 4\u2374'one' 'odd' 1 DateTime.Now) \u236c 0\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/update-datatable/#note","title":"Note","text":"<ul> <li><code>Y[2]</code> must be provided as a matrix, even if you only want to update a single row, </li> <li><code>Y[4]</code> specifies row indices using zero origin (the first row has number 0).</li> <li><code>Y[2]</code> must be provided as a matrix, even if you only want to update a single row, </li> <li><code>Y[4]</code> specifies row indices using zero origin (the first row has number 0).</li> </ul>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/update-datatable/#warning","title":"Warning","text":"<p>If you are experimenting with writing to a DataTable, note that you should call <code>dt.Rows.Clear</code> each time to clear the current contents of the table. Otherwise you will end up with a very large number of rows after a while.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/update-function-timestamp/","title":"Update Function Timestamp","text":"Update Function Timestamp {R}\u2190X(1159\u2336)Y <p><code>Y</code> is an array of function names in the same format as the right argument of <code>\u2395AT</code>. For further information, see Attributes on page 1.</p> <p><code>X</code> is an array of function attributes in the same format as the output of <code>\u2395AT</code>.</p> <p>The shy result <code>R</code> is a vector of numeric items, one per each specified function containing the following values:</p> <code>0</code> No change was made; the name is not that of a function, or the function was locked <code>1</code> The time and user stamp were updated <p>Note that the last item of the function timestamp must be set to 0 otherwise <code>1159 \u2336</code> will generate a <code>DOMAIN ERROR</code>. Additionally, the timestamp must be greater than <code>1970 1 1 0 0 0 0</code>.</p>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/update-function-timestamp/#example","title":"Example","text":"<pre><code>\n      ]disp \u2395AT'Christmas'\n\u250c\u2192\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020 0 0\u25022013 3 1 11 14 58 0\u25020\u2502Richard\u2502\n\u2514~\u2500\u2500\u2500\u2192\u2534~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      x\u2190\u2395AT 'Christmas'\n      x[2 4]\u2190(2012 12 25 11 59 0 0)('Santa')\n      x (1159\u2336) 'Christmas'\n\n      ]disp \u2395AT'Christmas'\n\u250c\u2192\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020 0 0\u25022012 12 25 11 59 0 0\u25020\u2502Santa\u2502\n\u2514~\u2500\u2500\u2500\u2192\u2534~\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2192\u2518\n</code></pre>"},{"location":"language-reference-guide/the-i-beam-operator/a-z/use-separate-thread-for-net/","title":"Use Separate Thread For .NET","text":"Use Separate Thread For .NET R\u21902520\u2336Y <p>This function determines the way that .NET calls are executed in APL thread 0.</p> <p>The right argument <code>Y</code> is a Boolean value:</p> <ul> <li>1 : run .NET calls in a separate system thread</li> <li>0 : run .NET calls in the same system thread</li> </ul> <p>The result <code>R</code> is a Boolean value which indicates the previous behaviour.</p> <p>When an APL thread first makes a .NET call, it creates a unique system thread in which that and subsequent .NET calls are made. If a .NET call results in the creation of a message queue, that queue is associated with that same system thread. So each message queue is also unique. This strategy successfully maintains separation between multiple Windows message queues being executed in different APL threads.</p> <p>By default, the base APL thread (thread 0) runs .NET code in the same system thread as itself. This is a different system thread to that used to run .NET code from other APL threads, so the separation between message queues associated with APL thread 0 and those associated with other APL threads is maintained. However, in certain circumstances, messages generated by .NET objects interfere with APL's internal message processing (and vice-versa), for example when handling exceptions.</p> <p>For this reason, Dyalog recommends that APL code that creates instances of .NET objects that generate events (such as Windows Presentation Foundation objects) are run in a separate APL thread.</p> <p>Where this is not possible, <code>2520\u23361</code> may be used to force Dyalog to use a unique system thread for .NET that is associated with APL thread 0. If so,  it is recommended that <code>2520\u23361</code> is called at application start-up time.</p>"}]}